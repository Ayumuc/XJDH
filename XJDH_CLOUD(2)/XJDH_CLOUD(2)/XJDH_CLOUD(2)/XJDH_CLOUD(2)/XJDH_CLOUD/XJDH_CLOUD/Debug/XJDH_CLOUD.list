
XJDH_CLOUD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015410  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  080155a0  080155a0  000165a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016210  08016210  000181f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016210  08016210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016218  08016218  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016218  08016218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801621c  0801621c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08016220  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000181f8  2**0
                  CONTENTS
 10 .bss          00000df0  200001f8  200001f8  000181f8  2**3
                  ALLOC
 11 ._user_heap_stack 00014000  20000fe8  20000fe8  000181f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bceb  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000457a  00000000  00000000  00033f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00038490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001214  00000000  00000000  00039b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b86  00000000  00000000  0003ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f528  00000000  00000000  000608e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e5e  00000000  00000000  0007fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156c68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e10  00000000  00000000  00156cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  0015eabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015588 	.word	0x08015588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08015588 	.word	0x08015588

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <board_init>:
																		   	   	   	   	   	   	   	  board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y,board_config.gps.lon_deg,board_config.gps.lat_deg,board_config.Imu_data.Pitch,board_config.Net_4g.ReserveInt1);
	HAL_UART_Transmit(&huart3,mqtt_firstencode,strlen(mqtt_firstencode),0xff);
	return 1;
}

void board_init(void){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  strcpy(board_config.Net_4g.Imei,"0");
 8001008:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <board_init+0xb4>)
 800100a:	2230      	movs	r2, #48	@ 0x30
 800100c:	801a      	strh	r2, [r3, #0]
  board_config.Net_4g.Use_Status = 0;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <board_init+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 226f 	strb.w	r2, [r3, #623]	@ 0x26f
  board_config.Net_4g.Lock_Status = 0;
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <board_init+0xb8>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
  board_config.Net_4g.Enable = 0;
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <board_init+0xb8>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
  board_config.Battery.MasterVoltage = 0 ;
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <board_init+0xb8>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  board_config.Rockers.Rocker_X = 0;
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <board_init+0xb8>)
 8001032:	2200      	movs	r2, #0
 8001034:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
  board_config.Rockers.Rocker_Y=0;
 8001038:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <board_init+0xb8>)
 800103a:	2200      	movs	r2, #0
 800103c:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
  board_config.motor_status.Gear=0;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <board_init+0xb8>)
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
  board_config.motor_status.Direction=0;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <board_init+0xb8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  board_config.motor_status.L_motor_status = 0;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <board_init+0xb8>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
  board_config.motor_status.L_motor_curr=0;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <board_init+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	f8a3 22a6 	strh.w	r2, [r3, #678]	@ 0x2a6
  board_config.motor_status.R_motor_curr = 0;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <board_init+0xb8>)
 8001062:	2200      	movs	r2, #0
 8001064:	f8a3 22ae 	strh.w	r2, [r3, #686]	@ 0x2ae
  board_config.motor_status.L_motor_vol=0;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <board_init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  board_config.motor_status.L_motor_speed=0;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <board_init+0xb8>)
 8001072:	2200      	movs	r2, #0
 8001074:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4
  board_config.motor_status.L_motor_temp=0;
 8001078:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <board_init+0xb8>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  board_config.motor_status.R_motor_status=0;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <board_init+0xb8>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 22b2 	strb.w	r2, [r3, #690]	@ 0x2b2
  board_config.motor_status.R_motor_vol=0;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <board_init+0xb8>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 22b0 	strb.w	r2, [r3, #688]	@ 0x2b0
  board_config.motor_status.R_motor_speed=0;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <board_init+0xb8>)
 8001092:	2200      	movs	r2, #0
 8001094:	f8a3 22ac 	strh.w	r2, [r3, #684]	@ 0x2ac
  board_config.motor_status.R_motor_speed=0;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <board_init+0xb8>)
 800109a:	2200      	movs	r2, #0
 800109c:	f8a3 22ac 	strh.w	r2, [r3, #684]	@ 0x2ac
  strcpy(board_config.gps.lon,"0");
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <board_init+0xbc>)
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	801a      	strh	r2, [r3, #0]
  strcpy(board_config.gps.lat,"0");
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <board_init+0xb8>)
 80010a8:	2230      	movs	r2, #48	@ 0x30
 80010aa:	801a      	strh	r2, [r3, #0]
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000828 	.word	0x20000828
 80010bc:	200005d8 	.word	0x200005d8
 80010c0:	200005f6 	.word	0x200005f6

080010c4 <Data_Collect>:
    double gps_lon;
} PositionData;

int parse_position_data(const char *input, PositionData *data);

int Data_Collect(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	//通过串口采集陀螺仪数据
	//imu_collect();
	//通过adc采集电池数据
	//adc_collect();
	//通过rs485读取上位机数据
	gps_collect();
 80010c8:	f000 f87c 	bl	80011c4 <gps_collect>
	//读取惯导数据
	//Inertial_Navigation_Collect();
	//读取镭神数据
	Laser_Navigation_Collect();
 80010cc:	f000 fc70 	bl	80019b0 <Laser_Navigation_Collect>
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Key_Switch>:

int KEY = 0;
int KEY_FLAG = 0;
int KEY_COUNT = 2;
int Key_Switch(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  KEY = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
 80010dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e0:	4831      	ldr	r0, [pc, #196]	@ (80011a8 <Key_Switch+0xd0>)
 80010e2:	f009 fdab 	bl	800ac3c <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <Key_Switch+0xd4>)
 80010ec:	601a      	str	r2, [r3, #0]
  if(KEY == 0){
 80010ee:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <Key_Switch+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <Key_Switch+0x24>
	KEY_FLAG = 1;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <Key_Switch+0xd8>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
  }
  if(KEY_FLAG == 1 && KEY == 1){
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <Key_Switch+0xd8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10b      	bne.n	800111c <Key_Switch+0x44>
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <Key_Switch+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <Key_Switch+0x44>
	KEY_FLAG = 2;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <Key_Switch+0xd8>)
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
	KEY_COUNT++;
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <Key_Switch+0xdc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a26      	ldr	r2, [pc, #152]	@ (80011b4 <Key_Switch+0xdc>)
 800111a:	6013      	str	r3, [r2, #0]
  }
  //printf("%d\r\n",KEY_COUNT);
  if(KEY_COUNT%5 == 0){
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <Key_Switch+0xdc>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <Key_Switch+0xe0>)
 8001122:	fb83 2301 	smull	r2, r3, r3, r1
 8001126:	105a      	asrs	r2, r3, #1
 8001128:	17cb      	asrs	r3, r1, #31
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	1aca      	subs	r2, r1, r3
 8001134:	2a00      	cmp	r2, #0
 8001136:	d102      	bne.n	800113e <Key_Switch+0x66>
 	  KEY_COUNT = 2;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <Key_Switch+0xdc>)
 800113a:	2202      	movs	r2, #2
 800113c:	601a      	str	r2, [r3, #0]
  }
  if(KEY_COUNT%4 == 0){
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <Key_Switch+0xdc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <Key_Switch+0x7a>
  	  //printf("Auto\r\n");
   	  auto_flag = 1;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <Key_Switch+0xe4>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e025      	b.n	800119e <Key_Switch+0xc6>
    }
  else if(KEY_COUNT%2 == 0){
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <Key_Switch+0xdc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <Key_Switch+0x9a>
	  Status_get_and_Powerset(Get_KeyState());
 800115e:	f006 fe7f 	bl	8007e60 <Get_KeyState>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f007 f88f 	bl	8008288 <Status_get_and_Powerset>
	  auto_flag = 0;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <Key_Switch+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e015      	b.n	800119e <Key_Switch+0xc6>
	  //printf("Rocker\r\n");
  }
  else if(KEY_COUNT%3 == 0){
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <Key_Switch+0xdc>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <Key_Switch+0xe8>)
 8001178:	fb83 3201 	smull	r3, r2, r3, r1
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	2a00      	cmp	r2, #0
 800118a:	d108      	bne.n	800119e <Key_Switch+0xc6>
	  Status_get_and_Powerset_Blue(Get_KeyState_Blue());
 800118c:	f006 ff72 	bl	8008074 <Get_KeyState_Blue>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 faec 	bl	8008770 <Status_get_and_Powerset_Blue>
	  auto_flag = 0;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <Key_Switch+0xe4>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
	  //printf("Blue\r\n");
  }
  return KEY_COUNT;
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <Key_Switch+0xdc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020400 	.word	0x40020400
 80011ac:	20000214 	.word	0x20000214
 80011b0:	20000218 	.word	0x20000218
 80011b4:	20000000 	.word	0x20000000
 80011b8:	66666667 	.word	0x66666667
 80011bc:	200005d4 	.word	0x200005d4
 80011c0:	55555556 	.word	0x55555556

080011c4 <gps_collect>:
#endif
    }
	return 1;
}

uint16_t gps_collect(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	if (rxu4_data_ready == 1) {
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <gps_collect+0x34>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d110      	bne.n	80011f2 <gps_collect+0x2e>
	  // 处理接收到的数据
	  gps_decode();
 80011d0:	f000 f818 	bl	8001204 <gps_decode>
	  // 清空接收缓冲区
	  memset(rxu4_buffer, 0, sizeof(rxu4_buffer));
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	2100      	movs	r1, #0
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <gps_collect+0x38>)
 80011dc:	f00e fb82 	bl	800f8e4 <memset>
	  rxu4_data_ready = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <gps_collect+0x34>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	  // 重新启动DMA接收
	  HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 80011e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ea:	4904      	ldr	r1, [pc, #16]	@ (80011fc <gps_collect+0x38>)
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <gps_collect+0x3c>)
 80011ee:	f00b f9d3 	bl	800c598 <HAL_UART_Receive_DMA>
    }
	return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200009c4 	.word	0x200009c4
 80011fc:	200008c4 	.word	0x200008c4
 8001200:	20000a90 	.word	0x20000a90

08001204 <gps_decode>:

// 航点数组
#define NUM_WAYPOINTS 6
Waypoint waypointss[NUM_WAYPOINTS];
Head_in head_in;
void gps_decode(void){
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001208:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 800120c:	af16      	add	r7, sp, #88	@ 0x58
	printf("%s\r\n",rxu4_buffer);
 800120e:	4990      	ldr	r1, [pc, #576]	@ (8001450 <gps_decode+0x24c>)
 8001210:	4890      	ldr	r0, [pc, #576]	@ (8001454 <gps_decode+0x250>)
 8001212:	f00e f9d3 	bl	800f5bc <iprintf>
	if(strstr(rxu4_buffer,"Kp")!=NULL && strstr(rxu4_buffer,"Ki")!=NULL && strstr(rxu4_buffer,"Kd")!=NULL && strstr(rxu4_buffer,"Lon1")!=NULL){
 8001216:	4990      	ldr	r1, [pc, #576]	@ (8001458 <gps_decode+0x254>)
 8001218:	488d      	ldr	r0, [pc, #564]	@ (8001450 <gps_decode+0x24c>)
 800121a:	f00e fbd9 	bl	800f9d0 <strstr>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8202 	beq.w	800162a <gps_decode+0x426>
 8001226:	498d      	ldr	r1, [pc, #564]	@ (800145c <gps_decode+0x258>)
 8001228:	4889      	ldr	r0, [pc, #548]	@ (8001450 <gps_decode+0x24c>)
 800122a:	f00e fbd1 	bl	800f9d0 <strstr>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 81fa 	beq.w	800162a <gps_decode+0x426>
 8001236:	498a      	ldr	r1, [pc, #552]	@ (8001460 <gps_decode+0x25c>)
 8001238:	4885      	ldr	r0, [pc, #532]	@ (8001450 <gps_decode+0x24c>)
 800123a:	f00e fbc9 	bl	800f9d0 <strstr>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 81f2 	beq.w	800162a <gps_decode+0x426>
 8001246:	4987      	ldr	r1, [pc, #540]	@ (8001464 <gps_decode+0x260>)
 8001248:	4881      	ldr	r0, [pc, #516]	@ (8001450 <gps_decode+0x24c>)
 800124a:	f00e fbc1 	bl	800f9d0 <strstr>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 81ea 	beq.w	800162a <gps_decode+0x426>
		printf("\r\n");
 8001256:	4884      	ldr	r0, [pc, #528]	@ (8001468 <gps_decode+0x264>)
 8001258:	f00e fa18 	bl	800f68c <puts>
		char *token = strtok((char *)rxu4_buffer, ",");
 800125c:	4983      	ldr	r1, [pc, #524]	@ (800146c <gps_decode+0x268>)
 800125e:	487c      	ldr	r0, [pc, #496]	@ (8001450 <gps_decode+0x24c>)
 8001260:	f00e fb5a 	bl	800f918 <strtok>
 8001264:	4603      	mov	r3, r0
 8001266:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
		while (token != NULL) {
 800126a:	e0ac      	b.n	80013c6 <gps_decode+0x1c2>
			if (strstr(token, "Kp=")) {
 800126c:	4980      	ldr	r1, [pc, #512]	@ (8001470 <gps_decode+0x26c>)
 800126e:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001272:	f00e fbad 	bl	800f9d0 <strstr>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <gps_decode+0x86>
				sscanf(token, "Kp=%f", &heading_pid.Kp);
 800127c:	4a7d      	ldr	r2, [pc, #500]	@ (8001474 <gps_decode+0x270>)
 800127e:	497e      	ldr	r1, [pc, #504]	@ (8001478 <gps_decode+0x274>)
 8001280:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001284:	f00e fa2a 	bl	800f6dc <siscanf>
 8001288:	e096      	b.n	80013b8 <gps_decode+0x1b4>
			} else if (strstr(token, "Ki=")) {
 800128a:	497c      	ldr	r1, [pc, #496]	@ (800147c <gps_decode+0x278>)
 800128c:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001290:	f00e fb9e 	bl	800f9d0 <strstr>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <gps_decode+0xa4>
				sscanf(token, "Ki=%f", &heading_pid.Ki);
 800129a:	4a79      	ldr	r2, [pc, #484]	@ (8001480 <gps_decode+0x27c>)
 800129c:	4979      	ldr	r1, [pc, #484]	@ (8001484 <gps_decode+0x280>)
 800129e:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012a2:	f00e fa1b 	bl	800f6dc <siscanf>
 80012a6:	e087      	b.n	80013b8 <gps_decode+0x1b4>
			} else if (strstr(token, "Kd=")) {
 80012a8:	4977      	ldr	r1, [pc, #476]	@ (8001488 <gps_decode+0x284>)
 80012aa:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012ae:	f00e fb8f 	bl	800f9d0 <strstr>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <gps_decode+0xc2>
				sscanf(token, "Kd=%f", &heading_pid.Kd);
 80012b8:	4a74      	ldr	r2, [pc, #464]	@ (800148c <gps_decode+0x288>)
 80012ba:	4975      	ldr	r1, [pc, #468]	@ (8001490 <gps_decode+0x28c>)
 80012bc:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012c0:	f00e fa0c 	bl	800f6dc <siscanf>
 80012c4:	e078      	b.n	80013b8 <gps_decode+0x1b4>
			}else if (strstr(token, "Min=")) {
 80012c6:	4973      	ldr	r1, [pc, #460]	@ (8001494 <gps_decode+0x290>)
 80012c8:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012cc:	f00e fb80 	bl	800f9d0 <strstr>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <gps_decode+0xe0>
				sscanf(token, "Min=%f", &head_in.Min_in);
 80012d6:	4a70      	ldr	r2, [pc, #448]	@ (8001498 <gps_decode+0x294>)
 80012d8:	4970      	ldr	r1, [pc, #448]	@ (800149c <gps_decode+0x298>)
 80012da:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012de:	f00e f9fd 	bl	800f6dc <siscanf>
 80012e2:	e069      	b.n	80013b8 <gps_decode+0x1b4>
			}else if (strstr(token, "Max=")) {
 80012e4:	496e      	ldr	r1, [pc, #440]	@ (80014a0 <gps_decode+0x29c>)
 80012e6:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012ea:	f00e fb71 	bl	800f9d0 <strstr>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <gps_decode+0xfe>
				sscanf(token, "Max=%f", &head_in.Max_in);
 80012f4:	4a6b      	ldr	r2, [pc, #428]	@ (80014a4 <gps_decode+0x2a0>)
 80012f6:	496c      	ldr	r1, [pc, #432]	@ (80014a8 <gps_decode+0x2a4>)
 80012f8:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80012fc:	f00e f9ee 	bl	800f6dc <siscanf>
 8001300:	e05a      	b.n	80013b8 <gps_decode+0x1b4>
			}else if (strstr(token, "Num=")) {
 8001302:	496a      	ldr	r1, [pc, #424]	@ (80014ac <gps_decode+0x2a8>)
 8001304:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001308:	f00e fb62 	bl	800f9d0 <strstr>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <gps_decode+0x11c>
				sscanf(token, "Num=%d", &head_in.gps_num);
 8001312:	4a67      	ldr	r2, [pc, #412]	@ (80014b0 <gps_decode+0x2ac>)
 8001314:	4967      	ldr	r1, [pc, #412]	@ (80014b4 <gps_decode+0x2b0>)
 8001316:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 800131a:	f00e f9df 	bl	800f6dc <siscanf>
 800131e:	e04b      	b.n	80013b8 <gps_decode+0x1b4>
			}else if (strstr(token, "Lon")) {
 8001320:	4965      	ldr	r1, [pc, #404]	@ (80014b8 <gps_decode+0x2b4>)
 8001322:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001326:	f00e fb53 	bl	800f9d0 <strstr>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01d      	beq.n	800136c <gps_decode+0x168>
				int index;
				float value;
				if (sscanf(token, "Lon%d=%f", &index, &value) == 2 && index > 0 && index <= NUM_WAYPOINTS) {
 8001330:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001334:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001338:	4960      	ldr	r1, [pc, #384]	@ (80014bc <gps_decode+0x2b8>)
 800133a:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 800133e:	f00e f9cd 	bl	800f6dc <siscanf>
 8001342:	4603      	mov	r3, r0
 8001344:	2b02      	cmp	r3, #2
 8001346:	d137      	bne.n	80013b8 <gps_decode+0x1b4>
 8001348:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd33      	ble.n	80013b8 <gps_decode+0x1b4>
 8001350:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8001354:	2b06      	cmp	r3, #6
 8001356:	dc2f      	bgt.n	80013b8 <gps_decode+0x1b4>
					waypointss[index - 1].longitude = value;
 8001358:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800135c:	3b01      	subs	r3, #1
 800135e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8001362:	4957      	ldr	r1, [pc, #348]	@ (80014c0 <gps_decode+0x2bc>)
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e025      	b.n	80013b8 <gps_decode+0x1b4>
				}
			} else if (strstr(token, "Lat")) {
 800136c:	4955      	ldr	r1, [pc, #340]	@ (80014c4 <gps_decode+0x2c0>)
 800136e:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001372:	f00e fb2d 	bl	800f9d0 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01d      	beq.n	80013b8 <gps_decode+0x1b4>
				int index;
				float value;
				if (sscanf(token, "Lat%d=%f", &index, &value) == 2 && index > 0 && index <= NUM_WAYPOINTS) {
 800137c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001380:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8001384:	4950      	ldr	r1, [pc, #320]	@ (80014c8 <gps_decode+0x2c4>)
 8001386:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 800138a:	f00e f9a7 	bl	800f6dc <siscanf>
 800138e:	4603      	mov	r3, r0
 8001390:	2b02      	cmp	r3, #2
 8001392:	d111      	bne.n	80013b8 <gps_decode+0x1b4>
 8001394:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001398:	2b00      	cmp	r3, #0
 800139a:	dd0d      	ble.n	80013b8 <gps_decode+0x1b4>
 800139c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	dc09      	bgt.n	80013b8 <gps_decode+0x1b4>
					waypointss[index - 1].latitude = value;
 80013a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80013a8:	3b01      	subs	r3, #1
 80013aa:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80013ae:	4944      	ldr	r1, [pc, #272]	@ (80014c0 <gps_decode+0x2bc>)
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3304      	adds	r3, #4
 80013b6:	601a      	str	r2, [r3, #0]
				}
			}
			token = strtok(NULL, ",");
 80013b8:	492c      	ldr	r1, [pc, #176]	@ (800146c <gps_decode+0x268>)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00e faac 	bl	800f918 <strtok>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
		while (token != NULL) {
 80013c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f af4e 	bne.w	800126c <gps_decode+0x68>
		}
		Auto_Start_Flag = AUTO_START;
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <gps_decode+0x2c8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
		//PID_Init(&heading_pid, heading_pid.Kp, heading_pid.Ki, heading_pid.Kd, 0.0f, head_in.Min_in, head_in.Max_in);
		board_config.gps.gps_num = head_in.gps_num;
 80013d6:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <gps_decode+0x294>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <gps_decode+0x2cc>)
 80013dc:	f8c2 3210 	str.w	r3, [r2, #528]	@ 0x210
		printf("P:%f I:%f D:%f Min:%f Max:%f Num:%d\r\n",heading_pid.Kp, heading_pid.Ki, heading_pid.Kd,head_in.Min_in, head_in.Max_in,board_config.gps.gps_num);
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <gps_decode+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8bf 	bl	8000568 <__aeabi_f2d>
 80013ea:	e9c7 0100 	strd	r0, r1, [r7]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <gps_decode+0x270>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8b8 	bl	8000568 <__aeabi_f2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <gps_decode+0x270>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8b1 	bl	8000568 <__aeabi_f2d>
 8001406:	4680      	mov	r8, r0
 8001408:	4689      	mov	r9, r1
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <gps_decode+0x294>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8aa 	bl	8000568 <__aeabi_f2d>
 8001414:	4682      	mov	sl, r0
 8001416:	468b      	mov	fp, r1
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <gps_decode+0x294>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f8a3 	bl	8000568 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	492a      	ldr	r1, [pc, #168]	@ (80014d0 <gps_decode+0x2cc>)
 8001428:	f8d1 1210 	ldr.w	r1, [r1, #528]	@ 0x210
 800142c:	9108      	str	r1, [sp, #32]
 800142e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001432:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001436:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800143a:	e9cd 4500 	strd	r4, r5, [sp]
 800143e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001442:	4824      	ldr	r0, [pc, #144]	@ (80014d4 <gps_decode+0x2d0>)
 8001444:	f00e f8ba 	bl	800f5bc <iprintf>
		for(int i = 0 ; i < 6 ; i++){
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800144e:	e086      	b.n	800155e <gps_decode+0x35a>
 8001450:	200008c4 	.word	0x200008c4
 8001454:	080155a0 	.word	0x080155a0
 8001458:	080155a8 	.word	0x080155a8
 800145c:	080155ac 	.word	0x080155ac
 8001460:	080155b0 	.word	0x080155b0
 8001464:	080155b4 	.word	0x080155b4
 8001468:	080155bc 	.word	0x080155bc
 800146c:	080155c0 	.word	0x080155c0
 8001470:	080155c4 	.word	0x080155c4
 8001474:	200008a0 	.word	0x200008a0
 8001478:	080155c8 	.word	0x080155c8
 800147c:	080155d0 	.word	0x080155d0
 8001480:	200008a4 	.word	0x200008a4
 8001484:	080155d4 	.word	0x080155d4
 8001488:	080155dc 	.word	0x080155dc
 800148c:	200008a8 	.word	0x200008a8
 8001490:	080155e0 	.word	0x080155e0
 8001494:	080155e8 	.word	0x080155e8
 8001498:	2000024c 	.word	0x2000024c
 800149c:	080155f0 	.word	0x080155f0
 80014a0:	080155f8 	.word	0x080155f8
 80014a4:	20000250 	.word	0x20000250
 80014a8:	08015600 	.word	0x08015600
 80014ac:	08015608 	.word	0x08015608
 80014b0:	20000254 	.word	0x20000254
 80014b4:	08015610 	.word	0x08015610
 80014b8:	08015618 	.word	0x08015618
 80014bc:	0801561c 	.word	0x0801561c
 80014c0:	2000021c 	.word	0x2000021c
 80014c4:	08015628 	.word	0x08015628
 80014c8:	0801562c 	.word	0x0801562c
 80014cc:	200009c5 	.word	0x200009c5
 80014d0:	200005d8 	.word	0x200005d8
 80014d4:	08015638 	.word	0x08015638
			board_config.gps.Target_gpslat[i] = waypointss[i].latitude;
 80014d8:	4a9e      	ldr	r2, [pc, #632]	@ (8001754 <gps_decode+0x550>)
 80014da:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f83e 	bl	8000568 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4899      	ldr	r0, [pc, #612]	@ (8001758 <gps_decode+0x554>)
 80014f2:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 80014f6:	310c      	adds	r1, #12
 80014f8:	00c9      	lsls	r1, r1, #3
 80014fa:	4401      	add	r1, r0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
			board_config.gps.Target_gpslon[i] = waypointss[i].longitude;
 8001500:	4a94      	ldr	r2, [pc, #592]	@ (8001754 <gps_decode+0x550>)
 8001502:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f82b 	bl	8000568 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4890      	ldr	r0, [pc, #576]	@ (8001758 <gps_decode+0x554>)
 8001518:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 800151c:	3112      	adds	r1, #18
 800151e:	00c9      	lsls	r1, r1, #3
 8001520:	4401      	add	r1, r0
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
//			sprintf(board_config.gps.Target_gpslat[i],"%f",waypointss[i].latitude);
//			sprintf(board_config.gps.Target_gpslon[i],"%f",waypointss[i].longitude);
			printf("lat:%f   lon:%f\r\n",board_config.gps.Target_gpslat[i],board_config.gps.Target_gpslon[i]);
 8001526:	4a8c      	ldr	r2, [pc, #560]	@ (8001758 <gps_decode+0x554>)
 8001528:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800152c:	330c      	adds	r3, #12
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001536:	4a88      	ldr	r2, [pc, #544]	@ (8001758 <gps_decode+0x554>)
 8001538:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800153c:	3312      	adds	r3, #18
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	e9cd 2300 	strd	r2, r3, [sp]
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4883      	ldr	r0, [pc, #524]	@ (800175c <gps_decode+0x558>)
 8001550:	f00e f834 	bl	800f5bc <iprintf>
		for(int i = 0 ; i < 6 ; i++){
 8001554:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800155e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001562:	2b05      	cmp	r3, #5
 8001564:	ddb8      	ble.n	80014d8 <gps_decode+0x2d4>
		}
		printf("\r\n");
 8001566:	487e      	ldr	r0, [pc, #504]	@ (8001760 <gps_decode+0x55c>)
 8001568:	f00e f890 	bl	800f68c <puts>
		uint8_t Laser_Buf[512] = {0};
 800156c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001570:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00e f9af 	bl	800f8e4 <memset>
		sprintf(Laser_Buf,"{\"Goal1\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal2\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal3\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal4\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal5\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal6\":[{\"Lat\":%.7f,\"Lng\":%.7f}]}",\
 8001586:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <gps_decode+0x554>)
 8001588:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800158c:	ed87 7b00 	vstr	d7, [r7]
 8001590:	4b71      	ldr	r3, [pc, #452]	@ (8001758 <gps_decode+0x554>)
 8001592:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8001596:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <gps_decode+0x554>)
 8001598:	ed93 6b1a 	vldr	d6, [r3, #104]	@ 0x68
 800159c:	4b6e      	ldr	r3, [pc, #440]	@ (8001758 <gps_decode+0x554>)
 800159e:	ed93 5b26 	vldr	d5, [r3, #152]	@ 0x98
 80015a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001758 <gps_decode+0x554>)
 80015a4:	ed93 4b1c 	vldr	d4, [r3, #112]	@ 0x70
 80015a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001758 <gps_decode+0x554>)
 80015aa:	ed93 3b1c 	vldr	d3, [r3, #112]	@ 0x70
 80015ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <gps_decode+0x554>)
 80015b0:	ed93 2b1e 	vldr	d2, [r3, #120]	@ 0x78
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <gps_decode+0x554>)
 80015b6:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	@ 0xa8
 80015ba:	4b67      	ldr	r3, [pc, #412]	@ (8001758 <gps_decode+0x554>)
 80015bc:	e9d3 8920 	ldrd	r8, r9, [r3, #128]	@ 0x80
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <gps_decode+0x554>)
 80015c2:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	@ 0xb0
 80015c6:	4b64      	ldr	r3, [pc, #400]	@ (8001758 <gps_decode+0x554>)
 80015c8:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 80015cc:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <gps_decode+0x554>)
 80015ce:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80015d2:	f107 0608 	add.w	r6, r7, #8
 80015d6:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80015da:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80015de:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 80015e2:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80015e6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80015ea:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 80015ee:	ed8d 3b08 	vstr	d3, [sp, #32]
 80015f2:	ed8d 4b06 	vstr	d4, [sp, #24]
 80015f6:	ed8d 5b04 	vstr	d5, [sp, #16]
 80015fa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80015fe:	ed8d 7b00 	vstr	d7, [sp]
 8001602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001606:	4957      	ldr	r1, [pc, #348]	@ (8001764 <gps_decode+0x560>)
 8001608:	4630      	mov	r0, r6
 800160a:	f00e f847 	bl	800f69c <siprintf>
				board_config.gps.Target_gpslat[0],board_config.gps.Target_gpslon[0],board_config.gps.Target_gpslat[1],board_config.gps.Target_gpslon[1],board_config.gps.Target_gpslat[2],board_config.gps.Target_gpslat[2],\
				board_config.gps.Target_gpslat[3],board_config.gps.Target_gpslon[3],board_config.gps.Target_gpslat[4],board_config.gps.Target_gpslon[4],board_config.gps.Target_gpslat[5],board_config.gps.Target_gpslon[5]);
		HAL_UART_Transmit(&huart2,Laser_Buf,strlen(Laser_Buf),0xff);
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fe3c 	bl	8000290 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0108 	add.w	r1, r7, #8
 8001620:	23ff      	movs	r3, #255	@ 0xff
 8001622:	4851      	ldr	r0, [pc, #324]	@ (8001768 <gps_decode+0x564>)
 8001624:	f00a ff08 	bl	800c438 <HAL_UART_Transmit>
	if(strstr(rxu4_buffer,"Kp")!=NULL && strstr(rxu4_buffer,"Ki")!=NULL && strstr(rxu4_buffer,"Kd")!=NULL && strstr(rxu4_buffer,"Lon1")!=NULL){
 8001628:	e145      	b.n	80018b6 <gps_decode+0x6b2>
	}
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 800162a:	4950      	ldr	r1, [pc, #320]	@ (800176c <gps_decode+0x568>)
 800162c:	4850      	ldr	r0, [pc, #320]	@ (8001770 <gps_decode+0x56c>)
 800162e:	f00e f9cf 	bl	800f9d0 <strstr>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d039      	beq.n	80016ac <gps_decode+0x4a8>
 8001638:	494e      	ldr	r1, [pc, #312]	@ (8001774 <gps_decode+0x570>)
 800163a:	484d      	ldr	r0, [pc, #308]	@ (8001770 <gps_decode+0x56c>)
 800163c:	f00e f9c8 	bl	800f9d0 <strstr>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d032      	beq.n	80016ac <gps_decode+0x4a8>
 8001646:	494c      	ldr	r1, [pc, #304]	@ (8001778 <gps_decode+0x574>)
 8001648:	4849      	ldr	r0, [pc, #292]	@ (8001770 <gps_decode+0x56c>)
 800164a:	f00e f9c1 	bl	800f9d0 <strstr>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02b      	beq.n	80016ac <gps_decode+0x4a8>
		PositionData data;
		if (parse_position_data(rxu4_buffer, &data) == 0) {
 8001654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001658:	4619      	mov	r1, r3
 800165a:	4845      	ldr	r0, [pc, #276]	@ (8001770 <gps_decode+0x56c>)
 800165c:	f000 f942 	bl	80018e4 <parse_position_data>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11e      	bne.n	80016a4 <gps_decode+0x4a0>
			// 输出解析后的数据
			printf("Pitch: %.6f", data.pitch);
 8001666:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 800166a:	4844      	ldr	r0, [pc, #272]	@ (800177c <gps_decode+0x578>)
 800166c:	f00d ffa6 	bl	800f5bc <iprintf>
			printf("  GPS Latitude: %.6f", data.gps_lat);
 8001670:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8001674:	4842      	ldr	r0, [pc, #264]	@ (8001780 <gps_decode+0x57c>)
 8001676:	f00d ffa1 	bl	800f5bc <iprintf>
			printf("  GPS Longitude: %.6f\r\n", data.gps_lon);
 800167a:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800167e:	4841      	ldr	r0, [pc, #260]	@ (8001784 <gps_decode+0x580>)
 8001680:	f00d ff9c 	bl	800f5bc <iprintf>
			board_config.Imu_data.Pitch = data.pitch;
 8001684:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8001688:	4933      	ldr	r1, [pc, #204]	@ (8001758 <gps_decode+0x554>)
 800168a:	e9c1 238e 	strd	r2, r3, [r1, #568]	@ 0x238
			board_config.gps.lat_deg = data.gps_lat;
 800168e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8001692:	4931      	ldr	r1, [pc, #196]	@ (8001758 <gps_decode+0x554>)
 8001694:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
			board_config.gps.lon_deg = data.gps_lon;
 8001698:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800169c:	492e      	ldr	r1, [pc, #184]	@ (8001758 <gps_decode+0x554>)
 800169e:	e9c1 237e 	strd	r2, r3, [r1, #504]	@ 0x1f8
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 80016a2:	e108      	b.n	80018b6 <gps_decode+0x6b2>
		} else {
			printf("Failed to parse the input data.\n");
 80016a4:	4838      	ldr	r0, [pc, #224]	@ (8001788 <gps_decode+0x584>)
 80016a6:	f00d fff1 	bl	800f68c <puts>
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 80016aa:	e104      	b.n	80018b6 <gps_decode+0x6b2>
		}
	}
	else if(strstr(rxu4_buffer,"AutomaticReturn_Start")!=NULL){
 80016ac:	4937      	ldr	r1, [pc, #220]	@ (800178c <gps_decode+0x588>)
 80016ae:	4830      	ldr	r0, [pc, #192]	@ (8001770 <gps_decode+0x56c>)
 80016b0:	f00e f98e 	bl	800f9d0 <strstr>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80ef 	beq.w	800189a <gps_decode+0x696>
		double gps_temp = 0.0;
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
		for(int i = 0 ; i < (board_config.gps.gps_num / 2) ; i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80016ce:	e032      	b.n	8001736 <gps_decode+0x532>
			gps_temp = board_config.gps.Target_gpslat[board_config.gps.gps_num - 1 - i];
 80016d0:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <gps_decode+0x554>)
 80016d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <gps_decode+0x554>)
 80016e0:	330c      	adds	r3, #12
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
			board_config.gps.Target_gpslat[board_config.gps.gps_num - 1 - i] = board_config.gps.Target_gpslat[i];
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <gps_decode+0x554>)
 80016f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80016fa:	1ad1      	subs	r1, r2, r3
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <gps_decode+0x554>)
 80016fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001702:	330c      	adds	r3, #12
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <gps_decode+0x554>)
 800170e:	310c      	adds	r1, #12
 8001710:	00c9      	lsls	r1, r1, #3
 8001712:	4401      	add	r1, r0
 8001714:	e9c1 2300 	strd	r2, r3, [r1]
			board_config.gps.Target_gpslat[i] = gps_temp;
 8001718:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <gps_decode+0x554>)
 800171a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800171e:	330c      	adds	r3, #12
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	18d1      	adds	r1, r2, r3
 8001724:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 8001728:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0 ; i < (board_config.gps.gps_num / 2) ; i++){
 800172c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <gps_decode+0x554>)
 8001738:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800173c:	0fda      	lsrs	r2, r3, #31
 800173e:	4413      	add	r3, r2
 8001740:	105b      	asrs	r3, r3, #1
 8001742:	461a      	mov	r2, r3
 8001744:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001748:	4293      	cmp	r3, r2
 800174a:	dbc1      	blt.n	80016d0 <gps_decode+0x4cc>
		}
		for(int i = 0 ; i < 6 ; i++){
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001752:	e039      	b.n	80017c8 <gps_decode+0x5c4>
 8001754:	2000021c 	.word	0x2000021c
 8001758:	200005d8 	.word	0x200005d8
 800175c:	08015660 	.word	0x08015660
 8001760:	080155bc 	.word	0x080155bc
 8001764:	08015674 	.word	0x08015674
 8001768:	20000b68 	.word	0x20000b68
 800176c:	08015744 	.word	0x08015744
 8001770:	200008c4 	.word	0x200008c4
 8001774:	0801574c 	.word	0x0801574c
 8001778:	08015754 	.word	0x08015754
 800177c:	0801575c 	.word	0x0801575c
 8001780:	08015768 	.word	0x08015768
 8001784:	08015780 	.word	0x08015780
 8001788:	08015798 	.word	0x08015798
 800178c:	080157b8 	.word	0x080157b8
			printf("lat:%f   lon:%f\r\n",board_config.gps.Target_gpslat[i],board_config.gps.Target_gpslon[i]);
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <gps_decode+0x6c0>)
 8001792:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001796:	330c      	adds	r3, #12
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a0:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <gps_decode+0x6c0>)
 80017a2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80017a6:	3312      	adds	r3, #18
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9cd 2300 	strd	r2, r3, [sp]
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4843      	ldr	r0, [pc, #268]	@ (80018c8 <gps_decode+0x6c4>)
 80017ba:	f00d feff 	bl	800f5bc <iprintf>
		for(int i = 0 ; i < 6 ; i++){
 80017be:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80017c2:	3301      	adds	r3, #1
 80017c4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80017c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	dddf      	ble.n	8001790 <gps_decode+0x58c>
		}
		uint8_t Laser_Buf[512] = {0};
 80017d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80017d4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00e f87d 	bl	800f8e4 <memset>
		sprintf(Laser_Buf,"{\"Goal1\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal2\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal3\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal4\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal5\":[{\"Lat\":%.7f,\"Lng\":%.7f}],\"Goal6\":[{\"Lat\":%.7f,\"Lng\":%.7f}]}",\
 80017ea:	4b36      	ldr	r3, [pc, #216]	@ (80018c4 <gps_decode+0x6c0>)
 80017ec:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80017f0:	ed87 7b00 	vstr	d7, [r7]
 80017f4:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <gps_decode+0x6c0>)
 80017f6:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 80017fa:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <gps_decode+0x6c0>)
 80017fc:	ed93 6b1a 	vldr	d6, [r3, #104]	@ 0x68
 8001800:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <gps_decode+0x6c0>)
 8001802:	ed93 5b26 	vldr	d5, [r3, #152]	@ 0x98
 8001806:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <gps_decode+0x6c0>)
 8001808:	ed93 4b1c 	vldr	d4, [r3, #112]	@ 0x70
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <gps_decode+0x6c0>)
 800180e:	ed93 3b1c 	vldr	d3, [r3, #112]	@ 0x70
 8001812:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <gps_decode+0x6c0>)
 8001814:	ed93 2b1e 	vldr	d2, [r3, #120]	@ 0x78
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <gps_decode+0x6c0>)
 800181a:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	@ 0xa8
 800181e:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <gps_decode+0x6c0>)
 8001820:	e9d3 8920 	ldrd	r8, r9, [r3, #128]	@ 0x80
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <gps_decode+0x6c0>)
 8001826:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	@ 0xb0
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <gps_decode+0x6c0>)
 800182c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <gps_decode+0x6c0>)
 8001832:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8001836:	f107 0608 	add.w	r6, r7, #8
 800183a:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 800183e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001842:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001846:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 800184a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800184e:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8001852:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001856:	ed8d 4b06 	vstr	d4, [sp, #24]
 800185a:	ed8d 5b04 	vstr	d5, [sp, #16]
 800185e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001862:	ed8d 7b00 	vstr	d7, [sp]
 8001866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800186a:	4918      	ldr	r1, [pc, #96]	@ (80018cc <gps_decode+0x6c8>)
 800186c:	4630      	mov	r0, r6
 800186e:	f00d ff15 	bl	800f69c <siprintf>
				board_config.gps.Target_gpslat[0],board_config.gps.Target_gpslon[0],board_config.gps.Target_gpslat[1],board_config.gps.Target_gpslon[1],board_config.gps.Target_gpslat[2],board_config.gps.Target_gpslat[2],\
				board_config.gps.Target_gpslat[3],board_config.gps.Target_gpslon[3],board_config.gps.Target_gpslat[4],board_config.gps.Target_gpslon[4],board_config.gps.Target_gpslat[5],board_config.gps.Target_gpslon[5]);
		HAL_UART_Transmit(&huart2,Laser_Buf,strlen(Laser_Buf),0xff);
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fd0a 	bl	8000290 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	f107 0108 	add.w	r1, r7, #8
 8001884:	23ff      	movs	r3, #255	@ 0xff
 8001886:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <gps_decode+0x6cc>)
 8001888:	f00a fdd6 	bl	800c438 <HAL_UART_Transmit>
		Auto_Start_Flag = AUTO_START;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <gps_decode+0x6d0>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
		Auto_Status = Auto_Return;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <gps_decode+0x6d4>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
	}
	else if(strstr(rxu4_buffer,"Stop_Auto")!=NULL){
		board_config.gps.now_number = 0.0;
		Auto_Start_Flag = AUTO_STOP;
	}
	return ;
 8001898:	e00e      	b.n	80018b8 <gps_decode+0x6b4>
	else if(strstr(rxu4_buffer,"Stop_Auto")!=NULL){
 800189a:	4910      	ldr	r1, [pc, #64]	@ (80018dc <gps_decode+0x6d8>)
 800189c:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <gps_decode+0x6dc>)
 800189e:	f00e f897 	bl	800f9d0 <strstr>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <gps_decode+0x6b4>
		board_config.gps.now_number = 0.0;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <gps_decode+0x6c0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		Auto_Start_Flag = AUTO_STOP;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <gps_decode+0x6d0>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
	return ;
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
}
 80018ba:	f507 7713 	add.w	r7, r7, #588	@ 0x24c
 80018be:	46bd      	mov	sp, r7
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c4:	200005d8 	.word	0x200005d8
 80018c8:	08015660 	.word	0x08015660
 80018cc:	08015674 	.word	0x08015674
 80018d0:	20000b68 	.word	0x20000b68
 80018d4:	200009c5 	.word	0x200009c5
 80018d8:	200009c8 	.word	0x200009c8
 80018dc:	080157d0 	.word	0x080157d0
 80018e0:	200008c4 	.word	0x200008c4

080018e4 <parse_position_data>:

/*{"curPt":[{"Alt":91.4,"Lat":221280068.0,"Lng":1133170163.0,"Yaw":-1488.64744}],"goalPt":[{"Alt":91.4,"Lat":221280068.0,"Lng":1133170163.0,"Yaw":-1488.6474609375}]}*/

int parse_position_data(const char *input, PositionData *data) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09c      	sub	sp, #112	@ 0x70
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
    // 定义变量用于存储解析结果
    char pitch_str[32] = {0};
 80018ee:	2300      	movs	r3, #0
 80018f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]
    char lat_str[32] = {0};
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800190a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]
    char lon_str[32] = {0};
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]

    // 使用sscanf函数解析输入字符串
    if (sscanf(input, "Pitch=%31[^,],Gps_Lat=%31[^,],Gps_Lon=%31[^\n]",
 8001936:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800193a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	4919      	ldr	r1, [pc, #100]	@ (80019ac <parse_position_data+0xc8>)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f00d fec7 	bl	800f6dc <siscanf>
 800194e:	4603      	mov	r3, r0
 8001950:	2b03      	cmp	r3, #3
 8001952:	d002      	beq.n	800195a <parse_position_data+0x76>
               pitch_str, lat_str, lon_str) != 3) {
        // 如果解析失败，返回错误码
        return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	e024      	b.n	80019a4 <parse_position_data+0xc0>
    }

    // 将字符串转换为double类型
    data->pitch = atof(pitch_str);
 800195a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800195e:	4618      	mov	r0, r3
 8001960:	f00b ffe0 	bl	800d924 <atof>
 8001964:	eeb0 7a40 	vmov.f32	s14, s0
 8001968:	eef0 7a60 	vmov.f32	s15, s1
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	ed83 7b00 	vstr	d7, [r3]
    data->gps_lat = atof(lat_str);
 8001972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001976:	4618      	mov	r0, r3
 8001978:	f00b ffd4 	bl	800d924 <atof>
 800197c:	eeb0 7a40 	vmov.f32	s14, s0
 8001980:	eef0 7a60 	vmov.f32	s15, s1
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	ed83 7b02 	vstr	d7, [r3, #8]
    data->gps_lon = atof(lon_str);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4618      	mov	r0, r3
 8001990:	f00b ffc8 	bl	800d924 <atof>
 8001994:	eeb0 7a40 	vmov.f32	s14, s0
 8001998:	eef0 7a60 	vmov.f32	s15, s1
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	ed83 7b04 	vstr	d7, [r3, #16]

    return 0; // 解析成功
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3768      	adds	r7, #104	@ 0x68
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	080157dc 	.word	0x080157dc

080019b0 <Laser_Navigation_Collect>:
	}
	return 1;
}


uint16_t Laser_Navigation_Collect(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	if (rxu2_data_ready == 1) {
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <Laser_Navigation_Collect+0x44>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d118      	bne.n	80019ee <Laser_Navigation_Collect+0x3e>
		  //printf("recv:%s\r\n",imu_buf);
		  // 处理接收到的数据
		  ParseLaserJSON(imu_buf);
 80019bc:	480e      	ldr	r0, [pc, #56]	@ (80019f8 <Laser_Navigation_Collect+0x48>)
 80019be:	f000 f81f 	bl	8001a00 <ParseLaserJSON>
		  // 清空接收缓冲区
		  memset(imu_buf, 0, sizeof(imu_buf));
 80019c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c6:	2100      	movs	r1, #0
 80019c8:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <Laser_Navigation_Collect+0x48>)
 80019ca:	f00d ff8b 	bl	800f8e4 <memset>

		  rxu2_data_ready = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <Laser_Navigation_Collect+0x44>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
		  // 重新启动DMA接收
		  HAL_UART_Receive_DMA(&huart2, (uint8_t *)imu_buf, imu_buf);
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <Laser_Navigation_Collect+0x48>)
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4907      	ldr	r1, [pc, #28]	@ (80019f8 <Laser_Navigation_Collect+0x48>)
 80019dc:	4807      	ldr	r0, [pc, #28]	@ (80019fc <Laser_Navigation_Collect+0x4c>)
 80019de:	f00a fddb 	bl	800c598 <HAL_UART_Receive_DMA>

		  HAL_UART_Receive_IT(&huart2, (uint8_t *)imu_buf, sizeof(imu_buf));
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	4904      	ldr	r1, [pc, #16]	@ (80019f8 <Laser_Navigation_Collect+0x48>)
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <Laser_Navigation_Collect+0x4c>)
 80019ea:	f00a fdb0 	bl	800c54e <HAL_UART_Receive_IT>
	    }
		return 1;
 80019ee:	2301      	movs	r3, #1

	return 1;
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200009c6 	.word	0x200009c6
 80019f8:	200004d4 	.word	0x200004d4
 80019fc:	20000b68 	.word	0x20000b68

08001a00 <ParseLaserJSON>:


void ParseLaserJSON(const char *jsonString)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b0cd      	sub	sp, #308	@ 0x134
 8001a04:	af04      	add	r7, sp, #16
 8001a06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a0e:	6018      	str	r0, [r3, #0]
	 cJSON *root = cJSON_Parse(jsonString);
 8001a10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001a14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f001 f8d5 	bl	8002bc8 <cJSON_Parse>
 8001a1e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	if (root == NULL)
 8001a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10e      	bne.n	8001a48 <ParseLaserJSON+0x48>
	{
		const char *error_ptr = cJSON_GetErrorPtr();
 8001a2a:	f000 fb5d 	bl	80020e8 <cJSON_GetErrorPtr>
 8001a2e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
		if (error_ptr != NULL)
 8001a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80fb 	beq.w	8001c32 <ParseLaserJSON+0x232>
		{
			printf("Error before: %s\r\n", error_ptr);
 8001a3c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001a40:	4881      	ldr	r0, [pc, #516]	@ (8001c48 <ParseLaserJSON+0x248>)
 8001a42:	f00d fdbb 	bl	800f5bc <iprintf>
		}
		return;
 8001a46:	e0f4      	b.n	8001c32 <ParseLaserJSON+0x232>
	}

	// 获取curPt数组
	cJSON *curPtArray = cJSON_GetObjectItemCaseSensitive(root, "curPt");
 8001a48:	4980      	ldr	r1, [pc, #512]	@ (8001c4c <ParseLaserJSON+0x24c>)
 8001a4a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001a4e:	f001 fc25 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001a52:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	if (cJSON_IsArray(curPtArray) && cJSON_GetArraySize(curPtArray) > 0)
 8001a56:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001a5a:	f001 fc2e 	bl	80032ba <cJSON_IsArray>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d05f      	beq.n	8001b24 <ParseLaserJSON+0x124>
 8001a64:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001a68:	f001 fb78 	bl	800315c <cJSON_GetArraySize>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dd58      	ble.n	8001b24 <ParseLaserJSON+0x124>
	{
		cJSON *curPt = cJSON_GetArrayItem(curPtArray, 0);
 8001a72:	2100      	movs	r1, #0
 8001a74:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001a78:	f001 fbb4 	bl	80031e4 <cJSON_GetArrayItem>
 8001a7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
		if (cJSON_IsObject(curPt))
 8001a80:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001a84:	f001 fc30 	bl	80032e8 <cJSON_IsObject>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04a      	beq.n	8001b24 <ParseLaserJSON+0x124>
		{
			board_config.gps.lat_deg = (cJSON_GetObjectItemCaseSensitive(curPt, "Lat")->valuedouble)/10000000;
 8001a8e:	4970      	ldr	r1, [pc, #448]	@ (8001c50 <ParseLaserJSON+0x250>)
 8001a90:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001a94:	f001 fc02 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a9e:	a368      	add	r3, pc, #416	@ (adr r3, 8001c40 <ParseLaserJSON+0x240>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fee2 	bl	800086c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4969      	ldr	r1, [pc, #420]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001aae:	e9c1 237c 	strd	r2, r3, [r1, #496]	@ 0x1f0
			board_config.gps.lon_deg = (cJSON_GetObjectItemCaseSensitive(curPt, "Lng")->valuedouble)/10000000;;
 8001ab2:	4969      	ldr	r1, [pc, #420]	@ (8001c58 <ParseLaserJSON+0x258>)
 8001ab4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001ab8:	f001 fbf0 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001abc:	4603      	mov	r3, r0
 8001abe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ac2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001c40 <ParseLaserJSON+0x240>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fed0 	bl	800086c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4960      	ldr	r1, [pc, #384]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001ad2:	e9c1 237e 	strd	r2, r3, [r1, #504]	@ 0x1f8
			//double curAlt = (cJSON_GetObjectItemCaseSensitive(curPt, "Alt")->valuedouble)/100;;
			board_config.Imu_data.Pitch = -((cJSON_GetObjectItemCaseSensitive(curPt, "Yaw")->valuedouble)/100);
 8001ad6:	4961      	ldr	r1, [pc, #388]	@ (8001c5c <ParseLaserJSON+0x25c>)
 8001ad8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001adc:	f001 fbde 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b5d      	ldr	r3, [pc, #372]	@ (8001c60 <ParseLaserJSON+0x260>)
 8001aec:	f7fe febe 	bl	800086c <__aeabi_ddiv>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001afa:	4b56      	ldr	r3, [pc, #344]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001afc:	e9c3 458e 	strd	r4, r5, [r3, #568]	@ 0x238

			printf("Current Point - Lat: %.6f, Lng: %.6f, Yaw: %.6f\n", board_config.gps.lat_deg , board_config.gps.lon_deg, board_config.Imu_data.Pitch);
 8001b00:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001b02:	e9d3 457c 	ldrd	r4, r5, [r3, #496]	@ 0x1f0
 8001b06:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001b08:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	@ 0x1f8
 8001b0c:	4951      	ldr	r1, [pc, #324]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001b0e:	e9d1 018e 	ldrd	r0, r1, [r1, #568]	@ 0x238
 8001b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b16:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	4851      	ldr	r0, [pc, #324]	@ (8001c64 <ParseLaserJSON+0x264>)
 8001b20:	f00d fd4c 	bl	800f5bc <iprintf>
		}
	}

	// 获取goalPt数组
	cJSON *goalPtArray = cJSON_GetObjectItemCaseSensitive(root, "goalPt");
 8001b24:	4950      	ldr	r1, [pc, #320]	@ (8001c68 <ParseLaserJSON+0x268>)
 8001b26:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001b2a:	f001 fbb7 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001b2e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	if (cJSON_IsArray(goalPtArray) && cJSON_GetArraySize(goalPtArray) > 0)
 8001b32:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001b36:	f001 fbc0 	bl	80032ba <cJSON_IsArray>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d045      	beq.n	8001bcc <ParseLaserJSON+0x1cc>
 8001b40:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001b44:	f001 fb0a 	bl	800315c <cJSON_GetArraySize>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd3e      	ble.n	8001bcc <ParseLaserJSON+0x1cc>
	{
		cJSON *goalPt = cJSON_GetArrayItem(goalPtArray, 0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001b54:	f001 fb46 	bl	80031e4 <cJSON_GetArrayItem>
 8001b58:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
		if (cJSON_IsObject(goalPt))
 8001b5c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001b60:	f001 fbc2 	bl	80032e8 <cJSON_IsObject>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d030      	beq.n	8001bcc <ParseLaserJSON+0x1cc>
		{
			board_config.gps.Goal_Lat = (cJSON_GetObjectItemCaseSensitive(goalPt, "Lat")->valuedouble)/10000000;
 8001b6a:	4939      	ldr	r1, [pc, #228]	@ (8001c50 <ParseLaserJSON+0x250>)
 8001b6c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001b70:	f001 fb94 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001b74:	4603      	mov	r3, r0
 8001b76:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b7a:	a331      	add	r3, pc, #196	@ (adr r3, 8001c40 <ParseLaserJSON+0x240>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fe74 	bl	800086c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4932      	ldr	r1, [pc, #200]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001b8a:	e9c1 2380 	strd	r2, r3, [r1, #512]	@ 0x200
			board_config.gps.Goal_Lon = (cJSON_GetObjectItemCaseSensitive(goalPt, "Lng")->valuedouble)/10000000;
 8001b8e:	4932      	ldr	r1, [pc, #200]	@ (8001c58 <ParseLaserJSON+0x258>)
 8001b90:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001b94:	f001 fb82 	bl	800329c <cJSON_GetObjectItemCaseSensitive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b9e:	a328      	add	r3, pc, #160	@ (adr r3, 8001c40 <ParseLaserJSON+0x240>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fe62 	bl	800086c <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4929      	ldr	r1, [pc, #164]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001bae:	e9c1 2382 	strd	r2, r3, [r1, #520]	@ 0x208
//			double goalAlt = (cJSON_GetObjectItemCaseSensitive(goalPt, "Alt")->valuedouble)/100;
//			double goalYaw = (cJSON_GetObjectItemCaseSensitive(goalPt, "Yaw")->valuedouble)/100;

			printf("       Goal Point - Lat: %.6f, Lng: %.6f\r\n", board_config.gps.Goal_Lat, board_config.gps.Goal_Lon);
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001bb4:	e9d3 0180 	ldrd	r0, r1, [r3, #512]	@ 0x200
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001bba:	e9d3 2382 	ldrd	r2, r3, [r3, #520]	@ 0x208
 8001bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4829      	ldr	r0, [pc, #164]	@ (8001c6c <ParseLaserJSON+0x26c>)
 8001bc8:	f00d fcf8 	bl	800f5bc <iprintf>
		}
	}

	pid_flag++;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <ParseLaserJSON+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a27      	ldr	r2, [pc, #156]	@ (8001c70 <ParseLaserJSON+0x270>)
 8001bd4:	6013      	str	r3, [r2, #0]
	if(pid_flag >= 15){
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <ParseLaserJSON+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b0e      	cmp	r3, #14
 8001bdc:	dd24      	ble.n	8001c28 <ParseLaserJSON+0x228>
		char PitchMessage[256];
		sprintf(PitchMessage,"Pitch=%f,Gps_Lat=%f,Gps_Lon=%f",board_config.Imu_data.Pitch,board_config.gps.lat_deg,board_config.gps.lon_deg);
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001be0:	e9d3 458e 	ldrd	r4, r5, [r3, #568]	@ 0x238
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001be6:	e9d3 237c 	ldrd	r2, r3, [r3, #496]	@ 0x1f0
 8001bea:	491a      	ldr	r1, [pc, #104]	@ (8001c54 <ParseLaserJSON+0x254>)
 8001bec:	e9d1 017e 	ldrd	r0, r1, [r1, #504]	@ 0x1f8
 8001bf0:	f107 0608 	add.w	r6, r7, #8
 8001bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001bf8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	462b      	mov	r3, r5
 8001c00:	491c      	ldr	r1, [pc, #112]	@ (8001c74 <ParseLaserJSON+0x274>)
 8001c02:	4630      	mov	r0, r6
 8001c04:	f00d fd4a 	bl	800f69c <siprintf>
		HAL_UART_Transmit(&huart4,PitchMessage,strlen(PitchMessage),0xff);
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fb3f 	bl	8000290 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f107 0108 	add.w	r1, r7, #8
 8001c1a:	23ff      	movs	r3, #255	@ 0xff
 8001c1c:	4816      	ldr	r0, [pc, #88]	@ (8001c78 <ParseLaserJSON+0x278>)
 8001c1e:	f00a fc0b 	bl	800c438 <HAL_UART_Transmit>
		pid_flag = 0;
 8001c22:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <ParseLaserJSON+0x270>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	}

	// 清理
	cJSON_Delete(root);
 8001c28:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001c2c:	f000 faec 	bl	8002208 <cJSON_Delete>
 8001c30:	e000      	b.n	8001c34 <ParseLaserJSON+0x234>
		return;
 8001c32:	bf00      	nop
}
 8001c34:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3c:	f3af 8000 	nop.w
 8001c40:	00000000 	.word	0x00000000
 8001c44:	416312d0 	.word	0x416312d0
 8001c48:	0801582c 	.word	0x0801582c
 8001c4c:	08015840 	.word	0x08015840
 8001c50:	08015628 	.word	0x08015628
 8001c54:	200005d8 	.word	0x200005d8
 8001c58:	08015848 	.word	0x08015848
 8001c5c:	0801584c 	.word	0x0801584c
 8001c60:	40590000 	.word	0x40590000
 8001c64:	08015850 	.word	0x08015850
 8001c68:	08015884 	.word	0x08015884
 8001c6c:	0801588c 	.word	0x0801588c
 8001c70:	20000258 	.word	0x20000258
 8001c74:	0801580c 	.word	0x0801580c
 8001c78:	20000a90 	.word	0x20000a90

08001c7c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001c90:	4a21      	ldr	r2, [pc, #132]	@ (8001d18 <MX_ADC1_Init+0x9c>)
 8001c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <MX_ADC1_Init+0xa0>)
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cda:	480e      	ldr	r0, [pc, #56]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cdc:	f007 fb5a 	bl	8009394 <HAL_ADC_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f002 fcbd 	bl	8004664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001cea:	2308      	movs	r3, #8
 8001cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <MX_ADC1_Init+0x98>)
 8001cfc:	f007 fcf8 	bl	80096f0 <HAL_ADC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d06:	f002 fcad 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000025c 	.word	0x2000025c
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d34:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <MX_ADC2_Init+0x9c>)
 8001d36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <MX_ADC2_Init+0xa0>)
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d7e:	480e      	ldr	r0, [pc, #56]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001d80:	f007 fb08 	bl	8009394 <HAL_ADC_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001d8a:	f002 fc6b 	bl	8004664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_ADC2_Init+0x98>)
 8001da0:	f007 fca6 	bl	80096f0 <HAL_ADC_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001daa:	f002 fc5b 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002a4 	.word	0x200002a4
 8001dbc:	40012100 	.word	0x40012100
 8001dc0:	0f000001 	.word	0x0f000001

08001dc4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001dd8:	4a21      	ldr	r2, [pc, #132]	@ (8001e60 <MX_ADC3_Init+0x9c>)
 8001dda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <MX_ADC3_Init+0xa0>)
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e22:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e24:	f007 fab6 	bl	8009394 <HAL_ADC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f002 fc19 	bl	8004664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e32:	230b      	movs	r3, #11
 8001e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <MX_ADC3_Init+0x98>)
 8001e44:	f007 fc54 	bl	80096f0 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001e4e:	f002 fc09 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002ec 	.word	0x200002ec
 8001e60:	40012200 	.word	0x40012200
 8001e64:	0f000001 	.word	0x0f000001

08001e68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	@ 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a8c      	ldr	r2, [pc, #560]	@ (80020b8 <HAL_ADC_MspInit+0x250>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d157      	bne.n	8001f3a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a8a      	ldr	r2, [pc, #552]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	4b84      	ldr	r3, [pc, #528]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a83      	ldr	r2, [pc, #524]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b81      	ldr	r3, [pc, #516]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	487a      	ldr	r0, [pc, #488]	@ (80020c0 <HAL_ADC_MspInit+0x258>)
 8001ed6:	f008 fd15 	bl	800a904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eda:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001edc:	4a7a      	ldr	r2, [pc, #488]	@ (80020c8 <HAL_ADC_MspInit+0x260>)
 8001ede:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ee0:	4b78      	ldr	r3, [pc, #480]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee6:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eec:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ef2:	4b74      	ldr	r3, [pc, #464]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001ef4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001efa:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001efc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f02:	4b70      	ldr	r3, [pc, #448]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f10:	4b6c      	ldr	r3, [pc, #432]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f16:	4b6b      	ldr	r3, [pc, #428]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f1c:	4869      	ldr	r0, [pc, #420]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f1e:	f008 f8ef 	bl	800a100 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001f28:	f002 fb9c 	bl	8004664 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a65      	ldr	r2, [pc, #404]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f32:	4a64      	ldr	r2, [pc, #400]	@ (80020c4 <HAL_ADC_MspInit+0x25c>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001f38:	e0ba      	b.n	80020b0 <HAL_ADC_MspInit+0x248>
  else if(adcHandle->Instance==ADC2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a63      	ldr	r2, [pc, #396]	@ (80020cc <HAL_ADC_MspInit+0x264>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d158      	bne.n	8001ff6 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f54:	4b59      	ldr	r3, [pc, #356]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	4b55      	ldr	r3, [pc, #340]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4a54      	ldr	r2, [pc, #336]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f70:	4b52      	ldr	r3, [pc, #328]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f80:	2303      	movs	r3, #3
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	484c      	ldr	r0, [pc, #304]	@ (80020c0 <HAL_ADC_MspInit+0x258>)
 8001f90:	f008 fcb8 	bl	800a904 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8001f94:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001f96:	4a4f      	ldr	r2, [pc, #316]	@ (80020d4 <HAL_ADC_MspInit+0x26c>)
 8001f98:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001f9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	4b49      	ldr	r3, [pc, #292]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001fae:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb6:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fbc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fbe:	4b44      	ldr	r3, [pc, #272]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001fc6:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001fcc:	4b40      	ldr	r3, [pc, #256]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001fd8:	483d      	ldr	r0, [pc, #244]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fda:	f008 f891 	bl	800a100 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8001fe4:	f002 fb3e 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a39      	ldr	r2, [pc, #228]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fee:	4a38      	ldr	r2, [pc, #224]	@ (80020d0 <HAL_ADC_MspInit+0x268>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ff4:	e05c      	b.n	80020b0 <HAL_ADC_MspInit+0x248>
  else if(adcHandle->Instance==ADC3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <HAL_ADC_MspInit+0x270>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d157      	bne.n	80020b0 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	4b2d      	ldr	r3, [pc, #180]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8002006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002008:	4a2c      	ldr	r2, [pc, #176]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002010:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4a25      	ldr	r2, [pc, #148]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6313      	str	r3, [r2, #48]	@ 0x30
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <HAL_ADC_MspInit+0x254>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002038:	2302      	movs	r3, #2
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	2303      	movs	r3, #3
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4824      	ldr	r0, [pc, #144]	@ (80020dc <HAL_ADC_MspInit+0x274>)
 800204c:	f008 fc5a 	bl	800a904 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002050:	4b23      	ldr	r3, [pc, #140]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002052:	4a24      	ldr	r2, [pc, #144]	@ (80020e4 <HAL_ADC_MspInit+0x27c>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002058:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800205c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 800206c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002070:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002074:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002078:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800207a:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 800207c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002080:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002094:	4812      	ldr	r0, [pc, #72]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 8002096:	f008 f833 	bl	800a100 <HAL_DMA_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 80020a0:	f002 fae0 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0e      	ldr	r2, [pc, #56]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 80020a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020aa:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <HAL_ADC_MspInit+0x278>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020b0:	bf00      	nop
 80020b2:	3738      	adds	r7, #56	@ 0x38
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40012000 	.word	0x40012000
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400
 80020c4:	20000334 	.word	0x20000334
 80020c8:	40026410 	.word	0x40026410
 80020cc:	40012100 	.word	0x40012100
 80020d0:	20000394 	.word	0x20000394
 80020d4:	40026458 	.word	0x40026458
 80020d8:	40012200 	.word	0x40012200
 80020dc:	40020800 	.word	0x40020800
 80020e0:	200003f4 	.word	0x200003f4
 80020e4:	40026428 	.word	0x40026428

080020e8 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <cJSON_GetErrorPtr+0x18>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <cJSON_GetErrorPtr+0x18>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4413      	add	r3, r2
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000454 	.word	0x20000454

08002104 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <case_insensitive_strcmp+0x16>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800211a:	2301      	movs	r3, #1
 800211c:	e056      	b.n	80021cc <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d10d      	bne.n	8002142 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8002126:	2300      	movs	r3, #0
 8002128:	e050      	b.n	80021cc <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8002132:	2300      	movs	r3, #0
 8002134:	e04a      	b.n	80021cc <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3301      	adds	r3, #1
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	3301      	adds	r3, #1
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <case_insensitive_strcmp+0xd4>)
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d103      	bne.n	8002162 <case_insensitive_strcmp+0x5e>
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	f103 0220 	add.w	r2, r3, #32
 8002160:	e000      	b.n	8002164 <case_insensitive_strcmp+0x60>
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	73bb      	strb	r3, [r7, #14]
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	3301      	adds	r3, #1
 800216e:	491a      	ldr	r1, [pc, #104]	@ (80021d8 <case_insensitive_strcmp+0xd4>)
 8002170:	440b      	add	r3, r1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <case_insensitive_strcmp+0x7e>
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	3320      	adds	r3, #32
 8002180:	e000      	b.n	8002184 <case_insensitive_strcmp+0x80>
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	429a      	cmp	r2, r3
 8002186:	d0d0      	beq.n	800212a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	737b      	strb	r3, [r7, #13]
 800218e:	7b7b      	ldrb	r3, [r7, #13]
 8002190:	3301      	adds	r3, #1
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <case_insensitive_strcmp+0xd4>)
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d103      	bne.n	80021a8 <case_insensitive_strcmp+0xa4>
 80021a0:	7b7b      	ldrb	r3, [r7, #13]
 80021a2:	f103 0220 	add.w	r2, r3, #32
 80021a6:	e000      	b.n	80021aa <case_insensitive_strcmp+0xa6>
 80021a8:	7b7a      	ldrb	r2, [r7, #13]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	733b      	strb	r3, [r7, #12]
 80021b0:	7b3b      	ldrb	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <case_insensitive_strcmp+0xd4>)
 80021b6:	440b      	add	r3, r1
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <case_insensitive_strcmp+0xc4>
 80021c2:	7b3b      	ldrb	r3, [r7, #12]
 80021c4:	3320      	adds	r3, #32
 80021c6:	e000      	b.n	80021ca <case_insensitive_strcmp+0xc6>
 80021c8:	7b3b      	ldrb	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	08015b40 	.word	0x08015b40

080021dc <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2028      	movs	r0, #40	@ 0x28
 80021ea:	4798      	blx	r3
 80021ec:	60f8      	str	r0, [r7, #12]
    if (node)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80021f4:	2228      	movs	r2, #40	@ 0x28
 80021f6:	2100      	movs	r1, #0
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f00d fb73 	bl	800f8e4 <memset>
    }

    return node;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002214:	e03d      	b.n	8002292 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d108      	bne.n	800223a <cJSON_Delete+0x32>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ffe7 	bl	8002208 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <cJSON_Delete+0x58>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <cJSON_Delete+0x9c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6912      	ldr	r2, [r2, #16]
 8002256:	4610      	mov	r0, r2
 8002258:	4798      	blx	r3
            item->valuestring = NULL;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <cJSON_Delete+0x7e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <cJSON_Delete+0x9c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6a12      	ldr	r2, [r2, #32]
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3
            item->string = NULL;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <cJSON_Delete+0x9c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
        item = next;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1be      	bne.n	8002216 <cJSON_Delete+0xe>
    }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000004 	.word	0x20000004

080022a8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80022ac:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b098      	sub	sp, #96	@ 0x60
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80022d2:	f7ff ffe9 	bl	80022a8 <get_decimal_point>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <parse_number+0x36>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <parse_number+0x3a>
    {
        return false;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e0a0      	b.n	8002434 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022f6:	e03d      	b.n	8002374 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002302:	440b      	add	r3, r1
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b45      	cmp	r3, #69	@ 0x45
 800230a:	dc17      	bgt.n	800233c <parse_number+0x84>
 800230c:	2b2b      	cmp	r3, #43	@ 0x2b
 800230e:	db40      	blt.n	8002392 <parse_number+0xda>
 8002310:	3b2b      	subs	r3, #43	@ 0x2b
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	4b4c      	ldr	r3, [pc, #304]	@ (8002448 <parse_number+0x190>)
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10b      	bne.n	8002340 <parse_number+0x88>
 8002328:	f002 0308 	and.w	r3, r2, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf14      	ite	ne
 8002330:	2301      	movne	r3, #1
 8002332:	2300      	moveq	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d111      	bne.n	800235e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800233a:	e02a      	b.n	8002392 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800233c:	2b65      	cmp	r3, #101	@ 0x65
 800233e:	d128      	bne.n	8002392 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800234a:	440b      	add	r3, r1
 800234c:	4413      	add	r3, r2
 800234e:	7819      	ldrb	r1, [r3, #0]
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002356:	4413      	add	r3, r2
 8002358:	460a      	mov	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
                break;
 800235c:	e007      	b.n	800236e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800235e:	f107 0208 	add.w	r2, r7, #8
 8002362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002364:	4413      	add	r3, r2
 8002366:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800236a:	701a      	strb	r2, [r3, #0]
                break;
 800236c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800236e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002370:	3301      	adds	r3, #1
 8002372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002376:	2b3e      	cmp	r3, #62	@ 0x3e
 8002378:	d80d      	bhi.n	8002396 <parse_number+0xde>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <parse_number+0xde>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002386:	441a      	add	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d3b3      	bcc.n	80022f8 <parse_number+0x40>
        }
    }
loop_end:
 8002390:	e001      	b.n	8002396 <parse_number+0xde>
                goto loop_end;
 8002392:	bf00      	nop
 8002394:	e000      	b.n	8002398 <parse_number+0xe0>
loop_end:
 8002396:	bf00      	nop
    number_c_string[i] = '\0';
 8002398:	f107 0208 	add.w	r2, r7, #8
 800239c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239e:	4413      	add	r3, r2
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80023a4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00c f9b8 	bl	800e724 <strtod>
 80023b4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80023b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	429a      	cmp	r2, r3
 80023c0:	d101      	bne.n	80023c6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80023c2:	2300      	movs	r3, #0
 80023c4:	e036      	b.n	8002434 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023cc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80023d0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002440 <parse_number+0x188>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80023da:	f7fe fba3 	bl	8000b24 <__aeabi_dcmpge>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80023ea:	615a      	str	r2, [r3, #20]
 80023ec:	e015      	b.n	800241a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <parse_number+0x194>)
 80023f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80023f8:	f7fe fb8a 	bl	8000b10 <__aeabi_dcmple>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	e006      	b.n	800241a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800240c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002410:	f7fe fbb2 	bl	8000b78 <__aeabi_d2iz>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2208      	movs	r2, #8
 800241e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002426:	f107 0208 	add.w	r2, r7, #8
 800242a:	1a8a      	subs	r2, r1, r2
 800242c:	441a      	add	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	609a      	str	r2, [r3, #8]
    return true;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3760      	adds	r7, #96	@ 0x60
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	f3af 8000 	nop.w
 8002440:	ffc00000 	.word	0xffc00000
 8002444:	41dfffff 	.word	0x41dfffff
 8002448:	04007fe5 	.word	0x04007fe5
 800244c:	c1e00000 	.word	0xc1e00000

08002450 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	e04c      	b.n	8002500 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002470:	d90f      	bls.n	8002492 <parse_hex4+0x42>
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b39      	cmp	r3, #57	@ 0x39
 800247c:	d809      	bhi.n	8002492 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4413      	add	r3, r2
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	3b30      	subs	r3, #48	@ 0x30
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e02d      	b.n	80024ee <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b40      	cmp	r3, #64	@ 0x40
 800249c:	d90f      	bls.n	80024be <parse_hex4+0x6e>
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b46      	cmp	r3, #70	@ 0x46
 80024a8:	d809      	bhi.n	80024be <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	3b37      	subs	r3, #55	@ 0x37
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e017      	b.n	80024ee <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b60      	cmp	r3, #96	@ 0x60
 80024c8:	d90f      	bls.n	80024ea <parse_hex4+0x9a>
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b66      	cmp	r3, #102	@ 0x66
 80024d4:	d809      	bhi.n	80024ea <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	3b57      	subs	r3, #87	@ 0x57
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e001      	b.n	80024ee <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e00c      	b.n	8002508 <parse_hex4+0xb8>
        }

        if (i < 3)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d802      	bhi.n	80024fa <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d9af      	bls.n	8002466 <parse_hex4+0x16>
        }
    }

    return h;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	@ 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b05      	cmp	r3, #5
 800254c:	f340 80b7 	ble.w	80026be <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	3302      	adds	r3, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff7b 	bl	8002450 <parse_hex4>
 800255a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002562:	d304      	bcc.n	800256e <utf16_literal_to_utf8+0x5a>
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800256a:	f0c0 80aa 	bcc.w	80026c2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8002574:	d337      	bcc.n	80025e6 <utf16_literal_to_utf8+0xd2>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800257c:	d233      	bcs.n	80025e6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	3306      	adds	r3, #6
 8002582:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8002588:	230c      	movs	r3, #12
 800258a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	f340 8096 	ble.w	80026c6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b5c      	cmp	r3, #92	@ 0x5c
 80025a0:	f040 8093 	bne.w	80026ca <utf16_literal_to_utf8+0x1b6>
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b75      	cmp	r3, #117	@ 0x75
 80025ac:	f040 808d 	bne.w	80026ca <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3302      	adds	r3, #2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff4b 	bl	8002450 <parse_hex4>
 80025ba:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80025c2:	f0c0 8084 	bcc.w	80026ce <utf16_literal_to_utf8+0x1ba>
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80025cc:	d27f      	bcs.n	80026ce <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	029a      	lsls	r2, r3, #10
 80025d2:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <utf16_literal_to_utf8+0x1cc>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80025dc:	4313      	orrs	r3, r2
 80025de:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80025e4:	e004      	b.n	80025f0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80025e6:	2306      	movs	r3, #6
 80025e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025f4:	d803      	bhi.n	80025fe <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025fc:	e01f      	b.n	800263e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002604:	d206      	bcs.n	8002614 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8002606:	2302      	movs	r3, #2
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800260c:	23c0      	movs	r3, #192	@ 0xc0
 800260e:	f887 3020 	strb.w	r3, [r7, #32]
 8002612:	e014      	b.n	800263e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261a:	d206      	bcs.n	800262a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800261c:	2303      	movs	r3, #3
 800261e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8002622:	23e0      	movs	r3, #224	@ 0xe0
 8002624:	f887 3020 	strb.w	r3, [r7, #32]
 8002628:	e009      	b.n	800263e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002630:	d24f      	bcs.n	80026d2 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8002632:	2304      	movs	r3, #4
 8002634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002638:	23f0      	movs	r3, #240	@ 0xf0
 800263a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800263e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002642:	3b01      	subs	r3, #1
 8002644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002648:	e015      	b.n	8002676 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002652:	b2da      	uxtb	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800265c:	440b      	add	r3, r1
 800265e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800266c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002670:	3b01      	subs	r3, #1
 8002672:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002676:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e5      	bne.n	800264a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800267e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002682:	2b01      	cmp	r3, #1
 8002684:	d909      	bls.n	800269a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	b2d9      	uxtb	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002692:	430a      	orrs	r2, r1
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e007      	b.n	80026aa <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026b2:	441a      	add	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80026b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80026bc:	e00b      	b.n	80026d6 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80026be:	bf00      	nop
 80026c0:	e008      	b.n	80026d4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80026c2:	bf00      	nop
 80026c4:	e006      	b.n	80026d4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80026c6:	bf00      	nop
 80026c8:	e004      	b.n	80026d4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80026d2:	bf00      	nop

fail:
    return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3728      	adds	r7, #40	@ 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000ffc00 	.word	0x000ffc00

080026e4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b22      	cmp	r3, #34	@ 0x22
 8002720:	f040 8103 	bne.w	800292a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800272c:	e017      	b.n	800275e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b5c      	cmp	r3, #92	@ 0x5c
 8002734:	d110      	bne.n	8002758 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	f080 80f1 	bcs.w	800292e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	3301      	adds	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
                input_end++;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	3301      	adds	r3, #1
 8002756:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	3301      	adds	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	461a      	mov	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d203      	bcs.n	8002778 <parse_string+0x94>
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b22      	cmp	r3, #34	@ 0x22
 8002776:	d1da      	bne.n	800272e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	461a      	mov	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	f080 80d3 	bcs.w	8002932 <parse_string+0x24e>
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b22      	cmp	r3, #34	@ 0x22
 8002792:	f040 80ce 	bne.w	8002932 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4413      	add	r3, r2
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	3201      	adds	r2, #1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4798      	blx	r3
 80027b8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80ba 	beq.w	8002936 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80027c6:	e094      	b.n	80028f2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80027ce:	d008      	beq.n	80027e2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80027d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d2:	1c53      	adds	r3, r2, #1
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	60f9      	str	r1, [r7, #12]
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e087      	b.n	80028f2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80027e6:	6a3a      	ldr	r2, [r7, #32]
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f340 80a4 	ble.w	800293a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b75      	cmp	r3, #117	@ 0x75
 80027fa:	f300 80a0 	bgt.w	800293e <parse_string+0x25a>
 80027fe:	2b5c      	cmp	r3, #92	@ 0x5c
 8002800:	da04      	bge.n	800280c <parse_string+0x128>
 8002802:	2b22      	cmp	r3, #34	@ 0x22
 8002804:	d05c      	beq.n	80028c0 <parse_string+0x1dc>
 8002806:	2b2f      	cmp	r3, #47	@ 0x2f
 8002808:	d05a      	beq.n	80028c0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800280a:	e098      	b.n	800293e <parse_string+0x25a>
            switch (input_pointer[1])
 800280c:	3b5c      	subs	r3, #92	@ 0x5c
 800280e:	2b19      	cmp	r3, #25
 8002810:	f200 8095 	bhi.w	800293e <parse_string+0x25a>
 8002814:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <parse_string+0x138>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	080028c1 	.word	0x080028c1
 8002820:	0800293f 	.word	0x0800293f
 8002824:	0800293f 	.word	0x0800293f
 8002828:	0800293f 	.word	0x0800293f
 800282c:	0800293f 	.word	0x0800293f
 8002830:	0800293f 	.word	0x0800293f
 8002834:	08002885 	.word	0x08002885
 8002838:	0800293f 	.word	0x0800293f
 800283c:	0800293f 	.word	0x0800293f
 8002840:	0800293f 	.word	0x0800293f
 8002844:	08002891 	.word	0x08002891
 8002848:	0800293f 	.word	0x0800293f
 800284c:	0800293f 	.word	0x0800293f
 8002850:	0800293f 	.word	0x0800293f
 8002854:	0800293f 	.word	0x0800293f
 8002858:	0800293f 	.word	0x0800293f
 800285c:	0800293f 	.word	0x0800293f
 8002860:	0800293f 	.word	0x0800293f
 8002864:	0800289d 	.word	0x0800289d
 8002868:	0800293f 	.word	0x0800293f
 800286c:	0800293f 	.word	0x0800293f
 8002870:	0800293f 	.word	0x0800293f
 8002874:	080028a9 	.word	0x080028a9
 8002878:	0800293f 	.word	0x0800293f
 800287c:	080028b5 	.word	0x080028b5
 8002880:	080028d1 	.word	0x080028d1
                    *output_pointer++ = '\b';
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60fa      	str	r2, [r7, #12]
 800288a:	2208      	movs	r2, #8
 800288c:	701a      	strb	r2, [r3, #0]
                    break;
 800288e:	e02c      	b.n	80028ea <parse_string+0x206>
                    *output_pointer++ = '\f';
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60fa      	str	r2, [r7, #12]
 8002896:	220c      	movs	r2, #12
 8002898:	701a      	strb	r2, [r3, #0]
                    break;
 800289a:	e026      	b.n	80028ea <parse_string+0x206>
                    *output_pointer++ = '\n';
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	60fa      	str	r2, [r7, #12]
 80028a2:	220a      	movs	r2, #10
 80028a4:	701a      	strb	r2, [r3, #0]
                    break;
 80028a6:	e020      	b.n	80028ea <parse_string+0x206>
                    *output_pointer++ = '\r';
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	60fa      	str	r2, [r7, #12]
 80028ae:	220d      	movs	r2, #13
 80028b0:	701a      	strb	r2, [r3, #0]
                    break;
 80028b2:	e01a      	b.n	80028ea <parse_string+0x206>
                    *output_pointer++ = '\t';
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60fa      	str	r2, [r7, #12]
 80028ba:	2209      	movs	r2, #9
 80028bc:	701a      	strb	r2, [r3, #0]
                    break;
 80028be:	e014      	b.n	80028ea <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	60f9      	str	r1, [r7, #12]
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
                    break;
 80028ce:	e00c      	b.n	80028ea <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	461a      	mov	r2, r3
 80028d6:	6a39      	ldr	r1, [r7, #32]
 80028d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028da:	f7ff fe1b 	bl	8002514 <utf16_literal_to_utf8>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02c      	beq.n	8002942 <parse_string+0x25e>
                    break;
 80028e8:	bf00      	nop
            }
            input_pointer += sequence_length;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ee:	4413      	add	r3, r2
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	f4ff af66 	bcc.w	80027c8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2210      	movs	r2, #16
 8002906:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	609a      	str	r2, [r3, #8]

    return true;
 8002926:	2301      	movs	r3, #1
 8002928:	e020      	b.n	800296c <parse_string+0x288>
        goto fail;
 800292a:	bf00      	nop
 800292c:	e00a      	b.n	8002944 <parse_string+0x260>
                    goto fail;
 800292e:	bf00      	nop
 8002930:	e008      	b.n	8002944 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8002932:	bf00      	nop
 8002934:	e006      	b.n	8002944 <parse_string+0x260>
            goto fail; /* allocation failure */
 8002936:	bf00      	nop
 8002938:	e004      	b.n	8002944 <parse_string+0x260>
                goto fail;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <parse_string+0x260>
                    goto fail;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <parse_string+0x260>
                        goto fail;
 8002942:	bf00      	nop

fail:
    if (output != NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	69f8      	ldr	r0, [r7, #28]
 8002950:	4798      	blx	r3
        output = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	461a      	mov	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	609a      	str	r2, [r3, #8]
    }

    return false;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <buffer_skip_whitespace+0x16>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	e02c      	b.n	80029e8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <buffer_skip_whitespace+0x2c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d306      	bcc.n	80029ae <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	e021      	b.n	80029e8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <buffer_skip_whitespace+0x5c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <buffer_skip_whitespace+0x5c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d9e9      	bls.n	80029a4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d104      	bne.n	80029e6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	1e5a      	subs	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80029e6:	687b      	ldr	r3, [r7, #4]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <skip_utf8_bom+0x1e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <skip_utf8_bom+0x1e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e01c      	b.n	8002a50 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <skip_utf8_bom+0x5a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	1d1a      	adds	r2, r3, #4
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d211      	bcs.n	8002a4e <skip_utf8_bom+0x5a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4413      	add	r3, r2
 8002a34:	2203      	movs	r2, #3
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <skip_utf8_bom+0x64>)
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00c ff5b 	bl	800f8f4 <strncmp>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	1cda      	adds	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002a4e:	687b      	ldr	r3, [r7, #4]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	080158f0 	.word	0x080158f0

08002a5c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e00c      	b.n	8002a8c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7fd fc0c 	bl	8000290 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f805 	bl	8002a94 <cJSON_ParseWithLengthOpts>
 8002a8a:	4603      	mov	r3, r0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	@ 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002aa2:	f107 0318 	add.w	r3, r7, #24
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	615a      	str	r2, [r3, #20]
 8002ab4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8002aba:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <cJSON_ParseWithLengthOpts+0x12c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc0 <cJSON_ParseWithLengthOpts+0x12c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d042      	beq.n	8002b52 <cJSON_ParseWithLengthOpts+0xbe>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03f      	beq.n	8002b52 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002ade:	4a39      	ldr	r2, [pc, #228]	@ (8002bc4 <cJSON_ParseWithLengthOpts+0x130>)
 8002ae0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002aea:	4836      	ldr	r0, [pc, #216]	@ (8002bc4 <cJSON_ParseWithLengthOpts+0x130>)
 8002aec:	f7ff fb76 	bl	80021dc <cJSON_New_Item>
 8002af0:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02e      	beq.n	8002b56 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002af8:	f107 0318 	add.w	r3, r7, #24
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff79 	bl	80029f4 <skip_utf8_bom>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff35 	bl	8002974 <buffer_skip_whitespace>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b10:	f000 f868 	bl	8002be4 <parse_value>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01f      	beq.n	8002b5a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002b20:	f107 0318 	add.w	r3, r7, #24
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff25 	bl	8002974 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d215      	bcs.n	8002b5e <cJSON_ParseWithLengthOpts+0xca>
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b50:	e031      	b.n	8002bb6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002b52:	bf00      	nop
 8002b54:	e004      	b.n	8002b60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002b5e:	bf00      	nop

fail:
    if (item != NULL)
 8002b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002b66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002b68:	f7ff fb4e 	bl	8002208 <cJSON_Delete>
    }

    if (value != NULL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d202      	bcs.n	8002b88 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e005      	b.n	8002b94 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <cJSON_ParseWithLengthOpts+0x12c>)
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bb0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3738      	adds	r7, #56	@ 0x38
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000454 	.word	0x20000454
 8002bc4:	20000004 	.word	0x20000004

08002bc8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff41 	bl	8002a5c <cJSON_ParseWithOpts>
 8002bda:	4603      	mov	r3, r0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <parse_value+0x18>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <parse_value+0x1c>
    {
        return false; /* no input */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e0d2      	b.n	8002da6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01d      	beq.n	8002c42 <parse_value+0x5e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d816      	bhi.n	8002c42 <parse_value+0x5e>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	2204      	movs	r2, #4
 8002c20:	4963      	ldr	r1, [pc, #396]	@ (8002db0 <parse_value+0x1cc>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00c fe66 	bl	800f8f4 <strncmp>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	1d1a      	adds	r2, r3, #4
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	609a      	str	r2, [r3, #8]
        return true;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0b1      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01d      	beq.n	8002c84 <parse_value+0xa0>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	1d5a      	adds	r2, r3, #5
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d816      	bhi.n	8002c84 <parse_value+0xa0>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4413      	add	r3, r2
 8002c60:	2205      	movs	r2, #5
 8002c62:	4954      	ldr	r1, [pc, #336]	@ (8002db4 <parse_value+0x1d0>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00c fe45 	bl	800f8f4 <strncmp>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	1d5a      	adds	r2, r3, #5
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	609a      	str	r2, [r3, #8]
        return true;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e090      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d020      	beq.n	8002ccc <parse_value+0xe8>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d819      	bhi.n	8002ccc <parse_value+0xe8>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4944      	ldr	r1, [pc, #272]	@ (8002db8 <parse_value+0x1d4>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f00c fe24 	bl	800f8f4 <strncmp>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	1d1a      	adds	r2, r3, #4
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	609a      	str	r2, [r3, #8]
        return true;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e06c      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <parse_value+0x116>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d20d      	bcs.n	8002cfa <parse_value+0x116>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b22      	cmp	r3, #34	@ 0x22
 8002cec:	d105      	bne.n	8002cfa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002cee:	6839      	ldr	r1, [r7, #0]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fcf7 	bl	80026e4 <parse_string>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	e055      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <parse_value+0x164>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d21d      	bcs.n	8002d48 <parse_value+0x164>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b2d      	cmp	r3, #45	@ 0x2d
 8002d1a:	d00f      	beq.n	8002d3c <parse_value+0x158>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b2f      	cmp	r3, #47	@ 0x2f
 8002d2a:	d90d      	bls.n	8002d48 <parse_value+0x164>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b39      	cmp	r3, #57	@ 0x39
 8002d3a:	d805      	bhi.n	8002d48 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff faba 	bl	80022b8 <parse_number>
 8002d44:	4603      	mov	r3, r0
 8002d46:	e02e      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d013      	beq.n	8002d76 <parse_value+0x192>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d20d      	bcs.n	8002d76 <parse_value+0x192>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4413      	add	r3, r2
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b5b      	cmp	r3, #91	@ 0x5b
 8002d68:	d105      	bne.n	8002d76 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f825 	bl	8002dbc <parse_array>
 8002d72:	4603      	mov	r3, r0
 8002d74:	e017      	b.n	8002da6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <parse_value+0x1c0>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d20d      	bcs.n	8002da4 <parse_value+0x1c0>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b7b      	cmp	r3, #123	@ 0x7b
 8002d96:	d105      	bne.n	8002da4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8d2 	bl	8002f44 <parse_object>
 8002da0:	4603      	mov	r3, r0
 8002da2:	e000      	b.n	8002da6 <parse_value+0x1c2>
    }

    return false;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	080158c4 	.word	0x080158c4
 8002db4:	080158f4 	.word	0x080158f4
 8002db8:	080158fc 	.word	0x080158fc

08002dbc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dd6:	d301      	bcc.n	8002ddc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e0af      	b.n	8002f3c <parse_array+0x180>
    }
    input_buffer->depth++;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b5b      	cmp	r3, #91	@ 0x5b
 8002df4:	f040 8094 	bne.w	8002f20 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f7ff fdb6 	bl	8002974 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <parse_array+0x6e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d207      	bcs.n	8002e2a <parse_array+0x6e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b5d      	cmp	r3, #93	@ 0x5d
 8002e28:	d061      	beq.n	8002eee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <parse_array+0x80>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d305      	bcc.n	8002e48 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]
        goto fail;
 8002e46:	e072      	b.n	8002f2e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	3310      	adds	r3, #16
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f9c0 	bl	80021dc <cJSON_New_Item>
 8002e5c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05f      	beq.n	8002f24 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e007      	b.n	8002e84 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	f7ff fd70 	bl	8002974 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	6938      	ldr	r0, [r7, #16]
 8002e98:	f7ff fea4 	bl	8002be4 <parse_value>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d042      	beq.n	8002f28 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f7ff fd66 	bl	8002974 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <parse_array+0x10e>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d207      	bcs.n	8002eca <parse_array+0x10e>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b2c      	cmp	r3, #44	@ 0x2c
 8002ec8:	d0c3      	beq.n	8002e52 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02d      	beq.n	8002f2c <parse_array+0x170>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d227      	bcs.n	8002f2c <parse_array+0x170>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b5d      	cmp	r3, #93	@ 0x5d
 8002eea:	d11f      	bne.n	8002f2c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002eec:	e000      	b.n	8002ef0 <parse_array+0x134>
        goto success;
 8002eee:	bf00      	nop
    input_buffer->depth--;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <parse_array+0x14a>
        head->prev = current_item;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	609a      	str	r2, [r3, #8]

    return true;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e00d      	b.n	8002f3c <parse_array+0x180>
        goto fail;
 8002f20:	bf00      	nop
 8002f22:	e004      	b.n	8002f2e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <parse_array+0x172>
        goto fail; /* expected end of array */
 8002f2c:	bf00      	nop

fail:
    if (head != NULL)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f7ff f967 	bl	8002208 <cJSON_Delete>
    }

    return false;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f5e:	d301      	bcc.n	8002f64 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002f60:	2300      	movs	r3, #0
 8002f62:	e0f7      	b.n	8003154 <parse_object+0x210>
    }
    input_buffer->depth++;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80db 	beq.w	800312c <parse_object+0x1e8>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	f080 80d4 	bcs.w	800312c <parse_object+0x1e8>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b7b      	cmp	r3, #123	@ 0x7b
 8002f92:	f040 80cb 	bne.w	800312c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f7ff fce7 	bl	8002974 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <parse_object+0x86>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d208      	bcs.n	8002fca <parse_object+0x86>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b7d      	cmp	r3, #125	@ 0x7d
 8002fc6:	f000 8098 	beq.w	80030fa <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <parse_object+0x98>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d305      	bcc.n	8002fe8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	609a      	str	r2, [r3, #8]
        goto fail;
 8002fe6:	e0ae      	b.n	8003146 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	3310      	adds	r3, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f8f0 	bl	80021dc <cJSON_New_Item>
 8002ffc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8095 	beq.w	8003130 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e007      	b.n	8003026 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8083 	beq.w	8003134 <parse_object+0x1f0>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d27b      	bcs.n	8003134 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003046:	6838      	ldr	r0, [r7, #0]
 8003048:	f7ff fc94 	bl	8002974 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	6938      	ldr	r0, [r7, #16]
 8003050:	f7ff fb48 	bl	80026e4 <parse_string>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d06e      	beq.n	8003138 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f7ff fc8a 	bl	8002974 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d063      	beq.n	800313c <parse_object+0x1f8>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d25d      	bcs.n	800313c <parse_object+0x1f8>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4413      	add	r3, r2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b3a      	cmp	r3, #58	@ 0x3a
 800308e:	d155      	bne.n	800313c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	f7ff fc6a 	bl	8002974 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7ff fd9e 	bl	8002be4 <parse_value>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d048      	beq.n	8003140 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f7ff fc60 	bl	8002974 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <parse_object+0x192>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d207      	bcs.n	80030d6 <parse_object+0x192>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b2c      	cmp	r3, #44	@ 0x2c
 80030d4:	d08d      	beq.n	8002ff2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d033      	beq.n	8003144 <parse_object+0x200>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d22d      	bcs.n	8003144 <parse_object+0x200>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b7d      	cmp	r3, #125	@ 0x7d
 80030f6:	d125      	bne.n	8003144 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 80030f8:	e000      	b.n	80030fc <parse_object+0x1b8>
        goto success; /* empty object */
 80030fa:	bf00      	nop
    input_buffer->depth--;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <parse_object+0x1ce>
        head->prev = current_item;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	609a      	str	r2, [r3, #8]
    return true;
 8003128:	2301      	movs	r3, #1
 800312a:	e013      	b.n	8003154 <parse_object+0x210>
        goto fail; /* not an object */
 800312c:	bf00      	nop
 800312e:	e00a      	b.n	8003146 <parse_object+0x202>
            goto fail; /* allocation failure */
 8003130:	bf00      	nop
 8003132:	e008      	b.n	8003146 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8003134:	bf00      	nop
 8003136:	e006      	b.n	8003146 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8003138:	bf00      	nop
 800313a:	e004      	b.n	8003146 <parse_object+0x202>
            goto fail; /* invalid object */
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <parse_object+0x202>
        goto fail; /* expected end of object */
 8003144:	bf00      	nop

fail:
    if (head != NULL)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7ff f85b 	bl	8002208 <cJSON_Delete>
    }

    return false;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8003172:	2300      	movs	r3, #0
 8003174:	e00d      	b.n	8003192 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 800317c:	e005      	b.n	800318a <cJSON_GetArraySize+0x2e>
    {
        size++;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f6      	bne.n	800317e <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8003190:	68bb      	ldr	r3, [r7, #8]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <get_array_item+0x18>
    {
        return NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e010      	b.n	80031d8 <get_array_item+0x3a>
    }

    current_child = array->child;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80031bc:	e005      	b.n	80031ca <get_array_item+0x2c>
    {
        index--;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <get_array_item+0x38>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f3      	bne.n	80031be <get_array_item+0x20>
    }

    return current_child;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da01      	bge.n	80031f8 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e005      	b.n	8003204 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ffce 	bl	800319e <get_array_item>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <get_object_item+0x1c>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <get_object_item+0x20>
    {
        return NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	e033      	b.n	8003294 <get_object_item+0x88>
    }

    current_element = object->child;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d017      	beq.n	8003268 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003238:	e002      	b.n	8003240 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01c      	beq.n	8003280 <get_object_item+0x74>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d018      	beq.n	8003280 <get_object_item+0x74>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4619      	mov	r1, r3
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f7fc ffbb 	bl	80001d0 <strcmp>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ec      	bne.n	800323a <get_object_item+0x2e>
 8003260:	e00e      	b.n	8003280 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <get_object_item+0x74>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4619      	mov	r1, r3
 8003274:	68b8      	ldr	r0, [r7, #8]
 8003276:	f7fe ff45 	bl	8002104 <case_insensitive_strcmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <get_object_item+0x82>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <get_object_item+0x86>
        return NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <get_object_item+0x88>
    }

    return current_element;
 8003292:	697b      	ldr	r3, [r7, #20]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80032a6:	2201      	movs	r2, #1
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffae 	bl	800320c <get_object_item>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <cJSON_IsArray>:

    return (item->type & 0xFF) == cJSON_String;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <cJSON_IsArray+0x12>
    {
        return false;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e007      	b.n	80032dc <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <cJSON_IsObject+0x12>
    {
        return false;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e007      	b.n	800330a <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b40      	cmp	r3, #64	@ 0x40
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800331c:	4b17      	ldr	r3, [pc, #92]	@ (800337c <MX_CAN1_Init+0x64>)
 800331e:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <MX_CAN1_Init+0x68>)
 8003320:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8003322:	4b16      	ldr	r3, [pc, #88]	@ (800337c <MX_CAN1_Init+0x64>)
 8003324:	2202      	movs	r2, #2
 8003326:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003328:	4b14      	ldr	r3, [pc, #80]	@ (800337c <MX_CAN1_Init+0x64>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800332e:	4b13      	ldr	r3, [pc, #76]	@ (800337c <MX_CAN1_Init+0x64>)
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <MX_CAN1_Init+0x64>)
 8003336:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800333a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800333c:	4b0f      	ldr	r3, [pc, #60]	@ (800337c <MX_CAN1_Init+0x64>)
 800333e:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8003342:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003344:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <MX_CAN1_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800334a:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <MX_CAN1_Init+0x64>)
 800334c:	2200      	movs	r2, #0
 800334e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003350:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <MX_CAN1_Init+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <MX_CAN1_Init+0x64>)
 8003358:	2200      	movs	r2, #0
 800335a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800335c:	4b07      	ldr	r3, [pc, #28]	@ (800337c <MX_CAN1_Init+0x64>)
 800335e:	2200      	movs	r2, #0
 8003360:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <MX_CAN1_Init+0x64>)
 8003364:	2200      	movs	r2, #0
 8003366:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003368:	4804      	ldr	r0, [pc, #16]	@ (800337c <MX_CAN1_Init+0x64>)
 800336a:	f006 fbeb 	bl	8009b44 <HAL_CAN_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003374:	f001 f976 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000045c 	.word	0x2000045c
 8003380:	40006400 	.word	0x40006400

08003384 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003388:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <MX_CAN2_Init+0x64>)
 800338a:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <MX_CAN2_Init+0x68>)
 800338c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800338e:	4b16      	ldr	r3, [pc, #88]	@ (80033e8 <MX_CAN2_Init+0x64>)
 8003390:	2202      	movs	r2, #2
 8003392:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <MX_CAN2_Init+0x64>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800339a:	4b13      	ldr	r3, [pc, #76]	@ (80033e8 <MX_CAN2_Init+0x64>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033a2:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80033a6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_6TQ;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033aa:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80033ae:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80033b0:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80033c8:	4b07      	ldr	r3, [pc, #28]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80033d4:	4804      	ldr	r0, [pc, #16]	@ (80033e8 <MX_CAN2_Init+0x64>)
 80033d6:	f006 fbb5 	bl	8009b44 <HAL_CAN_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80033e0:	f001 f940 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000484 	.word	0x20000484
 80033ec:	40006800 	.word	0x40006800

080033f0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	@ 0x38
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a52      	ldr	r2, [pc, #328]	@ (8003558 <HAL_CAN_MspInit+0x168>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d155      	bne.n	80034be <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003412:	4b52      	ldr	r3, [pc, #328]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a50      	ldr	r2, [pc, #320]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 800341a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800341c:	4b4f      	ldr	r3, [pc, #316]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10d      	bne.n	8003440 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	4a4c      	ldr	r2, [pc, #304]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 800342e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003432:	6413      	str	r3, [r2, #64]	@ 0x40
 8003434:	4b4a      	ldr	r3, [pc, #296]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	4b46      	ldr	r3, [pc, #280]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	4a45      	ldr	r2, [pc, #276]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003450:	4b43      	ldr	r3, [pc, #268]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	4b3f      	ldr	r3, [pc, #252]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	4a3e      	ldr	r2, [pc, #248]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	6313      	str	r3, [r2, #48]	@ 0x30
 800346c:	4b3c      	ldr	r3, [pc, #240]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800348a:	2309      	movs	r3, #9
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	4833      	ldr	r0, [pc, #204]	@ (8003564 <HAL_CAN_MspInit+0x174>)
 8003496:	f007 fa35 	bl	800a904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800349a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80034ac:	2309      	movs	r3, #9
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	482c      	ldr	r0, [pc, #176]	@ (8003568 <HAL_CAN_MspInit+0x178>)
 80034b8:	f007 fa24 	bl	800a904 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80034bc:	e048      	b.n	8003550 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2a      	ldr	r2, [pc, #168]	@ (800356c <HAL_CAN_MspInit+0x17c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d143      	bne.n	8003550 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 80034d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d8:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 80034ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_CAN_MspInit+0x16c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10d      	bne.n	8003512 <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003500:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003504:	6413      	str	r3, [r2, #64]	@ 0x40
 8003506:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_CAN_MspInit+0x170>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800352e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003540:	2309      	movs	r3, #9
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003548:	4619      	mov	r1, r3
 800354a:	4807      	ldr	r0, [pc, #28]	@ (8003568 <HAL_CAN_MspInit+0x178>)
 800354c:	f007 f9da 	bl	800a904 <HAL_GPIO_Init>
}
 8003550:	bf00      	nop
 8003552:	3738      	adds	r7, #56	@ 0x38
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40006400 	.word	0x40006400
 800355c:	200004ac 	.word	0x200004ac
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40006800 	.word	0x40006800

08003570 <CAN_TX_Message>:
 * @retval: Tx_Error: send error; other: the mailbox which has been used, this parameter can be a CAN_TX_MAILBOX0,
 * 																						   CAN_TX_MAILBOX1,
 * 																						   CAN_TX_MAILBOX2.
 */
uint32_t CAN_TX_Message(uint8_t TxData[], uint8_t length)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]

	uint32_t TxMailboxNumber = 0x00000000U;    // 瀛樺偍鏈鍙戦�佹墍浣跨敤閭鐨勯偖绠卞彿
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]

	Tx_pHeader.StdId = 0x200;    // 浠ユID鍙戦��
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <CAN_TX_Message+0x58>)
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]
	Tx_pHeader.ExtId = 0x0000;    // 鎵╁睍ID锛堟澶勬棤鐢級
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <CAN_TX_Message+0x58>)
 800358a:	2200      	movs	r2, #0
 800358c:	605a      	str	r2, [r3, #4]
	Tx_pHeader.IDE = CAN_ID_STD;    // 鏍囧噯甯�
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <CAN_TX_Message+0x58>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
	Tx_pHeader.RTR = CAN_RTR_DATA;    // 鏁版嵁甯�
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <CAN_TX_Message+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
	Tx_pHeader.DLC = length;    // 鍙戦�佹暟鎹殑闀垮害
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <CAN_TX_Message+0x58>)
 800359e:	6113      	str	r3, [r2, #16]
	Tx_pHeader.TransmitGlobalTime = DISABLE;
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <CAN_TX_Message+0x58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	751a      	strb	r2, [r3, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &Tx_pHeader, TxData, &TxMailboxNumber) != HAL_OK)
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4906      	ldr	r1, [pc, #24]	@ (80035c8 <CAN_TX_Message+0x58>)
 80035ae:	4807      	ldr	r0, [pc, #28]	@ (80035cc <CAN_TX_Message+0x5c>)
 80035b0:	f006 fbc3 	bl	8009d3a <HAL_CAN_AddTxMessage>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <CAN_TX_Message+0x4e>
	{
		return Tx_Error;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <CAN_TX_Message+0x50>
	}
	return TxMailboxNumber;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200004b0 	.word	0x200004b0
 80035cc:	2000045c 	.word	0x2000045c

080035d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <MX_DMA_Init+0xe8>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	4a36      	ldr	r2, [pc, #216]	@ (80036b8 <MX_DMA_Init+0xe8>)
 80035e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e6:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <MX_DMA_Init+0xe8>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <MX_DMA_Init+0xe8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a2f      	ldr	r2, [pc, #188]	@ (80036b8 <MX_DMA_Init+0xe8>)
 80035fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <MX_DMA_Init+0xe8>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	200b      	movs	r0, #11
 8003614:	f006 fd3d 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003618:	200b      	movs	r0, #11
 800361a:	f006 fd56 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2100      	movs	r1, #0
 8003622:	200c      	movs	r0, #12
 8003624:	f006 fd35 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003628:	200c      	movs	r0, #12
 800362a:	f006 fd4e 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	2100      	movs	r1, #0
 8003632:	200d      	movs	r0, #13
 8003634:	f006 fd2d 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003638:	200d      	movs	r0, #13
 800363a:	f006 fd46 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	200f      	movs	r0, #15
 8003644:	f006 fd25 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003648:	200f      	movs	r0, #15
 800364a:	f006 fd3e 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	2010      	movs	r0, #16
 8003654:	f006 fd1d 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003658:	2010      	movs	r0, #16
 800365a:	f006 fd36 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2100      	movs	r1, #0
 8003662:	202f      	movs	r0, #47	@ 0x2f
 8003664:	f006 fd15 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003668:	202f      	movs	r0, #47	@ 0x2f
 800366a:	f006 fd2e 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	2038      	movs	r0, #56	@ 0x38
 8003674:	f006 fd0d 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003678:	2038      	movs	r0, #56	@ 0x38
 800367a:	f006 fd26 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	2039      	movs	r0, #57	@ 0x39
 8003684:	f006 fd05 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003688:	2039      	movs	r0, #57	@ 0x39
 800368a:	f006 fd1e 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	203a      	movs	r0, #58	@ 0x3a
 8003694:	f006 fcfd 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003698:	203a      	movs	r0, #58	@ 0x3a
 800369a:	f006 fd16 	bl	800a0ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	203b      	movs	r0, #59	@ 0x3b
 80036a4:	f006 fcf5 	bl	800a092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80036a8:	203b      	movs	r0, #59	@ 0x3b
 80036aa:	f006 fd0e 	bl	800a0ca <HAL_NVIC_EnableIRQ>

}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c2:	f107 0314 	add.w	r3, r7, #20
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <MX_GPIO_Init+0x104>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	4a39      	ldr	r2, [pc, #228]	@ (80037c0 <MX_GPIO_Init+0x104>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e2:	4b37      	ldr	r3, [pc, #220]	@ (80037c0 <MX_GPIO_Init+0x104>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <MX_GPIO_Init+0x104>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	4a32      	ldr	r2, [pc, #200]	@ (80037c0 <MX_GPIO_Init+0x104>)
 80036f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a2b      	ldr	r2, [pc, #172]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <MX_GPIO_Init+0x104>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <MX_GPIO_Init+0x104>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a24      	ldr	r2, [pc, #144]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4b1e      	ldr	r3, [pc, #120]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a1d      	ldr	r2, [pc, #116]	@ (80037c0 <MX_GPIO_Init+0x104>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <MX_GPIO_Init+0x104>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY3_Pin|RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 800375e:	2200      	movs	r2, #0
 8003760:	2138      	movs	r1, #56	@ 0x38
 8003762:	4818      	ldr	r0, [pc, #96]	@ (80037c4 <MX_GPIO_Init+0x108>)
 8003764:	f007 fa82 	bl	800ac6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 8003768:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800376c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	4811      	ldr	r0, [pc, #68]	@ (80037c4 <MX_GPIO_Init+0x108>)
 800377e:	f007 f8c1 	bl	800a904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin;
 8003782:	23c0      	movs	r3, #192	@ 0xc0
 8003784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4619      	mov	r1, r3
 8003794:	480c      	ldr	r0, [pc, #48]	@ (80037c8 <MX_GPIO_Init+0x10c>)
 8003796:	f007 f8b5 	bl	800a904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY3_Pin|RELAY2_Pin|RELAY1_Pin;
 800379a:	2338      	movs	r3, #56	@ 0x38
 800379c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379e:	2301      	movs	r3, #1
 80037a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <MX_GPIO_Init+0x108>)
 80037b2:	f007 f8a7 	bl	800a904 <HAL_GPIO_Init>

}
 80037b6:	bf00      	nop
 80037b8:	3728      	adds	r7, #40	@ 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	00000000 	.word	0x00000000

080037d0 <out_of_china>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @return 如果在中国境内返回0，否则返回1
 */
int out_of_china(double lon, double lat) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80037da:	ed87 1b00 	vstr	d1, [r7]
    if (lon < 72.004 || lon > 137.8347) {
 80037de:	a318      	add	r3, pc, #96	@ (adr r3, 8003840 <out_of_china+0x70>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037e8:	f7fd f988 	bl	8000afc <__aeabi_dcmplt>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <out_of_china+0x36>
 80037f2:	a315      	add	r3, pc, #84	@ (adr r3, 8003848 <out_of_china+0x78>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fc:	f7fd f99c 	bl	8000b38 <__aeabi_dcmpgt>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <out_of_china+0x3a>
        return 1;
 8003806:	2301      	movs	r3, #1
 8003808:	e016      	b.n	8003838 <out_of_china+0x68>
    }
    if (lat < 0.8293 || lat > 55.8271) {
 800380a:	a311      	add	r3, pc, #68	@ (adr r3, 8003850 <out_of_china+0x80>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003814:	f7fd f972 	bl	8000afc <__aeabi_dcmplt>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <out_of_china+0x62>
 800381e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003858 <out_of_china+0x88>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003828:	f7fd f986 	bl	8000b38 <__aeabi_dcmpgt>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <out_of_china+0x66>
        return 1;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <out_of_china+0x68>
    }
    return 0;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	89374bc7 	.word	0x89374bc7
 8003844:	40520041 	.word	0x40520041
 8003848:	dcc63f14 	.word	0xdcc63f14
 800384c:	40613ab5 	.word	0x40613ab5
 8003850:	27525461 	.word	0x27525461
 8003854:	3fea89a0 	.word	0x3fea89a0
 8003858:	69ad42c4 	.word	0x69ad42c4
 800385c:	404be9de 	.word	0x404be9de

08003860 <transform_latitude>:


double transform_latitude(double lon, double lat) {
 8003860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	ed87 0b02 	vstr	d0, [r7, #8]
 800386c:	ed87 1b00 	vstr	d1, [r7]
    double ret = -100.0 + 2.0 * lon + 3.0 * lat + 0.2 * lat * lat + 0.1 * lon * lat + 0.2 * sqrt(fabs(lon));
 8003870:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	f7fc fd18 	bl	80002ac <__adddf3>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	4bd3      	ldr	r3, [pc, #844]	@ (8003bd8 <transform_latitude+0x378>)
 800388a:	f7fc fd0d 	bl	80002a8 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	4bd0      	ldr	r3, [pc, #832]	@ (8003bdc <transform_latitude+0x37c>)
 800389c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a0:	f7fc feba 	bl	8000618 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4640      	mov	r0, r8
 80038aa:	4649      	mov	r1, r9
 80038ac:	f7fc fcfe 	bl	80002ac <__adddf3>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4690      	mov	r8, r2
 80038b6:	4699      	mov	r9, r3
 80038b8:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003bc0 <transform_latitude+0x360>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038c2:	f7fc fea9 	bl	8000618 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d2:	f7fc fea1 	bl	8000618 <__aeabi_dmul>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4640      	mov	r0, r8
 80038dc:	4649      	mov	r1, r9
 80038de:	f7fc fce5 	bl	80002ac <__adddf3>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	a3b7      	add	r3, pc, #732	@ (adr r3, 8003bc8 <transform_latitude+0x368>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f4:	f7fc fe90 	bl	8000618 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003904:	f7fc fe88 	bl	8000618 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4640      	mov	r0, r8
 800390e:	4649      	mov	r1, r9
 8003910:	f7fc fccc 	bl	80002ac <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4690      	mov	r8, r2
 800391a:	4699      	mov	r9, r3
 800391c:	68bc      	ldr	r4, [r7, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003924:	ec45 4b10 	vmov	d0, r4, r5
 8003928:	f00f f964 	bl	8012bf4 <sqrt>
 800392c:	ec51 0b10 	vmov	r0, r1, d0
 8003930:	a3a3      	add	r3, pc, #652	@ (adr r3, 8003bc0 <transform_latitude+0x360>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fe6f 	bl	8000618 <__aeabi_dmul>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fc fcb3 	bl	80002ac <__adddf3>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	4ba3      	ldr	r3, [pc, #652]	@ (8003be0 <transform_latitude+0x380>)
 8003954:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003958:	f7fc fe5e 	bl	8000618 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	a39a      	add	r3, pc, #616	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fe55 	bl	8000618 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	ec43 2b17 	vmov	d7, r2, r3
 8003976:	eeb0 0a47 	vmov.f32	s0, s14
 800397a:	eef0 0a67 	vmov.f32	s1, s15
 800397e:	f00f f9c3 	bl	8012d08 <sin>
 8003982:	ec51 0b10 	vmov	r0, r1, d0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b96      	ldr	r3, [pc, #600]	@ (8003be4 <transform_latitude+0x384>)
 800398c:	f7fc fe44 	bl	8000618 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	f7fc fc84 	bl	80002ac <__adddf3>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	a388      	add	r3, pc, #544	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fc fe31 	bl	8000618 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	ec43 2b17 	vmov	d7, r2, r3
 80039be:	eeb0 0a47 	vmov.f32	s0, s14
 80039c2:	eef0 0a67 	vmov.f32	s1, s15
 80039c6:	f00f f99f 	bl	8012d08 <sin>
 80039ca:	ec51 0b10 	vmov	r0, r1, d0
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	4b84      	ldr	r3, [pc, #528]	@ (8003be4 <transform_latitude+0x384>)
 80039d4:	f7fc fe20 	bl	8000618 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4620      	mov	r0, r4
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fc fc64 	bl	80002ac <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	f7fc fc5c 	bl	80002ac <__adddf3>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <transform_latitude+0x37c>)
 8003a02:	f7fc ff33 	bl	800086c <__aeabi_ddiv>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a0e:	f7fc fc4d 	bl	80002ac <__adddf3>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(lat * PI) + 40.0 * sin(lat / 3.0 * PI)) * 2.0 / 3.0;
 8003a1a:	a36d      	add	r3, pc, #436	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a24:	f7fc fdf8 	bl	8000618 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	ec43 2b17 	vmov	d7, r2, r3
 8003a30:	eeb0 0a47 	vmov.f32	s0, s14
 8003a34:	eef0 0a67 	vmov.f32	s1, s15
 8003a38:	f00f f966 	bl	8012d08 <sin>
 8003a3c:	ec51 0b10 	vmov	r0, r1, d0
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	4b67      	ldr	r3, [pc, #412]	@ (8003be4 <transform_latitude+0x384>)
 8003a46:	f7fc fde7 	bl	8000618 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <transform_latitude+0x37c>)
 8003a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a5c:	f7fc ff06 	bl	800086c <__aeabi_ddiv>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	a359      	add	r3, pc, #356	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fdd3 	bl	8000618 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	ec43 2b17 	vmov	d7, r2, r3
 8003a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a7e:	eef0 0a67 	vmov.f32	s1, s15
 8003a82:	f00f f941 	bl	8012d08 <sin>
 8003a86:	ec51 0b10 	vmov	r0, r1, d0
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	4b56      	ldr	r3, [pc, #344]	@ (8003be8 <transform_latitude+0x388>)
 8003a90:	f7fc fdc2 	bl	8000618 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4620      	mov	r0, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	f7fc fc06 	bl	80002ac <__adddf3>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	f7fc fbfe 	bl	80002ac <__adddf3>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	4b47      	ldr	r3, [pc, #284]	@ (8003bdc <transform_latitude+0x37c>)
 8003abe:	f7fc fed5 	bl	800086c <__aeabi_ddiv>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003aca:	f7fc fbef 	bl	80002ac <__adddf3>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (160.0 * sin(lat / 12.0 * PI) + 320 * sin(lat * PI / 30.0)) * 2.0 / 3.0;
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b44      	ldr	r3, [pc, #272]	@ (8003bec <transform_latitude+0x38c>)
 8003adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ae0:	f7fc fec4 	bl	800086c <__aeabi_ddiv>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	a338      	add	r3, pc, #224	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fd91 	bl	8000618 <__aeabi_dmul>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	ec43 2b17 	vmov	d7, r2, r3
 8003afe:	eeb0 0a47 	vmov.f32	s0, s14
 8003b02:	eef0 0a67 	vmov.f32	s1, s15
 8003b06:	f00f f8ff 	bl	8012d08 <sin>
 8003b0a:	ec51 0b10 	vmov	r0, r1, d0
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	4b37      	ldr	r3, [pc, #220]	@ (8003bf0 <transform_latitude+0x390>)
 8003b14:	f7fc fd80 	bl	8000618 <__aeabi_dmul>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	a32b      	add	r3, pc, #172	@ (adr r3, 8003bd0 <transform_latitude+0x370>)
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b2a:	f7fc fd75 	bl	8000618 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf4 <transform_latitude+0x394>)
 8003b3c:	f7fc fe96 	bl	800086c <__aeabi_ddiv>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	ec43 2b17 	vmov	d7, r2, r3
 8003b48:	eeb0 0a47 	vmov.f32	s0, s14
 8003b4c:	eef0 0a67 	vmov.f32	s1, s15
 8003b50:	f00f f8da 	bl	8012d08 <sin>
 8003b54:	ec51 0b10 	vmov	r0, r1, d0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <transform_latitude+0x398>)
 8003b5e:	f7fc fd5b 	bl	8000618 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fb9f 	bl	80002ac <__adddf3>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	f7fc fb97 	bl	80002ac <__adddf3>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <transform_latitude+0x37c>)
 8003b8c:	f7fc fe6e 	bl	800086c <__aeabi_ddiv>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b98:	f7fc fb88 	bl	80002ac <__adddf3>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return ret;
 8003ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba8:	ec43 2b17 	vmov	d7, r2, r3
}
 8003bac:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb0:	eef0 0a67 	vmov.f32	s1, s15
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bbc:	f3af 8000 	nop.w
 8003bc0:	9999999a 	.word	0x9999999a
 8003bc4:	3fc99999 	.word	0x3fc99999
 8003bc8:	9999999a 	.word	0x9999999a
 8003bcc:	3fb99999 	.word	0x3fb99999
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	400921fb 	.word	0x400921fb
 8003bd8:	40590000 	.word	0x40590000
 8003bdc:	40080000 	.word	0x40080000
 8003be0:	40180000 	.word	0x40180000
 8003be4:	40340000 	.word	0x40340000
 8003be8:	40440000 	.word	0x40440000
 8003bec:	40280000 	.word	0x40280000
 8003bf0:	40640000 	.word	0x40640000
 8003bf4:	403e0000 	.word	0x403e0000
 8003bf8:	40740000 	.word	0x40740000
 8003bfc:	00000000 	.word	0x00000000

08003c00 <transform_longitude>:

double transform_longitude(double lon, double lat) {
 8003c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	ed87 0b02 	vstr	d0, [r7, #8]
 8003c0c:	ed87 1b00 	vstr	d1, [r7]
    double ret = 300.0 + lon + 2.0 * lat + 0.1 * lon * lon + 0.1 * lon * lat + 0.1 * sqrt(fabs(lon));
 8003c10:	a3d3      	add	r3, pc, #844	@ (adr r3, 8003f60 <transform_longitude+0x360>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c1a:	f7fc fb47 	bl	80002ac <__adddf3>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4690      	mov	r8, r2
 8003c24:	4699      	mov	r9, r3
 8003c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	f7fc fb3d 	bl	80002ac <__adddf3>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4640      	mov	r0, r8
 8003c38:	4649      	mov	r1, r9
 8003c3a:	f7fc fb37 	bl	80002ac <__adddf3>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	a3ce      	add	r3, pc, #824	@ (adr r3, 8003f80 <transform_longitude+0x380>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c50:	f7fc fce2 	bl	8000618 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c60:	f7fc fcda 	bl	8000618 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	f7fc fb1e 	bl	80002ac <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4690      	mov	r8, r2
 8003c76:	4699      	mov	r9, r3
 8003c78:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003f80 <transform_longitude+0x380>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c82:	f7fc fcc9 	bl	8000618 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c92:	f7fc fcc1 	bl	8000618 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	f7fc fb05 	bl	80002ac <__adddf3>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4690      	mov	r8, r2
 8003ca8:	4699      	mov	r9, r3
 8003caa:	68bc      	ldr	r4, [r7, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003cb2:	ec45 4b10 	vmov	d0, r4, r5
 8003cb6:	f00e ff9d 	bl	8012bf4 <sqrt>
 8003cba:	ec51 0b10 	vmov	r0, r1, d0
 8003cbe:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003f80 <transform_longitude+0x380>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fca8 	bl	8000618 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4640      	mov	r0, r8
 8003cce:	4649      	mov	r1, r9
 8003cd0:	f7fc faec 	bl	80002ac <__adddf3>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	4ba1      	ldr	r3, [pc, #644]	@ (8003f68 <transform_longitude+0x368>)
 8003ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ce6:	f7fc fc97 	bl	8000618 <__aeabi_dmul>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	a397      	add	r3, pc, #604	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fc8e 	bl	8000618 <__aeabi_dmul>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	ec43 2b17 	vmov	d7, r2, r3
 8003d04:	eeb0 0a47 	vmov.f32	s0, s14
 8003d08:	eef0 0a67 	vmov.f32	s1, s15
 8003d0c:	f00e fffc 	bl	8012d08 <sin>
 8003d10:	ec51 0b10 	vmov	r0, r1, d0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	4b94      	ldr	r3, [pc, #592]	@ (8003f6c <transform_longitude+0x36c>)
 8003d1a:	f7fc fc7d 	bl	8000618 <__aeabi_dmul>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4614      	mov	r4, r2
 8003d24:	461d      	mov	r5, r3
 8003d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	f7fc fabd 	bl	80002ac <__adddf3>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	a385      	add	r3, pc, #532	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fc6a 	bl	8000618 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	ec43 2b17 	vmov	d7, r2, r3
 8003d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d50:	eef0 0a67 	vmov.f32	s1, s15
 8003d54:	f00e ffd8 	bl	8012d08 <sin>
 8003d58:	ec51 0b10 	vmov	r0, r1, d0
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	4b82      	ldr	r3, [pc, #520]	@ (8003f6c <transform_longitude+0x36c>)
 8003d62:	f7fc fc59 	bl	8000618 <__aeabi_dmul>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7fc fa9d 	bl	80002ac <__adddf3>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	f7fc fa95 	bl	80002ac <__adddf3>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	4b78      	ldr	r3, [pc, #480]	@ (8003f70 <transform_longitude+0x370>)
 8003d90:	f7fc fd6c 	bl	800086c <__aeabi_ddiv>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d9c:	f7fc fa86 	bl	80002ac <__adddf3>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(lon * PI) + 40.0 * sin(lon / 3.0 * PI)) * 2.0 / 3.0;
 8003da8:	a369      	add	r3, pc, #420	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003db2:	f7fc fc31 	bl	8000618 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	ec43 2b17 	vmov	d7, r2, r3
 8003dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc2:	eef0 0a67 	vmov.f32	s1, s15
 8003dc6:	f00e ff9f 	bl	8012d08 <sin>
 8003dca:	ec51 0b10 	vmov	r0, r1, d0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <transform_longitude+0x36c>)
 8003dd4:	f7fc fc20 	bl	8000618 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	4b62      	ldr	r3, [pc, #392]	@ (8003f70 <transform_longitude+0x370>)
 8003de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dea:	f7fc fd3f 	bl	800086c <__aeabi_ddiv>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	a356      	add	r3, pc, #344	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fc0c 	bl	8000618 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	ec43 2b17 	vmov	d7, r2, r3
 8003e08:	eeb0 0a47 	vmov.f32	s0, s14
 8003e0c:	eef0 0a67 	vmov.f32	s1, s15
 8003e10:	f00e ff7a 	bl	8012d08 <sin>
 8003e14:	ec51 0b10 	vmov	r0, r1, d0
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <transform_longitude+0x374>)
 8003e1e:	f7fc fbfb 	bl	8000618 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f7fc fa3f 	bl	80002ac <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	f7fc fa37 	bl	80002ac <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	4b49      	ldr	r3, [pc, #292]	@ (8003f70 <transform_longitude+0x370>)
 8003e4c:	f7fc fd0e 	bl	800086c <__aeabi_ddiv>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e58:	f7fc fa28 	bl	80002ac <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (150.0 * sin(lon / 12.0 * PI) + 300.0 * sin(lon / 30.0 * PI)) * 2.0 / 3.0;
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	4b43      	ldr	r3, [pc, #268]	@ (8003f78 <transform_longitude+0x378>)
 8003e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e6e:	f7fc fcfd 	bl	800086c <__aeabi_ddiv>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	a335      	add	r3, pc, #212	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc fbca 	bl	8000618 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	ec43 2b17 	vmov	d7, r2, r3
 8003e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e90:	eef0 0a67 	vmov.f32	s1, s15
 8003e94:	f00e ff38 	bl	8012d08 <sin>
 8003e98:	ec51 0b10 	vmov	r0, r1, d0
 8003e9c:	a32e      	add	r3, pc, #184	@ (adr r3, 8003f58 <transform_longitude+0x358>)
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f7fc fbb9 	bl	8000618 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4614      	mov	r4, r2
 8003eac:	461d      	mov	r5, r3
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	4b32      	ldr	r3, [pc, #200]	@ (8003f7c <transform_longitude+0x37c>)
 8003eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eb8:	f7fc fcd8 	bl	800086c <__aeabi_ddiv>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	a322      	add	r3, pc, #136	@ (adr r3, 8003f50 <transform_longitude+0x350>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc fba5 	bl	8000618 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	ec43 2b17 	vmov	d7, r2, r3
 8003ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eda:	eef0 0a67 	vmov.f32	s1, s15
 8003ede:	f00e ff13 	bl	8012d08 <sin>
 8003ee2:	ec51 0b10 	vmov	r0, r1, d0
 8003ee6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003f60 <transform_longitude+0x360>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc fb94 	bl	8000618 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc f9d8 	bl	80002ac <__adddf3>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	f7fc f9d0 	bl	80002ac <__adddf3>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <transform_longitude+0x370>)
 8003f1a:	f7fc fca7 	bl	800086c <__aeabi_ddiv>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f26:	f7fc f9c1 	bl	80002ac <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return ret;
 8003f32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f36:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f3e:	eef0 0a67 	vmov.f32	s1, s15
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	54442d18 	.word	0x54442d18
 8003f54:	400921fb 	.word	0x400921fb
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	4062c000 	.word	0x4062c000
 8003f60:	00000000 	.word	0x00000000
 8003f64:	4072c000 	.word	0x4072c000
 8003f68:	40180000 	.word	0x40180000
 8003f6c:	40340000 	.word	0x40340000
 8003f70:	40080000 	.word	0x40080000
 8003f74:	40440000 	.word	0x40440000
 8003f78:	40280000 	.word	0x40280000
 8003f7c:	403e0000 	.word	0x403e0000
 8003f80:	9999999a 	.word	0x9999999a
 8003f84:	3fb99999 	.word	0x3fb99999

08003f88 <wgs84_to_gcj02>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_gcj02(double lon, double lat, double *output) {
 8003f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	b090      	sub	sp, #64	@ 0x40
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	ed87 0b04 	vstr	d0, [r7, #16]
 8003f98:	ed87 1b02 	vstr	d1, [r7, #8]
 8003f9c:	6078      	str	r0, [r7, #4]
    if (out_of_china(lon, lat) == 0) {
 8003f9e:	ed97 1b02 	vldr	d1, [r7, #8]
 8003fa2:	ed97 0b04 	vldr	d0, [r7, #16]
 8003fa6:	f7ff fc13 	bl	80037d0 <out_of_china>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 80f5 	bne.w	800419c <wgs84_to_gcj02+0x214>
        double d_lat = transform_latitude(lon - 105.0, lat - 35.0);
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <wgs84_to_gcj02+0x260>)
 8003fb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fbc:	f7fc f974 	bl	80002a8 <__aeabi_dsub>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	ec43 2b18 	vmov	d8, r2, r3
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	4b87      	ldr	r3, [pc, #540]	@ (80041ec <wgs84_to_gcj02+0x264>)
 8003fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fd2:	f7fc f969 	bl	80002a8 <__aeabi_dsub>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	ec43 2b17 	vmov	d7, r2, r3
 8003fde:	eeb0 1a47 	vmov.f32	s2, s14
 8003fe2:	eef0 1a67 	vmov.f32	s3, s15
 8003fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8003fea:	eef0 0a68 	vmov.f32	s1, s17
 8003fee:	f7ff fc37 	bl	8003860 <transform_latitude>
 8003ff2:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
        double d_lon = transform_longitude(lon - 105.0, lat - 35.0);
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80041e8 <wgs84_to_gcj02+0x260>)
 8003ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004000:	f7fc f952 	bl	80002a8 <__aeabi_dsub>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	ec43 2b18 	vmov	d8, r2, r3
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <wgs84_to_gcj02+0x264>)
 8004012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004016:	f7fc f947 	bl	80002a8 <__aeabi_dsub>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	ec43 2b17 	vmov	d7, r2, r3
 8004022:	eeb0 1a47 	vmov.f32	s2, s14
 8004026:	eef0 1a67 	vmov.f32	s3, s15
 800402a:	eeb0 0a48 	vmov.f32	s0, s16
 800402e:	eef0 0a68 	vmov.f32	s1, s17
 8004032:	f7ff fde5 	bl	8003c00 <transform_longitude>
 8004036:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
        double rad_lat = lat / 180.0 * PI;
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	4b6c      	ldr	r3, [pc, #432]	@ (80041f0 <wgs84_to_gcj02+0x268>)
 8004040:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004044:	f7fc fc12 	bl	800086c <__aeabi_ddiv>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	a35d      	add	r3, pc, #372	@ (adr r3, 80041c8 <wgs84_to_gcj02+0x240>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc fadf 	bl	8000618 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double magic = sin(rad_lat);
 8004062:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8004066:	f00e fe4f 	bl	8012d08 <sin>
 800406a:	ed87 0b08 	vstr	d0, [r7, #32]
        magic = 1 - EE * magic * magic;
 800406e:	a358      	add	r3, pc, #352	@ (adr r3, 80041d0 <wgs84_to_gcj02+0x248>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004078:	f7fc face 	bl	8000618 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004088:	f7fc fac6 	bl	8000618 <__aeabi_dmul>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	f04f 0000 	mov.w	r0, #0
 8004094:	4957      	ldr	r1, [pc, #348]	@ (80041f4 <wgs84_to_gcj02+0x26c>)
 8004096:	f7fc f907 	bl	80002a8 <__aeabi_dsub>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double sqrt_magic = sqrt(magic);
 80040a2:	ed97 0b08 	vldr	d0, [r7, #32]
 80040a6:	f00e fda5 	bl	8012bf4 <sqrt>
 80040aa:	ed87 0b06 	vstr	d0, [r7, #24]
        d_lat = (d_lat * 180.0) / ((A * (1 - EE)) / (magic * sqrt_magic) * PI);
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	4b4f      	ldr	r3, [pc, #316]	@ (80041f0 <wgs84_to_gcj02+0x268>)
 80040b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80040b8:	f7fc faae 	bl	8000618 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	461d      	mov	r5, r3
 80040c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040cc:	f7fc faa4 	bl	8000618 <__aeabi_dmul>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	a140      	add	r1, pc, #256	@ (adr r1, 80041d8 <wgs84_to_gcj02+0x250>)
 80040d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040da:	f7fc fbc7 	bl	800086c <__aeabi_ddiv>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	a338      	add	r3, pc, #224	@ (adr r3, 80041c8 <wgs84_to_gcj02+0x240>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f7fc fa94 	bl	8000618 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4620      	mov	r0, r4
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc fbb8 	bl	800086c <__aeabi_ddiv>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        d_lon = (d_lon * 180.0) / (A / sqrt_magic * cos(rad_lat) * PI);
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	4b39      	ldr	r3, [pc, #228]	@ (80041f0 <wgs84_to_gcj02+0x268>)
 800410a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800410e:	f7fc fa83 	bl	8000618 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4614      	mov	r4, r2
 8004118:	461d      	mov	r5, r3
 800411a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411e:	a130      	add	r1, pc, #192	@ (adr r1, 80041e0 <wgs84_to_gcj02+0x258>)
 8004120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004124:	f7fc fba2 	bl	800086c <__aeabi_ddiv>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4690      	mov	r8, r2
 800412e:	4699      	mov	r9, r3
 8004130:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8004134:	f00e fd8c 	bl	8012c50 <cos>
 8004138:	ec53 2b10 	vmov	r2, r3, d0
 800413c:	4640      	mov	r0, r8
 800413e:	4649      	mov	r1, r9
 8004140:	f7fc fa6a 	bl	8000618 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	a31e      	add	r3, pc, #120	@ (adr r3, 80041c8 <wgs84_to_gcj02+0x240>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc fa61 	bl	8000618 <__aeabi_dmul>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc fb85 	bl	800086c <__aeabi_ddiv>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        output[0] = lon + d_lon;
 800416a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800416e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004172:	f7fc f89b 	bl	80002ac <__adddf3>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	e9c1 2300 	strd	r2, r3, [r1]
        output[1] = lat + d_lat;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f103 0408 	add.w	r4, r3, #8
 8004186:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800418a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800418e:	f7fc f88d 	bl	80002ac <__adddf3>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	e9c4 2300 	strd	r2, r3, [r4]
    } else {
        output[0] = lon;
        output[1] = lat;
    }
}
 800419a:	e00b      	b.n	80041b4 <wgs84_to_gcj02+0x22c>
        output[0] = lon;
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041a2:	e9c1 2300 	strd	r2, r3, [r1]
        output[1] = lat;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f103 0108 	add.w	r1, r3, #8
 80041ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80041b4:	bf00      	nop
 80041b6:	3740      	adds	r7, #64	@ 0x40
 80041b8:	46bd      	mov	sp, r7
 80041ba:	ecbd 8b02 	vpop	{d8}
 80041be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041c2:	bf00      	nop
 80041c4:	f3af 8000 	nop.w
 80041c8:	54442d18 	.word	0x54442d18
 80041cc:	400921fb 	.word	0x400921fb
 80041d0:	af80ef0b 	.word	0xaf80ef0b
 80041d4:	3f7b6a8f 	.word	0x3f7b6a8f
 80041d8:	2de355c1 	.word	0x2de355c1
 80041dc:	41582b10 	.word	0x41582b10
 80041e0:	40000000 	.word	0x40000000
 80041e4:	415854c1 	.word	0x415854c1
 80041e8:	405a4000 	.word	0x405a4000
 80041ec:	40418000 	.word	0x40418000
 80041f0:	40668000 	.word	0x40668000
 80041f4:	3ff00000 	.word	0x3ff00000

080041f8 <gcj02_to_bd09>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void gcj02_to_bd09(double lon, double lat, double *output) {
 80041f8:	b5b0      	push	{r4, r5, r7, lr}
 80041fa:	b08e      	sub	sp, #56	@ 0x38
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8004202:	ed87 1b02 	vstr	d1, [r7, #8]
 8004206:	6078      	str	r0, [r7, #4]
    double x = lon, y = lat;
 8004208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800420c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004214:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double z = sqrt(x * x + y * y) + 0.00002 * sin(y * X_PI);
 8004218:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800421c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004220:	f7fc f9fa 	bl	8000618 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004230:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004234:	f7fc f9f0 	bl	8000618 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc f834 	bl	80002ac <__adddf3>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	ec43 2b17 	vmov	d7, r2, r3
 800424c:	eeb0 0a47 	vmov.f32	s0, s14
 8004250:	eef0 0a67 	vmov.f32	s1, s15
 8004254:	f00e fcce 	bl	8012bf4 <sqrt>
 8004258:	ec55 4b10 	vmov	r4, r5, d0
 800425c:	a340      	add	r3, pc, #256	@ (adr r3, 8004360 <gcj02_to_bd09+0x168>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004266:	f7fc f9d7 	bl	8000618 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	ec43 2b17 	vmov	d7, r2, r3
 8004272:	eeb0 0a47 	vmov.f32	s0, s14
 8004276:	eef0 0a67 	vmov.f32	s1, s15
 800427a:	f00e fd45 	bl	8012d08 <sin>
 800427e:	ec51 0b10 	vmov	r0, r1, d0
 8004282:	a339      	add	r3, pc, #228	@ (adr r3, 8004368 <gcj02_to_bd09+0x170>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f7fc f9c6 	bl	8000618 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fc f80a 	bl	80002ac <__adddf3>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double theta = atan2(y, x) + 0.000003 * cos(x * X_PI);
 80042a0:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80042a4:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80042a8:	f00e fc04 	bl	8012ab4 <atan2>
 80042ac:	ec55 4b10 	vmov	r4, r5, d0
 80042b0:	a32b      	add	r3, pc, #172	@ (adr r3, 8004360 <gcj02_to_bd09+0x168>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80042ba:	f7fc f9ad 	bl	8000618 <__aeabi_dmul>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	ec43 2b17 	vmov	d7, r2, r3
 80042c6:	eeb0 0a47 	vmov.f32	s0, s14
 80042ca:	eef0 0a67 	vmov.f32	s1, s15
 80042ce:	f00e fcbf 	bl	8012c50 <cos>
 80042d2:	ec51 0b10 	vmov	r0, r1, d0
 80042d6:	a326      	add	r3, pc, #152	@ (adr r3, 8004370 <gcj02_to_bd09+0x178>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fc f99c 	bl	8000618 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fb ffe0 	bl	80002ac <__adddf3>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    output[0] = z * cos(theta) + 0.0065;
 80042f4:	ed97 0b06 	vldr	d0, [r7, #24]
 80042f8:	f00e fcaa 	bl	8012c50 <cos>
 80042fc:	ec51 0b10 	vmov	r0, r1, d0
 8004300:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004304:	f7fc f988 	bl	8000618 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	a319      	add	r3, pc, #100	@ (adr r3, 8004378 <gcj02_to_bd09+0x180>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fb ffc9 	bl	80002ac <__adddf3>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	e9c1 2300 	strd	r2, r3, [r1]
    output[1] = z * sin(theta) + 0.006;
 8004324:	ed97 0b06 	vldr	d0, [r7, #24]
 8004328:	f00e fcee 	bl	8012d08 <sin>
 800432c:	ec51 0b10 	vmov	r0, r1, d0
 8004330:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004334:	f7fc f970 	bl	8000618 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f103 0408 	add.w	r4, r3, #8
 8004346:	a30e      	add	r3, pc, #56	@ (adr r3, 8004380 <gcj02_to_bd09+0x188>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ffae 	bl	80002ac <__adddf3>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	e9c4 2300 	strd	r2, r3, [r4]
}
 8004358:	bf00      	nop
 800435a:	3738      	adds	r7, #56	@ 0x38
 800435c:	46bd      	mov	sp, r7
 800435e:	bdb0      	pop	{r4, r5, r7, pc}
 8004360:	77c7044e 	.word	0x77c7044e
 8004364:	404a2e10 	.word	0x404a2e10
 8004368:	88e368f1 	.word	0x88e368f1
 800436c:	3ef4f8b5 	.word	0x3ef4f8b5
 8004370:	7110e454 	.word	0x7110e454
 8004374:	3ec92a73 	.word	0x3ec92a73
 8004378:	76c8b439 	.word	0x76c8b439
 800437c:	3f7a9fbe 	.word	0x3f7a9fbe
 8004380:	bc6a7efa 	.word	0xbc6a7efa
 8004384:	3f789374 	.word	0x3f789374

08004388 <wgs84_to_bd09>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_bd09(double lon, double lat, double *output) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	@ 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004392:	ed87 1b02 	vstr	d1, [r7, #8]
 8004396:	6078      	str	r0, [r7, #4]
    double gcj02[2];
    wgs84_to_gcj02(lon, lat, gcj02);
 8004398:	f107 0318 	add.w	r3, r7, #24
 800439c:	4618      	mov	r0, r3
 800439e:	ed97 1b02 	vldr	d1, [r7, #8]
 80043a2:	ed97 0b04 	vldr	d0, [r7, #16]
 80043a6:	f7ff fdef 	bl	8003f88 <wgs84_to_gcj02>
    gcj02_to_bd09(gcj02[0], gcj02[1], output);
 80043aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80043ae:	ed97 6b08 	vldr	d6, [r7, #32]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	eeb0 1a46 	vmov.f32	s2, s12
 80043b8:	eef0 1a66 	vmov.f32	s3, s13
 80043bc:	eeb0 0a47 	vmov.f32	s0, s14
 80043c0:	eef0 0a67 	vmov.f32	s1, s15
 80043c4:	f7ff ff18 	bl	80041f8 <gcj02_to_bd09>
}
 80043c8:	bf00      	nop
 80043ca:	3728      	adds	r7, #40	@ 0x28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043d4:	f004 ff48 	bl	8009268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043d8:	f000 f89c 	bl	8004514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043dc:	f7ff f96e 	bl	80036bc <MX_GPIO_Init>
  MX_DMA_Init();
 80043e0:	f7ff f8f6 	bl	80035d0 <MX_DMA_Init>
  MX_UART4_Init();
 80043e4:	f004 fb40 	bl	8008a68 <MX_UART4_Init>
  MX_ADC1_Init();
 80043e8:	f7fd fc48 	bl	8001c7c <MX_ADC1_Init>
  MX_TIM1_Init();
 80043ec:	f003 f9aa 	bl	8007744 <MX_TIM1_Init>
  MX_TIM3_Init();
 80043f0:	f003 fa48 	bl	8007884 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80043f4:	f004 fba0 	bl	8008b38 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80043f8:	f7fe ff8e 	bl	8003318 <MX_CAN1_Init>
  MX_CAN2_Init();
 80043fc:	f7fe ffc2 	bl	8003384 <MX_CAN2_Init>
  MX_ADC2_Init();
 8004400:	f7fd fc8e 	bl	8001d20 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8004404:	f004 fbc2 	bl	8008b8c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8004408:	f7fd fcdc 	bl	8001dc4 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800440c:	f004 fbfe 	bl	8008c0c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8004410:	f004 fb68 	bl	8008ae4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  printf("Start!!\r\n");
 8004414:	482d      	ldr	r0, [pc, #180]	@ (80044cc <main+0xfc>)
 8004416:	f00b f939 	bl	800f68c <puts>
  board_config.Net_4g.Status == Outline;
//  HAL_UART_Receive_IT(&huart3, RECV_4G_BUFF , sizeof(RECV_4G_BUFF));
  HAL_UART_Receive_IT(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 800441a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800441e:	492c      	ldr	r1, [pc, #176]	@ (80044d0 <main+0x100>)
 8004420:	482c      	ldr	r0, [pc, #176]	@ (80044d4 <main+0x104>)
 8004422:	f008 f894 	bl	800c54e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)imu_buf, sizeof(imu_buf));
 8004426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800442a:	492b      	ldr	r1, [pc, #172]	@ (80044d8 <main+0x108>)
 800442c:	482b      	ldr	r0, [pc, #172]	@ (80044dc <main+0x10c>)
 800442e:	f008 f88e 	bl	800c54e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8004432:	2100      	movs	r1, #0
 8004434:	482a      	ldr	r0, [pc, #168]	@ (80044e0 <main+0x110>)
 8004436:	f007 f973 	bl	800b720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800443a:	210c      	movs	r1, #12
 800443c:	4829      	ldr	r0, [pc, #164]	@ (80044e4 <main+0x114>)
 800443e:	f007 f96f 	bl	800b720 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8004442:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <main+0x110>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800444a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 3000);
 800444c:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <main+0x114>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004454:	641a      	str	r2, [r3, #64]	@ 0x40
  board_config.Rockers.Rocker_X = 2048;
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <main+0x118>)
 8004458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800445c:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
  board_config.Rockers.Rocker_Y = 2048;
 8004460:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <main+0x118>)
 8004462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004466:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
  board_config.Net_4g.Lock_Status = 0;
 800446a:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <main+0x118>)
 800446c:	2200      	movs	r2, #0
 800446e:	f883 226e 	strb.w	r2, [r3, #622]	@ 0x26e
  Uart_4g_End = 0;
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <main+0x11c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
  dt = 0.1f;
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <main+0x120>)
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <main+0x124>)
 800447c:	601a      	str	r2, [r3, #0]
  board_init();
 800447e:	f7fc fdc1 	bl	8001004 <board_init>
  auto_flag = 0;
 8004482:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <main+0x128>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
  rc4g_flag = 0;
 8004488:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <main+0x12c>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
  rxu2_data_ready = 0;
 800448e:	4b1c      	ldr	r3, [pc, #112]	@ (8004500 <main+0x130>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
  Auto_Status = Auto_Normal;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <main+0x134>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
  rxu4_data_ready = 0;
 800449a:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <main+0x138>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
  Auto_Start_Flag = 0;
 80044a0:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <main+0x13c>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
  board_config.gps.gps_num = 0;
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <main+0x118>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  board_config.gps.now_number = 0;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <main+0x118>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  board_config.Imu_data.Pitch = 240.0;
 80044b6:	490c      	ldr	r1, [pc, #48]	@ (80044e8 <main+0x118>)
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <main+0x140>)
 80044be:	e9c1 238e 	strd	r2, r3, [r1, #568]	@ 0x238
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    /*获取按钮次数，判断当前是哪一种控制模�?*/
	PID_Motor_Contorl();
 80044c2:	f002 fb6d 	bl	8006ba0 <PID_Motor_Contorl>
  {
 80044c6:	bf00      	nop
 80044c8:	e7fb      	b.n	80044c2 <main+0xf2>
 80044ca:	bf00      	nop
 80044cc:	08015904 	.word	0x08015904
 80044d0:	200008c4 	.word	0x200008c4
 80044d4:	20000a90 	.word	0x20000a90
 80044d8:	200004d4 	.word	0x200004d4
 80044dc:	20000b68 	.word	0x20000b68
 80044e0:	200009f0 	.word	0x200009f0
 80044e4:	20000a38 	.word	0x20000a38
 80044e8:	200005d8 	.word	0x200005d8
 80044ec:	200004d0 	.word	0x200004d0
 80044f0:	200009d0 	.word	0x200009d0
 80044f4:	3dcccccd 	.word	0x3dcccccd
 80044f8:	200005d4 	.word	0x200005d4
 80044fc:	200009cc 	.word	0x200009cc
 8004500:	200009c6 	.word	0x200009c6
 8004504:	200009c8 	.word	0x200009c8
 8004508:	200009c4 	.word	0x200009c4
 800450c:	200009c5 	.word	0x200009c5
 8004510:	406e0000 	.word	0x406e0000

08004514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b094      	sub	sp, #80	@ 0x50
 8004518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800451a:	f107 0320 	add.w	r3, r7, #32
 800451e:	2230      	movs	r2, #48	@ 0x30
 8004520:	2100      	movs	r1, #0
 8004522:	4618      	mov	r0, r3
 8004524:	f00b f9de 	bl	800f8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <SystemClock_Config+0xc8>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <SystemClock_Config+0xc8>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004546:	6413      	str	r3, [r2, #64]	@ 0x40
 8004548:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <SystemClock_Config+0xc8>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004554:	2300      	movs	r3, #0
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	4b21      	ldr	r3, [pc, #132]	@ (80045e0 <SystemClock_Config+0xcc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a20      	ldr	r2, [pc, #128]	@ (80045e0 <SystemClock_Config+0xcc>)
 800455e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <SystemClock_Config+0xcc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004570:	2301      	movs	r3, #1
 8004572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800457a:	2302      	movs	r3, #2
 800457c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800457e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004584:	2304      	movs	r3, #4
 8004586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004588:	2348      	movs	r3, #72	@ 0x48
 800458a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800458c:	2302      	movs	r3, #2
 800458e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004590:	2304      	movs	r3, #4
 8004592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004594:	f107 0320 	add.w	r3, r7, #32
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fb81 	bl	800aca0 <HAL_RCC_OscConfig>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045a4:	f000 f85e 	bl	8004664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a8:	230f      	movs	r3, #15
 80045aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045ac:	2302      	movs	r3, #2
 80045ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f006 fde3 	bl	800b190 <HAL_RCC_ClockConfig>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80045d0:	f000 f848 	bl	8004664 <Error_Handler>
  }
}
 80045d4:	bf00      	nop
 80045d6:	3750      	adds	r7, #80	@ 0x50
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000

080045e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <HAL_UART_RxCpltCallback+0x60>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d106      	bne.n	8004604 <HAL_UART_RxCpltCallback+0x20>
		Uart_4g_End = 1;
 80045f6:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <HAL_UART_RxCpltCallback+0x64>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
		rc4g_flag = 1;
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <HAL_UART_RxCpltCallback+0x68>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
	}
	else if(huart->Instance == USART2){
		rxu2_data_ready = 1;
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	}
}
 8004602:	e018      	b.n	8004636 <HAL_UART_RxCpltCallback+0x52>
	else if (huart->Instance == UART4) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <HAL_UART_RxCpltCallback+0x6c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d103      	bne.n	8004616 <HAL_UART_RxCpltCallback+0x32>
		rxu4_data_ready = 1;
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_UART_RxCpltCallback+0x70>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
}
 8004614:	e00f      	b.n	8004636 <HAL_UART_RxCpltCallback+0x52>
	else if(huart->Instance == USART2){
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a0f      	ldr	r2, [pc, #60]	@ (8004658 <HAL_UART_RxCpltCallback+0x74>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10a      	bne.n	8004636 <HAL_UART_RxCpltCallback+0x52>
		rxu2_data_ready = 1;
 8004620:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <HAL_UART_RxCpltCallback+0x78>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8004626:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <HAL_UART_RxCpltCallback+0x7c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <HAL_UART_RxCpltCallback+0x7c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0220 	bic.w	r2, r2, #32
 8004634:	60da      	str	r2, [r3, #12]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40004800 	.word	0x40004800
 8004648:	200004d0 	.word	0x200004d0
 800464c:	200009cc 	.word	0x200009cc
 8004650:	40004c00 	.word	0x40004c00
 8004654:	200009c4 	.word	0x200009c4
 8004658:	40004400 	.word	0x40004400
 800465c:	200009c6 	.word	0x200009c6
 8004660:	20000b68 	.word	0x20000b68

08004664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004668:	b672      	cpsid	i
}
 800466a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <Error_Handler+0x8>

08004670 <Servo_Control>:
#define PWM_REG_MID 1000
#define PWM_REG_RANGE 333


 void Servo_Control(uint8_t mode_flag , uint16_t X , uint16_t Y)
 {
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	@ 0x30
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
 800467a:	460b      	mov	r3, r1
 800467c:	80bb      	strh	r3, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	807b      	strh	r3, [r7, #2]
	float weight,left_pwm,right_pwm;
	float temp_k;
	float precision_l,precision_r,precision;
	float motor,motor_l,motor_r;
	//printf("X: %d   Y:%d\r\n",X,Y);
	if(mode_flag == mode_zero){
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d10a      	bne.n	800469e <Servo_Control+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_cycle_zero);
 8004688:	4ba9      	ldr	r3, [pc, #676]	@ (8004930 <Servo_Control+0x2c0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Duty_cycle_zero);
 8004692:	4ba8      	ldr	r3, [pc, #672]	@ (8004934 <Servo_Control+0x2c4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40
		return ;
 800469c:	e3f4      	b.n	8004e88 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_stright){
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d125      	bne.n	80046f0 <Servo_Control+0x80>
		precision =(Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 80046a4:	4ba4      	ldr	r3, [pc, #656]	@ (8004938 <Servo_Control+0x2c8>)
 80046a6:	613b      	str	r3, [r7, #16]
		motor = ((4096-Y) * precision) + Duty_cycle_min ;
 80046a8:	887b      	ldrh	r3, [r7, #2]
 80046aa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800493c <Servo_Control+0x2cc>
 80046c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046c6:	edc7 7a03 	vstr	s15, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor);
 80046ca:	4b99      	ldr	r3, [pc, #612]	@ (8004930 <Servo_Control+0x2c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80046d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d6:	ee17 2a90 	vmov	r2, s15
 80046da:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor);
 80046dc:	4b95      	ldr	r3, [pc, #596]	@ (8004934 <Servo_Control+0x2c4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	ee17 2a90 	vmov	r2, s15
 80046ec:	641a      	str	r2, [r3, #64]	@ 0x40
		//printf("motor_l:%f\r\n",motor);
		//printf("motor_r:%f\r\n",motor);
		return;
 80046ee:	e3cb      	b.n	8004e88 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_rightleft){
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d138      	bne.n	8004768 <Servo_Control+0xf8>
		precision_l = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 80046f6:	4b90      	ldr	r3, [pc, #576]	@ (8004938 <Servo_Control+0x2c8>)
 80046f8:	623b      	str	r3, [r7, #32]
		precision_r = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 80046fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004938 <Servo_Control+0x2c8>)
 80046fc:	61fb      	str	r3, [r7, #28]
		motor_l = Duty_cycle_max - ((4096-X) * precision_r);
 80046fe:	88bb      	ldrh	r3, [r7, #4]
 8004700:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800470c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004714:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8004940 <Servo_Control+0x2d0>
 8004718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800471c:	edc7 7a06 	vstr	s15, [r7, #24]
		motor_r = ((4096-X) * precision_l) + Duty_cycle_min ;
 8004720:	88bb      	ldrh	r3, [r7, #4]
 8004722:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800493c <Servo_Control+0x2cc>
 800473a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800473e:	edc7 7a05 	vstr	s15, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_l);
 8004742:	4b7b      	ldr	r3, [pc, #492]	@ (8004930 <Servo_Control+0x2c0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	edd7 7a06 	vldr	s15, [r7, #24]
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor_r);
 8004754:	4b77      	ldr	r3, [pc, #476]	@ (8004934 <Servo_Control+0x2c4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	edd7 7a05 	vldr	s15, [r7, #20]
 800475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004760:	ee17 2a90 	vmov	r2, s15
 8004764:	641a      	str	r2, [r3, #64]	@ 0x40
		//printf("motor_l:%f\r\n",motor_l);
		//printf("motor_r:%f\r\n",motor_r);
		return ;
 8004766:	e38f      	b.n	8004e88 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_upleft){
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	2b04      	cmp	r3, #4
 800476c:	f040 80f8 	bne.w	8004960 <Servo_Control+0x2f0>
		temp_k = cmu_k((float)X,(float)Y);
 8004770:	88bb      	ldrh	r3, [r7, #4]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	ee07 3a10 	vmov	s14, r3
 8004780:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004784:	eef0 0a47 	vmov.f32	s1, s14
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	f001 fee8 	bl	8006560 <cmu_k>
 8004790:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1)
 8004794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004798:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800479c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	dd2e      	ble.n	8004804 <Servo_Control+0x194>
			right_pwm=3000+((2048 - X)/2048.0)*1000 + 800;
 80047a6:	88bb      	ldrh	r3, [r7, #4]
 80047a8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb fec9 	bl	8000544 <__aeabi_i2d>
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <Servo_Control+0x2d4>)
 80047b8:	f7fc f858 	bl	800086c <__aeabi_ddiv>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004948 <Servo_Control+0x2d8>)
 80047ca:	f7fb ff25 	bl	8000618 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	a352      	add	r3, pc, #328	@ (adr r3, 8004920 <Servo_Control+0x2b0>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fd66 	bl	80002ac <__adddf3>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	4b57      	ldr	r3, [pc, #348]	@ (800494c <Servo_Control+0x2dc>)
 80047ee:	f7fb fd5d 	bl	80002ac <__adddf3>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f7fc fa05 	bl	8000c08 <__aeabi_d2f>
 80047fe:	4603      	mov	r3, r0
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004802:	e02d      	b.n	8004860 <Servo_Control+0x1f0>
		else
			right_pwm=3000+((2048 - Y)/2048.0)*1000 + 300;
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fe9a 	bl	8000544 <__aeabi_i2d>
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	4b4b      	ldr	r3, [pc, #300]	@ (8004944 <Servo_Control+0x2d4>)
 8004816:	f7fc f829 	bl	800086c <__aeabi_ddiv>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	4b48      	ldr	r3, [pc, #288]	@ (8004948 <Servo_Control+0x2d8>)
 8004828:	f7fb fef6 	bl	8000618 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	a33a      	add	r3, pc, #232	@ (adr r3, 8004920 <Servo_Control+0x2b0>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fd37 	bl	80002ac <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	a338      	add	r3, pc, #224	@ (adr r3, 8004928 <Servo_Control+0x2b8>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb fd2e 	bl	80002ac <__adddf3>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f7fc f9d6 	bl	8000c08 <__aeabi_d2f>
 800485c:	4603      	mov	r3, r0
 800485e:	62bb      	str	r3, [r7, #40]	@ 0x28
		left_pwm=(uint16_t)(3000 + temp_k*1000) - 1200;
 8004860:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004864:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004950 <Servo_Control+0x2e0>
 8004868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800486c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8004954 <Servo_Control+0x2e4>
 8004870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	ee17 3a90 	vmov	r3, s15
 800487c:	b29b      	uxth	r3, r3
 800487e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800488a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 800488e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004892:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004940 <Servo_Control+0x2d0>
 8004896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	dd01      	ble.n	80048a4 <Servo_Control+0x234>
 80048a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004958 <Servo_Control+0x2e8>)
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 80048a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80048a8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800493c <Servo_Control+0x2cc>
 80048ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b4:	d501      	bpl.n	80048ba <Servo_Control+0x24a>
 80048b6:	4b29      	ldr	r3, [pc, #164]	@ (800495c <Servo_Control+0x2ec>)
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 80048ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80048be:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004940 <Servo_Control+0x2d0>
 80048c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	dd01      	ble.n	80048d0 <Servo_Control+0x260>
 80048cc:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <Servo_Control+0x2e8>)
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 80048d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80048d4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800493c <Servo_Control+0x2cc>
 80048d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	d501      	bpl.n	80048e6 <Servo_Control+0x276>
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <Servo_Control+0x2ec>)
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(left_pwm > right_pwm)return;
 80048e6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80048ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80048ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f6:	f300 82c4 	bgt.w	8004e82 <Servo_Control+0x812>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 80048fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <Servo_Control+0x2c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004906:	ee17 2a90 	vmov	r2, s15
 800490a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <Servo_Control+0x2c4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004918:	ee17 2a90 	vmov	r2, s15
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 800491e:	e2b3      	b.n	8004e88 <Servo_Control+0x818>
 8004920:	00000000 	.word	0x00000000
 8004924:	40a77000 	.word	0x40a77000
 8004928:	00000000 	.word	0x00000000
 800492c:	4072c000 	.word	0x4072c000
 8004930:	200009f0 	.word	0x200009f0
 8004934:	20000a38 	.word	0x20000a38
 8004938:	3f160000 	.word	0x3f160000
 800493c:	44e10000 	.word	0x44e10000
 8004940:	45834000 	.word	0x45834000
 8004944:	40a00000 	.word	0x40a00000
 8004948:	408f4000 	.word	0x408f4000
 800494c:	40890000 	.word	0x40890000
 8004950:	447a0000 	.word	0x447a0000
 8004954:	453b8000 	.word	0x453b8000
 8004958:	45834000 	.word	0x45834000
 800495c:	44e10000 	.word	0x44e10000
	}
	else if(mode_flag == mode_upright){
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b05      	cmp	r3, #5
 8004964:	f040 80ce 	bne.w	8004b04 <Servo_Control+0x494>
		temp_k = cmu_k((float)X,(float)Y);
 8004968:	88bb      	ldrh	r3, [r7, #4]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	ee07 3a10 	vmov	s14, r3
 8004978:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800497c:	eef0 0a47 	vmov.f32	s1, s14
 8004980:	eeb0 0a67 	vmov.f32	s0, s15
 8004984:	f001 fdec 	bl	8006560 <cmu_k>
 8004988:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	    //printf("K:%f\r\n",temp_k);
		if(temp_k < (-1)){
 800498c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004990:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	d52e      	bpl.n	80049fc <Servo_Control+0x38c>
			left_pwm = 3000+((X - 2048)/2048.0)*1000 + 1200;
 800499e:	88bb      	ldrh	r3, [r7, #4]
 80049a0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fdcd 	bl	8000544 <__aeabi_i2d>
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	4bbe      	ldr	r3, [pc, #760]	@ (8004ca8 <Servo_Control+0x638>)
 80049b0:	f7fb ff5c 	bl	800086c <__aeabi_ddiv>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	4bba      	ldr	r3, [pc, #744]	@ (8004cac <Servo_Control+0x63c>)
 80049c2:	f7fb fe29 	bl	8000618 <__aeabi_dmul>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	a3b4      	add	r3, pc, #720	@ (adr r3, 8004ca0 <Servo_Control+0x630>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc6a 	bl	80002ac <__adddf3>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	4bb2      	ldr	r3, [pc, #712]	@ (8004cb0 <Servo_Control+0x640>)
 80049e6:	f7fb fc61 	bl	80002ac <__adddf3>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	f7fc f909 	bl	8000c08 <__aeabi_d2f>
 80049f6:	4603      	mov	r3, r0
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fa:	e02d      	b.n	8004a58 <Servo_Control+0x3e8>
		}
		else{
			left_pwm=3000+((2048 - Y)/2048.0)*1000 + 1200;
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fb fd9e 	bl	8000544 <__aeabi_i2d>
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	4ba6      	ldr	r3, [pc, #664]	@ (8004ca8 <Servo_Control+0x638>)
 8004a0e:	f7fb ff2d 	bl	800086c <__aeabi_ddiv>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	4ba3      	ldr	r3, [pc, #652]	@ (8004cac <Servo_Control+0x63c>)
 8004a20:	f7fb fdfa 	bl	8000618 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004ca0 <Servo_Control+0x630>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fc3b 	bl	80002ac <__adddf3>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	4b9b      	ldr	r3, [pc, #620]	@ (8004cb0 <Servo_Control+0x640>)
 8004a44:	f7fb fc32 	bl	80002ac <__adddf3>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fc f8da 	bl	8000c08 <__aeabi_d2f>
 8004a54:	4603      	mov	r3, r0
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		right_pwm=(uint16_t)(3000-temp_k*1000) - 1200;
 8004a58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004a5c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8004cb4 <Servo_Control+0x644>
 8004a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a64:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004cb8 <Servo_Control+0x648>
 8004a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a70:	ee17 3a90 	vmov	r3, s15
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a82:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 8004a86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004a8a:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8004cbc <Servo_Control+0x64c>
 8004a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	dd01      	ble.n	8004a9c <Servo_Control+0x42c>
 8004a98:	4b89      	ldr	r3, [pc, #548]	@ (8004cc0 <Servo_Control+0x650>)
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 8004a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004aa0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004cc4 <Servo_Control+0x654>
 8004aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	d501      	bpl.n	8004ab2 <Servo_Control+0x442>
 8004aae:	4b86      	ldr	r3, [pc, #536]	@ (8004cc8 <Servo_Control+0x658>)
 8004ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004ab2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004ab6:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004cbc <Servo_Control+0x64c>
 8004aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	dd01      	ble.n	8004ac8 <Servo_Control+0x458>
 8004ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc0 <Servo_Control+0x650>)
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004ac8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004acc:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004cc4 <Servo_Control+0x654>
 8004ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad8:	d501      	bpl.n	8004ade <Servo_Control+0x46e>
 8004ada:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc8 <Servo_Control+0x658>)
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004ade:	4b7b      	ldr	r3, [pc, #492]	@ (8004ccc <Servo_Control+0x65c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aea:	ee17 2a90 	vmov	r2, s15
 8004aee:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004af0:	4b77      	ldr	r3, [pc, #476]	@ (8004cd0 <Servo_Control+0x660>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afc:	ee17 2a90 	vmov	r2, s15
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004b02:	e1c1      	b.n	8004e88 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_downleft){
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	f040 80e4 	bne.w	8004cd4 <Servo_Control+0x664>
		temp_k = cmu_k((float)X,(float)Y);
 8004b0c:	88bb      	ldrh	r3, [r7, #4]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	ee07 3a10 	vmov	s14, r3
 8004b1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b20:	eef0 0a47 	vmov.f32	s1, s14
 8004b24:	eeb0 0a67 	vmov.f32	s0, s15
 8004b28:	f001 fd1a 	bl	8006560 <cmu_k>
 8004b2c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k<(-1))
 8004b30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b34:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b40:	d52c      	bpl.n	8004b9c <Servo_Control+0x52c>
			left_pwm=3000-((2048-X)/2048.0)*1000 - 1200;
 8004b42:	88bb      	ldrh	r3, [r7, #4]
 8004b44:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fb fcfb 	bl	8000544 <__aeabi_i2d>
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	4b55      	ldr	r3, [pc, #340]	@ (8004ca8 <Servo_Control+0x638>)
 8004b54:	f7fb fe8a 	bl	800086c <__aeabi_ddiv>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	4b51      	ldr	r3, [pc, #324]	@ (8004cac <Servo_Control+0x63c>)
 8004b66:	f7fb fd57 	bl	8000618 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	a14c      	add	r1, pc, #304	@ (adr r1, 8004ca0 <Servo_Control+0x630>)
 8004b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b74:	f7fb fb98 	bl	80002a8 <__aeabi_dsub>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb0 <Servo_Control+0x640>)
 8004b86:	f7fb fb8f 	bl	80002a8 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	f7fc f839 	bl	8000c08 <__aeabi_d2f>
 8004b96:	4603      	mov	r3, r0
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9a:	e02b      	b.n	8004bf4 <Servo_Control+0x584>
		else
			left_pwm=3000-((2048-Y)/2048.0)*1000 - 1200;
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fb fcce 	bl	8000544 <__aeabi_i2d>
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <Servo_Control+0x638>)
 8004bae:	f7fb fe5d 	bl	800086c <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <Servo_Control+0x63c>)
 8004bc0:	f7fb fd2a 	bl	8000618 <__aeabi_dmul>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	a135      	add	r1, pc, #212	@ (adr r1, 8004ca0 <Servo_Control+0x630>)
 8004bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bce:	f7fb fb6b 	bl	80002a8 <__aeabi_dsub>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <Servo_Control+0x640>)
 8004be0:	f7fb fb62 	bl	80002a8 <__aeabi_dsub>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fc f80c 	bl	8000c08 <__aeabi_d2f>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		right_pwm=(uint16_t)(3000+temp_k*1000) + 1200;
 8004bf4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004bf8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004cb4 <Servo_Control+0x644>
 8004bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c00:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004cb8 <Servo_Control+0x648>
 8004c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0c:	ee17 3a90 	vmov	r3, s15
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c1e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 8004c22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c26:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004cbc <Servo_Control+0x64c>
 8004c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c32:	dd01      	ble.n	8004c38 <Servo_Control+0x5c8>
 8004c34:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <Servo_Control+0x650>)
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 8004c38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c3c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004cc4 <Servo_Control+0x654>
 8004c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c48:	d501      	bpl.n	8004c4e <Servo_Control+0x5de>
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <Servo_Control+0x658>)
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004c4e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004c52:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004cbc <Servo_Control+0x64c>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	dd01      	ble.n	8004c64 <Servo_Control+0x5f4>
 8004c60:	4b17      	ldr	r3, [pc, #92]	@ (8004cc0 <Servo_Control+0x650>)
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004c64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004c68:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004cc4 <Servo_Control+0x654>
 8004c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c74:	d501      	bpl.n	8004c7a <Servo_Control+0x60a>
 8004c76:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <Servo_Control+0x658>)
 8004c78:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004c7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <Servo_Control+0x65c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c86:	ee17 2a90 	vmov	r2, s15
 8004c8a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004c8c:	4b10      	ldr	r3, [pc, #64]	@ (8004cd0 <Servo_Control+0x660>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c98:	ee17 2a90 	vmov	r2, s15
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004c9e:	e0f3      	b.n	8004e88 <Servo_Control+0x818>
 8004ca0:	00000000 	.word	0x00000000
 8004ca4:	40a77000 	.word	0x40a77000
 8004ca8:	40a00000 	.word	0x40a00000
 8004cac:	408f4000 	.word	0x408f4000
 8004cb0:	4092c000 	.word	0x4092c000
 8004cb4:	447a0000 	.word	0x447a0000
 8004cb8:	453b8000 	.word	0x453b8000
 8004cbc:	45834000 	.word	0x45834000
 8004cc0:	45834000 	.word	0x45834000
 8004cc4:	44e10000 	.word	0x44e10000
 8004cc8:	44e10000 	.word	0x44e10000
 8004ccc:	200009f0 	.word	0x200009f0
 8004cd0:	20000a38 	.word	0x20000a38
	}
	else if(mode_flag == mode_downright){
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	f040 80d6 	bne.w	8004e88 <Servo_Control+0x818>
		temp_k = cmu_k((float)X,(float)Y);
 8004cdc:	88bb      	ldrh	r3, [r7, #4]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	ee07 3a10 	vmov	s14, r3
 8004cec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004cf0:	eef0 0a47 	vmov.f32	s1, s14
 8004cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf8:	f001 fc32 	bl	8006560 <cmu_k>
 8004cfc:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1.0){
 8004d00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d10:	dd2c      	ble.n	8004d6c <Servo_Control+0x6fc>
			right_pwm = 3000-((2048-Y)/2048.0)*1000 - 1850;
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fc13 	bl	8000544 <__aeabi_i2d>
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea0 <Servo_Control+0x830>)
 8004d24:	f7fb fda2 	bl	800086c <__aeabi_ddiv>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <Servo_Control+0x834>)
 8004d36:	f7fb fc6f 	bl	8000618 <__aeabi_dmul>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	a154      	add	r1, pc, #336	@ (adr r1, 8004e90 <Servo_Control+0x820>)
 8004d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d44:	f7fb fab0 	bl	80002a8 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	a351      	add	r3, pc, #324	@ (adr r3, 8004e98 <Servo_Control+0x828>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb faa7 	bl	80002a8 <__aeabi_dsub>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb ff51 	bl	8000c08 <__aeabi_d2f>
 8004d66:	4603      	mov	r3, r0
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d6a:	e02b      	b.n	8004dc4 <Servo_Control+0x754>
		}
		else{
			right_pwm= 3000-((X-2048)/2048.0)*1000 - 100;
 8004d6c:	88bb      	ldrh	r3, [r7, #4]
 8004d6e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb fbe6 	bl	8000544 <__aeabi_i2d>
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	4b48      	ldr	r3, [pc, #288]	@ (8004ea0 <Servo_Control+0x830>)
 8004d7e:	f7fb fd75 	bl	800086c <__aeabi_ddiv>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b45      	ldr	r3, [pc, #276]	@ (8004ea4 <Servo_Control+0x834>)
 8004d90:	f7fb fc42 	bl	8000618 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	a13d      	add	r1, pc, #244	@ (adr r1, 8004e90 <Servo_Control+0x820>)
 8004d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9e:	f7fb fa83 	bl	80002a8 <__aeabi_dsub>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <Servo_Control+0x838>)
 8004db0:	f7fb fa7a 	bl	80002a8 <__aeabi_dsub>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7fb ff24 	bl	8000c08 <__aeabi_d2f>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		left_pwm=(uint16_t)(3000-temp_k*1000) + 1600;
 8004dc4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004dc8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004eac <Servo_Control+0x83c>
 8004dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd0:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8004eb0 <Servo_Control+0x840>
 8004dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ddc:	ee17 3a90 	vmov	r3, s15
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 8004df2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004df6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004eb4 <Servo_Control+0x844>
 8004dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e02:	dd01      	ble.n	8004e08 <Servo_Control+0x798>
 8004e04:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb8 <Servo_Control+0x848>)
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = Duty_cycle_min;
 8004e08:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004e0c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004ebc <Servo_Control+0x84c>
 8004e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e18:	d501      	bpl.n	8004e1e <Servo_Control+0x7ae>
 8004e1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <Servo_Control+0x850>)
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004e1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004e22:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004eb4 <Servo_Control+0x844>
 8004e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	dd01      	ble.n	8004e34 <Servo_Control+0x7c4>
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <Servo_Control+0x848>)
 8004e32:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004e34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004e38:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004ebc <Servo_Control+0x84c>
 8004e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	d501      	bpl.n	8004e4a <Servo_Control+0x7da>
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <Servo_Control+0x850>)
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(right_pwm > left_pwm)return;
 8004e4a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004e4e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	dc14      	bgt.n	8004e86 <Servo_Control+0x816>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004e5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <Servo_Control+0x854>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004e6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ec8 <Servo_Control+0x858>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	ee17 2a90 	vmov	r2, s15
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004e80:	e002      	b.n	8004e88 <Servo_Control+0x818>
		if(left_pwm > right_pwm)return;
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <Servo_Control+0x818>
		if(right_pwm > left_pwm)return;
 8004e86:	bf00      	nop
	}
 }
 8004e88:	3730      	adds	r7, #48	@ 0x30
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	00000000 	.word	0x00000000
 8004e94:	40a77000 	.word	0x40a77000
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	409ce800 	.word	0x409ce800
 8004ea0:	40a00000 	.word	0x40a00000
 8004ea4:	408f4000 	.word	0x408f4000
 8004ea8:	40590000 	.word	0x40590000
 8004eac:	447a0000 	.word	0x447a0000
 8004eb0:	453b8000 	.word	0x453b8000
 8004eb4:	45834000 	.word	0x45834000
 8004eb8:	45834000 	.word	0x45834000
 8004ebc:	44e10000 	.word	0x44e10000
 8004ec0:	44e10000 	.word	0x44e10000
 8004ec4:	200009f0 	.word	0x200009f0
 8004ec8:	20000a38 	.word	0x20000a38
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <Servo_Control_Blue>:

void Servo_Control_Blue(uint8_t mode_flag , uint16_t X , uint16_t Y){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	@ 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
 8004eda:	460b      	mov	r3, r1
 8004edc:	80bb      	strh	r3, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	807b      	strh	r3, [r7, #2]
	float weight,left_pwm,right_pwm;
	float temp_k;
	float precision_l,precision_r,precision;
	float motor,motor_l,motor_r;
	switch(mode_flag){
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	f200 83ff 	bhi.w	80056ea <Servo_Control_Blue+0x81a>
 8004eec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <Servo_Control_Blue+0x24>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f73 	.word	0x08004f73
 8004f00:	08004fe5 	.word	0x08004fe5
 8004f04:	08005195 	.word	0x08005195
 8004f08:	08005375 	.word	0x08005375
 8004f0c:	08005509 	.word	0x08005509
	case mode_zero:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_cycle_zero);
 8004f10:	4bc9      	ldr	r3, [pc, #804]	@ (8005238 <Servo_Control_Blue+0x368>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004f18:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Duty_cycle_zero);
 8004f1a:	4bc8      	ldr	r3, [pc, #800]	@ (800523c <Servo_Control_Blue+0x36c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004f24:	e3e2      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_stright:
		precision =(Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004f26:	4bc6      	ldr	r3, [pc, #792]	@ (8005240 <Servo_Control_Blue+0x370>)
 8004f28:	613b      	str	r3, [r7, #16]
		motor = ((4096-Y) * precision) + Duty_cycle_min ;
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f38:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f40:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8005244 <Servo_Control_Blue+0x374>
 8004f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f48:	edc7 7a03 	vstr	s15, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor);
 8004f4c:	4bba      	ldr	r3, [pc, #744]	@ (8005238 <Servo_Control_Blue+0x368>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f58:	ee17 2a90 	vmov	r2, s15
 8004f5c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor);
 8004f5e:	4bb7      	ldr	r3, [pc, #732]	@ (800523c <Servo_Control_Blue+0x36c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6a:	ee17 2a90 	vmov	r2, s15
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004f70:	e3bc      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_rightleft:
		precision_l = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004f72:	4bb3      	ldr	r3, [pc, #716]	@ (8005240 <Servo_Control_Blue+0x370>)
 8004f74:	623b      	str	r3, [r7, #32]
		precision_r = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004f76:	4bb2      	ldr	r3, [pc, #712]	@ (8005240 <Servo_Control_Blue+0x370>)
 8004f78:	61fb      	str	r3, [r7, #28]
		motor_l = Duty_cycle_max - ((4096-X) * precision_r);
 8004f7a:	88bb      	ldrh	r3, [r7, #4]
 8004f7c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f88:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f90:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8005248 <Servo_Control_Blue+0x378>
 8004f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f98:	edc7 7a06 	vstr	s15, [r7, #24]
		motor_r = ((4096-X) * precision_l) + Duty_cycle_min ;
 8004f9c:	88bb      	ldrh	r3, [r7, #4]
 8004f9e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004faa:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005244 <Servo_Control_Blue+0x374>
 8004fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fba:	edc7 7a05 	vstr	s15, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_l);
 8004fbe:	4b9e      	ldr	r3, [pc, #632]	@ (8005238 <Servo_Control_Blue+0x368>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fca:	ee17 2a90 	vmov	r2, s15
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor_r);
 8004fd0:	4b9a      	ldr	r3, [pc, #616]	@ (800523c <Servo_Control_Blue+0x36c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fdc:	ee17 2a90 	vmov	r2, s15
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004fe2:	e383      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_upleft:
		temp_k = cmu_k((float)X,(float)Y);
 8004fe4:	88bb      	ldrh	r3, [r7, #4]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	ee07 3a10 	vmov	s14, r3
 8004ff4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ff8:	eef0 0a47 	vmov.f32	s1, s14
 8004ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8005000:	f001 faae 	bl	8006560 <cmu_k>
 8005004:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1)
 8005008:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800500c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005018:	dd2e      	ble.n	8005078 <Servo_Control_Blue+0x1a8>
			right_pwm=3000+((2048 - X)/2048.0)*1000 + 800;
 800501a:	88bb      	ldrh	r3, [r7, #4]
 800501c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa8f 	bl	8000544 <__aeabi_i2d>
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	4b88      	ldr	r3, [pc, #544]	@ (800524c <Servo_Control_Blue+0x37c>)
 800502c:	f7fb fc1e 	bl	800086c <__aeabi_ddiv>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	4b84      	ldr	r3, [pc, #528]	@ (8005250 <Servo_Control_Blue+0x380>)
 800503e:	f7fb faeb 	bl	8000618 <__aeabi_dmul>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	a377      	add	r3, pc, #476	@ (adr r3, 8005228 <Servo_Control_Blue+0x358>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f92c 	bl	80002ac <__adddf3>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	4b7c      	ldr	r3, [pc, #496]	@ (8005254 <Servo_Control_Blue+0x384>)
 8005062:	f7fb f923 	bl	80002ac <__adddf3>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	f7fb fdcb 	bl	8000c08 <__aeabi_d2f>
 8005072:	4603      	mov	r3, r0
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005076:	e02d      	b.n	80050d4 <Servo_Control_Blue+0x204>
		else
			right_pwm=3000+((2048 - Y)/2048.0)*1000 + 300;
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb fa60 	bl	8000544 <__aeabi_i2d>
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	4b70      	ldr	r3, [pc, #448]	@ (800524c <Servo_Control_Blue+0x37c>)
 800508a:	f7fb fbef 	bl	800086c <__aeabi_ddiv>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	4b6d      	ldr	r3, [pc, #436]	@ (8005250 <Servo_Control_Blue+0x380>)
 800509c:	f7fb fabc 	bl	8000618 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8005228 <Servo_Control_Blue+0x358>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb f8fd 	bl	80002ac <__adddf3>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	a35d      	add	r3, pc, #372	@ (adr r3, 8005230 <Servo_Control_Blue+0x360>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f8f4 	bl	80002ac <__adddf3>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	f7fb fd9c 	bl	8000c08 <__aeabi_d2f>
 80050d0:	4603      	mov	r3, r0
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
		left_pwm=(uint16_t)(3000 + temp_k*1000) - 1200;
 80050d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80050d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005258 <Servo_Control_Blue+0x388>
 80050dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800525c <Servo_Control_Blue+0x38c>
 80050e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ec:	ee17 3a90 	vmov	r3, s15
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 4200)left_pwm = 4200;
 8005102:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005106:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005248 <Servo_Control_Blue+0x378>
 800510a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	dd01      	ble.n	8005118 <Servo_Control_Blue+0x248>
 8005114:	4b52      	ldr	r3, [pc, #328]	@ (8005260 <Servo_Control_Blue+0x390>)
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 8005118:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800511c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005244 <Servo_Control_Blue+0x374>
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d501      	bpl.n	800512e <Servo_Control_Blue+0x25e>
 800512a:	4b4e      	ldr	r3, [pc, #312]	@ (8005264 <Servo_Control_Blue+0x394>)
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 800512e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005132:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005248 <Servo_Control_Blue+0x378>
 8005136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	dd01      	ble.n	8005144 <Servo_Control_Blue+0x274>
 8005140:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <Servo_Control_Blue+0x390>)
 8005142:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 8005144:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005148:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005244 <Servo_Control_Blue+0x374>
 800514c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	d501      	bpl.n	800515a <Servo_Control_Blue+0x28a>
 8005156:	4b43      	ldr	r3, [pc, #268]	@ (8005264 <Servo_Control_Blue+0x394>)
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(left_pwm > right_pwm)return;
 800515a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800515e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	f300 82c0 	bgt.w	80056ee <Servo_Control_Blue+0x81e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 800516e:	4b32      	ldr	r3, [pc, #200]	@ (8005238 <Servo_Control_Blue+0x368>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517a:	ee17 2a90 	vmov	r2, s15
 800517e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8005180:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <Servo_Control_Blue+0x36c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800518c:	ee17 2a90 	vmov	r2, s15
 8005190:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8005192:	e2ab      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_upright:
		temp_k = cmu_k((float)X,(float)Y);
 8005194:	88bb      	ldrh	r3, [r7, #4]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	887b      	ldrh	r3, [r7, #2]
 80051a0:	ee07 3a10 	vmov	s14, r3
 80051a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80051a8:	eef0 0a47 	vmov.f32	s1, s14
 80051ac:	eeb0 0a67 	vmov.f32	s0, s15
 80051b0:	f001 f9d6 	bl	8006560 <cmu_k>
 80051b4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k < (-1)){
 80051b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80051bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80051c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c8:	d550      	bpl.n	800526c <Servo_Control_Blue+0x39c>
			left_pwm = 3000+((X - 2048)/2048.0)*1000 + 1200;
 80051ca:	88bb      	ldrh	r3, [r7, #4]
 80051cc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fb f9b7 	bl	8000544 <__aeabi_i2d>
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	4b1c      	ldr	r3, [pc, #112]	@ (800524c <Servo_Control_Blue+0x37c>)
 80051dc:	f7fb fb46 	bl	800086c <__aeabi_ddiv>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b18      	ldr	r3, [pc, #96]	@ (8005250 <Servo_Control_Blue+0x380>)
 80051ee:	f7fb fa13 	bl	8000618 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8005228 <Servo_Control_Blue+0x358>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb f854 	bl	80002ac <__adddf3>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <Servo_Control_Blue+0x398>)
 8005212:	f7fb f84b 	bl	80002ac <__adddf3>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	f7fb fcf3 	bl	8000c08 <__aeabi_d2f>
 8005222:	4603      	mov	r3, r0
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005226:	e04f      	b.n	80052c8 <Servo_Control_Blue+0x3f8>
 8005228:	00000000 	.word	0x00000000
 800522c:	40a77000 	.word	0x40a77000
 8005230:	00000000 	.word	0x00000000
 8005234:	4072c000 	.word	0x4072c000
 8005238:	200009f0 	.word	0x200009f0
 800523c:	20000a38 	.word	0x20000a38
 8005240:	3f160000 	.word	0x3f160000
 8005244:	44e10000 	.word	0x44e10000
 8005248:	45834000 	.word	0x45834000
 800524c:	40a00000 	.word	0x40a00000
 8005250:	408f4000 	.word	0x408f4000
 8005254:	40890000 	.word	0x40890000
 8005258:	447a0000 	.word	0x447a0000
 800525c:	453b8000 	.word	0x453b8000
 8005260:	45834000 	.word	0x45834000
 8005264:	44e10000 	.word	0x44e10000
 8005268:	4092c000 	.word	0x4092c000
		}
		else{
			left_pwm=3000+((2048 - Y)/2048.0)*1000 + 1200;
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f966 	bl	8000544 <__aeabi_i2d>
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	4bca      	ldr	r3, [pc, #808]	@ (80055a8 <Servo_Control_Blue+0x6d8>)
 800527e:	f7fb faf5 	bl	800086c <__aeabi_ddiv>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	4bc7      	ldr	r3, [pc, #796]	@ (80055ac <Servo_Control_Blue+0x6dc>)
 8005290:	f7fb f9c2 	bl	8000618 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	a3be      	add	r3, pc, #760	@ (adr r3, 8005598 <Servo_Control_Blue+0x6c8>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb f803 	bl	80002ac <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	4bbf      	ldr	r3, [pc, #764]	@ (80055b0 <Servo_Control_Blue+0x6e0>)
 80052b4:	f7fa fffa 	bl	80002ac <__adddf3>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	f7fb fca2 	bl	8000c08 <__aeabi_d2f>
 80052c4:	4603      	mov	r3, r0
 80052c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		right_pwm=(uint16_t)(3000-temp_k*1000) - 1200;
 80052c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80052cc:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 80055b4 <Servo_Control_Blue+0x6e4>
 80052d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052d4:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 80055b8 <Servo_Control_Blue+0x6e8>
 80052d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e0:	ee17 3a90 	vmov	r3, s15
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > 4200)left_pwm = 4200;
 80052f6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80052fa:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80055bc <Servo_Control_Blue+0x6ec>
 80052fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	dd01      	ble.n	800530c <Servo_Control_Blue+0x43c>
 8005308:	4bad      	ldr	r3, [pc, #692]	@ (80055c0 <Servo_Control_Blue+0x6f0>)
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 800530c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005310:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80055c4 <Servo_Control_Blue+0x6f4>
 8005314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531c:	d501      	bpl.n	8005322 <Servo_Control_Blue+0x452>
 800531e:	4baa      	ldr	r3, [pc, #680]	@ (80055c8 <Servo_Control_Blue+0x6f8>)
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 8005322:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005326:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80055bc <Servo_Control_Blue+0x6ec>
 800532a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	dd01      	ble.n	8005338 <Servo_Control_Blue+0x468>
 8005334:	4ba2      	ldr	r3, [pc, #648]	@ (80055c0 <Servo_Control_Blue+0x6f0>)
 8005336:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 8005338:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800533c:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80055c4 <Servo_Control_Blue+0x6f4>
 8005340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	d501      	bpl.n	800534e <Servo_Control_Blue+0x47e>
 800534a:	4b9f      	ldr	r3, [pc, #636]	@ (80055c8 <Servo_Control_Blue+0x6f8>)
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 800534e:	4b9f      	ldr	r3, [pc, #636]	@ (80055cc <Servo_Control_Blue+0x6fc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535a:	ee17 2a90 	vmov	r2, s15
 800535e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8005360:	4b9b      	ldr	r3, [pc, #620]	@ (80055d0 <Servo_Control_Blue+0x700>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536c:	ee17 2a90 	vmov	r2, s15
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8005372:	e1bb      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_downleft:
		temp_k = cmu_k((float)X,(float)Y);
 8005374:	88bb      	ldrh	r3, [r7, #4]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	ee07 3a10 	vmov	s14, r3
 8005384:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005388:	eef0 0a47 	vmov.f32	s1, s14
 800538c:	eeb0 0a67 	vmov.f32	s0, s15
 8005390:	f001 f8e6 	bl	8006560 <cmu_k>
 8005394:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k<(-1))
 8005398:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800539c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	d52c      	bpl.n	8005404 <Servo_Control_Blue+0x534>
			left_pwm=3000-((2048-X)/2048.0)*1000 - 1200;
 80053aa:	88bb      	ldrh	r3, [r7, #4]
 80053ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fb f8c7 	bl	8000544 <__aeabi_i2d>
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	4b7b      	ldr	r3, [pc, #492]	@ (80055a8 <Servo_Control_Blue+0x6d8>)
 80053bc:	f7fb fa56 	bl	800086c <__aeabi_ddiv>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4610      	mov	r0, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	4b77      	ldr	r3, [pc, #476]	@ (80055ac <Servo_Control_Blue+0x6dc>)
 80053ce:	f7fb f923 	bl	8000618 <__aeabi_dmul>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	a170      	add	r1, pc, #448	@ (adr r1, 8005598 <Servo_Control_Blue+0x6c8>)
 80053d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053dc:	f7fa ff64 	bl	80002a8 <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	4b70      	ldr	r3, [pc, #448]	@ (80055b0 <Servo_Control_Blue+0x6e0>)
 80053ee:	f7fa ff5b 	bl	80002a8 <__aeabi_dsub>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fc05 	bl	8000c08 <__aeabi_d2f>
 80053fe:	4603      	mov	r3, r0
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005402:	e02b      	b.n	800545c <Servo_Control_Blue+0x58c>
		else
			left_pwm=3000-((2048-Y)/2048.0)*1000 - 1200;
 8005404:	887b      	ldrh	r3, [r7, #2]
 8005406:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800540a:	4618      	mov	r0, r3
 800540c:	f7fb f89a 	bl	8000544 <__aeabi_i2d>
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	4b64      	ldr	r3, [pc, #400]	@ (80055a8 <Servo_Control_Blue+0x6d8>)
 8005416:	f7fb fa29 	bl	800086c <__aeabi_ddiv>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4610      	mov	r0, r2
 8005420:	4619      	mov	r1, r3
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <Servo_Control_Blue+0x6dc>)
 8005428:	f7fb f8f6 	bl	8000618 <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	a159      	add	r1, pc, #356	@ (adr r1, 8005598 <Servo_Control_Blue+0x6c8>)
 8005432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005436:	f7fa ff37 	bl	80002a8 <__aeabi_dsub>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	4b5a      	ldr	r3, [pc, #360]	@ (80055b0 <Servo_Control_Blue+0x6e0>)
 8005448:	f7fa ff2e 	bl	80002a8 <__aeabi_dsub>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f7fb fbd8 	bl	8000c08 <__aeabi_d2f>
 8005458:	4603      	mov	r3, r0
 800545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		right_pwm=(uint16_t)(3000+temp_k*1000) + 1200;
 800545c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005460:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80055b4 <Servo_Control_Blue+0x6e4>
 8005464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005468:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80055b8 <Servo_Control_Blue+0x6e8>
 800546c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005474:	ee17 3a90 	vmov	r3, s15
 8005478:	b29b      	uxth	r3, r3
 800547a:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005486:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > 4200)left_pwm = 4200;
 800548a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800548e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80055bc <Servo_Control_Blue+0x6ec>
 8005492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549a:	dd01      	ble.n	80054a0 <Servo_Control_Blue+0x5d0>
 800549c:	4b48      	ldr	r3, [pc, #288]	@ (80055c0 <Servo_Control_Blue+0x6f0>)
 800549e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 80054a0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80054a4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80055c4 <Servo_Control_Blue+0x6f4>
 80054a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	d501      	bpl.n	80054b6 <Servo_Control_Blue+0x5e6>
 80054b2:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <Servo_Control_Blue+0x6f8>)
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 80054b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054ba:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80055bc <Servo_Control_Blue+0x6ec>
 80054be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	dd01      	ble.n	80054cc <Servo_Control_Blue+0x5fc>
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <Servo_Control_Blue+0x6f0>)
 80054ca:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 80054cc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054d0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80055c4 <Servo_Control_Blue+0x6f4>
 80054d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	d501      	bpl.n	80054e2 <Servo_Control_Blue+0x612>
 80054de:	4b3a      	ldr	r3, [pc, #232]	@ (80055c8 <Servo_Control_Blue+0x6f8>)
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 80054e2:	4b3a      	ldr	r3, [pc, #232]	@ (80055cc <Servo_Control_Blue+0x6fc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80054ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ee:	ee17 2a90 	vmov	r2, s15
 80054f2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 80054f4:	4b36      	ldr	r3, [pc, #216]	@ (80055d0 <Servo_Control_Blue+0x700>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005500:	ee17 2a90 	vmov	r2, s15
 8005504:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8005506:	e0f1      	b.n	80056ec <Servo_Control_Blue+0x81c>
	case mode_downright:
		temp_k = cmu_k((float)X,(float)Y);
 8005508:	88bb      	ldrh	r3, [r7, #4]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	ee07 3a10 	vmov	s14, r3
 8005518:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800551c:	eef0 0a47 	vmov.f32	s1, s14
 8005520:	eeb0 0a67 	vmov.f32	s0, s15
 8005524:	f001 f81c 	bl	8006560 <cmu_k>
 8005528:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1.0){
 800552c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	dd4a      	ble.n	80055d4 <Servo_Control_Blue+0x704>
			right_pwm = 3000-((2048-Y)/2048.0)*1000 - 1850;
 800553e:	887b      	ldrh	r3, [r7, #2]
 8005540:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005544:	4618      	mov	r0, r3
 8005546:	f7fa fffd 	bl	8000544 <__aeabi_i2d>
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	4b16      	ldr	r3, [pc, #88]	@ (80055a8 <Servo_Control_Blue+0x6d8>)
 8005550:	f7fb f98c 	bl	800086c <__aeabi_ddiv>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <Servo_Control_Blue+0x6dc>)
 8005562:	f7fb f859 	bl	8000618 <__aeabi_dmul>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005598 <Servo_Control_Blue+0x6c8>)
 800556c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005570:	f7fa fe9a 	bl	80002a8 <__aeabi_dsub>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	a308      	add	r3, pc, #32	@ (adr r3, 80055a0 <Servo_Control_Blue+0x6d0>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe91 	bl	80002a8 <__aeabi_dsub>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f7fb fb3b 	bl	8000c08 <__aeabi_d2f>
 8005592:	4603      	mov	r3, r0
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005596:	e049      	b.n	800562c <Servo_Control_Blue+0x75c>
 8005598:	00000000 	.word	0x00000000
 800559c:	40a77000 	.word	0x40a77000
 80055a0:	00000000 	.word	0x00000000
 80055a4:	409ce800 	.word	0x409ce800
 80055a8:	40a00000 	.word	0x40a00000
 80055ac:	408f4000 	.word	0x408f4000
 80055b0:	4092c000 	.word	0x4092c000
 80055b4:	447a0000 	.word	0x447a0000
 80055b8:	453b8000 	.word	0x453b8000
 80055bc:	45834000 	.word	0x45834000
 80055c0:	45834000 	.word	0x45834000
 80055c4:	44e10000 	.word	0x44e10000
 80055c8:	44e10000 	.word	0x44e10000
 80055cc:	200009f0 	.word	0x200009f0
 80055d0:	20000a38 	.word	0x20000a38
		}
		else{
			right_pwm= 3000-((X-2048)/2048.0)*1000 - 100;
 80055d4:	88bb      	ldrh	r3, [r7, #4]
 80055d6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fa ffb2 	bl	8000544 <__aeabi_i2d>
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	4b48      	ldr	r3, [pc, #288]	@ (8005708 <Servo_Control_Blue+0x838>)
 80055e6:	f7fb f941 	bl	800086c <__aeabi_ddiv>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	4b45      	ldr	r3, [pc, #276]	@ (800570c <Servo_Control_Blue+0x83c>)
 80055f8:	f7fb f80e 	bl	8000618 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	a13f      	add	r1, pc, #252	@ (adr r1, 8005700 <Servo_Control_Blue+0x830>)
 8005602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005606:	f7fa fe4f 	bl	80002a8 <__aeabi_dsub>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <Servo_Control_Blue+0x840>)
 8005618:	f7fa fe46 	bl	80002a8 <__aeabi_dsub>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7fb faf0 	bl	8000c08 <__aeabi_d2f>
 8005628:	4603      	mov	r3, r0
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		left_pwm=(uint16_t)(3000-temp_k*1000) + 1600;
 800562c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005630:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005714 <Servo_Control_Blue+0x844>
 8005634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005638:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005718 <Servo_Control_Blue+0x848>
 800563c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 3a90 	vmov	r3, s15
 8005648:	b29b      	uxth	r3, r3
 800564a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005656:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 4200)left_pwm = 4200;
 800565a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800565e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800571c <Servo_Control_Blue+0x84c>
 8005662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	dd01      	ble.n	8005670 <Servo_Control_Blue+0x7a0>
 800566c:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <Servo_Control_Blue+0x850>)
 800566e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 8005670:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005674:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005724 <Servo_Control_Blue+0x854>
 8005678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800567c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005680:	d501      	bpl.n	8005686 <Servo_Control_Blue+0x7b6>
 8005682:	4b29      	ldr	r3, [pc, #164]	@ (8005728 <Servo_Control_Blue+0x858>)
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 8005686:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800568a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800571c <Servo_Control_Blue+0x84c>
 800568e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	dd01      	ble.n	800569c <Servo_Control_Blue+0x7cc>
 8005698:	4b21      	ldr	r3, [pc, #132]	@ (8005720 <Servo_Control_Blue+0x850>)
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 800569c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80056a0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005724 <Servo_Control_Blue+0x854>
 80056a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	d501      	bpl.n	80056b2 <Servo_Control_Blue+0x7e2>
 80056ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005728 <Servo_Control_Blue+0x858>)
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(right_pwm > left_pwm)return;
 80056b2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80056b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80056ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	dc16      	bgt.n	80056f2 <Servo_Control_Blue+0x822>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <Servo_Control_Blue+0x85c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80056cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d0:	ee17 2a90 	vmov	r2, s15
 80056d4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 80056d6:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <Servo_Control_Blue+0x860>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80056de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e2:	ee17 2a90 	vmov	r2, s15
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80056e8:	e000      	b.n	80056ec <Servo_Control_Blue+0x81c>
	default:break;
 80056ea:	bf00      	nop
	}
	return ;
 80056ec:	e002      	b.n	80056f4 <Servo_Control_Blue+0x824>
		if(left_pwm > right_pwm)return;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <Servo_Control_Blue+0x824>
		if(right_pwm > left_pwm)return;
 80056f2:	bf00      	nop
}
 80056f4:	3730      	adds	r7, #48	@ 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w
 8005700:	00000000 	.word	0x00000000
 8005704:	40a77000 	.word	0x40a77000
 8005708:	40a00000 	.word	0x40a00000
 800570c:	408f4000 	.word	0x408f4000
 8005710:	40590000 	.word	0x40590000
 8005714:	447a0000 	.word	0x447a0000
 8005718:	453b8000 	.word	0x453b8000
 800571c:	45834000 	.word	0x45834000
 8005720:	45834000 	.word	0x45834000
 8005724:	44e10000 	.word	0x44e10000
 8005728:	44e10000 	.word	0x44e10000
 800572c:	200009f0 	.word	0x200009f0
 8005730:	20000a38 	.word	0x20000a38

08005734 <Servo_Control_CAN>:

#define	SET_BIT(x, bit)	(x |= (1 << bit))	/* 置位第bit位 */
#define	CLEAR_BIT(x, bit)	(x &= ~(1 << bit))	/* 清零第bit位 */

	 uint8_t TxData[8] = {0};
 void Servo_Control_CAN(uint8_t mode_flag , uint16_t X , uint16_t Y){
 8005734:	b580      	push	{r7, lr}
 8005736:	b08c      	sub	sp, #48	@ 0x30
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	460b      	mov	r3, r1
 8005740:	81bb      	strh	r3, [r7, #12]
 8005742:	4613      	mov	r3, r2
 8005744:	817b      	strh	r3, [r7, #10]
	 uint8_t length = 0x08;
 8005746:	2308      	movs	r3, #8
 8005748:	76fb      	strb	r3, [r7, #27]
	 uint8_t high,low;
	 float temp_k;
	 float weight,left_pwm,right_pwm;
	 float precision,precision_l,precision_r,motor,motor_l,motor_r;
	 if(mode_flag == mode_zero){
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d114      	bne.n	800577a <Servo_Control_CAN+0x46>
		for(int i = 0 ; i < 8 ; i++){
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e007      	b.n	8005766 <Servo_Control_CAN+0x32>
			TxData[i] = 0x00;
 8005756:	4a9c      	ldr	r2, [pc, #624]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < 8 ; i++){
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	3301      	adds	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b07      	cmp	r3, #7
 800576a:	ddf4      	ble.n	8005756 <Servo_Control_CAN+0x22>
		}
		CAN_TX_Message(TxData, length);
 800576c:	7efb      	ldrb	r3, [r7, #27]
 800576e:	4619      	mov	r1, r3
 8005770:	4895      	ldr	r0, [pc, #596]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005772:	f7fd fefd 	bl	8003570 <CAN_TX_Message>
		return ;
 8005776:	f000 bee1 	b.w	800653c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_upstright){
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d165      	bne.n	800584c <Servo_Control_CAN+0x118>
		motor = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(Y-4096))/(4096 - 0));
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	425b      	neglt	r3, r3
 800578c:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005798:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		printf("motor:%f\r\n",motor);
 800579c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800579e:	f7fa fee3 	bl	8000568 <__aeabi_f2d>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4889      	ldr	r0, [pc, #548]	@ (80059cc <Servo_Control_CAN+0x298>)
 80057a8:	f009 ff08 	bl	800f5bc <iprintf>
		if(motor > 2000)motor = 2000;
 80057ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057b0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80059d4 <Servo_Control_CAN+0x2a0>
 80057b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	dd01      	ble.n	80057c2 <Servo_Control_CAN+0x8e>
 80057be:	4b84      	ldr	r3, [pc, #528]	@ (80059d0 <Servo_Control_CAN+0x29c>)
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if(motor < 0)motor = 0;
 80057c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ce:	d502      	bpl.n	80057d6 <Servo_Control_CAN+0xa2>
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
		TxData[0] = ((int)motor >> 8) & 0xff;	 	//高8位
 80057d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057de:	ee17 3a90 	vmov	r3, s15
 80057e2:	121b      	asrs	r3, r3, #8
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	4b78      	ldr	r3, [pc, #480]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80057e8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor & 0xff; 		//低8位
 80057ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80057f6:	793a      	ldrb	r2, [r7, #4]
 80057f8:	4b73      	ldr	r3, [pc, #460]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80057fa:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor >> 8) & 0xff;	 	//高8位
 80057fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005804:	ee17 3a90 	vmov	r3, s15
 8005808:	121b      	asrs	r3, r3, #8
 800580a:	b2da      	uxtb	r2, r3
 800580c:	4b6e      	ldr	r3, [pc, #440]	@ (80059c8 <Servo_Control_CAN+0x294>)
 800580e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor & 0xff; 		 //低8位
 8005810:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005818:	edc7 7a01 	vstr	s15, [r7, #4]
 800581c:	793a      	ldrb	r2, [r7, #4]
 800581e:	4b6a      	ldr	r3, [pc, #424]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005820:	70da      	strb	r2, [r3, #3]
		CLEAR_BIT(TxData[0],3);
 8005822:	4b69      	ldr	r3, [pc, #420]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f023 0308 	bic.w	r3, r3, #8
 800582a:	b2da      	uxtb	r2, r3
 800582c:	4b66      	ldr	r3, [pc, #408]	@ (80059c8 <Servo_Control_CAN+0x294>)
 800582e:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 8005830:	4b65      	ldr	r3, [pc, #404]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005832:	789b      	ldrb	r3, [r3, #2]
 8005834:	f023 0308 	bic.w	r3, r3, #8
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4b63      	ldr	r3, [pc, #396]	@ (80059c8 <Servo_Control_CAN+0x294>)
 800583c:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 800583e:	7efb      	ldrb	r3, [r7, #27]
 8005840:	4619      	mov	r1, r3
 8005842:	4861      	ldr	r0, [pc, #388]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005844:	f7fd fe94 	bl	8003570 <CAN_TX_Message>
		return;
 8005848:	f000 be78 	b.w	800653c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_downstright){
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d158      	bne.n	8005904 <Servo_Control_CAN+0x1d0>
		motor = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-Y)/(4096 - 0));
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005860:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		if(motor > 2000)motor = 2000;
 8005864:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005868:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80059d4 <Servo_Control_CAN+0x2a0>
 800586c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005874:	dd01      	ble.n	800587a <Servo_Control_CAN+0x146>
 8005876:	4b56      	ldr	r3, [pc, #344]	@ (80059d0 <Servo_Control_CAN+0x29c>)
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
		if(motor < 0)motor = 0;
 800587a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800587e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d502      	bpl.n	800588e <Servo_Control_CAN+0x15a>
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
		TxData[0] = ((int)motor >> 8) & 0xff;	 	//高8位
 800588e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005896:	ee17 3a90 	vmov	r3, s15
 800589a:	121b      	asrs	r3, r3, #8
 800589c:	b2da      	uxtb	r2, r3
 800589e:	4b4a      	ldr	r3, [pc, #296]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058a0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor & 0xff; 		//低8位
 80058a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80058a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80058ae:	793a      	ldrb	r2, [r7, #4]
 80058b0:	4b45      	ldr	r3, [pc, #276]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058b2:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor >> 8) & 0xff;	 	//高8位
 80058b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80058b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058bc:	ee17 3a90 	vmov	r3, s15
 80058c0:	121b      	asrs	r3, r3, #8
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	4b40      	ldr	r3, [pc, #256]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058c6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor & 0xff; 		//低8位
 80058c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80058cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80058d4:	793a      	ldrb	r2, [r7, #4]
 80058d6:	4b3c      	ldr	r3, [pc, #240]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058d8:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 80058da:	4b3b      	ldr	r3, [pc, #236]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	4b38      	ldr	r3, [pc, #224]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058e6:	701a      	strb	r2, [r3, #0]
		SET_BIT(TxData[2],3);
 80058e8:	4b37      	ldr	r3, [pc, #220]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058ea:	789b      	ldrb	r3, [r3, #2]
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	4b35      	ldr	r3, [pc, #212]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058f4:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 80058f6:	7efb      	ldrb	r3, [r7, #27]
 80058f8:	4619      	mov	r1, r3
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80058fc:	f7fd fe38 	bl	8003570 <CAN_TX_Message>
		return;
 8005900:	f000 be1c 	b.w	800653c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_left){
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d166      	bne.n	80059d8 <Servo_Control_CAN+0x2a4>
		motor_l = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0));
 800590a:	89bb      	ldrh	r3, [r7, #12]
 800590c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005910:	2b00      	cmp	r3, #0
 8005912:	bfb8      	it	lt
 8005914:	425b      	neglt	r3, r3
 8005916:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005922:	edc7 7a08 	vstr	s15, [r7, #32]
		if(motor > 2000)motor_l = 2000;
 8005926:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800592a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80059d4 <Servo_Control_CAN+0x2a0>
 800592e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005936:	dd01      	ble.n	800593c <Servo_Control_CAN+0x208>
 8005938:	4b25      	ldr	r3, [pc, #148]	@ (80059d0 <Servo_Control_CAN+0x29c>)
 800593a:	623b      	str	r3, [r7, #32]
		if(motor < 0)motor_l = 0;
 800593c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005940:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005948:	d502      	bpl.n	8005950 <Servo_Control_CAN+0x21c>
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
		TxData[0] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 8005950:	edd7 7a08 	vldr	s15, [r7, #32]
 8005954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005958:	ee17 3a90 	vmov	r3, s15
 800595c:	121b      	asrs	r3, r3, #8
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005962:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor_l & 0xff; 		//低8位
 8005964:	edd7 7a08 	vldr	s15, [r7, #32]
 8005968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800596c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005970:	793a      	ldrb	r2, [r7, #4]
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005974:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 8005976:	edd7 7a08 	vldr	s15, [r7, #32]
 800597a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800597e:	ee17 3a90 	vmov	r3, s15
 8005982:	121b      	asrs	r3, r3, #8
 8005984:	b2da      	uxtb	r2, r3
 8005986:	4b10      	ldr	r3, [pc, #64]	@ (80059c8 <Servo_Control_CAN+0x294>)
 8005988:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor_l & 0xff; 		//低8位
 800598a:	edd7 7a08 	vldr	s15, [r7, #32]
 800598e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005992:	edc7 7a01 	vstr	s15, [r7, #4]
 8005996:	793a      	ldrb	r2, [r7, #4]
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <Servo_Control_CAN+0x294>)
 800599a:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 800599c:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <Servo_Control_CAN+0x294>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f043 0308 	orr.w	r3, r3, #8
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b08      	ldr	r3, [pc, #32]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80059a8:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80059ac:	789b      	ldrb	r3, [r3, #2]
 80059ae:	f023 0308 	bic.w	r3, r3, #8
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	4b04      	ldr	r3, [pc, #16]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80059b6:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 80059b8:	7efb      	ldrb	r3, [r7, #27]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <Servo_Control_CAN+0x294>)
 80059be:	f7fd fdd7 	bl	8003570 <CAN_TX_Message>
 80059c2:	f000 bdbb 	b.w	800653c <Servo_Control_CAN+0xe08>
 80059c6:	bf00      	nop
 80059c8:	200009d4 	.word	0x200009d4
 80059cc:	08015910 	.word	0x08015910
 80059d0:	44fa0000 	.word	0x44fa0000
 80059d4:	44fa0000 	.word	0x44fa0000
	 }
	 else if(mode_flag == can_mode_right){
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d168      	bne.n	8005ab0 <Servo_Control_CAN+0x37c>
		motor_l = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-X)/(4096 - 0));
 80059de:	89bb      	ldrh	r3, [r7, #12]
 80059e0:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ec:	edc7 7a08 	vstr	s15, [r7, #32]
		if(motor > 2000)motor_l = 2000;
 80059f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80059f4:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80059d4 <Servo_Control_CAN+0x2a0>
 80059f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a00:	dd01      	ble.n	8005a06 <Servo_Control_CAN+0x2d2>
 8005a02:	4bbd      	ldr	r3, [pc, #756]	@ (8005cf8 <Servo_Control_CAN+0x5c4>)
 8005a04:	623b      	str	r3, [r7, #32]
		if(motor < 0)motor_l = 0;
 8005a06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	d502      	bpl.n	8005a1a <Servo_Control_CAN+0x2e6>
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	623b      	str	r3, [r7, #32]
		TxData[0] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 8005a1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a22:	ee17 3a90 	vmov	r3, s15
 8005a26:	121b      	asrs	r3, r3, #8
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4bb4      	ldr	r3, [pc, #720]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a2c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor_l & 0xff; 		//低8位
 8005a2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a36:	edc7 7a01 	vstr	s15, [r7, #4]
 8005a3a:	793a      	ldrb	r2, [r7, #4]
 8005a3c:	4baf      	ldr	r3, [pc, #700]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a3e:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 8005a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a48:	ee17 3a90 	vmov	r3, s15
 8005a4c:	121b      	asrs	r3, r3, #8
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4baa      	ldr	r3, [pc, #680]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a52:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor_l & 0xff; 		//低8位
 8005a54:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005a60:	793a      	ldrb	r2, [r7, #4]
 8005a62:	4ba6      	ldr	r3, [pc, #664]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a64:	70da      	strb	r2, [r3, #3]
		printf("motor_l:%f\r\n",motor_l);
 8005a66:	6a38      	ldr	r0, [r7, #32]
 8005a68:	f7fa fd7e 	bl	8000568 <__aeabi_f2d>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	48a3      	ldr	r0, [pc, #652]	@ (8005d00 <Servo_Control_CAN+0x5cc>)
 8005a72:	f009 fda3 	bl	800f5bc <iprintf>
		printf("motor_r:%f\r\n",motor_l);
 8005a76:	6a38      	ldr	r0, [r7, #32]
 8005a78:	f7fa fd76 	bl	8000568 <__aeabi_f2d>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	48a0      	ldr	r0, [pc, #640]	@ (8005d04 <Servo_Control_CAN+0x5d0>)
 8005a82:	f009 fd9b 	bl	800f5bc <iprintf>
		CLEAR_BIT(TxData[0],3);
 8005a86:	4b9d      	ldr	r3, [pc, #628]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	4b9a      	ldr	r3, [pc, #616]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a92:	701a      	strb	r2, [r3, #0]
		SET_BIT(TxData[2],3);
 8005a94:	4b99      	ldr	r3, [pc, #612]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005a96:	789b      	ldrb	r3, [r3, #2]
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b97      	ldr	r3, [pc, #604]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005aa0:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 8005aa2:	7efb      	ldrb	r3, [r7, #27]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4895      	ldr	r0, [pc, #596]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005aa8:	f7fd fd62 	bl	8003570 <CAN_TX_Message>
 8005aac:	f000 bd46 	b.w	800653c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_leftup){
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	f040 812a 	bne.w	8005d0c <Servo_Control_CAN+0x5d8>
		right_pwm=CAN_Duty_cycle_max - ((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0));
 8005ab8:	89bb      	ldrh	r3, [r7, #12]
 8005aba:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	425b      	neglt	r3, r3
 8005ac4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ac8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da01      	bge.n	8005ad8 <Servo_Control_CAN+0x3a4>
 8005ad4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005ad8:	131b      	asrs	r3, r3, #12
 8005ada:	425b      	negs	r3, r3
 8005adc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bfb8      	it	lt
 8005af6:	425b      	neglt	r3, r3
 8005af8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b04:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 2000)left_pwm = 2000;
 8005b08:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b0c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8005d08 <Servo_Control_CAN+0x5d4>
 8005b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	dd01      	ble.n	8005b1e <Servo_Control_CAN+0x3ea>
 8005b1a:	4b77      	ldr	r3, [pc, #476]	@ (8005cf8 <Servo_Control_CAN+0x5c4>)
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 0)left_pwm = 0;
 8005b1e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	d502      	bpl.n	8005b32 <Servo_Control_CAN+0x3fe>
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 2000)right_pwm = 2000;
 8005b32:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b36:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005d08 <Servo_Control_CAN+0x5d4>
 8005b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	dd01      	ble.n	8005b48 <Servo_Control_CAN+0x414>
 8005b44:	4b6c      	ldr	r3, [pc, #432]	@ (8005cf8 <Servo_Control_CAN+0x5c4>)
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 0)right_pwm = 0;
 8005b48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b54:	d502      	bpl.n	8005b5c <Servo_Control_CAN+0x428>
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005b5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b64:	ee17 3a90 	vmov	r3, s15
 8005b68:	121b      	asrs	r3, r3, #8
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005b6e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005b70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b7c:	793a      	ldrb	r2, [r7, #4]
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005b80:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005b82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b8a:	ee17 3a90 	vmov	r3, s15
 8005b8e:	121b      	asrs	r3, r3, #8
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b5a      	ldr	r3, [pc, #360]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005b94:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005b96:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b9e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ba2:	793a      	ldrb	r2, [r7, #4]
 8005ba4:	4b55      	ldr	r3, [pc, #340]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005ba6:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 8005ba8:	4b54      	ldr	r3, [pc, #336]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b52      	ldr	r3, [pc, #328]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005bb4:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 8005bb6:	4b51      	ldr	r3, [pc, #324]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005bb8:	789b      	ldrb	r3, [r3, #2]
 8005bba:	f023 0308 	bic.w	r3, r3, #8
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005bc2:	709a      	strb	r2, [r3, #2]
		if(X > Y){
 8005bc4:	89ba      	ldrh	r2, [r7, #12]
 8005bc6:	897b      	ldrh	r3, [r7, #10]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d97d      	bls.n	8005cc8 <Servo_Control_CAN+0x594>
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005bcc:	89bb      	ldrh	r3, [r7, #12]
 8005bce:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bfb8      	it	lt
 8005bd6:	425b      	neglt	r3, r3
 8005bd8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			right_pwm=((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-Y)/(4096 - 0)) + CAN_Duty_cycle_min ;
 8005be8:	897b      	ldrh	r3, [r7, #10]
 8005bea:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005bee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da01      	bge.n	8005bfe <Servo_Control_CAN+0x4ca>
 8005bfa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005bfe:	131b      	asrs	r3, r3, #12
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c08:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			if(left_pwm > 2000)left_pwm = 2000;
 8005c0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c10:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005d08 <Servo_Control_CAN+0x5d4>
 8005c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	dd01      	ble.n	8005c22 <Servo_Control_CAN+0x4ee>
 8005c1e:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <Servo_Control_CAN+0x5c4>)
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005c22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2e:	d502      	bpl.n	8005c36 <Servo_Control_CAN+0x502>
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005c36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005c3a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005d08 <Servo_Control_CAN+0x5d4>
 8005c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c46:	dd01      	ble.n	8005c4c <Servo_Control_CAN+0x518>
 8005c48:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf8 <Servo_Control_CAN+0x5c4>)
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005c4c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c58:	d502      	bpl.n	8005c60 <Servo_Control_CAN+0x52c>
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005c60:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c68:	ee17 3a90 	vmov	r3, s15
 8005c6c:	121b      	asrs	r3, r3, #8
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005c72:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005c74:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c80:	793a      	ldrb	r2, [r7, #4]
 8005c82:	4b1e      	ldr	r3, [pc, #120]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005c84:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005c86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c8e:	ee17 3a90 	vmov	r3, s15
 8005c92:	121b      	asrs	r3, r3, #8
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005c98:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005c9a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ca2:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ca6:	793a      	ldrb	r2, [r7, #4]
 8005ca8:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005caa:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005cac:	4b13      	ldr	r3, [pc, #76]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f023 0308 	bic.w	r3, r3, #8
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	4b11      	ldr	r3, [pc, #68]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005cb8:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 8005cba:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005cbc:	789b      	ldrb	r3, [r3, #2]
 8005cbe:	f023 0308 	bic.w	r3, r3, #8
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005cc6:	709a      	strb	r2, [r3, #2]
		}
		printf("motor_l:%f\r\n",left_pwm);
 8005cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cca:	f7fa fc4d 	bl	8000568 <__aeabi_f2d>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	480b      	ldr	r0, [pc, #44]	@ (8005d00 <Servo_Control_CAN+0x5cc>)
 8005cd4:	f009 fc72 	bl	800f5bc <iprintf>
		printf("motor_r:%f\r\n",right_pwm);
 8005cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cda:	f7fa fc45 	bl	8000568 <__aeabi_f2d>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4808      	ldr	r0, [pc, #32]	@ (8005d04 <Servo_Control_CAN+0x5d0>)
 8005ce4:	f009 fc6a 	bl	800f5bc <iprintf>
		CAN_TX_Message(TxData, length);
 8005ce8:	7efb      	ldrb	r3, [r7, #27]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4803      	ldr	r0, [pc, #12]	@ (8005cfc <Servo_Control_CAN+0x5c8>)
 8005cee:	f7fd fc3f 	bl	8003570 <CAN_TX_Message>
		return;
 8005cf2:	f000 bc23 	b.w	800653c <Servo_Control_CAN+0xe08>
 8005cf6:	bf00      	nop
 8005cf8:	44fa0000 	.word	0x44fa0000
 8005cfc:	200009d4 	.word	0x200009d4
 8005d00:	0801591c 	.word	0x0801591c
 8005d04:	0801592c 	.word	0x0801592c
 8005d08:	44fa0000 	.word	0x44fa0000
	 }
	 else if(mode_flag == can_mode_rightup){
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	f040 815e 	bne.w	8005fd0 <Servo_Control_CAN+0x89c>
		temp_k = cmu_k((float)X,(float)Y);
 8005d14:	89bb      	ldrh	r3, [r7, #12]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1e:	897b      	ldrh	r3, [r7, #10]
 8005d20:	ee07 3a10 	vmov	s14, r3
 8005d24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d28:	eef0 0a47 	vmov.f32	s1, s14
 8005d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d30:	f000 fc16 	bl	8006560 <cmu_k>
 8005d34:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)X);
 8005d38:	89bb      	ldrh	r3, [r7, #12]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	ee17 0a90 	vmov	r0, s15
 8005d46:	f7fa fc0f 	bl	8000568 <__aeabi_f2d>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4899      	ldr	r0, [pc, #612]	@ (8005fb4 <Servo_Control_CAN+0x880>)
 8005d50:	f009 fc34 	bl	800f5bc <iprintf>
		printf("Y:%f\r\n",(float)Y);
 8005d54:	897b      	ldrh	r3, [r7, #10]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	ee17 0a90 	vmov	r0, s15
 8005d62:	f7fa fc01 	bl	8000568 <__aeabi_f2d>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4893      	ldr	r0, [pc, #588]	@ (8005fb8 <Servo_Control_CAN+0x884>)
 8005d6c:	f009 fc26 	bl	800f5bc <iprintf>
		printf("k:%f\r\n",temp_k);
 8005d70:	6978      	ldr	r0, [r7, #20]
 8005d72:	f7fa fbf9 	bl	8000568 <__aeabi_f2d>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4890      	ldr	r0, [pc, #576]	@ (8005fbc <Servo_Control_CAN+0x888>)
 8005d7c:	f009 fc1e 	bl	800f5bc <iprintf>
		if(temp_k > (-1)){
 8005d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d84:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	f340 8086 	ble.w	8005ea0 <Servo_Control_CAN+0x76c>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005d94:	4b8a      	ldr	r3, [pc, #552]	@ (8005fc0 <Servo_Control_CAN+0x88c>)
 8005d96:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8005d9a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfb8      	it	lt
 8005da2:	425b      	neglt	r3, r3
 8005da4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005db0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=CAN_Duty_cycle_max - ((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0));
 8005db4:	4b82      	ldr	r3, [pc, #520]	@ (8005fc0 <Servo_Control_CAN+0x88c>)
 8005db6:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8005dba:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005dbe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	da01      	bge.n	8005dce <Servo_Control_CAN+0x69a>
 8005dca:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005dce:	131b      	asrs	r3, r3, #12
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dde:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8005de2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005de6:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8005fc4 <Servo_Control_CAN+0x890>
 8005dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	dd01      	ble.n	8005df8 <Servo_Control_CAN+0x6c4>
 8005df4:	4b74      	ldr	r3, [pc, #464]	@ (8005fc8 <Servo_Control_CAN+0x894>)
 8005df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005df8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e04:	d502      	bpl.n	8005e0c <Servo_Control_CAN+0x6d8>
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005e0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e10:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005fc4 <Servo_Control_CAN+0x890>
 8005e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1c:	dd01      	ble.n	8005e22 <Servo_Control_CAN+0x6ee>
 8005e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <Servo_Control_CAN+0x894>)
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005e22:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	d502      	bpl.n	8005e36 <Servo_Control_CAN+0x702>
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005e36:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e3e:	ee17 3a90 	vmov	r3, s15
 8005e42:	121b      	asrs	r3, r3, #8
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	4b61      	ldr	r3, [pc, #388]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e48:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005e4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e52:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e56:	793a      	ldrb	r2, [r7, #4]
 8005e58:	4b5c      	ldr	r3, [pc, #368]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e5a:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005e5c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e64:	ee17 3a90 	vmov	r3, s15
 8005e68:	121b      	asrs	r3, r3, #8
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	4b57      	ldr	r3, [pc, #348]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e6e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005e70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e78:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e7c:	793a      	ldrb	r2, [r7, #4]
 8005e7e:	4b53      	ldr	r3, [pc, #332]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e80:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005e82:	4b52      	ldr	r3, [pc, #328]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f023 0308 	bic.w	r3, r3, #8
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e8e:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8005e90:	4b4e      	ldr	r3, [pc, #312]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	f043 0308 	orr.w	r3, r3, #8
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005e9c:	709a      	strb	r2, [r3, #2]
 8005e9e:	e082      	b.n	8005fa6 <Servo_Control_CAN+0x872>
		}
		else if(temp_k <= -1 && board_config.Rockers.Rocker_X != 2048){
 8005ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ea4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb0:	d879      	bhi.n	8005fa6 <Servo_Control_CAN+0x872>
 8005eb2:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <Servo_Control_CAN+0x88c>)
 8005eb4:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d073      	beq.n	8005fa6 <Servo_Control_CAN+0x872>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) + CAN_Duty_cycle_min ;
 8005ebe:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <Servo_Control_CAN+0x88c>)
 8005ec0:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8005ec4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 8005ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fc0 <Servo_Control_CAN+0x88c>)
 8005ed6:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8005eda:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8005eea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005eee:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005fc4 <Servo_Control_CAN+0x890>
 8005ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	dd01      	ble.n	8005f00 <Servo_Control_CAN+0x7cc>
 8005efc:	4b32      	ldr	r3, [pc, #200]	@ (8005fc8 <Servo_Control_CAN+0x894>)
 8005efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005f00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	d502      	bpl.n	8005f14 <Servo_Control_CAN+0x7e0>
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005f14:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005f18:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005fc4 <Servo_Control_CAN+0x890>
 8005f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f24:	dd01      	ble.n	8005f2a <Servo_Control_CAN+0x7f6>
 8005f26:	4b28      	ldr	r3, [pc, #160]	@ (8005fc8 <Servo_Control_CAN+0x894>)
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005f2a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005f2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f36:	d502      	bpl.n	8005f3e <Servo_Control_CAN+0x80a>
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005f3e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f46:	ee17 3a90 	vmov	r3, s15
 8005f4a:	121b      	asrs	r3, r3, #8
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f50:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005f52:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8005f5e:	793a      	ldrb	r2, [r7, #4]
 8005f60:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f62:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005f64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f6c:	ee17 3a90 	vmov	r3, s15
 8005f70:	121b      	asrs	r3, r3, #8
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	4b15      	ldr	r3, [pc, #84]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f76:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005f78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f80:	edc7 7a01 	vstr	s15, [r7, #4]
 8005f84:	793a      	ldrb	r2, [r7, #4]
 8005f86:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f88:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005f8a:	4b10      	ldr	r3, [pc, #64]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f023 0308 	bic.w	r3, r3, #8
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f96:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005f9a:	789b      	ldrb	r3, [r3, #2]
 8005f9c:	f023 0308 	bic.w	r3, r3, #8
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005fa4:	709a      	strb	r2, [r3, #2]
		}
//		printf("motor_l:%f\r\n",left_pwm);
//		printf("motor_r:%f\r\n",right_pwm);
		CAN_TX_Message(TxData, length);
 8005fa6:	7efb      	ldrb	r3, [r7, #27]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4808      	ldr	r0, [pc, #32]	@ (8005fcc <Servo_Control_CAN+0x898>)
 8005fac:	f7fd fae0 	bl	8003570 <CAN_TX_Message>
		return;
 8005fb0:	e2c4      	b.n	800653c <Servo_Control_CAN+0xe08>
 8005fb2:	bf00      	nop
 8005fb4:	0801593c 	.word	0x0801593c
 8005fb8:	08015944 	.word	0x08015944
 8005fbc:	0801594c 	.word	0x0801594c
 8005fc0:	200005d8 	.word	0x200005d8
 8005fc4:	44fa0000 	.word	0x44fa0000
 8005fc8:	44fa0000 	.word	0x44fa0000
 8005fcc:	200009d4 	.word	0x200009d4
	 }
	 else if(mode_flag == can_mode_leftdown){
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	f040 8164 	bne.w	80062a0 <Servo_Control_CAN+0xb6c>
		temp_k = cmu_k((float)board_config.Rockers.Rocker_X,(float)board_config.Rockers.Rocker_Y);
 8005fd8:	4baa      	ldr	r3, [pc, #680]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8005fda:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	4ba7      	ldr	r3, [pc, #668]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8005fe8:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8005fec:	ee07 3a10 	vmov	s14, r3
 8005ff0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005ff4:	eef0 0a47 	vmov.f32	s1, s14
 8005ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffc:	f000 fab0 	bl	8006560 <cmu_k>
 8006000:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)board_config.Rockers.Rocker_X);
 8006004:	4b9f      	ldr	r3, [pc, #636]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8006006:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	ee17 0a90 	vmov	r0, s15
 8006016:	f7fa faa7 	bl	8000568 <__aeabi_f2d>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	489a      	ldr	r0, [pc, #616]	@ (8006288 <Servo_Control_CAN+0xb54>)
 8006020:	f009 facc 	bl	800f5bc <iprintf>
		printf("Y:%f\r\n",(float)board_config.Rockers.Rocker_Y);
 8006024:	4b97      	ldr	r3, [pc, #604]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8006026:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	ee17 0a90 	vmov	r0, s15
 8006036:	f7fa fa97 	bl	8000568 <__aeabi_f2d>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4893      	ldr	r0, [pc, #588]	@ (800628c <Servo_Control_CAN+0xb58>)
 8006040:	f009 fabc 	bl	800f5bc <iprintf>
		printf("k:%f\r\n",temp_k);
 8006044:	6978      	ldr	r0, [r7, #20]
 8006046:	f7fa fa8f 	bl	8000568 <__aeabi_f2d>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4890      	ldr	r0, [pc, #576]	@ (8006290 <Servo_Control_CAN+0xb5c>)
 8006050:	f009 fab4 	bl	800f5bc <iprintf>
		if(temp_k > (-1)){
 8006054:	edd7 7a05 	vldr	s15, [r7, #20]
 8006058:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800605c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	dd79      	ble.n	800615a <Servo_Control_CAN+0xa26>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 8006066:	4b87      	ldr	r3, [pc, #540]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8006068:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 800606c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006078:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_X-4096))/(4096 - 0)) ;
 800607c:	4b81      	ldr	r3, [pc, #516]	@ (8006284 <Servo_Control_CAN+0xb50>)
 800607e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006082:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006086:	2b00      	cmp	r3, #0
 8006088:	bfb8      	it	lt
 800608a:	425b      	neglt	r3, r3
 800608c:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006098:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 800609c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80060a0:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8006294 <Servo_Control_CAN+0xb60>
 80060a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ac:	dd01      	ble.n	80060b2 <Servo_Control_CAN+0x97e>
 80060ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006298 <Servo_Control_CAN+0xb64>)
 80060b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 80060b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80060b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	d502      	bpl.n	80060c6 <Servo_Control_CAN+0x992>
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 80060c6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060ca:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006294 <Servo_Control_CAN+0xb60>
 80060ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	dd01      	ble.n	80060dc <Servo_Control_CAN+0x9a8>
 80060d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006298 <Servo_Control_CAN+0xb64>)
 80060da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 80060dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e8:	d502      	bpl.n	80060f0 <Servo_Control_CAN+0x9bc>
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 80060f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80060f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f8:	ee17 3a90 	vmov	r3, s15
 80060fc:	121b      	asrs	r3, r3, #8
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	4b66      	ldr	r3, [pc, #408]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006102:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8006104:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006110:	793a      	ldrb	r2, [r7, #4]
 8006112:	4b62      	ldr	r3, [pc, #392]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006114:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8006116:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800611a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800611e:	ee17 3a90 	vmov	r3, s15
 8006122:	121b      	asrs	r3, r3, #8
 8006124:	b2da      	uxtb	r2, r3
 8006126:	4b5d      	ldr	r3, [pc, #372]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006128:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 800612a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800612e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006132:	edc7 7a01 	vstr	s15, [r7, #4]
 8006136:	793a      	ldrb	r2, [r7, #4]
 8006138:	4b58      	ldr	r3, [pc, #352]	@ (800629c <Servo_Control_CAN+0xb68>)
 800613a:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 800613c:	4b57      	ldr	r3, [pc, #348]	@ (800629c <Servo_Control_CAN+0xb68>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f043 0308 	orr.w	r3, r3, #8
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b55      	ldr	r3, [pc, #340]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006148:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 800614a:	4b54      	ldr	r3, [pc, #336]	@ (800629c <Servo_Control_CAN+0xb68>)
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	f023 0308 	bic.w	r3, r3, #8
 8006152:	b2da      	uxtb	r2, r3
 8006154:	4b51      	ldr	r3, [pc, #324]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006156:	709a      	strb	r2, [r3, #2]
 8006158:	e08d      	b.n	8006276 <Servo_Control_CAN+0xb42>
		}
		else if(temp_k <= (-1) && board_config.Rockers.Rocker_X != 2048){
 800615a:	edd7 7a05 	vldr	s15, [r7, #20]
 800615e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	f200 8084 	bhi.w	8006276 <Servo_Control_CAN+0xb42>
 800616e:	4b45      	ldr	r3, [pc, #276]	@ (8006284 <Servo_Control_CAN+0xb50>)
 8006170:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006178:	d07d      	beq.n	8006276 <Servo_Control_CAN+0xb42>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_X-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 800617a:	4b42      	ldr	r3, [pc, #264]	@ (8006284 <Servo_Control_CAN+0xb50>)
 800617c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006180:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfb8      	it	lt
 8006188:	425b      	neglt	r3, r3
 800618a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006196:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min  ;
 800619a:	4b3a      	ldr	r3, [pc, #232]	@ (8006284 <Servo_Control_CAN+0xb50>)
 800619c:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 80061a0:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 80061ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80061be:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8006294 <Servo_Control_CAN+0xb60>
 80061c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	dd01      	ble.n	80061d0 <Servo_Control_CAN+0xa9c>
 80061cc:	4b32      	ldr	r3, [pc, #200]	@ (8006298 <Servo_Control_CAN+0xb64>)
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 80061d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80061d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	d502      	bpl.n	80061e4 <Servo_Control_CAN+0xab0>
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 80061e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80061e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006294 <Servo_Control_CAN+0xb60>
 80061ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	dd01      	ble.n	80061fa <Servo_Control_CAN+0xac6>
 80061f6:	4b28      	ldr	r3, [pc, #160]	@ (8006298 <Servo_Control_CAN+0xb64>)
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 80061fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80061fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	d502      	bpl.n	800620e <Servo_Control_CAN+0xada>
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 800620e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006216:	ee17 3a90 	vmov	r3, s15
 800621a:	121b      	asrs	r3, r3, #8
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4b1f      	ldr	r3, [pc, #124]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006220:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8006222:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800622a:	edc7 7a01 	vstr	s15, [r7, #4]
 800622e:	793a      	ldrb	r2, [r7, #4]
 8006230:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006232:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8006234:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800623c:	ee17 3a90 	vmov	r3, s15
 8006240:	121b      	asrs	r3, r3, #8
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b15      	ldr	r3, [pc, #84]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006246:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8006248:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800624c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006250:	edc7 7a01 	vstr	s15, [r7, #4]
 8006254:	793a      	ldrb	r2, [r7, #4]
 8006256:	4b11      	ldr	r3, [pc, #68]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006258:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 800625a:	4b10      	ldr	r3, [pc, #64]	@ (800629c <Servo_Control_CAN+0xb68>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f043 0308 	orr.w	r3, r3, #8
 8006262:	b2da      	uxtb	r2, r3
 8006264:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006266:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8006268:	4b0c      	ldr	r3, [pc, #48]	@ (800629c <Servo_Control_CAN+0xb68>)
 800626a:	789b      	ldrb	r3, [r3, #2]
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <Servo_Control_CAN+0xb68>)
 8006274:	709a      	strb	r2, [r3, #2]
		}
		CAN_TX_Message(TxData, length);
 8006276:	7efb      	ldrb	r3, [r7, #27]
 8006278:	4619      	mov	r1, r3
 800627a:	4808      	ldr	r0, [pc, #32]	@ (800629c <Servo_Control_CAN+0xb68>)
 800627c:	f7fd f978 	bl	8003570 <CAN_TX_Message>
		return ;
 8006280:	e15c      	b.n	800653c <Servo_Control_CAN+0xe08>
 8006282:	bf00      	nop
 8006284:	200005d8 	.word	0x200005d8
 8006288:	0801593c 	.word	0x0801593c
 800628c:	08015944 	.word	0x08015944
 8006290:	0801594c 	.word	0x0801594c
 8006294:	44fa0000 	.word	0x44fa0000
 8006298:	44fa0000 	.word	0x44fa0000
 800629c:	200009d4 	.word	0x200009d4
	 }
	 else if(mode_flag == can_mode_rightdown){
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	f040 814a 	bne.w	800653c <Servo_Control_CAN+0xe08>
		temp_k = cmu_k((float)board_config.Rockers.Rocker_X,(float)board_config.Rockers.Rocker_Y);
 80062a8:	4ba6      	ldr	r3, [pc, #664]	@ (8006544 <Servo_Control_CAN+0xe10>)
 80062aa:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	4ba3      	ldr	r3, [pc, #652]	@ (8006544 <Servo_Control_CAN+0xe10>)
 80062b8:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 80062bc:	ee07 3a10 	vmov	s14, r3
 80062c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80062c4:	eef0 0a47 	vmov.f32	s1, s14
 80062c8:	eeb0 0a67 	vmov.f32	s0, s15
 80062cc:	f000 f948 	bl	8006560 <cmu_k>
 80062d0:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)board_config.Rockers.Rocker_X);
 80062d4:	4b9b      	ldr	r3, [pc, #620]	@ (8006544 <Servo_Control_CAN+0xe10>)
 80062d6:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	ee17 0a90 	vmov	r0, s15
 80062e6:	f7fa f93f 	bl	8000568 <__aeabi_f2d>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4896      	ldr	r0, [pc, #600]	@ (8006548 <Servo_Control_CAN+0xe14>)
 80062f0:	f009 f964 	bl	800f5bc <iprintf>
		printf("Y:%f\r\n",(float)board_config.Rockers.Rocker_Y);
 80062f4:	4b93      	ldr	r3, [pc, #588]	@ (8006544 <Servo_Control_CAN+0xe10>)
 80062f6:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee17 0a90 	vmov	r0, s15
 8006306:	f7fa f92f 	bl	8000568 <__aeabi_f2d>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	488f      	ldr	r0, [pc, #572]	@ (800654c <Servo_Control_CAN+0xe18>)
 8006310:	f009 f954 	bl	800f5bc <iprintf>
		printf("k:%f\r\n",temp_k);
 8006314:	6978      	ldr	r0, [r7, #20]
 8006316:	f7fa f927 	bl	8000568 <__aeabi_f2d>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	488c      	ldr	r0, [pc, #560]	@ (8006550 <Servo_Control_CAN+0xe1c>)
 8006320:	f009 f94c 	bl	800f5bc <iprintf>
		if(temp_k < 1){
 8006324:	edd7 7a05 	vldr	s15, [r7, #20]
 8006328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800632c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006334:	d574      	bpl.n	8006420 <Servo_Control_CAN+0xcec>
			right_pwm=CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) ;
 8006336:	4b83      	ldr	r3, [pc, #524]	@ (8006544 <Servo_Control_CAN+0xe10>)
 8006338:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800633c:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006348:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 800634c:	4b7d      	ldr	r3, [pc, #500]	@ (8006544 <Servo_Control_CAN+0xe10>)
 800634e:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8006352:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800635e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8006362:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006366:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006554 <Servo_Control_CAN+0xe20>
 800636a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800636e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006372:	dd01      	ble.n	8006378 <Servo_Control_CAN+0xc44>
 8006374:	4b78      	ldr	r3, [pc, #480]	@ (8006558 <Servo_Control_CAN+0xe24>)
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8006378:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800637c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d502      	bpl.n	800638c <Servo_Control_CAN+0xc58>
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 800638c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006390:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8006554 <Servo_Control_CAN+0xe20>
 8006394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639c:	dd01      	ble.n	80063a2 <Servo_Control_CAN+0xc6e>
 800639e:	4b6e      	ldr	r3, [pc, #440]	@ (8006558 <Servo_Control_CAN+0xe24>)
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 80063a2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ae:	d502      	bpl.n	80063b6 <Servo_Control_CAN+0xc82>
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 80063b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063be:	ee17 3a90 	vmov	r3, s15
 80063c2:	121b      	asrs	r3, r3, #8
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4b65      	ldr	r3, [pc, #404]	@ (800655c <Servo_Control_CAN+0xe28>)
 80063c8:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 80063ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80063d6:	793a      	ldrb	r2, [r7, #4]
 80063d8:	4b60      	ldr	r3, [pc, #384]	@ (800655c <Servo_Control_CAN+0xe28>)
 80063da:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 80063dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e4:	ee17 3a90 	vmov	r3, s15
 80063e8:	121b      	asrs	r3, r3, #8
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	4b5b      	ldr	r3, [pc, #364]	@ (800655c <Servo_Control_CAN+0xe28>)
 80063ee:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 80063f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80063fc:	793a      	ldrb	r2, [r7, #4]
 80063fe:	4b57      	ldr	r3, [pc, #348]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006400:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8006402:	4b56      	ldr	r3, [pc, #344]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f023 0308 	bic.w	r3, r3, #8
 800640a:	b2da      	uxtb	r2, r3
 800640c:	4b53      	ldr	r3, [pc, #332]	@ (800655c <Servo_Control_CAN+0xe28>)
 800640e:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8006410:	4b52      	ldr	r3, [pc, #328]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006412:	789b      	ldrb	r3, [r3, #2]
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4b50      	ldr	r3, [pc, #320]	@ (800655c <Servo_Control_CAN+0xe28>)
 800641c:	709a      	strb	r2, [r3, #2]
 800641e:	e087      	b.n	8006530 <Servo_Control_CAN+0xdfc>
		}
		else if(temp_k >= 1 && board_config.Rockers.Rocker_X != 2048){
 8006420:	edd7 7a05 	vldr	s15, [r7, #20]
 8006424:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	db7e      	blt.n	8006530 <Servo_Control_CAN+0xdfc>
 8006432:	4b44      	ldr	r3, [pc, #272]	@ (8006544 <Servo_Control_CAN+0xe10>)
 8006434:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d078      	beq.n	8006530 <Servo_Control_CAN+0xdfc>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 800643e:	4b41      	ldr	r3, [pc, #260]	@ (8006544 <Servo_Control_CAN+0xe10>)
 8006440:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8006444:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006448:	2b00      	cmp	r3, #0
 800644a:	bfb8      	it	lt
 800644c:	425b      	neglt	r3, r3
 800644e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800645a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) + CAN_Duty_cycle_min  ;
 800645e:	4b39      	ldr	r3, [pc, #228]	@ (8006544 <Servo_Control_CAN+0xe10>)
 8006460:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8006464:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006470:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8006474:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006478:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006554 <Servo_Control_CAN+0xe20>
 800647c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006484:	dd01      	ble.n	800648a <Servo_Control_CAN+0xd56>
 8006486:	4b34      	ldr	r3, [pc, #208]	@ (8006558 <Servo_Control_CAN+0xe24>)
 8006488:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 800648a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800648e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006496:	d502      	bpl.n	800649e <Servo_Control_CAN+0xd6a>
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 800649e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80064a2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006554 <Servo_Control_CAN+0xe20>
 80064a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ae:	dd01      	ble.n	80064b4 <Servo_Control_CAN+0xd80>
 80064b0:	4b29      	ldr	r3, [pc, #164]	@ (8006558 <Servo_Control_CAN+0xe24>)
 80064b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 80064b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80064b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c0:	d502      	bpl.n	80064c8 <Servo_Control_CAN+0xd94>
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 80064c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80064cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064d0:	ee17 3a90 	vmov	r3, s15
 80064d4:	121b      	asrs	r3, r3, #8
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	4b20      	ldr	r3, [pc, #128]	@ (800655c <Servo_Control_CAN+0xe28>)
 80064da:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 80064dc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80064e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80064e8:	793a      	ldrb	r2, [r7, #4]
 80064ea:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <Servo_Control_CAN+0xe28>)
 80064ec:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 80064ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80064f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f6:	ee17 3a90 	vmov	r3, s15
 80064fa:	121b      	asrs	r3, r3, #8
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	4b17      	ldr	r3, [pc, #92]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006500:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8006502:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800650a:	edc7 7a01 	vstr	s15, [r7, #4]
 800650e:	793a      	ldrb	r2, [r7, #4]
 8006510:	4b12      	ldr	r3, [pc, #72]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006512:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 8006514:	4b11      	ldr	r3, [pc, #68]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f043 0308 	orr.w	r3, r3, #8
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006520:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8006522:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006524:	789b      	ldrb	r3, [r3, #2]
 8006526:	f043 0308 	orr.w	r3, r3, #8
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <Servo_Control_CAN+0xe28>)
 800652e:	709a      	strb	r2, [r3, #2]
		}
		CAN_TX_Message(TxData, length);
 8006530:	7efb      	ldrb	r3, [r7, #27]
 8006532:	4619      	mov	r1, r3
 8006534:	4809      	ldr	r0, [pc, #36]	@ (800655c <Servo_Control_CAN+0xe28>)
 8006536:	f7fd f81b 	bl	8003570 <CAN_TX_Message>
		return ;
 800653a:	bf00      	nop
	 }
 }
 800653c:	3730      	adds	r7, #48	@ 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200005d8 	.word	0x200005d8
 8006548:	0801593c 	.word	0x0801593c
 800654c:	08015944 	.word	0x08015944
 8006550:	0801594c 	.word	0x0801594c
 8006554:	44fa0000 	.word	0x44fa0000
 8006558:	44fa0000 	.word	0x44fa0000
 800655c:	200009d4 	.word	0x200009d4

08006560 <cmu_k>:

 float cmu_k(float x,float y){
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	ed87 0a01 	vstr	s0, [r7, #4]
 800656a:	edc7 0a00 	vstr	s1, [r7]
	 if(x == 2048){
 800656e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006572:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80065b4 <cmu_k+0x54>
 8006576:	eef4 7a47 	vcmp.f32	s15, s14
 800657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657e:	d102      	bne.n	8006586 <cmu_k+0x26>
		 return 0;
 8006580:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80065b8 <cmu_k+0x58>
 8006584:	e00d      	b.n	80065a2 <cmu_k+0x42>
	 }
     return ((y-2048)/(x-2048));
 8006586:	edd7 7a00 	vldr	s15, [r7]
 800658a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80065b4 <cmu_k+0x54>
 800658e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006592:	edd7 7a01 	vldr	s15, [r7, #4]
 8006596:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80065b4 <cmu_k+0x54>
 800659a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800659e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 }
 80065a2:	eef0 7a66 	vmov.f32	s15, s13
 80065a6:	eeb0 0a67 	vmov.f32	s0, s15
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	45000000 	.word	0x45000000
	...

080065c0 <get_distance>:




 double get_distance(double lat1, double lng1, double lat2, double lng2)
 {
 80065c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065c4:	b092      	sub	sp, #72	@ 0x48
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	ed87 0b06 	vstr	d0, [r7, #24]
 80065cc:	ed87 1b04 	vstr	d1, [r7, #16]
 80065d0:	ed87 2b02 	vstr	d2, [r7, #8]
 80065d4:	ed87 3b00 	vstr	d3, [r7]
 	double radLat1 = lat1 * PI / 180.0;   //角度1˚ = π / 180
 80065d8:	a387      	add	r3, pc, #540	@ (adr r3, 80067f8 <get_distance+0x238>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065e2:	f7fa f819 	bl	8000618 <__aeabi_dmul>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	4b89      	ldr	r3, [pc, #548]	@ (8006818 <get_distance+0x258>)
 80065f4:	f7fa f93a 	bl	800086c <__aeabi_ddiv>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 	double radLat2 = lat2 * PI / 180.0;   //角度1˚ = π / 180
 8006600:	a37d      	add	r3, pc, #500	@ (adr r3, 80067f8 <get_distance+0x238>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800660a:	f7fa f805 	bl	8000618 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	4b7f      	ldr	r3, [pc, #508]	@ (8006818 <get_distance+0x258>)
 800661c:	f7fa f926 	bl	800086c <__aeabi_ddiv>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 	double a = radLat1 - radLat2;//纬度之差
 8006628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800662c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8006630:	f7f9 fe3a 	bl	80002a8 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 	double b = lng1 * PI / 180.0 - lng2* PI / 180.0;  //经度之差
 800663c:	a36e      	add	r3, pc, #440	@ (adr r3, 80067f8 <get_distance+0x238>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006646:	f7f9 ffe7 	bl	8000618 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	4b70      	ldr	r3, [pc, #448]	@ (8006818 <get_distance+0x258>)
 8006658:	f7fa f908 	bl	800086c <__aeabi_ddiv>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	a364      	add	r3, pc, #400	@ (adr r3, 80067f8 <get_distance+0x238>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666e:	f7f9 ffd3 	bl	8000618 <__aeabi_dmul>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	4b66      	ldr	r3, [pc, #408]	@ (8006818 <get_distance+0x258>)
 8006680:	f7fa f8f4 	bl	800086c <__aeabi_ddiv>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7f9 fe0c 	bl	80002a8 <__aeabi_dsub>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 	double dst = 2 * asin((sqrt(pow(sin(a / 2), 2) + cos(radLat1) * cos(radLat2) * pow(sin(b / 2), 2))));
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80066a4:	f7fa f8e2 	bl	800086c <__aeabi_ddiv>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	ec43 2b17 	vmov	d7, r2, r3
 80066b0:	eeb0 0a47 	vmov.f32	s0, s14
 80066b4:	eef0 0a67 	vmov.f32	s1, s15
 80066b8:	f00c fb26 	bl	8012d08 <sin>
 80066bc:	eeb0 7a40 	vmov.f32	s14, s0
 80066c0:	eef0 7a60 	vmov.f32	s15, s1
 80066c4:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8006800 <get_distance+0x240>
 80066c8:	eeb0 0a47 	vmov.f32	s0, s14
 80066cc:	eef0 0a67 	vmov.f32	s1, s15
 80066d0:	f00c fa20 	bl	8012b14 <pow>
 80066d4:	ec59 8b10 	vmov	r8, r9, d0
 80066d8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80066dc:	f00c fab8 	bl	8012c50 <cos>
 80066e0:	ec55 4b10 	vmov	r4, r5, d0
 80066e4:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80066e8:	f00c fab2 	bl	8012c50 <cos>
 80066ec:	ec53 2b10 	vmov	r2, r3, d0
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 ff90 	bl	8000618 <__aeabi_dmul>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	461d      	mov	r5, r3
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006708:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800670c:	f7fa f8ae 	bl	800086c <__aeabi_ddiv>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	ec43 2b17 	vmov	d7, r2, r3
 8006718:	eeb0 0a47 	vmov.f32	s0, s14
 800671c:	eef0 0a67 	vmov.f32	s1, s15
 8006720:	f00c faf2 	bl	8012d08 <sin>
 8006724:	eeb0 7a40 	vmov.f32	s14, s0
 8006728:	eef0 7a60 	vmov.f32	s15, s1
 800672c:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8006800 <get_distance+0x240>
 8006730:	eeb0 0a47 	vmov.f32	s0, s14
 8006734:	eef0 0a67 	vmov.f32	s1, s15
 8006738:	f00c f9ec 	bl	8012b14 <pow>
 800673c:	ec53 2b10 	vmov	r2, r3, d0
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 ff68 	bl	8000618 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7f9 fdac 	bl	80002ac <__adddf3>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	ec43 2b17 	vmov	d7, r2, r3
 800675c:	eeb0 0a47 	vmov.f32	s0, s14
 8006760:	eef0 0a67 	vmov.f32	s1, s15
 8006764:	f00c fa46 	bl	8012bf4 <sqrt>
 8006768:	eeb0 7a40 	vmov.f32	s14, s0
 800676c:	eef0 7a60 	vmov.f32	s15, s1
 8006770:	eeb0 0a47 	vmov.f32	s0, s14
 8006774:	eef0 0a67 	vmov.f32	s1, s15
 8006778:	f00c f968 	bl	8012a4c <asin>
 800677c:	ec51 0b10 	vmov	r0, r1, d0
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	f7f9 fd92 	bl	80002ac <__adddf3>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	dst = dst * EARTH_RADIUS;
 8006790:	a31d      	add	r3, pc, #116	@ (adr r3, 8006808 <get_distance+0x248>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800679a:	f7f9 ff3d 	bl	8000618 <__aeabi_dmul>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	dst = round(dst * 10000) / 10000;
 80067a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006810 <get_distance+0x250>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80067b0:	f7f9 ff32 	bl	8000618 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	ec43 2b17 	vmov	d7, r2, r3
 80067bc:	eeb0 0a47 	vmov.f32	s0, s14
 80067c0:	eef0 0a67 	vmov.f32	s1, s15
 80067c4:	f00c fbda 	bl	8012f7c <round>
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	a310      	add	r3, pc, #64	@ (adr r3, 8006810 <get_distance+0x250>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7fa f84b 	bl	800086c <__aeabi_ddiv>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	return dst;
 80067de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e2:	ec43 2b17 	vmov	d7, r2, r3
 }
 80067e6:	eeb0 0a47 	vmov.f32	s0, s14
 80067ea:	eef0 0a67 	vmov.f32	s1, s15
 80067ee:	3748      	adds	r7, #72	@ 0x48
 80067f0:	46bd      	mov	sp, r7
 80067f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80067f6:	bf00      	nop
 80067f8:	54524550 	.word	0x54524550
 80067fc:	400921fb 	.word	0x400921fb
 8006800:	00000000 	.word	0x00000000
 8006804:	40000000 	.word	0x40000000
 8006808:	126e978d 	.word	0x126e978d
 800680c:	40b8ea23 	.word	0x40b8ea23
 8006810:	00000000 	.word	0x00000000
 8006814:	40c38800 	.word	0x40c38800
 8006818:	40668000 	.word	0x40668000

0800681c <PID_Init>:

#define AUTO 4


// 初始化PID控制器
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float min_output, float max_output) {
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	@ 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	61f8      	str	r0, [r7, #28]
 8006824:	ed87 0a06 	vstr	s0, [r7, #24]
 8006828:	edc7 0a05 	vstr	s1, [r7, #20]
 800682c:	ed87 1a04 	vstr	s2, [r7, #16]
 8006830:	edc7 1a03 	vstr	s3, [r7, #12]
 8006834:	ed87 2a02 	vstr	s4, [r7, #8]
 8006838:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	615a      	str	r2, [r3, #20]
    pid->min_output = min_output;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	3724      	adds	r7, #36	@ 0x24
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <PID_Update>:

// 更新PID控制器
float PID_Update(PIDController *pid, float measured_value, float dt) {
 800687c:	b480      	push	{r7}
 800687e:	b089      	sub	sp, #36	@ 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	ed87 0a02 	vstr	s0, [r7, #8]
 8006888:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = pid->setpoint - measured_value;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006892:	edd7 7a02 	vldr	s15, [r7, #8]
 8006896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800689a:	edc7 7a06 	vstr	s15, [r7, #24]

    // 计算比例、积分和微分项
    float proportional = pid->Kp * error;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	edd3 7a00 	vldr	s15, [r3]
 80068a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80068a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ac:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += pid->Ki * error * dt;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80068bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80068c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80068c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = pid->Kd * (error - pid->previous_error) / dt;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	edd3 7a05 	vldr	s15, [r3, #20]
 80068e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80068e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80068ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80068f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f6:	edc7 7a04 	vstr	s15, [r7, #16]

    // 计算总输出
    float output = proportional + pid->integral + derivative;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8006900:	edd7 7a05 	vldr	s15, [r7, #20]
 8006904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006908:	ed97 7a04 	vldr	s14, [r7, #16]
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006910:	edc7 7a07 	vstr	s15, [r7, #28]

    // 防止输出超出范围
    if (output > pid->max_output) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	edd3 7a08 	vldr	s15, [r3, #32]
 800691a:	ed97 7a07 	vldr	s14, [r7, #28]
 800691e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	dd03      	ble.n	8006930 <PID_Update+0xb4>
        output = pid->max_output;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	e00c      	b.n	800694a <PID_Update+0xce>
    } else if (output < pid->min_output) {
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	edd3 7a07 	vldr	s15, [r3, #28]
 8006936:	ed97 7a07 	vldr	s14, [r7, #28]
 800693a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800693e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006942:	d502      	bpl.n	800694a <PID_Update+0xce>
        output = pid->min_output;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	61fb      	str	r3, [r7, #28]
    }

    // 积分抗饱和
    if (output == pid->max_output || output == pid->min_output) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006950:	ed97 7a07 	vldr	s14, [r7, #28]
 8006954:	eeb4 7a67 	vcmp.f32	s14, s15
 8006958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695c:	d009      	beq.n	8006972 <PID_Update+0xf6>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	edd3 7a07 	vldr	s15, [r3, #28]
 8006964:	ed97 7a07 	vldr	s14, [r7, #28]
 8006968:	eeb4 7a67 	vcmp.f32	s14, s15
 800696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006970:	d112      	bne.n	8006998 <PID_Update+0x11c>
        // 如果输出已经达到最大或最小值，停止积分项的累加
        pid->integral -= pid->Ki * error * dt;  // 取消本次积分累加
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	ed93 7a04 	vldr	s14, [r3, #16]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	edd3 6a01 	vldr	s13, [r3, #4]
 800697e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006982:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006986:	edd7 7a01 	vldr	s15, [r7, #4]
 800698a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800698e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // 更新上一次误差
    pid->previous_error = error;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	615a      	str	r2, [r3, #20]

    return output;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	ee07 3a90 	vmov	s15, r3
}
 80069a4:	eeb0 0a67 	vmov.f32	s0, s15
 80069a8:	3724      	adds	r7, #36	@ 0x24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <reset_PID>:

void reset_PID(PIDController *pid) {
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f; // 重置积分器
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f; // 重置之前的误差
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	615a      	str	r2, [r3, #20]
    pid->last_input = 0.0f; // 重置最后一次输入
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	619a      	str	r2, [r3, #24]
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <calculate_bearing>:
#define TO_RAD (PI / 180.0)  // 度转弧度
#define TO_DEG (180.0 / PI)  // 弧度转度
#define MID_PWM 3000

// 计算目标方位角（假设已知当前位置和目标位置）
float calculate_bearing(double lat1, double lon1, double lat2, double lon2) {
 80069e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069e4:	b096      	sub	sp, #88	@ 0x58
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	ed87 0b06 	vstr	d0, [r7, #24]
 80069ec:	ed87 1b04 	vstr	d1, [r7, #16]
 80069f0:	ed87 2b02 	vstr	d2, [r7, #8]
 80069f4:	ed87 3b00 	vstr	d3, [r7]
	double phi1 = lat1 * TO_RAD;
 80069f8:	a364      	add	r3, pc, #400	@ (adr r3, 8006b8c <calculate_bearing+0x1ac>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a02:	f7f9 fe09 	bl	8000618 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double phi2 = lat2 * TO_RAD;
 8006a0e:	a35f      	add	r3, pc, #380	@ (adr r3, 8006b8c <calculate_bearing+0x1ac>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a18:	f7f9 fdfe 	bl	8000618 <__aeabi_dmul>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double lambda1 = lon1 * TO_RAD;
 8006a24:	a359      	add	r3, pc, #356	@ (adr r3, 8006b8c <calculate_bearing+0x1ac>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a2e:	f7f9 fdf3 	bl	8000618 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double lambda2 = lon2 * TO_RAD;
 8006a3a:	a354      	add	r3, pc, #336	@ (adr r3, 8006b8c <calculate_bearing+0x1ac>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a44:	f7f9 fde8 	bl	8000618 <__aeabi_dmul>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	// 使用球面三角公式计算方位角
	double y = sin(lambda2 - lambda1) * cos(phi2);
 8006a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006a58:	f7f9 fc26 	bl	80002a8 <__aeabi_dsub>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	ec43 2b17 	vmov	d7, r2, r3
 8006a64:	eeb0 0a47 	vmov.f32	s0, s14
 8006a68:	eef0 0a67 	vmov.f32	s1, s15
 8006a6c:	f00c f94c 	bl	8012d08 <sin>
 8006a70:	ec55 4b10 	vmov	r4, r5, d0
 8006a74:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8006a78:	f00c f8ea 	bl	8012c50 <cos>
 8006a7c:	ec53 2b10 	vmov	r2, r3, d0
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fdc8 	bl	8000618 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double x = cos(phi1) * sin(phi2) -
 8006a90:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8006a94:	f00c f8dc 	bl	8012c50 <cos>
 8006a98:	ec55 4b10 	vmov	r4, r5, d0
 8006a9c:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8006aa0:	f00c f932 	bl	8012d08 <sin>
 8006aa4:	ec53 2b10 	vmov	r2, r3, d0
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fdb4 	bl	8000618 <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	461d      	mov	r5, r3
			   sin(phi1) * cos(phi2) * cos(lambda2 - lambda1);
 8006ab8:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8006abc:	f00c f924 	bl	8012d08 <sin>
 8006ac0:	ec59 8b10 	vmov	r8, r9, d0
 8006ac4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8006ac8:	f00c f8c2 	bl	8012c50 <cos>
 8006acc:	ec53 2b10 	vmov	r2, r3, d0
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7f9 fda0 	bl	8000618 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4690      	mov	r8, r2
 8006ade:	4699      	mov	r9, r3
 8006ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ae4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006ae8:	f7f9 fbde 	bl	80002a8 <__aeabi_dsub>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	ec43 2b17 	vmov	d7, r2, r3
 8006af4:	eeb0 0a47 	vmov.f32	s0, s14
 8006af8:	eef0 0a67 	vmov.f32	s1, s15
 8006afc:	f00c f8a8 	bl	8012c50 <cos>
 8006b00:	ec53 2b10 	vmov	r2, r3, d0
 8006b04:	4640      	mov	r0, r8
 8006b06:	4649      	mov	r1, r9
 8006b08:	f7f9 fd86 	bl	8000618 <__aeabi_dmul>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
	double x = cos(phi1) * sin(phi2) -
 8006b10:	4620      	mov	r0, r4
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fbc8 	bl	80002a8 <__aeabi_dsub>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// 计算方位角并将其转换为度数
	double bearing = atan2(y, x) * TO_DEG;
 8006b20:	ed97 1b08 	vldr	d1, [r7, #32]
 8006b24:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8006b28:	f00b ffc4 	bl	8012ab4 <atan2>
 8006b2c:	ec51 0b10 	vmov	r0, r1, d0
 8006b30:	a318      	add	r3, pc, #96	@ (adr r3, 8006b94 <calculate_bearing+0x1b4>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd6f 	bl	8000618 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	// 调整方位角在0到360度之间
	if (bearing < 0.0) {
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006b4e:	f7f9 ffd5 	bl	8000afc <__aeabi_dcmplt>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <calculate_bearing+0x18e>
		bearing += 360.0;
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <calculate_bearing+0x1a8>)
 8006b5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006b62:	f7f9 fba3 	bl	80002ac <__adddf3>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	}

	return bearing;
 8006b6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006b72:	f7fa f849 	bl	8000c08 <__aeabi_d2f>
 8006b76:	4603      	mov	r3, r0
 8006b78:	ee07 3a90 	vmov	s15, r3
}
 8006b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b80:	3758      	adds	r7, #88	@ 0x58
 8006b82:	46bd      	mov	sp, r7
 8006b84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b88:	40768000 	.word	0x40768000
 8006b8c:	a2529d39 	.word	0xa2529d39
 8006b90:	3f91df46 	.word	0x3f91df46
 8006b94:	1a63c1f8 	.word	0x1a63c1f8
 8006b98:	404ca5dc 	.word	0x404ca5dc
 8006b9c:	00000000 	.word	0x00000000

08006ba0 <PID_Motor_Contorl>:
#define PWM_MIN 3000
#define PWM_MAX 3600

/*113.4891718°，纬度22.3088105°*/

void PID_Motor_Contorl(void){
 8006ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ba4:	b0a2      	sub	sp, #136	@ 0x88
 8006ba6:	af06      	add	r7, sp, #24
	int key;
	float current_heading_before = 0.0;
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	663b      	str	r3, [r7, #96]	@ 0x60
	float current_heading = 0.0;
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	double ret[2];
	double ret_target[2];
	double ret_last[2];
	float heading_error = 0.0;
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
	float target_bearing = 0.0;
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	657b      	str	r3, [r7, #84]	@ 0x54
	float correction = 0.0;
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float left_pwm = 0.0;
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	66bb      	str	r3, [r7, #104]	@ 0x68
	float right_pwm = 0.0;
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	667b      	str	r3, [r7, #100]	@ 0x64
	float board_distance = 0.0;
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	653b      	str	r3, [r7, #80]	@ 0x50
	float board_distance_last = 0.0;
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float return_heading = 0.0;
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	64bb      	str	r3, [r7, #72]	@ 0x48
	int return_flag = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	647b      	str	r3, [r7, #68]	@ 0x44
	float target_speed = 0.0; // 目标速度
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	643b      	str	r3, [r7, #64]	@ 0x40
	float current_speed = 0.0; // 当前速度
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float speed_error = 0.0; // 速度误差
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
	float speed_correction = 0.0; // 速度校正值
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
	PID_Init(&heading_pid, 1.8f, 1.1f, 0.075f, 0.0f, -100.0f, 100.0f);
 8006c00:	eddf 2a81 	vldr	s5, [pc, #516]	@ 8006e08 <PID_Motor_Contorl+0x268>
 8006c04:	ed9f 2a81 	vldr	s4, [pc, #516]	@ 8006e0c <PID_Motor_Contorl+0x26c>
 8006c08:	eddf 1a8f 	vldr	s3, [pc, #572]	@ 8006e48 <PID_Motor_Contorl+0x2a8>
 8006c0c:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8006e44 <PID_Motor_Contorl+0x2a4>
 8006c10:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8006e10 <PID_Motor_Contorl+0x270>
 8006c14:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8006e14 <PID_Motor_Contorl+0x274>
 8006c18:	487f      	ldr	r0, [pc, #508]	@ (8006e18 <PID_Motor_Contorl+0x278>)
 8006c1a:	f7ff fdff 	bl	800681c <PID_Init>
	 // 调整这些参数以适应你的系统
	while (1) {
		// 获取当前控制方式
		key = Key_Switch();
 8006c1e:	f7fa fa5b 	bl	80010d8 <Key_Switch>
 8006c22:	6338      	str	r0, [r7, #48]	@ 0x30
		Data_Collect();
 8006c24:	f7fa fa4e 	bl	80010c4 <Data_Collect>
		//Update_Data(ret[0],ret[1],ret_target[0],ret_target[1],current_heading,left_pwm,right_pwm,board_distance,heading_error,target_bearing);
		if(key == AUTO && Auto_Start_Flag == AUTO_START){
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	f040 8283 	bne.w	8007136 <PID_Motor_Contorl+0x596>
 8006c30:	4b7a      	ldr	r3, [pc, #488]	@ (8006e1c <PID_Motor_Contorl+0x27c>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 827e 	bne.w	8007136 <PID_Motor_Contorl+0x596>
			// 读取当前航向角
			current_heading = get_heading_from_imu();
 8006c3a:	f000 fab5 	bl	80071a8 <get_heading_from_imu>
 8006c3e:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
			//current_heading = convert_angle_0_to_360_to_180_to_neg180(current_heading_before)-5;

			// 计算目标方位角
			wgs84_to_bd09(board_config.gps.lon_deg, board_config.gps.lat_deg, ret);
 8006c42:	4b77      	ldr	r3, [pc, #476]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c44:	ed93 7b7e 	vldr	d7, [r3, #504]	@ 0x1f8
 8006c48:	4b75      	ldr	r3, [pc, #468]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c4a:	ed93 6b7c 	vldr	d6, [r3, #496]	@ 0x1f0
 8006c4e:	f107 0320 	add.w	r3, r7, #32
 8006c52:	4618      	mov	r0, r3
 8006c54:	eeb0 1a46 	vmov.f32	s2, s12
 8006c58:	eef0 1a66 	vmov.f32	s3, s13
 8006c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8006c60:	eef0 0a67 	vmov.f32	s1, s15
 8006c64:	f7fd fb90 	bl	8004388 <wgs84_to_bd09>
			wgs84_to_bd09(board_config.gps.Target_gpslon[board_config.gps.now_number], board_config.gps.Target_gpslat[board_config.gps.now_number],ret_last);
 8006c68:	4b6d      	ldr	r3, [pc, #436]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c70:	3312      	adds	r3, #18
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	ed93 7b00 	vldr	d7, [r3]
 8006c7a:	4b69      	ldr	r3, [pc, #420]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c80:	4a67      	ldr	r2, [pc, #412]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006c82:	330c      	adds	r3, #12
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4413      	add	r3, r2
 8006c88:	ed93 6b00 	vldr	d6, [r3]
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	4618      	mov	r0, r3
 8006c90:	eeb0 1a46 	vmov.f32	s2, s12
 8006c94:	eef0 1a66 	vmov.f32	s3, s13
 8006c98:	eeb0 0a47 	vmov.f32	s0, s14
 8006c9c:	eef0 0a67 	vmov.f32	s1, s15
 8006ca0:	f7fd fb72 	bl	8004388 <wgs84_to_bd09>
			wgs84_to_bd09(board_config.gps.Goal_Lon, board_config.gps.Goal_Lat, ret_target);
 8006ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006ca6:	ed93 7b82 	vldr	d7, [r3, #520]	@ 0x208
 8006caa:	4b5d      	ldr	r3, [pc, #372]	@ (8006e20 <PID_Motor_Contorl+0x280>)
 8006cac:	ed93 6b80 	vldr	d6, [r3, #512]	@ 0x200
 8006cb0:	f107 0310 	add.w	r3, r7, #16
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	eeb0 1a46 	vmov.f32	s2, s12
 8006cba:	eef0 1a66 	vmov.f32	s3, s13
 8006cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8006cc2:	eef0 0a67 	vmov.f32	s1, s15
 8006cc6:	f7fd fb5f 	bl	8004388 <wgs84_to_bd09>
			target_bearing = calculate_bearing(ret[1], ret[0],ret_target[1],ret_target[0]);
 8006cca:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8006cce:	ed97 6b08 	vldr	d6, [r7, #32]
 8006cd2:	ed97 5b06 	vldr	d5, [r7, #24]
 8006cd6:	ed97 4b04 	vldr	d4, [r7, #16]
 8006cda:	eeb0 3a44 	vmov.f32	s6, s8
 8006cde:	eef0 3a64 	vmov.f32	s7, s9
 8006ce2:	eeb0 2a45 	vmov.f32	s4, s10
 8006ce6:	eef0 2a65 	vmov.f32	s5, s11
 8006cea:	eeb0 1a46 	vmov.f32	s2, s12
 8006cee:	eef0 1a66 	vmov.f32	s3, s13
 8006cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8006cf6:	eef0 0a67 	vmov.f32	s1, s15
 8006cfa:	f7ff fe71 	bl	80069e0 <calculate_bearing>
 8006cfe:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

			// 计算误差
			heading_error = fmod(target_bearing - current_heading + 180.0f, 360.0f) - 180.0f;
 8006d02:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8006d06:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d0e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006e24 <PID_Motor_Contorl+0x284>
 8006d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d16:	ee17 0a90 	vmov	r0, s15
 8006d1a:	f7f9 fc25 	bl	8000568 <__aeabi_f2d>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8006e00 <PID_Motor_Contorl+0x260>
 8006d26:	ec43 2b10 	vmov	d0, r2, r3
 8006d2a:	f00b fec5 	bl	8012ab8 <fmod>
 8006d2e:	ec51 0b10 	vmov	r0, r1, d0
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	4b3c      	ldr	r3, [pc, #240]	@ (8006e28 <PID_Motor_Contorl+0x288>)
 8006d38:	f7f9 fab6 	bl	80002a8 <__aeabi_dsub>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	f7f9 ff60 	bl	8000c08 <__aeabi_d2f>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	65bb      	str	r3, [r7, #88]	@ 0x58

			if(abs(heading_error) >= 25.0 && abs(heading_error) <= 45.0){
 8006d4c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d54:	ee17 3a90 	vmov	r3, s15
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bfb8      	it	lt
 8006d5c:	425b      	neglt	r3, r3
 8006d5e:	2b18      	cmp	r3, #24
 8006d60:	dd29      	ble.n	8006db6 <PID_Motor_Contorl+0x216>
 8006d62:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d6a:	ee17 3a90 	vmov	r3, s15
 8006d6e:	f113 0f2d 	cmn.w	r3, #45	@ 0x2d
 8006d72:	db20      	blt.n	8006db6 <PID_Motor_Contorl+0x216>
 8006d74:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d7c:	ee17 3a90 	vmov	r3, s15
 8006d80:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d82:	dc18      	bgt.n	8006db6 <PID_Motor_Contorl+0x216>
				//PID_Init(&heading_pid, 1.5f, 1.1f, 0.075f, 0.0f, -1200.0f, 1200.0f);
				if(heading_error < 0.0){
 8006d84:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d90:	d504      	bpl.n	8006d9c <PID_Motor_Contorl+0x1fc>
					left_pwm = 2500;  // 中间值3000，加上负修正
 8006d92:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <PID_Motor_Contorl+0x28c>)
 8006d94:	66bb      	str	r3, [r7, #104]	@ 0x68
					right_pwm = 3600;  // 中间值3000，加上正修正
 8006d96:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <PID_Motor_Contorl+0x290>)
 8006d98:	667b      	str	r3, [r7, #100]	@ 0x64
				if(heading_error < 0.0){
 8006d9a:	e08a      	b.n	8006eb2 <PID_Motor_Contorl+0x312>
				}else if(heading_error >= 0.0){
 8006d9c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da8:	da00      	bge.n	8006dac <PID_Motor_Contorl+0x20c>
				if(heading_error < 0.0){
 8006daa:	e082      	b.n	8006eb2 <PID_Motor_Contorl+0x312>
					left_pwm = 3600;  // 中间值3000，加上负修正
 8006dac:	4b20      	ldr	r3, [pc, #128]	@ (8006e30 <PID_Motor_Contorl+0x290>)
 8006dae:	66bb      	str	r3, [r7, #104]	@ 0x68
					right_pwm = 2500;  // 中间值3000，加上正修正
 8006db0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e2c <PID_Motor_Contorl+0x28c>)
 8006db2:	667b      	str	r3, [r7, #100]	@ 0x64
				if(heading_error < 0.0){
 8006db4:	e07d      	b.n	8006eb2 <PID_Motor_Contorl+0x312>
				}
//					left_pwm = (uint32_t)(3000.0f - correction);  // 中间值3000，加上负修正
//					right_pwm = (uint32_t)(3000.0f + correction);  // 中间值3000，加上正修正
			}
			else if(abs(heading_error) > 45.0){
 8006db6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dbe:	ee17 3a90 	vmov	r3, s15
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfb8      	it	lt
 8006dc6:	425b      	neglt	r3, r3
 8006dc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8006dca:	dd3f      	ble.n	8006e4c <PID_Motor_Contorl+0x2ac>
				if(heading_error < 0.0){
 8006dcc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	d504      	bpl.n	8006de4 <PID_Motor_Contorl+0x244>
					left_pwm = 1800;  // 中间值3000，加上负修正
 8006dda:	4b16      	ldr	r3, [pc, #88]	@ (8006e34 <PID_Motor_Contorl+0x294>)
 8006ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
					right_pwm = 4200;  // 中间值3000，加上正修正
 8006dde:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <PID_Motor_Contorl+0x298>)
 8006de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de2:	e066      	b.n	8006eb2 <PID_Motor_Contorl+0x312>
				}else if(heading_error >= 0.0){
 8006de4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df0:	db5f      	blt.n	8006eb2 <PID_Motor_Contorl+0x312>
					left_pwm = 4200;  // 中间值3000，加上负修正
 8006df2:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <PID_Motor_Contorl+0x298>)
 8006df4:	66bb      	str	r3, [r7, #104]	@ 0x68
					right_pwm = 1800;  // 中间值3000，加上正修正
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <PID_Motor_Contorl+0x294>)
 8006df8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dfa:	e05a      	b.n	8006eb2 <PID_Motor_Contorl+0x312>
 8006dfc:	f3af 8000 	nop.w
 8006e00:	00000000 	.word	0x00000000
 8006e04:	40768000 	.word	0x40768000
 8006e08:	42c80000 	.word	0x42c80000
 8006e0c:	c2c80000 	.word	0xc2c80000
 8006e10:	3f8ccccd 	.word	0x3f8ccccd
 8006e14:	3fe66666 	.word	0x3fe66666
 8006e18:	200008a0 	.word	0x200008a0
 8006e1c:	200009c5 	.word	0x200009c5
 8006e20:	200005d8 	.word	0x200005d8
 8006e24:	43340000 	.word	0x43340000
 8006e28:	40668000 	.word	0x40668000
 8006e2c:	451c4000 	.word	0x451c4000
 8006e30:	45610000 	.word	0x45610000
 8006e34:	44e10000 	.word	0x44e10000
 8006e38:	45834000 	.word	0x45834000
 8006e3c:	42f00000 	.word	0x42f00000
 8006e40:	c2f00000 	.word	0xc2f00000
 8006e44:	3d99999a 	.word	0x3d99999a
 8006e48:	00000000 	.word	0x00000000
				}
			}
			else{
				PID_Init(&heading_pid, 1.5f, 1.0f, 0.075f, 0.0f, -120.0f, 120.0f);
 8006e4c:	ed5f 2a05 	vldr	s5, [pc, #-20]	@ 8006e3c <PID_Motor_Contorl+0x29c>
 8006e50:	ed1f 2a05 	vldr	s4, [pc, #-20]	@ 8006e40 <PID_Motor_Contorl+0x2a0>
 8006e54:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 8006e48 <PID_Motor_Contorl+0x2a8>
 8006e58:	ed1f 1a06 	vldr	s2, [pc, #-24]	@ 8006e44 <PID_Motor_Contorl+0x2a4>
 8006e5c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8006e60:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8006e64:	48be      	ldr	r0, [pc, #760]	@ (8007160 <PID_Motor_Contorl+0x5c0>)
 8006e66:	f7ff fcd9 	bl	800681c <PID_Init>
				correction = PID_Update(&heading_pid, heading_error, dt);
 8006e6a:	4bbe      	ldr	r3, [pc, #760]	@ (8007164 <PID_Motor_Contorl+0x5c4>)
 8006e6c:	edd3 7a00 	vldr	s15, [r3]
 8006e70:	eef0 0a67 	vmov.f32	s1, s15
 8006e74:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8006e78:	48b9      	ldr	r0, [pc, #740]	@ (8007160 <PID_Motor_Contorl+0x5c0>)
 8006e7a:	f7ff fcff 	bl	800687c <PID_Update>
 8006e7e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
				left_pwm = (uint32_t)(3750.0f - correction);  // 中间值3000，加上负修正
 8006e82:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8007168 <PID_Motor_Contorl+0x5c8>
 8006e86:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8006e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
				right_pwm = (uint32_t)(3750.0f + correction);  // 中间值3000，加上正修正
 8006e9a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8006e9e:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8007168 <PID_Motor_Contorl+0x5c8>
 8006ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
			}


			// 确保PWM值在有效范围内
			if (left_pwm > 4200) left_pwm = 4200;
 8006eb2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8006eb6:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 800716c <PID_Motor_Contorl+0x5cc>
 8006eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	dd01      	ble.n	8006ec8 <PID_Motor_Contorl+0x328>
 8006ec4:	4baa      	ldr	r3, [pc, #680]	@ (8007170 <PID_Motor_Contorl+0x5d0>)
 8006ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
			if (left_pwm < 1800) left_pwm = 1800;
 8006ec8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8006ecc:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007174 <PID_Motor_Contorl+0x5d4>
 8006ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	d501      	bpl.n	8006ede <PID_Motor_Contorl+0x33e>
 8006eda:	4ba7      	ldr	r3, [pc, #668]	@ (8007178 <PID_Motor_Contorl+0x5d8>)
 8006edc:	66bb      	str	r3, [r7, #104]	@ 0x68
			if (right_pwm > 4200) right_pwm = 4200;
 8006ede:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006ee2:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800716c <PID_Motor_Contorl+0x5cc>
 8006ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	dd01      	ble.n	8006ef4 <PID_Motor_Contorl+0x354>
 8006ef0:	4b9f      	ldr	r3, [pc, #636]	@ (8007170 <PID_Motor_Contorl+0x5d0>)
 8006ef2:	667b      	str	r3, [r7, #100]	@ 0x64
			if (right_pwm < 1800) right_pwm = 1800;
 8006ef4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006ef8:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8007174 <PID_Motor_Contorl+0x5d4>
 8006efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f04:	d501      	bpl.n	8006f0a <PID_Motor_Contorl+0x36a>
 8006f06:	4b9c      	ldr	r3, [pc, #624]	@ (8007178 <PID_Motor_Contorl+0x5d8>)
 8006f08:	667b      	str	r3, [r7, #100]	@ 0x64

			// 获取最后一个点的定位

			board_distance = get_distance(ret_target[1], ret_target[0], ret[1], ret[0]);
 8006f0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8006f0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8006f12:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8006f16:	ed97 4b08 	vldr	d4, [r7, #32]
 8006f1a:	eeb0 3a44 	vmov.f32	s6, s8
 8006f1e:	eef0 3a64 	vmov.f32	s7, s9
 8006f22:	eeb0 2a45 	vmov.f32	s4, s10
 8006f26:	eef0 2a65 	vmov.f32	s5, s11
 8006f2a:	eeb0 1a46 	vmov.f32	s2, s12
 8006f2e:	eef0 1a66 	vmov.f32	s3, s13
 8006f32:	eeb0 0a47 	vmov.f32	s0, s14
 8006f36:	eef0 0a67 	vmov.f32	s1, s15
 8006f3a:	f7ff fb41 	bl	80065c0 <get_distance>
 8006f3e:	ec53 2b10 	vmov	r2, r3, d0
 8006f42:	4610      	mov	r0, r2
 8006f44:	4619      	mov	r1, r3
 8006f46:	f7f9 fe5f 	bl	8000c08 <__aeabi_d2f>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	653b      	str	r3, [r7, #80]	@ 0x50

			board_distance_last = get_distance(ret_last[1], ret_last[0], ret[1], ret[0]);
 8006f4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f52:	ed97 6b00 	vldr	d6, [r7]
 8006f56:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8006f5a:	ed97 4b08 	vldr	d4, [r7, #32]
 8006f5e:	eeb0 3a44 	vmov.f32	s6, s8
 8006f62:	eef0 3a64 	vmov.f32	s7, s9
 8006f66:	eeb0 2a45 	vmov.f32	s4, s10
 8006f6a:	eef0 2a65 	vmov.f32	s5, s11
 8006f6e:	eeb0 1a46 	vmov.f32	s2, s12
 8006f72:	eef0 1a66 	vmov.f32	s3, s13
 8006f76:	eeb0 0a47 	vmov.f32	s0, s14
 8006f7a:	eef0 0a67 	vmov.f32	s1, s15
 8006f7e:	f7ff fb1f 	bl	80065c0 <get_distance>
 8006f82:	ec53 2b10 	vmov	r2, r3, d0
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7f9 fe3d 	bl	8000c08 <__aeabi_d2f>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c

			if (board_distance_last < 0.020  && board_distance_last > 0.015) {
 8006f92:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006f94:	f7f9 fae8 	bl	8000568 <__aeabi_f2d>
 8006f98:	a36b      	add	r3, pc, #428	@ (adr r3, 8007148 <PID_Motor_Contorl+0x5a8>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f7f9 fdad 	bl	8000afc <__aeabi_dcmplt>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d025      	beq.n	8006ff4 <PID_Motor_Contorl+0x454>
 8006fa8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006faa:	f7f9 fadd 	bl	8000568 <__aeabi_f2d>
 8006fae:	a368      	add	r3, pc, #416	@ (adr r3, 8007150 <PID_Motor_Contorl+0x5b0>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 fdc0 	bl	8000b38 <__aeabi_dcmpgt>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01a      	beq.n	8006ff4 <PID_Motor_Contorl+0x454>
				if(board_config.gps.now_number < board_config.gps.gps_num){
 8006fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8006fc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8006fc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	da07      	bge.n	8006fde <PID_Motor_Contorl+0x43e>
					board_config.gps.now_number++;
 8006fce:	4b6b      	ldr	r3, [pc, #428]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8006fd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a69      	ldr	r2, [pc, #420]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8006fd8:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
				if(board_config.gps.now_number < board_config.gps.gps_num){
 8006fdc:	e04f      	b.n	800707e <PID_Motor_Contorl+0x4de>
				}
				else{
					// 计算PWM值
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2800);
 8006fde:	4b68      	ldr	r3, [pc, #416]	@ (8007180 <PID_Motor_Contorl+0x5e0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8006fe6:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2800);
 8006fe8:	4b66      	ldr	r3, [pc, #408]	@ (8007184 <PID_Motor_Contorl+0x5e4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8006ff0:	641a      	str	r2, [r3, #64]	@ 0x40
				if(board_config.gps.now_number < board_config.gps.gps_num){
 8006ff2:	e044      	b.n	800707e <PID_Motor_Contorl+0x4de>
				}
			}
			else if(board_distance_last <= 0.0015){
 8006ff4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ff6:	f7f9 fab7 	bl	8000568 <__aeabi_f2d>
 8006ffa:	a357      	add	r3, pc, #348	@ (adr r3, 8007158 <PID_Motor_Contorl+0x5b8>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fd86 	bl	8000b10 <__aeabi_dcmple>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d011      	beq.n	800702e <PID_Motor_Contorl+0x48e>
				Auto_Start_Flag = AUTO_STOP;
 800700a:	4b5f      	ldr	r3, [pc, #380]	@ (8007188 <PID_Motor_Contorl+0x5e8>)
 800700c:	2202      	movs	r2, #2
 800700e:	701a      	strb	r2, [r3, #0]
				board_config.gps.now_number = 0;
 8007010:	4b5a      	ldr	r3, [pc, #360]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8007018:	4b59      	ldr	r3, [pc, #356]	@ (8007180 <PID_Motor_Contorl+0x5e0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007020:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 3000);
 8007022:	4b58      	ldr	r3, [pc, #352]	@ (8007184 <PID_Motor_Contorl+0x5e4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800702a:	641a      	str	r2, [r3, #64]	@ 0x40
 800702c:	e027      	b.n	800707e <PID_Motor_Contorl+0x4de>
			}
			else{
				if(ret[0] == ret_target[0] && ret[1] == ret_target[1]){
 800702e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007036:	f7f9 fd57 	bl	8000ae8 <__aeabi_dcmpeq>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <PID_Motor_Contorl+0x4ba>
 8007040:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007048:	f7f9 fd4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <PID_Motor_Contorl+0x4ba>
					left_pwm = 3000;  // 中间值3000，加上负修正
 8007052:	4b4e      	ldr	r3, [pc, #312]	@ (800718c <PID_Motor_Contorl+0x5ec>)
 8007054:	66bb      	str	r3, [r7, #104]	@ 0x68
					right_pwm = 3000;  // 中间值3000，加上正修正
 8007056:	4b4d      	ldr	r3, [pc, #308]	@ (800718c <PID_Motor_Contorl+0x5ec>)
 8007058:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);  // 基础占空比加上修正
 800705a:	4b49      	ldr	r3, [pc, #292]	@ (8007180 <PID_Motor_Contorl+0x5e0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);  // 基础占空比加上修正
 800706c:	4b45      	ldr	r3, [pc, #276]	@ (8007184 <PID_Motor_Contorl+0x5e4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8007074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007078:	ee17 2a90 	vmov	r2, s15
 800707c:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			printf("current_heading:%f  target_bearing:%f  heading_error:%f\r\n",current_heading,target_bearing,heading_error);
 800707e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007080:	f7f9 fa72 	bl	8000568 <__aeabi_f2d>
 8007084:	4680      	mov	r8, r0
 8007086:	4689      	mov	r9, r1
 8007088:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800708a:	f7f9 fa6d 	bl	8000568 <__aeabi_f2d>
 800708e:	4604      	mov	r4, r0
 8007090:	460d      	mov	r5, r1
 8007092:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007094:	f7f9 fa68 	bl	8000568 <__aeabi_f2d>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070a0:	e9cd 4500 	strd	r4, r5, [sp]
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	4839      	ldr	r0, [pc, #228]	@ (8007190 <PID_Motor_Contorl+0x5f0>)
 80070aa:	f008 fa87 	bl	800f5bc <iprintf>
			printf("%f,%f ------------>%f,%f\r\n",ret[0],ret[1],ret_target[0],ret_target[1]);
 80070ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80070be:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80070c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c6:	e9cd 2300 	strd	r2, r3, [sp]
 80070ca:	4642      	mov	r2, r8
 80070cc:	464b      	mov	r3, r9
 80070ce:	4831      	ldr	r0, [pc, #196]	@ (8007194 <PID_Motor_Contorl+0x5f4>)
 80070d0:	f008 fa74 	bl	800f5bc <iprintf>
			printf("correction:%f  left_pwm:%f  right_pwm:%f\r\n",correction,left_pwm,right_pwm);
 80070d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070d6:	f7f9 fa47 	bl	8000568 <__aeabi_f2d>
 80070da:	4680      	mov	r8, r0
 80070dc:	4689      	mov	r9, r1
 80070de:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80070e0:	f7f9 fa42 	bl	8000568 <__aeabi_f2d>
 80070e4:	4604      	mov	r4, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80070ea:	f7f9 fa3d 	bl	8000568 <__aeabi_f2d>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070f6:	e9cd 4500 	strd	r4, r5, [sp]
 80070fa:	4642      	mov	r2, r8
 80070fc:	464b      	mov	r3, r9
 80070fe:	4826      	ldr	r0, [pc, #152]	@ (8007198 <PID_Motor_Contorl+0x5f8>)
 8007100:	f008 fa5c 	bl	800f5bc <iprintf>
			printf("distance:%fKm\r\n",board_distance);
 8007104:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007106:	f7f9 fa2f 	bl	8000568 <__aeabi_f2d>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4823      	ldr	r0, [pc, #140]	@ (800719c <PID_Motor_Contorl+0x5fc>)
 8007110:	f008 fa54 	bl	800f5bc <iprintf>
			printf("\r\n");
 8007114:	4822      	ldr	r0, [pc, #136]	@ (80071a0 <PID_Motor_Contorl+0x600>)
 8007116:	f008 fab9 	bl	800f68c <puts>
			// 等待下一个控制周期
			HAL_Delay((uint32_t)(dt * 1000));
 800711a:	4b12      	ldr	r3, [pc, #72]	@ (8007164 <PID_Motor_Contorl+0x5c4>)
 800711c:	edd3 7a00 	vldr	s15, [r3]
 8007120:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80071a4 <PID_Motor_Contorl+0x604>
 8007124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800712c:	ee17 0a90 	vmov	r0, s15
 8007130:	f002 f90c 	bl	800934c <HAL_Delay>
		if(key == AUTO && Auto_Start_Flag == AUTO_START){
 8007134:	e006      	b.n	8007144 <PID_Motor_Contorl+0x5a4>
		}
		else{
			board_config.gps.now_number = 0;
 8007136:	4b11      	ldr	r3, [pc, #68]	@ (800717c <PID_Motor_Contorl+0x5dc>)
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			reset_PID(&heading_pid);
 800713e:	4808      	ldr	r0, [pc, #32]	@ (8007160 <PID_Motor_Contorl+0x5c0>)
 8007140:	f7ff fc37 	bl	80069b2 <reset_PID>
		key = Key_Switch();
 8007144:	e56b      	b.n	8006c1e <PID_Motor_Contorl+0x7e>
 8007146:	bf00      	nop
 8007148:	47ae147b 	.word	0x47ae147b
 800714c:	3f947ae1 	.word	0x3f947ae1
 8007150:	eb851eb8 	.word	0xeb851eb8
 8007154:	3f8eb851 	.word	0x3f8eb851
 8007158:	bc6a7efa 	.word	0xbc6a7efa
 800715c:	3f589374 	.word	0x3f589374
 8007160:	200008a0 	.word	0x200008a0
 8007164:	200009d0 	.word	0x200009d0
 8007168:	456a6000 	.word	0x456a6000
 800716c:	45834000 	.word	0x45834000
 8007170:	45834000 	.word	0x45834000
 8007174:	44e10000 	.word	0x44e10000
 8007178:	44e10000 	.word	0x44e10000
 800717c:	200005d8 	.word	0x200005d8
 8007180:	200009f0 	.word	0x200009f0
 8007184:	20000a38 	.word	0x20000a38
 8007188:	200009c5 	.word	0x200009c5
 800718c:	453b8000 	.word	0x453b8000
 8007190:	08015964 	.word	0x08015964
 8007194:	080159a0 	.word	0x080159a0
 8007198:	080159bc 	.word	0x080159bc
 800719c:	080159e8 	.word	0x080159e8
 80071a0:	080159f8 	.word	0x080159f8
 80071a4:	447a0000 	.word	0x447a0000

080071a8 <get_heading_from_imu>:
		}
	}
}

float get_heading_from_imu(void) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
    // 实现串口通信以读取IMU的数据
    // 返回当前的航向角（单位：度）
    return board_config.Imu_data.Pitch;  // 示例返回值
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <get_heading_from_imu+0x20>)
 80071ae:	e9d3 238e 	ldrd	r2, r3, [r3, #568]	@ 0x238
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7f9 fd27 	bl	8000c08 <__aeabi_d2f>
 80071ba:	4603      	mov	r3, r0
 80071bc:	ee07 3a90 	vmov	s15, r3

}
 80071c0:	eeb0 0a67 	vmov.f32	s0, s15
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200005d8 	.word	0x200005d8

080071cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	4b10      	ldr	r3, [pc, #64]	@ (8007218 <HAL_MspInit+0x4c>)
 80071d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071da:	4a0f      	ldr	r2, [pc, #60]	@ (8007218 <HAL_MspInit+0x4c>)
 80071dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <HAL_MspInit+0x4c>)
 80071e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ea:	607b      	str	r3, [r7, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	4b09      	ldr	r3, [pc, #36]	@ (8007218 <HAL_MspInit+0x4c>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	4a08      	ldr	r2, [pc, #32]	@ (8007218 <HAL_MspInit+0x4c>)
 80071f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80071fe:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <HAL_MspInit+0x4c>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800

0800721c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <NMI_Handler+0x4>

08007224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <HardFault_Handler+0x4>

0800722c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <MemManage_Handler+0x4>

08007234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <BusFault_Handler+0x4>

0800723c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <UsageFault_Handler+0x4>

08007244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007248:	bf00      	nop
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007252:	b480      	push	{r7}
 8007254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007272:	f002 f84b 	bl	800930c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007276:	bf00      	nop
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007280:	4802      	ldr	r0, [pc, #8]	@ (800728c <DMA1_Stream0_IRQHandler+0x10>)
 8007282:	f003 f8d5 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000cb8 	.word	0x20000cb8

08007290 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007294:	4802      	ldr	r0, [pc, #8]	@ (80072a0 <DMA1_Stream1_IRQHandler+0x10>)
 8007296:	f003 f8cb 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000e38 	.word	0x20000e38

080072a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80072a8:	4802      	ldr	r0, [pc, #8]	@ (80072b4 <DMA1_Stream2_IRQHandler+0x10>)
 80072aa:	f003 f8c1 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80072ae:	bf00      	nop
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000c58 	.word	0x20000c58

080072b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80072bc:	4802      	ldr	r0, [pc, #8]	@ (80072c8 <DMA1_Stream4_IRQHandler+0x10>)
 80072be:	f003 f8b7 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000bf8 	.word	0x20000bf8

080072cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80072d0:	4802      	ldr	r0, [pc, #8]	@ (80072dc <DMA1_Stream5_IRQHandler+0x10>)
 80072d2:	f003 f8ad 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000dd8 	.word	0x20000dd8

080072e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80072e6:	481f      	ldr	r0, [pc, #124]	@ (8007364 <USART2_IRQHandler+0x84>)
 80072e8:	f005 f9fa 	bl	800c6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint32_t tmp_flag = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 80072f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007364 <USART2_IRQHandler+0x84>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d026      	beq.n	800735a <USART2_IRQHandler+0x7a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800730c:	2300      	movs	r3, #0
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <USART2_IRQHandler+0x84>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	4b12      	ldr	r3, [pc, #72]	@ (8007364 <USART2_IRQHandler+0x84>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	607b      	str	r3, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
  	temp = huart2.Instance->SR;
 8007322:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <USART2_IRQHandler+0x84>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]
  	temp = huart2.Instance->DR;
 800732a:	4b0e      	ldr	r3, [pc, #56]	@ (8007364 <USART2_IRQHandler+0x84>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60bb      	str	r3, [r7, #8]
  	HAL_UART_DMAStop(&huart2);
 8007332:	480c      	ldr	r0, [pc, #48]	@ (8007364 <USART2_IRQHandler+0x84>)
 8007334:	f005 f955 	bl	800c5e2 <HAL_UART_DMAStop>
  	temp = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007338:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <USART2_IRQHandler+0x88>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60bb      	str	r3, [r7, #8]
  	uart2_rx_len =  UART2_BUF_SIZE - temp;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	b29b      	uxth	r3, r3
 8007344:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007348:	b29a      	uxth	r2, r3
 800734a:	4b08      	ldr	r3, [pc, #32]	@ (800736c <USART2_IRQHandler+0x8c>)
 800734c:	801a      	strh	r2, [r3, #0]
  	uart2_recv_end_flag = 1;
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <USART2_IRQHandler+0x90>)
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
  	HAL_UART_RxCpltCallback(&huart2);
 8007354:	4803      	ldr	r0, [pc, #12]	@ (8007364 <USART2_IRQHandler+0x84>)
 8007356:	f7fd f945 	bl	80045e4 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000b68 	.word	0x20000b68
 8007368:	20000dd8 	.word	0x20000dd8
 800736c:	200009dc 	.word	0x200009dc
 8007370:	200009de 	.word	0x200009de

08007374 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800737a:	481f      	ldr	r0, [pc, #124]	@ (80073f8 <USART3_IRQHandler+0x84>)
 800737c:	f005 f9b0 	bl	800c6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  uint32_t tmp_flag = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8007384:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <USART3_IRQHandler+0x84>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b10      	cmp	r3, #16
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d026      	beq.n	80073ee <USART3_IRQHandler+0x7a>
  {
	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80073a0:	2300      	movs	r3, #0
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	4b14      	ldr	r3, [pc, #80]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
	temp = huart3.Instance->SR;
 80073b6:	4b10      	ldr	r3, [pc, #64]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
	temp = huart3.Instance->DR;
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	60bb      	str	r3, [r7, #8]
	HAL_UART_DMAStop(&huart3);
 80073c6:	480c      	ldr	r0, [pc, #48]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073c8:	f005 f90b 	bl	800c5e2 <HAL_UART_DMAStop>
	temp = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80073cc:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <USART3_IRQHandler+0x88>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60bb      	str	r3, [r7, #8]
	uart3_rx_len =  UART3_BUF_SIZE - temp;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80073dc:	b29a      	uxth	r2, r3
 80073de:	4b08      	ldr	r3, [pc, #32]	@ (8007400 <USART3_IRQHandler+0x8c>)
 80073e0:	801a      	strh	r2, [r3, #0]
	uart3_recv_end_flag = 1;
 80073e2:	4b08      	ldr	r3, [pc, #32]	@ (8007404 <USART3_IRQHandler+0x90>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	701a      	strb	r2, [r3, #0]
	HAL_UART_RxCpltCallback(&huart3);
 80073e8:	4803      	ldr	r0, [pc, #12]	@ (80073f8 <USART3_IRQHandler+0x84>)
 80073ea:	f7fd f8fb 	bl	80045e4 <HAL_UART_RxCpltCallback>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000bb0 	.word	0x20000bb0
 80073fc:	20000e38 	.word	0x20000e38
 8007400:	200009e0 	.word	0x200009e0
 8007404:	200009e2 	.word	0x200009e2

08007408 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800740c:	4802      	ldr	r0, [pc, #8]	@ (8007418 <DMA1_Stream7_IRQHandler+0x10>)
 800740e:	f003 f80f 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007412:	bf00      	nop
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000d18 	.word	0x20000d18

0800741c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007422:	481f      	ldr	r0, [pc, #124]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007424:	f005 f95c 	bl	800c6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  uint32_t tmp_flag = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800742c:	4b1c      	ldr	r3, [pc, #112]	@ (80074a0 <UART4_IRQHandler+0x84>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b10      	cmp	r3, #16
 8007438:	bf0c      	ite	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	2300      	movne	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d026      	beq.n	8007496 <UART4_IRQHandler+0x7a>
  {
  __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8007448:	2300      	movs	r3, #0
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	4b14      	ldr	r3, [pc, #80]	@ (80074a0 <UART4_IRQHandler+0x84>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
  temp = huart4.Instance->SR;
 800745e:	4b10      	ldr	r3, [pc, #64]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60bb      	str	r3, [r7, #8]
  temp = huart4.Instance->DR;
 8007466:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	60bb      	str	r3, [r7, #8]
  HAL_UART_DMAStop(&huart4);
 800746e:	480c      	ldr	r0, [pc, #48]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007470:	f005 f8b7 	bl	800c5e2 <HAL_UART_DMAStop>
  temp = __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8007474:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <UART4_IRQHandler+0x88>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60bb      	str	r3, [r7, #8]
  uart4_rx_len =  UART4_BUF_SIZE - temp;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007484:	b29a      	uxth	r2, r3
 8007486:	4b08      	ldr	r3, [pc, #32]	@ (80074a8 <UART4_IRQHandler+0x8c>)
 8007488:	801a      	strh	r2, [r3, #0]
  uart4_recv_end_flag = 1;
 800748a:	4b08      	ldr	r3, [pc, #32]	@ (80074ac <UART4_IRQHandler+0x90>)
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
  HAL_UART_RxCpltCallback(&huart4);
 8007490:	4803      	ldr	r0, [pc, #12]	@ (80074a0 <UART4_IRQHandler+0x84>)
 8007492:	f7fd f8a7 	bl	80045e4 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000a90 	.word	0x20000a90
 80074a4:	20000c58 	.word	0x20000c58
 80074a8:	200009e4 	.word	0x200009e4
 80074ac:	200009e6 	.word	0x200009e6

080074b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80074b6:	481f      	ldr	r0, [pc, #124]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074b8:	f005 f912 	bl	800c6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  uint32_t tmp_flag = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 80074c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d026      	beq.n	800752a <UART5_IRQHandler+0x7a>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80074dc:	2300      	movs	r3, #0
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	4b14      	ldr	r3, [pc, #80]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	4b12      	ldr	r3, [pc, #72]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
	  temp = huart5.Instance->SR;
 80074f2:	4b10      	ldr	r3, [pc, #64]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
	  temp = huart5.Instance->DR;
 80074fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007534 <UART5_IRQHandler+0x84>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	60bb      	str	r3, [r7, #8]
	  HAL_UART_DMAStop(&huart5);
 8007502:	480c      	ldr	r0, [pc, #48]	@ (8007534 <UART5_IRQHandler+0x84>)
 8007504:	f005 f86d 	bl	800c5e2 <HAL_UART_DMAStop>
	  temp = __HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <UART5_IRQHandler+0x88>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	60bb      	str	r3, [r7, #8]
	  uart5_rx_len =  UART5_BUF_SIZE - temp;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007518:	b29a      	uxth	r2, r3
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <UART5_IRQHandler+0x8c>)
 800751c:	801a      	strh	r2, [r3, #0]
	  uart5_recv_end_flag = 1;
 800751e:	4b08      	ldr	r3, [pc, #32]	@ (8007540 <UART5_IRQHandler+0x90>)
 8007520:	2201      	movs	r2, #1
 8007522:	701a      	strb	r2, [r3, #0]
	  HAL_UART_RxCpltCallback(&huart5);
 8007524:	4803      	ldr	r0, [pc, #12]	@ (8007534 <UART5_IRQHandler+0x84>)
 8007526:	f7fd f85d 	bl	80045e4 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART5_IRQn 1 */
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000ad8 	.word	0x20000ad8
 8007538:	20000cb8 	.word	0x20000cb8
 800753c:	200009e8 	.word	0x200009e8
 8007540:	200009ea 	.word	0x200009ea

08007544 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007548:	4802      	ldr	r0, [pc, #8]	@ (8007554 <DMA2_Stream0_IRQHandler+0x10>)
 800754a:	f002 ff71 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000334 	.word	0x20000334

08007558 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800755c:	4802      	ldr	r0, [pc, #8]	@ (8007568 <DMA2_Stream1_IRQHandler+0x10>)
 800755e:	f002 ff67 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007562:	bf00      	nop
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200003f4 	.word	0x200003f4

0800756c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007570:	4802      	ldr	r0, [pc, #8]	@ (800757c <DMA2_Stream2_IRQHandler+0x10>)
 8007572:	f002 ff5d 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000d78 	.word	0x20000d78

08007580 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007584:	4802      	ldr	r0, [pc, #8]	@ (8007590 <DMA2_Stream3_IRQHandler+0x10>)
 8007586:	f002 ff53 	bl	800a430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000394 	.word	0x20000394

08007594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
  return 1;
 8007598:	2301      	movs	r3, #1
}
 800759a:	4618      	mov	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <_kill>:

int _kill(int pid, int sig)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80075ae:	f008 fa7f 	bl	800fab0 <__errno>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2216      	movs	r2, #22
 80075b6:	601a      	str	r2, [r3, #0]
  return -1;
 80075b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <_exit>:

void _exit (int status)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80075cc:	f04f 31ff 	mov.w	r1, #4294967295
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ffe7 	bl	80075a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <_exit+0x12>

080075da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	e00a      	b.n	8007602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80075ec:	f3af 8000 	nop.w
 80075f0:	4601      	mov	r1, r0
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	60ba      	str	r2, [r7, #8]
 80075f8:	b2ca      	uxtb	r2, r1
 80075fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3301      	adds	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	dbf0      	blt.n	80075ec <_read+0x12>
  }

  return len;
 800760a:	687b      	ldr	r3, [r7, #4]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e009      	b.n	800763a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	60ba      	str	r2, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fdde 	bl	80091f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3301      	adds	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	dbf1      	blt.n	8007626 <_write+0x12>
  }
  return len;
 8007642:	687b      	ldr	r3, [r7, #4]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <_close>:

int _close(int file)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007674:	605a      	str	r2, [r3, #4]
  return 0;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <_isatty>:

int _isatty(int file)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800768c:	2301      	movs	r3, #1
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076bc:	4a14      	ldr	r2, [pc, #80]	@ (8007710 <_sbrk+0x5c>)
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <_sbrk+0x60>)
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076c8:	4b13      	ldr	r3, [pc, #76]	@ (8007718 <_sbrk+0x64>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076d0:	4b11      	ldr	r3, [pc, #68]	@ (8007718 <_sbrk+0x64>)
 80076d2:	4a12      	ldr	r2, [pc, #72]	@ (800771c <_sbrk+0x68>)
 80076d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076d6:	4b10      	ldr	r3, [pc, #64]	@ (8007718 <_sbrk+0x64>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d207      	bcs.n	80076f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076e4:	f008 f9e4 	bl	800fab0 <__errno>
 80076e8:	4603      	mov	r3, r0
 80076ea:	220c      	movs	r2, #12
 80076ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
 80076f2:	e009      	b.n	8007708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076f4:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <_sbrk+0x64>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076fa:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <_sbrk+0x64>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	4a05      	ldr	r2, [pc, #20]	@ (8007718 <_sbrk+0x64>)
 8007704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20020000 	.word	0x20020000
 8007714:	0000a000 	.word	0x0000a000
 8007718:	200009ec 	.word	0x200009ec
 800771c:	20000fe8 	.word	0x20000fe8

08007720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <SystemInit+0x20>)
 8007726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800772a:	4a05      	ldr	r2, [pc, #20]	@ (8007740 <SystemInit+0x20>)
 800772c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	e000ed00 	.word	0xe000ed00

08007744 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b096      	sub	sp, #88	@ 0x58
 8007748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800774a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	609a      	str	r2, [r3, #8]
 8007756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007758:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	609a      	str	r2, [r3, #8]
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	611a      	str	r2, [r3, #16]
 8007772:	615a      	str	r2, [r3, #20]
 8007774:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	2220      	movs	r2, #32
 800777a:	2100      	movs	r1, #0
 800777c:	4618      	mov	r0, r3
 800777e:	f008 f8b1 	bl	800f8e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007782:	4b3e      	ldr	r3, [pc, #248]	@ (800787c <MX_TIM1_Init+0x138>)
 8007784:	4a3e      	ldr	r2, [pc, #248]	@ (8007880 <MX_TIM1_Init+0x13c>)
 8007786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8007788:	4b3c      	ldr	r3, [pc, #240]	@ (800787c <MX_TIM1_Init+0x138>)
 800778a:	2223      	movs	r2, #35	@ 0x23
 800778c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800778e:	4b3b      	ldr	r3, [pc, #236]	@ (800787c <MX_TIM1_Init+0x138>)
 8007790:	2200      	movs	r2, #0
 8007792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8007794:	4b39      	ldr	r3, [pc, #228]	@ (800787c <MX_TIM1_Init+0x138>)
 8007796:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800779a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800779c:	4b37      	ldr	r3, [pc, #220]	@ (800787c <MX_TIM1_Init+0x138>)
 800779e:	2200      	movs	r2, #0
 80077a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80077a2:	4b36      	ldr	r3, [pc, #216]	@ (800787c <MX_TIM1_Init+0x138>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077a8:	4b34      	ldr	r3, [pc, #208]	@ (800787c <MX_TIM1_Init+0x138>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80077ae:	4833      	ldr	r0, [pc, #204]	@ (800787c <MX_TIM1_Init+0x138>)
 80077b0:	f003 ff0e 	bl	800b5d0 <HAL_TIM_Base_Init>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80077ba:	f7fc ff53 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80077c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80077c8:	4619      	mov	r1, r3
 80077ca:	482c      	ldr	r0, [pc, #176]	@ (800787c <MX_TIM1_Init+0x138>)
 80077cc:	f004 f932 	bl	800ba34 <HAL_TIM_ConfigClockSource>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80077d6:	f7fc ff45 	bl	8004664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80077da:	4828      	ldr	r0, [pc, #160]	@ (800787c <MX_TIM1_Init+0x138>)
 80077dc:	f003 ff47 	bl	800b66e <HAL_TIM_PWM_Init>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80077e6:	f7fc ff3d 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077ea:	2300      	movs	r3, #0
 80077ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80077f6:	4619      	mov	r1, r3
 80077f8:	4820      	ldr	r0, [pc, #128]	@ (800787c <MX_TIM1_Init+0x138>)
 80077fa:	f004 fcff 	bl	800c1fc <HAL_TIMEx_MasterConfigSynchronization>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007804:	f7fc ff2e 	bl	8004664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007808:	2360      	movs	r3, #96	@ 0x60
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007814:	2300      	movs	r3, #0
 8007816:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007818:	2300      	movs	r3, #0
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800781c:	2300      	movs	r3, #0
 800781e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007820:	2300      	movs	r3, #0
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007828:	2200      	movs	r2, #0
 800782a:	4619      	mov	r1, r3
 800782c:	4813      	ldr	r0, [pc, #76]	@ (800787c <MX_TIM1_Init+0x138>)
 800782e:	f004 f83f 	bl	800b8b0 <HAL_TIM_PWM_ConfigChannel>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007838:	f7fc ff14 	bl	8004664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800783c:	2300      	movs	r3, #0
 800783e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007854:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007856:	2300      	movs	r3, #0
 8007858:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	4619      	mov	r1, r3
 800785e:	4807      	ldr	r0, [pc, #28]	@ (800787c <MX_TIM1_Init+0x138>)
 8007860:	f004 fd48 	bl	800c2f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800786a:	f7fc fefb 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800786e:	4803      	ldr	r0, [pc, #12]	@ (800787c <MX_TIM1_Init+0x138>)
 8007870:	f000 f8b6 	bl	80079e0 <HAL_TIM_MspPostInit>

}
 8007874:	bf00      	nop
 8007876:	3758      	adds	r7, #88	@ 0x58
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200009f0 	.word	0x200009f0
 8007880:	40010000 	.word	0x40010000

08007884 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08e      	sub	sp, #56	@ 0x38
 8007888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800788a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	609a      	str	r2, [r3, #8]
 8007896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007898:	f107 0320 	add.w	r3, r7, #32
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
 80078b0:	615a      	str	r2, [r3, #20]
 80078b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80078b4:	4b2c      	ldr	r3, [pc, #176]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078b6:	4a2d      	ldr	r2, [pc, #180]	@ (800796c <MX_TIM3_Init+0xe8>)
 80078b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80078ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078bc:	2223      	movs	r2, #35	@ 0x23
 80078be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078c0:	4b29      	ldr	r3, [pc, #164]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80078c6:	4b28      	ldr	r3, [pc, #160]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078c8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80078cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078ce:	4b26      	ldr	r3, [pc, #152]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078d4:	4b24      	ldr	r3, [pc, #144]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80078da:	4823      	ldr	r0, [pc, #140]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078dc:	f003 fe78 	bl	800b5d0 <HAL_TIM_Base_Init>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80078e6:	f7fc febd 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80078f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80078f4:	4619      	mov	r1, r3
 80078f6:	481c      	ldr	r0, [pc, #112]	@ (8007968 <MX_TIM3_Init+0xe4>)
 80078f8:	f004 f89c 	bl	800ba34 <HAL_TIM_ConfigClockSource>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8007902:	f7fc feaf 	bl	8004664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007906:	4818      	ldr	r0, [pc, #96]	@ (8007968 <MX_TIM3_Init+0xe4>)
 8007908:	f003 feb1 	bl	800b66e <HAL_TIM_PWM_Init>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8007912:	f7fc fea7 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007916:	2300      	movs	r3, #0
 8007918:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800791e:	f107 0320 	add.w	r3, r7, #32
 8007922:	4619      	mov	r1, r3
 8007924:	4810      	ldr	r0, [pc, #64]	@ (8007968 <MX_TIM3_Init+0xe4>)
 8007926:	f004 fc69 	bl	800c1fc <HAL_TIMEx_MasterConfigSynchronization>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007930:	f7fc fe98 	bl	8004664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007934:	2360      	movs	r3, #96	@ 0x60
 8007936:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	220c      	movs	r2, #12
 8007948:	4619      	mov	r1, r3
 800794a:	4807      	ldr	r0, [pc, #28]	@ (8007968 <MX_TIM3_Init+0xe4>)
 800794c:	f003 ffb0 	bl	800b8b0 <HAL_TIM_PWM_ConfigChannel>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8007956:	f7fc fe85 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800795a:	4803      	ldr	r0, [pc, #12]	@ (8007968 <MX_TIM3_Init+0xe4>)
 800795c:	f000 f840 	bl	80079e0 <HAL_TIM_MspPostInit>

}
 8007960:	bf00      	nop
 8007962:	3738      	adds	r7, #56	@ 0x38
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000a38 	.word	0x20000a38
 800796c:	40000400 	.word	0x40000400

08007970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <HAL_TIM_Base_MspInit+0x64>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	4b14      	ldr	r3, [pc, #80]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 8007988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798a:	4a13      	ldr	r2, [pc, #76]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	6453      	str	r3, [r2, #68]	@ 0x44
 8007992:	4b11      	ldr	r3, [pc, #68]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800799e:	e012      	b.n	80079c6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a0d      	ldr	r2, [pc, #52]	@ (80079dc <HAL_TIM_Base_MspInit+0x6c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10d      	bne.n	80079c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	4b0a      	ldr	r3, [pc, #40]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	4a09      	ldr	r2, [pc, #36]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ba:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <HAL_TIM_Base_MspInit+0x68>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	60bb      	str	r3, [r7, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40000400 	.word	0x40000400

080079e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	@ 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a25      	ldr	r2, [pc, #148]	@ (8007a94 <HAL_TIM_MspPostInit+0xb4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d11f      	bne.n	8007a42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	4b24      	ldr	r3, [pc, #144]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	4a23      	ldr	r2, [pc, #140]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a12:	4b21      	ldr	r3, [pc, #132]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a24:	2302      	movs	r3, #2
 8007a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4818      	ldr	r0, [pc, #96]	@ (8007a9c <HAL_TIM_MspPostInit+0xbc>)
 8007a3c:	f002 ff62 	bl	800a904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007a40:	e023      	b.n	8007a8a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a16      	ldr	r2, [pc, #88]	@ (8007aa0 <HAL_TIM_MspPostInit+0xc0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d11e      	bne.n	8007a8a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	4b11      	ldr	r3, [pc, #68]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	4a10      	ldr	r2, [pc, #64]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a56:	f043 0304 	orr.w	r3, r3, #4
 8007a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a98 <HAL_TIM_MspPostInit+0xb8>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a76:	2300      	movs	r3, #0
 8007a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	4619      	mov	r1, r3
 8007a84:	4807      	ldr	r0, [pc, #28]	@ (8007aa4 <HAL_TIM_MspPostInit+0xc4>)
 8007a86:	f002 ff3d 	bl	800a904 <HAL_GPIO_Init>
}
 8007a8a:	bf00      	nop
 8007a8c:	3728      	adds	r7, #40	@ 0x28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	40020000 	.word	0x40020000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40020800 	.word	0x40020800

08007aa8 <Get_xyzVal>:

/*函数名称:获取xyz轴的值*/
/*形参:无              */
/*返回值:无            */
void Get_xyzVal(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
  uint16_t ADC1_Value;
  uint16_t ADC2_Value;
  HAL_ADC_Start(&hadc1);
 8007aae:	4870      	ldr	r0, [pc, #448]	@ (8007c70 <Get_xyzVal+0x1c8>)
 8007ab0:	f001 fcb4 	bl	800941c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8007ab4:	486f      	ldr	r0, [pc, #444]	@ (8007c74 <Get_xyzVal+0x1cc>)
 8007ab6:	f001 fcb1 	bl	800941c <HAL_ADC_Start>
  int power_mode = POWER_MODE_PWM;
 8007aba:	2301      	movs	r3, #1
 8007abc:	603b      	str	r3, [r7, #0]
  HAL_ADC_PollForConversion(&hadc1, 50);   //绛夊緟杞崲瀹屾垚锛�50涓烘渶澶х瓑寰呮椂闂达紝鍗曚綅涓簃s
 8007abe:	2132      	movs	r1, #50	@ 0x32
 8007ac0:	486b      	ldr	r0, [pc, #428]	@ (8007c70 <Get_xyzVal+0x1c8>)
 8007ac2:	f001 fd7d 	bl	80095c0 <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8007ac6:	486a      	ldr	r0, [pc, #424]	@ (8007c70 <Get_xyzVal+0x1c8>)
 8007ac8:	f001 ff34 	bl	8009934 <HAL_ADC_GetState>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad6:	d104      	bne.n	8007ae2 <Get_xyzVal+0x3a>
  {
   ADC1_Value = HAL_ADC_GetValue(&hadc1);   //鑾峰彇AD鍊�
 8007ad8:	4865      	ldr	r0, [pc, #404]	@ (8007c70 <Get_xyzVal+0x1c8>)
 8007ada:	f001 fdfc 	bl	80096d6 <HAL_ADC_GetValue>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	80fb      	strh	r3, [r7, #6]
   //printf("ADC1: %d   ",ADC1_Value);
  }
  HAL_ADC_PollForConversion(&hadc2, 50);   //绛夊緟杞崲瀹屾垚锛�50涓烘渶澶х瓑寰呮椂闂达紝鍗曚綅涓簃s
 8007ae2:	2132      	movs	r1, #50	@ 0x32
 8007ae4:	4863      	ldr	r0, [pc, #396]	@ (8007c74 <Get_xyzVal+0x1cc>)
 8007ae6:	f001 fd6b 	bl	80095c0 <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc2), HAL_ADC_STATE_REG_EOC))
 8007aea:	4862      	ldr	r0, [pc, #392]	@ (8007c74 <Get_xyzVal+0x1cc>)
 8007aec:	f001 ff22 	bl	8009934 <HAL_ADC_GetState>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007afa:	d104      	bne.n	8007b06 <Get_xyzVal+0x5e>
  {
   ADC2_Value = HAL_ADC_GetValue(&hadc2);   //鑾峰彇AD鍊�
 8007afc:	485d      	ldr	r0, [pc, #372]	@ (8007c74 <Get_xyzVal+0x1cc>)
 8007afe:	f001 fdea 	bl	80096d6 <HAL_ADC_GetValue>
 8007b02:	4603      	mov	r3, r0
 8007b04:	80bb      	strh	r3, [r7, #4]
   //printf("ADC2: %d \r\n",ADC2_Value);
  }
  if(power_mode == POWER_MODE_PWM){
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d10b      	bne.n	8007b24 <Get_xyzVal+0x7c>
	  if(ADC2_Value >= 2077 && ADC2_Value <= 2079){
 8007b0c:	88bb      	ldrh	r3, [r7, #4]
 8007b0e:	f640 021c 	movw	r2, #2076	@ 0x81c
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d906      	bls.n	8007b24 <Get_xyzVal+0x7c>
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	f5b3 6f02 	cmp.w	r3, #2080	@ 0x820
 8007b1c:	d202      	bcs.n	8007b24 <Get_xyzVal+0x7c>
		  ADC2_Value = 2078;
 8007b1e:	f640 031e 	movw	r3, #2078	@ 0x81e
 8007b22:	80bb      	strh	r3, [r7, #4]
	  }
	 // ADC2_Value = abs(ADC2_Value - 4096) ;
  }
  board_config.Rockers.Rocker_X = ADC1_Value;
 8007b24:	4a54      	ldr	r2, [pc, #336]	@ (8007c78 <Get_xyzVal+0x1d0>)
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	f8a2 32b8 	strh.w	r3, [r2, #696]	@ 0x2b8
  board_config.Rockers.Rocker_Y = ADC2_Value;
 8007b2c:	4a52      	ldr	r2, [pc, #328]	@ (8007c78 <Get_xyzVal+0x1d0>)
 8007b2e:	88bb      	ldrh	r3, [r7, #4]
 8007b30:	f8a2 32ba 	strh.w	r3, [r2, #698]	@ 0x2ba
  g_iAdcx[0] = ADC2_Value;
 8007b34:	4a51      	ldr	r2, [pc, #324]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b36:	88bb      	ldrh	r3, [r7, #4]
 8007b38:	8013      	strh	r3, [r2, #0]
  g_iAdcx[1] = ADC1_Value;
 8007b3a:	4a50      	ldr	r2, [pc, #320]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	8053      	strh	r3, [r2, #2]
 // printf("Y = %d\r\nX = %d\r\n", g_iAdcx[0], g_iAdcx[1]);
  if(g_iAdcx[0]<1000 && g_iAdcx[0]>0)          //y0
 8007b40:	4b4e      	ldr	r3, [pc, #312]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b48:	d207      	bcs.n	8007b5a <Get_xyzVal+0xb2>
 8007b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <Get_xyzVal+0xb2>
    xyzVal.Y = Yup;
 8007b52:	4b4b      	ldr	r3, [pc, #300]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	e03b      	b.n	8007bd2 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<1800 && g_iAdcx[0]>1000)  //y1
 8007b5a:	4b48      	ldr	r3, [pc, #288]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007b62:	d208      	bcs.n	8007b76 <Get_xyzVal+0xce>
 8007b64:	4b45      	ldr	r3, [pc, #276]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b6c:	d903      	bls.n	8007b76 <Get_xyzVal+0xce>
    xyzVal.Y = Ysup;
 8007b6e:	4b44      	ldr	r3, [pc, #272]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e02d      	b.n	8007bd2 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<2200 && g_iAdcx[0]>1800)  //y2
 8007b76:	4b41      	ldr	r3, [pc, #260]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	f640 0297 	movw	r2, #2199	@ 0x897
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d808      	bhi.n	8007b94 <Get_xyzVal+0xec>
 8007b82:	4b3e      	ldr	r3, [pc, #248]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007b8a:	d903      	bls.n	8007b94 <Get_xyzVal+0xec>
    xyzVal.Y = Ysp;
 8007b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007b8e:	2202      	movs	r2, #2
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e01e      	b.n	8007bd2 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<3000 && g_iAdcx[0]>2200)  //y3
 8007b94:	4b39      	ldr	r3, [pc, #228]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d809      	bhi.n	8007bb4 <Get_xyzVal+0x10c>
 8007ba0:	4b36      	ldr	r3, [pc, #216]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	f640 0298 	movw	r2, #2200	@ 0x898
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d903      	bls.n	8007bb4 <Get_xyzVal+0x10c>
    xyzVal.Y = Ysdn;
 8007bac:	4b34      	ldr	r3, [pc, #208]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007bae:	2204      	movs	r2, #4
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e00e      	b.n	8007bd2 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<4200 && g_iAdcx[0]>3000)  //y4
 8007bb4:	4b31      	ldr	r3, [pc, #196]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d808      	bhi.n	8007bd2 <Get_xyzVal+0x12a>
 8007bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d902      	bls.n	8007bd2 <Get_xyzVal+0x12a>
    xyzVal.Y = Ydn;
 8007bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007bce:	2203      	movs	r2, #3
 8007bd0:	601a      	str	r2, [r3, #0]


  if(g_iAdcx[1]<1000 && g_iAdcx[1]>0)          //x0
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bd4:	885b      	ldrh	r3, [r3, #2]
 8007bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bda:	d207      	bcs.n	8007bec <Get_xyzVal+0x144>
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bde:	885b      	ldrh	r3, [r3, #2]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <Get_xyzVal+0x144>
    xyzVal.X = Xlf;
 8007be4:	4b26      	ldr	r3, [pc, #152]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	e03c      	b.n	8007c66 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<1800 && g_iAdcx[1]>1000)  //x1
 8007bec:	4b23      	ldr	r3, [pc, #140]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bee:	885b      	ldrh	r3, [r3, #2]
 8007bf0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007bf4:	d208      	bcs.n	8007c08 <Get_xyzVal+0x160>
 8007bf6:	4b21      	ldr	r3, [pc, #132]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007bf8:	885b      	ldrh	r3, [r3, #2]
 8007bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bfe:	d903      	bls.n	8007c08 <Get_xyzVal+0x160>
    xyzVal.X = Xslf;
 8007c00:	4b1f      	ldr	r3, [pc, #124]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	e02e      	b.n	8007c66 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<2200 && g_iAdcx[1]>1800)  //x2
 8007c08:	4b1c      	ldr	r3, [pc, #112]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c0a:	885b      	ldrh	r3, [r3, #2]
 8007c0c:	f640 0297 	movw	r2, #2199	@ 0x897
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d808      	bhi.n	8007c26 <Get_xyzVal+0x17e>
 8007c14:	4b19      	ldr	r3, [pc, #100]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c16:	885b      	ldrh	r3, [r3, #2]
 8007c18:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007c1c:	d903      	bls.n	8007c26 <Get_xyzVal+0x17e>
    xyzVal.X = Xsp;
 8007c1e:	4b18      	ldr	r3, [pc, #96]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007c20:	2202      	movs	r2, #2
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	e01f      	b.n	8007c66 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<3000 && g_iAdcx[1]>2200)  //x3
 8007c26:	4b15      	ldr	r3, [pc, #84]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d809      	bhi.n	8007c46 <Get_xyzVal+0x19e>
 8007c32:	4b12      	ldr	r3, [pc, #72]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	f640 0298 	movw	r2, #2200	@ 0x898
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d903      	bls.n	8007c46 <Get_xyzVal+0x19e>
    xyzVal.X = Xsri;
 8007c3e:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007c40:	2204      	movs	r2, #4
 8007c42:	605a      	str	r2, [r3, #4]
 8007c44:	e00f      	b.n	8007c66 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<4200 && g_iAdcx[1]>3000)  //x4
 8007c46:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c48:	885b      	ldrh	r3, [r3, #2]
 8007c4a:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d809      	bhi.n	8007c66 <Get_xyzVal+0x1be>
 8007c52:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <Get_xyzVal+0x1d4>)
 8007c54:	885b      	ldrh	r3, [r3, #2]
 8007c56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d903      	bls.n	8007c66 <Get_xyzVal+0x1be>
    xyzVal.X = Xri;
 8007c5e:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <Get_xyzVal+0x1d8>)
 8007c60:	2203      	movs	r2, #3
 8007c62:	605a      	str	r2, [r3, #4]

//  PrintfDebug("xyzVal.X = %d\r\nxyzVal.Y = %d\r\nxyzVal.Z = %d\r\n", xyzVal.X, xyzVal.Y, xyzVal.Z);
}
 8007c64:	e7ff      	b.n	8007c66 <Get_xyzVal+0x1be>
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	2000025c 	.word	0x2000025c
 8007c74:	200002a4 	.word	0x200002a4
 8007c78:	200005d8 	.word	0x200005d8
 8007c7c:	20000a8c 	.word	0x20000a8c
 8007c80:	20000a80 	.word	0x20000a80

08007c84 <Get_xyzVal_Blue>:

void Get_xyzVal_Blue(void){
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_iAdcx, sizeof(g_iAdcx) / sizeof(g_iAdcx[0]));
  HAL_UART_Receive_DMA(&huart1,BLUE_BUF,sizeof(BLUE_BUF));
 8007c88:	2208      	movs	r2, #8
 8007c8a:	496f      	ldr	r1, [pc, #444]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007c8c:	486f      	ldr	r0, [pc, #444]	@ (8007e4c <Get_xyzVal_Blue+0x1c8>)
 8007c8e:	f004 fc83 	bl	800c598 <HAL_UART_Receive_DMA>
  if(BLUE_BUF[0] != 0x55){
 8007c92:	4b6d      	ldr	r3, [pc, #436]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b55      	cmp	r3, #85	@ 0x55
 8007c98:	d00a      	beq.n	8007cb0 <Get_xyzVal_Blue+0x2c>
	  board_config.Rockers.Rocker_X = 2048;
 8007c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ca0:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
	  board_config.Rockers.Rocker_Y = 2048;
 8007ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007caa:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
	  return;
 8007cae:	e0ca      	b.n	8007e46 <Get_xyzVal_Blue+0x1c2>
  }
  board_config.Rockers.Rocker_X = (BLUE_BUF[2] << 8 | BLUE_BUF[3]);
 8007cb0:	4b65      	ldr	r3, [pc, #404]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007cb2:	789b      	ldrb	r3, [r3, #2]
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	4b63      	ldr	r3, [pc, #396]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007cba:	78db      	ldrb	r3, [r3, #3]
 8007cbc:	b21b      	sxth	r3, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b21b      	sxth	r3, r3
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	4b62      	ldr	r3, [pc, #392]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007cc6:	f8a3 22b8 	strh.w	r2, [r3, #696]	@ 0x2b8
  board_config.Rockers.Rocker_Y = (BLUE_BUF[4] << 8 | BLUE_BUF[5]);
 8007cca:	4b5f      	ldr	r3, [pc, #380]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	b21a      	sxth	r2, r3
 8007cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8007e48 <Get_xyzVal_Blue+0x1c4>)
 8007cd4:	795b      	ldrb	r3, [r3, #5]
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	4b5c      	ldr	r3, [pc, #368]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007ce0:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
  board_config.Rockers.Rocker_Y = abs(board_config.Rockers.Rocker_Y - 4096) ;
 8007ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007ce6:	f8b3 32ba 	ldrh.w	r3, [r3, #698]	@ 0x2ba
 8007cea:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	425b      	neglt	r3, r3
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	4b56      	ldr	r3, [pc, #344]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007cf8:	f8a3 22ba 	strh.w	r2, [r3, #698]	@ 0x2ba
  g_iAdcx[0] = board_config.Rockers.Rocker_Y;
 8007cfc:	4b54      	ldr	r3, [pc, #336]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007cfe:	f8b3 22ba 	ldrh.w	r2, [r3, #698]	@ 0x2ba
 8007d02:	4b54      	ldr	r3, [pc, #336]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d04:	801a      	strh	r2, [r3, #0]
  g_iAdcx[1] = board_config.Rockers.Rocker_X;
 8007d06:	4b52      	ldr	r3, [pc, #328]	@ (8007e50 <Get_xyzVal_Blue+0x1cc>)
 8007d08:	f8b3 22b8 	ldrh.w	r2, [r3, #696]	@ 0x2b8
 8007d0c:	4b51      	ldr	r3, [pc, #324]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d0e:	805a      	strh	r2, [r3, #2]
  printf("X = %d\r\n Y = %d\r\n", g_iAdcx[0], g_iAdcx[1]);
 8007d10:	4b50      	ldr	r3, [pc, #320]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	4619      	mov	r1, r3
 8007d16:	4b4f      	ldr	r3, [pc, #316]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	484e      	ldr	r0, [pc, #312]	@ (8007e58 <Get_xyzVal_Blue+0x1d4>)
 8007d1e:	f007 fc4d 	bl	800f5bc <iprintf>
  if(g_iAdcx[0]<1000 && g_iAdcx[0]>0)          //y0
 8007d22:	4b4c      	ldr	r3, [pc, #304]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d2a:	d207      	bcs.n	8007d3c <Get_xyzVal_Blue+0xb8>
 8007d2c:	4b49      	ldr	r3, [pc, #292]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <Get_xyzVal_Blue+0xb8>
    xyzVal.Y = Yup;
 8007d34:	4b49      	ldr	r3, [pc, #292]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e03b      	b.n	8007db4 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<1800 && g_iAdcx[0]>1000)  //y1
 8007d3c:	4b45      	ldr	r3, [pc, #276]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007d44:	d208      	bcs.n	8007d58 <Get_xyzVal_Blue+0xd4>
 8007d46:	4b43      	ldr	r3, [pc, #268]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d4e:	d903      	bls.n	8007d58 <Get_xyzVal_Blue+0xd4>
    xyzVal.Y = Ysup;
 8007d50:	4b42      	ldr	r3, [pc, #264]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e02d      	b.n	8007db4 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<2200 && g_iAdcx[0]>1800)  //y2
 8007d58:	4b3e      	ldr	r3, [pc, #248]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	f640 0297 	movw	r2, #2199	@ 0x897
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d808      	bhi.n	8007d76 <Get_xyzVal_Blue+0xf2>
 8007d64:	4b3b      	ldr	r3, [pc, #236]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007d6c:	d903      	bls.n	8007d76 <Get_xyzVal_Blue+0xf2>
    xyzVal.Y = Ysp;
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e01e      	b.n	8007db4 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<3000 && g_iAdcx[0]>2200)  //y3
 8007d76:	4b37      	ldr	r3, [pc, #220]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d809      	bhi.n	8007d96 <Get_xyzVal_Blue+0x112>
 8007d82:	4b34      	ldr	r3, [pc, #208]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	f640 0298 	movw	r2, #2200	@ 0x898
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d903      	bls.n	8007d96 <Get_xyzVal_Blue+0x112>
    xyzVal.Y = Ysdn;
 8007d8e:	4b33      	ldr	r3, [pc, #204]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007d90:	2204      	movs	r2, #4
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	e00e      	b.n	8007db4 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<4200 && g_iAdcx[0]>3000)  //y4
 8007d96:	4b2f      	ldr	r3, [pc, #188]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d808      	bhi.n	8007db4 <Get_xyzVal_Blue+0x130>
 8007da2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d902      	bls.n	8007db4 <Get_xyzVal_Blue+0x130>
    xyzVal.Y = Ydn;
 8007dae:	4b2b      	ldr	r3, [pc, #172]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007db0:	2203      	movs	r2, #3
 8007db2:	601a      	str	r2, [r3, #0]


  if(g_iAdcx[1]<1000 && g_iAdcx[1]>0)          //x0
 8007db4:	4b27      	ldr	r3, [pc, #156]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dbc:	d207      	bcs.n	8007dce <Get_xyzVal_Blue+0x14a>
 8007dbe:	4b25      	ldr	r3, [pc, #148]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <Get_xyzVal_Blue+0x14a>
    xyzVal.X = Xlf;
 8007dc6:	4b25      	ldr	r3, [pc, #148]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	605a      	str	r2, [r3, #4]
 8007dcc:	e03b      	b.n	8007e46 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<1800 && g_iAdcx[1]>1000)  //x1
 8007dce:	4b21      	ldr	r3, [pc, #132]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007dd0:	885b      	ldrh	r3, [r3, #2]
 8007dd2:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007dd6:	d208      	bcs.n	8007dea <Get_xyzVal_Blue+0x166>
 8007dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de0:	d903      	bls.n	8007dea <Get_xyzVal_Blue+0x166>
    xyzVal.X = Xslf;
 8007de2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	605a      	str	r2, [r3, #4]
 8007de8:	e02d      	b.n	8007e46 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<2200 && g_iAdcx[1]>1800)  //x2
 8007dea:	4b1a      	ldr	r3, [pc, #104]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	f640 0297 	movw	r2, #2199	@ 0x897
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d808      	bhi.n	8007e08 <Get_xyzVal_Blue+0x184>
 8007df6:	4b17      	ldr	r3, [pc, #92]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007dfe:	d903      	bls.n	8007e08 <Get_xyzVal_Blue+0x184>
    xyzVal.X = Xsp;
 8007e00:	4b16      	ldr	r3, [pc, #88]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007e02:	2202      	movs	r2, #2
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	e01e      	b.n	8007e46 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<3000 && g_iAdcx[1]>2200)  //x3
 8007e08:	4b12      	ldr	r3, [pc, #72]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007e0a:	885b      	ldrh	r3, [r3, #2]
 8007e0c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d809      	bhi.n	8007e28 <Get_xyzVal_Blue+0x1a4>
 8007e14:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007e16:	885b      	ldrh	r3, [r3, #2]
 8007e18:	f640 0298 	movw	r2, #2200	@ 0x898
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d903      	bls.n	8007e28 <Get_xyzVal_Blue+0x1a4>
    xyzVal.X = Xsri;
 8007e20:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007e22:	2204      	movs	r2, #4
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	e00e      	b.n	8007e46 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<4200 && g_iAdcx[1]>3000)  //x4
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007e2a:	885b      	ldrh	r3, [r3, #2]
 8007e2c:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d808      	bhi.n	8007e46 <Get_xyzVal_Blue+0x1c2>
 8007e34:	4b07      	ldr	r3, [pc, #28]	@ (8007e54 <Get_xyzVal_Blue+0x1d0>)
 8007e36:	885b      	ldrh	r3, [r3, #2]
 8007e38:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d902      	bls.n	8007e46 <Get_xyzVal_Blue+0x1c2>
    xyzVal.X = Xri;
 8007e40:	4b06      	ldr	r3, [pc, #24]	@ (8007e5c <Get_xyzVal_Blue+0x1d8>)
 8007e42:	2203      	movs	r2, #3
 8007e44:	605a      	str	r2, [r3, #4]

//  PrintfDebug("xyzVal.X = %d\r\nxyzVal.Y = %d\r\nxyzVal.Z = %d\r\n", xyzVal.X, xyzVal.Y, xyzVal.Z);
}
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200004c8 	.word	0x200004c8
 8007e4c:	20000b20 	.word	0x20000b20
 8007e50:	200005d8 	.word	0x200005d8
 8007e54:	20000a8c 	.word	0x20000a8c
 8007e58:	08015aa8 	.word	0x08015aa8
 8007e5c:	20000a80 	.word	0x20000a80

08007e60 <Get_KeyState>:
/*函数名称:获取摇杆的状态 */
/*形参:无                */
/*返回值:keystate        */
/*说明:keystate为E_RKEYState的变量，返回按键状态值*/
E_RKEYState Get_KeyState(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
  E_RKEYState keystate;
  Get_xyzVal();
 8007e66:	f7ff fe1f 	bl	8007aa8 <Get_xyzVal>
//  PrintfDebug("%d %d\r\n", xyzVal.X, xyzVal.Y);                 //摇杆状态编码
  if((xyzVal.Y == Ysp) && (xyzVal.X == Xsp)) //x2 y2 z0 0
 8007e6a:	4b81      	ldr	r3, [pc, #516]	@ (8008070 <Get_KeyState+0x210>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d106      	bne.n	8007e80 <Get_KeyState+0x20>
 8007e72:	4b7f      	ldr	r3, [pc, #508]	@ (8008070 <Get_KeyState+0x210>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d102      	bne.n	8007e80 <Get_KeyState+0x20>
    keystate = KEYSTOP;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	71fb      	strb	r3, [r7, #7]
 8007e7e:	e0f1      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Yup) && (xyzVal.X == Xsp))                 //x2 y0 z0 1
 8007e80:	4b7b      	ldr	r3, [pc, #492]	@ (8008070 <Get_KeyState+0x210>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <Get_KeyState+0x36>
 8007e88:	4b79      	ldr	r3, [pc, #484]	@ (8008070 <Get_KeyState+0x210>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d102      	bne.n	8007e96 <Get_KeyState+0x36>
    keystate = KEYUP;
 8007e90:	2301      	movs	r3, #1
 8007e92:	71fb      	strb	r3, [r7, #7]
 8007e94:	e0e6      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsp))                //x2 y1 z0 2
 8007e96:	4b76      	ldr	r3, [pc, #472]	@ (8008070 <Get_KeyState+0x210>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d106      	bne.n	8007eac <Get_KeyState+0x4c>
 8007e9e:	4b74      	ldr	r3, [pc, #464]	@ (8008070 <Get_KeyState+0x210>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d102      	bne.n	8007eac <Get_KeyState+0x4c>
    keystate = KEYSUP;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	71fb      	strb	r3, [r7, #7]
 8007eaa:	e0db      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ydn) && (xyzVal.X == Xsp))                 //x2 y4 z0 3
 8007eac:	4b70      	ldr	r3, [pc, #448]	@ (8008070 <Get_KeyState+0x210>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d106      	bne.n	8007ec2 <Get_KeyState+0x62>
 8007eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8008070 <Get_KeyState+0x210>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d102      	bne.n	8007ec2 <Get_KeyState+0x62>
    keystate = KEYDOWN;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	71fb      	strb	r3, [r7, #7]
 8007ec0:	e0d0      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsp))                //x2 y3 z0 4
 8007ec2:	4b6b      	ldr	r3, [pc, #428]	@ (8008070 <Get_KeyState+0x210>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d106      	bne.n	8007ed8 <Get_KeyState+0x78>
 8007eca:	4b69      	ldr	r3, [pc, #420]	@ (8008070 <Get_KeyState+0x210>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d102      	bne.n	8007ed8 <Get_KeyState+0x78>
    keystate = KEYSDOWN;
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	71fb      	strb	r3, [r7, #7]
 8007ed6:	e0c5      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xlf))                 //x0 y2 z0 5
 8007ed8:	4b65      	ldr	r3, [pc, #404]	@ (8008070 <Get_KeyState+0x210>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d106      	bne.n	8007eee <Get_KeyState+0x8e>
 8007ee0:	4b63      	ldr	r3, [pc, #396]	@ (8008070 <Get_KeyState+0x210>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <Get_KeyState+0x8e>
    keystate = KEYLEFT;
 8007ee8:	2305      	movs	r3, #5
 8007eea:	71fb      	strb	r3, [r7, #7]
 8007eec:	e0ba      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xslf))                //x1 y2 z0 6
 8007eee:	4b60      	ldr	r3, [pc, #384]	@ (8008070 <Get_KeyState+0x210>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d106      	bne.n	8007f04 <Get_KeyState+0xa4>
 8007ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8008070 <Get_KeyState+0x210>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d102      	bne.n	8007f04 <Get_KeyState+0xa4>
    keystate = KEYSLEFT;
 8007efe:	2306      	movs	r3, #6
 8007f00:	71fb      	strb	r3, [r7, #7]
 8007f02:	e0af      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xri))                 //x4 y2 z0 7
 8007f04:	4b5a      	ldr	r3, [pc, #360]	@ (8008070 <Get_KeyState+0x210>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d106      	bne.n	8007f1a <Get_KeyState+0xba>
 8007f0c:	4b58      	ldr	r3, [pc, #352]	@ (8008070 <Get_KeyState+0x210>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d102      	bne.n	8007f1a <Get_KeyState+0xba>
    keystate = KEYRIGHT;
 8007f14:	2307      	movs	r3, #7
 8007f16:	71fb      	strb	r3, [r7, #7]
 8007f18:	e0a4      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) &&  (xyzVal.X == Xsri))                //x3 y2 z0 8
 8007f1a:	4b55      	ldr	r3, [pc, #340]	@ (8008070 <Get_KeyState+0x210>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d106      	bne.n	8007f30 <Get_KeyState+0xd0>
 8007f22:	4b53      	ldr	r3, [pc, #332]	@ (8008070 <Get_KeyState+0x210>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d102      	bne.n	8007f30 <Get_KeyState+0xd0>
    keystate = KEYSRIGHT;
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	71fb      	strb	r3, [r7, #7]
 8007f2e:	e099      	b.n	8008064 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xlf))||((xyzVal.Y==Yup)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xlf)))                 //x01 y01 z0 10
 8007f30:	4b4f      	ldr	r3, [pc, #316]	@ (8008070 <Get_KeyState+0x210>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <Get_KeyState+0xe0>
 8007f38:	4b4d      	ldr	r3, [pc, #308]	@ (8008070 <Get_KeyState+0x210>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00f      	beq.n	8007f60 <Get_KeyState+0x100>
 8007f40:	4b4b      	ldr	r3, [pc, #300]	@ (8008070 <Get_KeyState+0x210>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <Get_KeyState+0xf0>
 8007f48:	4b49      	ldr	r3, [pc, #292]	@ (8008070 <Get_KeyState+0x210>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d007      	beq.n	8007f60 <Get_KeyState+0x100>
 8007f50:	4b47      	ldr	r3, [pc, #284]	@ (8008070 <Get_KeyState+0x210>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d106      	bne.n	8007f66 <Get_KeyState+0x106>
 8007f58:	4b45      	ldr	r3, [pc, #276]	@ (8008070 <Get_KeyState+0x210>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <Get_KeyState+0x106>
    keystate = KEYUPLF;
 8007f60:	230a      	movs	r3, #10
 8007f62:	71fb      	strb	r3, [r7, #7]
 8007f64:	e07e      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xslf))               //x1 y1 z0 11
 8007f66:	4b42      	ldr	r3, [pc, #264]	@ (8008070 <Get_KeyState+0x210>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d106      	bne.n	8007f7c <Get_KeyState+0x11c>
 8007f6e:	4b40      	ldr	r3, [pc, #256]	@ (8008070 <Get_KeyState+0x210>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d102      	bne.n	8007f7c <Get_KeyState+0x11c>
    keystate = KEYSUPLF;
 8007f76:	230b      	movs	r3, #11
 8007f78:	71fb      	strb	r3, [r7, #7]
 8007f7a:	e073      	b.n	8008064 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xri))||((xyzVal.Y==Yup)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xri)))                 //x34 y01 z0 12
 8007f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8008070 <Get_KeyState+0x210>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d103      	bne.n	8007f8c <Get_KeyState+0x12c>
 8007f84:	4b3a      	ldr	r3, [pc, #232]	@ (8008070 <Get_KeyState+0x210>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d00f      	beq.n	8007fac <Get_KeyState+0x14c>
 8007f8c:	4b38      	ldr	r3, [pc, #224]	@ (8008070 <Get_KeyState+0x210>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <Get_KeyState+0x13c>
 8007f94:	4b36      	ldr	r3, [pc, #216]	@ (8008070 <Get_KeyState+0x210>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d007      	beq.n	8007fac <Get_KeyState+0x14c>
 8007f9c:	4b34      	ldr	r3, [pc, #208]	@ (8008070 <Get_KeyState+0x210>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d106      	bne.n	8007fb2 <Get_KeyState+0x152>
 8007fa4:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <Get_KeyState+0x210>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d102      	bne.n	8007fb2 <Get_KeyState+0x152>
    keystate = KEYUPRI;
 8007fac:	230c      	movs	r3, #12
 8007fae:	71fb      	strb	r3, [r7, #7]
 8007fb0:	e058      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsri))               //x3 y1 z0 13
 8007fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8008070 <Get_KeyState+0x210>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d106      	bne.n	8007fc8 <Get_KeyState+0x168>
 8007fba:	4b2d      	ldr	r3, [pc, #180]	@ (8008070 <Get_KeyState+0x210>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d102      	bne.n	8007fc8 <Get_KeyState+0x168>
    keystate = KEYSUPRI;
 8007fc2:	230d      	movs	r3, #13
 8007fc4:	71fb      	strb	r3, [r7, #7]
 8007fc6:	e04d      	b.n	8008064 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xlf))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xlf)))                 //x01 y34 z0 14
 8007fc8:	4b29      	ldr	r3, [pc, #164]	@ (8008070 <Get_KeyState+0x210>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d103      	bne.n	8007fd8 <Get_KeyState+0x178>
 8007fd0:	4b27      	ldr	r3, [pc, #156]	@ (8008070 <Get_KeyState+0x210>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00f      	beq.n	8007ff8 <Get_KeyState+0x198>
 8007fd8:	4b25      	ldr	r3, [pc, #148]	@ (8008070 <Get_KeyState+0x210>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d103      	bne.n	8007fe8 <Get_KeyState+0x188>
 8007fe0:	4b23      	ldr	r3, [pc, #140]	@ (8008070 <Get_KeyState+0x210>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d007      	beq.n	8007ff8 <Get_KeyState+0x198>
 8007fe8:	4b21      	ldr	r3, [pc, #132]	@ (8008070 <Get_KeyState+0x210>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d106      	bne.n	8007ffe <Get_KeyState+0x19e>
 8007ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8008070 <Get_KeyState+0x210>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <Get_KeyState+0x19e>
    keystate = KEYDOWNLF;
 8007ff8:	230e      	movs	r3, #14
 8007ffa:	71fb      	strb	r3, [r7, #7]
 8007ffc:	e032      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xslf))               //x1 y3 z0 15
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8008070 <Get_KeyState+0x210>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b04      	cmp	r3, #4
 8008004:	d106      	bne.n	8008014 <Get_KeyState+0x1b4>
 8008006:	4b1a      	ldr	r3, [pc, #104]	@ (8008070 <Get_KeyState+0x210>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <Get_KeyState+0x1b4>
    keystate = KEYSDOWNLF;
 800800e:	230f      	movs	r3, #15
 8008010:	71fb      	strb	r3, [r7, #7]
 8008012:	e027      	b.n	8008064 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xri))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xri)))                 //x34 y34 z0 16
 8008014:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <Get_KeyState+0x210>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d103      	bne.n	8008024 <Get_KeyState+0x1c4>
 800801c:	4b14      	ldr	r3, [pc, #80]	@ (8008070 <Get_KeyState+0x210>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d00f      	beq.n	8008044 <Get_KeyState+0x1e4>
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <Get_KeyState+0x210>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b03      	cmp	r3, #3
 800802a:	d103      	bne.n	8008034 <Get_KeyState+0x1d4>
 800802c:	4b10      	ldr	r3, [pc, #64]	@ (8008070 <Get_KeyState+0x210>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b04      	cmp	r3, #4
 8008032:	d007      	beq.n	8008044 <Get_KeyState+0x1e4>
 8008034:	4b0e      	ldr	r3, [pc, #56]	@ (8008070 <Get_KeyState+0x210>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b04      	cmp	r3, #4
 800803a:	d106      	bne.n	800804a <Get_KeyState+0x1ea>
 800803c:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <Get_KeyState+0x210>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b03      	cmp	r3, #3
 8008042:	d102      	bne.n	800804a <Get_KeyState+0x1ea>
    keystate = KEYDOWNRI;
 8008044:	2310      	movs	r3, #16
 8008046:	71fb      	strb	r3, [r7, #7]
 8008048:	e00c      	b.n	8008064 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsri))               //x3 y3 z0 17
 800804a:	4b09      	ldr	r3, [pc, #36]	@ (8008070 <Get_KeyState+0x210>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d106      	bne.n	8008060 <Get_KeyState+0x200>
 8008052:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <Get_KeyState+0x210>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d102      	bne.n	8008060 <Get_KeyState+0x200>
    keystate = KEYSDOWNRI;
 800805a:	2311      	movs	r3, #17
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	e001      	b.n	8008064 <Get_KeyState+0x204>
  else
    keystate = KEYState_MAX;
 8008060:	2312      	movs	r3, #18
 8008062:	71fb      	strb	r3, [r7, #7]
//  PrintfDebug("keystate = %d\r\n", keystate);
  return keystate;
 8008064:	79fb      	ldrb	r3, [r7, #7]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000a80 	.word	0x20000a80

08008074 <Get_KeyState_Blue>:

E_RKEYState Get_KeyState_Blue(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
  E_RKEYState keystate;
  Get_xyzVal_Blue();
 800807a:	f7ff fe03 	bl	8007c84 <Get_xyzVal_Blue>
//  PrintfDebug("%d %d\r\n", xyzVal.X, xyzVal.Y);                 //摇杆状态编码
  if((xyzVal.Y == Ysp) && (xyzVal.X == Xsp)) //x2 y2 z0 0
 800807e:	4b81      	ldr	r3, [pc, #516]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d106      	bne.n	8008094 <Get_KeyState_Blue+0x20>
 8008086:	4b7f      	ldr	r3, [pc, #508]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d102      	bne.n	8008094 <Get_KeyState_Blue+0x20>
    keystate = KEYSTOP;
 800808e:	2300      	movs	r3, #0
 8008090:	71fb      	strb	r3, [r7, #7]
 8008092:	e0f1      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Yup) && (xyzVal.X == Xsp))                 //x2 y0 z0 1
 8008094:	4b7b      	ldr	r3, [pc, #492]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <Get_KeyState_Blue+0x36>
 800809c:	4b79      	ldr	r3, [pc, #484]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d102      	bne.n	80080aa <Get_KeyState_Blue+0x36>
    keystate = KEYUP;
 80080a4:	2301      	movs	r3, #1
 80080a6:	71fb      	strb	r3, [r7, #7]
 80080a8:	e0e6      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsp))                //x2 y1 z0 2
 80080aa:	4b76      	ldr	r3, [pc, #472]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d106      	bne.n	80080c0 <Get_KeyState_Blue+0x4c>
 80080b2:	4b74      	ldr	r3, [pc, #464]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d102      	bne.n	80080c0 <Get_KeyState_Blue+0x4c>
    keystate = KEYSUP;
 80080ba:	2302      	movs	r3, #2
 80080bc:	71fb      	strb	r3, [r7, #7]
 80080be:	e0db      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ydn) && (xyzVal.X == Xsp))                 //x2 y4 z0 3
 80080c0:	4b70      	ldr	r3, [pc, #448]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d106      	bne.n	80080d6 <Get_KeyState_Blue+0x62>
 80080c8:	4b6e      	ldr	r3, [pc, #440]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d102      	bne.n	80080d6 <Get_KeyState_Blue+0x62>
    keystate = KEYDOWN;
 80080d0:	2303      	movs	r3, #3
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	e0d0      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsp))                //x2 y3 z0 4
 80080d6:	4b6b      	ldr	r3, [pc, #428]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d106      	bne.n	80080ec <Get_KeyState_Blue+0x78>
 80080de:	4b69      	ldr	r3, [pc, #420]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d102      	bne.n	80080ec <Get_KeyState_Blue+0x78>
    keystate = KEYSDOWN;
 80080e6:	2304      	movs	r3, #4
 80080e8:	71fb      	strb	r3, [r7, #7]
 80080ea:	e0c5      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xlf))                 //x0 y2 z0 5
 80080ec:	4b65      	ldr	r3, [pc, #404]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d106      	bne.n	8008102 <Get_KeyState_Blue+0x8e>
 80080f4:	4b63      	ldr	r3, [pc, #396]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <Get_KeyState_Blue+0x8e>
    keystate = KEYLEFT;
 80080fc:	2305      	movs	r3, #5
 80080fe:	71fb      	strb	r3, [r7, #7]
 8008100:	e0ba      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xslf))                //x1 y2 z0 6
 8008102:	4b60      	ldr	r3, [pc, #384]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d106      	bne.n	8008118 <Get_KeyState_Blue+0xa4>
 800810a:	4b5e      	ldr	r3, [pc, #376]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d102      	bne.n	8008118 <Get_KeyState_Blue+0xa4>
    keystate = KEYSLEFT;
 8008112:	2306      	movs	r3, #6
 8008114:	71fb      	strb	r3, [r7, #7]
 8008116:	e0af      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xri))                 //x4 y2 z0 7
 8008118:	4b5a      	ldr	r3, [pc, #360]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d106      	bne.n	800812e <Get_KeyState_Blue+0xba>
 8008120:	4b58      	ldr	r3, [pc, #352]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d102      	bne.n	800812e <Get_KeyState_Blue+0xba>
    keystate = KEYRIGHT;
 8008128:	2307      	movs	r3, #7
 800812a:	71fb      	strb	r3, [r7, #7]
 800812c:	e0a4      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) &&  (xyzVal.X == Xsri))                //x3 y2 z0 8
 800812e:	4b55      	ldr	r3, [pc, #340]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d106      	bne.n	8008144 <Get_KeyState_Blue+0xd0>
 8008136:	4b53      	ldr	r3, [pc, #332]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b04      	cmp	r3, #4
 800813c:	d102      	bne.n	8008144 <Get_KeyState_Blue+0xd0>
    keystate = KEYSRIGHT;
 800813e:	2308      	movs	r3, #8
 8008140:	71fb      	strb	r3, [r7, #7]
 8008142:	e099      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xlf))||((xyzVal.Y==Yup)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xlf)))                 //x01 y01 z0 10
 8008144:	4b4f      	ldr	r3, [pc, #316]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <Get_KeyState_Blue+0xe0>
 800814c:	4b4d      	ldr	r3, [pc, #308]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00f      	beq.n	8008174 <Get_KeyState_Blue+0x100>
 8008154:	4b4b      	ldr	r3, [pc, #300]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d103      	bne.n	8008164 <Get_KeyState_Blue+0xf0>
 800815c:	4b49      	ldr	r3, [pc, #292]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d007      	beq.n	8008174 <Get_KeyState_Blue+0x100>
 8008164:	4b47      	ldr	r3, [pc, #284]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d106      	bne.n	800817a <Get_KeyState_Blue+0x106>
 800816c:	4b45      	ldr	r3, [pc, #276]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <Get_KeyState_Blue+0x106>
    keystate = KEYUPLF;
 8008174:	230a      	movs	r3, #10
 8008176:	71fb      	strb	r3, [r7, #7]
 8008178:	e07e      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xslf))               //x1 y1 z0 11
 800817a:	4b42      	ldr	r3, [pc, #264]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d106      	bne.n	8008190 <Get_KeyState_Blue+0x11c>
 8008182:	4b40      	ldr	r3, [pc, #256]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d102      	bne.n	8008190 <Get_KeyState_Blue+0x11c>
    keystate = KEYSUPLF;
 800818a:	230b      	movs	r3, #11
 800818c:	71fb      	strb	r3, [r7, #7]
 800818e:	e073      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xri))||((xyzVal.Y==Yup)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xri)))                 //x34 y01 z0 12
 8008190:	4b3c      	ldr	r3, [pc, #240]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <Get_KeyState_Blue+0x12c>
 8008198:	4b3a      	ldr	r3, [pc, #232]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d00f      	beq.n	80081c0 <Get_KeyState_Blue+0x14c>
 80081a0:	4b38      	ldr	r3, [pc, #224]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d103      	bne.n	80081b0 <Get_KeyState_Blue+0x13c>
 80081a8:	4b36      	ldr	r3, [pc, #216]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d007      	beq.n	80081c0 <Get_KeyState_Blue+0x14c>
 80081b0:	4b34      	ldr	r3, [pc, #208]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d106      	bne.n	80081c6 <Get_KeyState_Blue+0x152>
 80081b8:	4b32      	ldr	r3, [pc, #200]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d102      	bne.n	80081c6 <Get_KeyState_Blue+0x152>
    keystate = KEYUPRI;
 80081c0:	230c      	movs	r3, #12
 80081c2:	71fb      	strb	r3, [r7, #7]
 80081c4:	e058      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsri))               //x3 y1 z0 13
 80081c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d106      	bne.n	80081dc <Get_KeyState_Blue+0x168>
 80081ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d102      	bne.n	80081dc <Get_KeyState_Blue+0x168>
    keystate = KEYSUPRI;
 80081d6:	230d      	movs	r3, #13
 80081d8:	71fb      	strb	r3, [r7, #7]
 80081da:	e04d      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xlf))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xlf)))                 //x01 y34 z0 14
 80081dc:	4b29      	ldr	r3, [pc, #164]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d103      	bne.n	80081ec <Get_KeyState_Blue+0x178>
 80081e4:	4b27      	ldr	r3, [pc, #156]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00f      	beq.n	800820c <Get_KeyState_Blue+0x198>
 80081ec:	4b25      	ldr	r3, [pc, #148]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d103      	bne.n	80081fc <Get_KeyState_Blue+0x188>
 80081f4:	4b23      	ldr	r3, [pc, #140]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d007      	beq.n	800820c <Get_KeyState_Blue+0x198>
 80081fc:	4b21      	ldr	r3, [pc, #132]	@ (8008284 <Get_KeyState_Blue+0x210>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d106      	bne.n	8008212 <Get_KeyState_Blue+0x19e>
 8008204:	4b1f      	ldr	r3, [pc, #124]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <Get_KeyState_Blue+0x19e>
    keystate = KEYDOWNLF;
 800820c:	230e      	movs	r3, #14
 800820e:	71fb      	strb	r3, [r7, #7]
 8008210:	e032      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xslf))               //x1 y3 z0 15
 8008212:	4b1c      	ldr	r3, [pc, #112]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b04      	cmp	r3, #4
 8008218:	d106      	bne.n	8008228 <Get_KeyState_Blue+0x1b4>
 800821a:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <Get_KeyState_Blue+0x1b4>
    keystate = KEYSDOWNLF;
 8008222:	230f      	movs	r3, #15
 8008224:	71fb      	strb	r3, [r7, #7]
 8008226:	e027      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xri))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xri)))                 //x34 y34 z0 16
 8008228:	4b16      	ldr	r3, [pc, #88]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d103      	bne.n	8008238 <Get_KeyState_Blue+0x1c4>
 8008230:	4b14      	ldr	r3, [pc, #80]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b03      	cmp	r3, #3
 8008236:	d00f      	beq.n	8008258 <Get_KeyState_Blue+0x1e4>
 8008238:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d103      	bne.n	8008248 <Get_KeyState_Blue+0x1d4>
 8008240:	4b10      	ldr	r3, [pc, #64]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d007      	beq.n	8008258 <Get_KeyState_Blue+0x1e4>
 8008248:	4b0e      	ldr	r3, [pc, #56]	@ (8008284 <Get_KeyState_Blue+0x210>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d106      	bne.n	800825e <Get_KeyState_Blue+0x1ea>
 8008250:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b03      	cmp	r3, #3
 8008256:	d102      	bne.n	800825e <Get_KeyState_Blue+0x1ea>
    keystate = KEYDOWNRI;
 8008258:	2310      	movs	r3, #16
 800825a:	71fb      	strb	r3, [r7, #7]
 800825c:	e00c      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsri))               //x3 y3 z0 17
 800825e:	4b09      	ldr	r3, [pc, #36]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b04      	cmp	r3, #4
 8008264:	d106      	bne.n	8008274 <Get_KeyState_Blue+0x200>
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <Get_KeyState_Blue+0x210>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d102      	bne.n	8008274 <Get_KeyState_Blue+0x200>
    keystate = KEYSDOWNRI;
 800826e:	2311      	movs	r3, #17
 8008270:	71fb      	strb	r3, [r7, #7]
 8008272:	e001      	b.n	8008278 <Get_KeyState_Blue+0x204>
  else
    keystate = KEYState_MAX;
 8008274:	2312      	movs	r3, #18
 8008276:	71fb      	strb	r3, [r7, #7]
//  PrintfDebug("keystate = %d\r\n", keystate);
  return keystate;
 8008278:	79fb      	ldrb	r3, [r7, #7]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000a80 	.word	0x20000a80

08008288 <Status_get_and_Powerset>:
#define GoDownleft 6
#define GoDownright 7
#define Mode_PWM 1
#define Mode_CAN 2
void Status_get_and_Powerset(E_RKEYState state)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
  int status = Mode_PWM;
 8008292:	2301      	movs	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]
  if(status == Mode_PWM){
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b01      	cmp	r3, #1
 800829a:	f040 8170 	bne.w	800857e <Status_get_and_Powerset+0x2f6>
	switch(state)
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	2b12      	cmp	r3, #18
 80082a2:	f200 825b 	bhi.w	800875c <Status_get_and_Powerset+0x4d4>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <Status_get_and_Powerset+0x24>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	0800831f 	.word	0x0800831f
 80082b4:	08008345 	.word	0x08008345
 80082b8:	0800836b 	.word	0x0800836b
 80082bc:	08008391 	.word	0x08008391
 80082c0:	080083b7 	.word	0x080083b7
 80082c4:	080083dd 	.word	0x080083dd
 80082c8:	08008403 	.word	0x08008403
 80082cc:	08008429 	.word	0x08008429
 80082d0:	0800875d 	.word	0x0800875d
 80082d4:	0800844f 	.word	0x0800844f
 80082d8:	08008475 	.word	0x08008475
 80082dc:	0800849b 	.word	0x0800849b
 80082e0:	080084c1 	.word	0x080084c1
 80082e4:	080084e7 	.word	0x080084e7
 80082e8:	0800850d 	.word	0x0800850d
 80082ec:	08008533 	.word	0x08008533
 80082f0:	08008559 	.word	0x08008559
 80082f4:	0800875d 	.word	0x0800875d
	{
	  case KEYSTOP://printf("No State\r\n");
	  Servo_Control(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 0;return;
 80082f8:	4bca      	ldr	r3, [pc, #808]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80082fa:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80082fe:	4ac9      	ldr	r2, [pc, #804]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008300:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008304:	4619      	mov	r1, r3
 8008306:	2001      	movs	r0, #1
 8008308:	f7fc f9b2 	bl	8004670 <Servo_Control>
 800830c:	4bc5      	ldr	r3, [pc, #788]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008314:	4bc3      	ldr	r3, [pc, #780]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800831c:	e222      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUP://printf("Key Up\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 800831e:	4bc1      	ldr	r3, [pc, #772]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008320:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008324:	4abf      	ldr	r2, [pc, #764]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008326:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800832a:	4619      	mov	r1, r3
 800832c:	2002      	movs	r0, #2
 800832e:	f7fc f99f 	bl	8004670 <Servo_Control>
 8008332:	4bbc      	ldr	r3, [pc, #752]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008334:	2201      	movs	r2, #1
 8008336:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800833a:	4bba      	ldr	r3, [pc, #744]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008342:	e20f      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 8008344:	4bb7      	ldr	r3, [pc, #732]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008346:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800834a:	4ab6      	ldr	r2, [pc, #728]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800834c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008350:	4619      	mov	r1, r3
 8008352:	2002      	movs	r0, #2
 8008354:	f7fc f98c 	bl	8004670 <Servo_Control>
 8008358:	4bb2      	ldr	r3, [pc, #712]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800835a:	2201      	movs	r2, #1
 800835c:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008360:	4bb0      	ldr	r3, [pc, #704]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008368:	e1fc      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWN://printf("Key Down\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 800836a:	4bae      	ldr	r3, [pc, #696]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800836c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008370:	4aac      	ldr	r2, [pc, #688]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008372:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008376:	4619      	mov	r1, r3
 8008378:	2002      	movs	r0, #2
 800837a:	f7fc f979 	bl	8004670 <Servo_Control>
 800837e:	4ba9      	ldr	r3, [pc, #676]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008380:	2202      	movs	r2, #2
 8008382:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008386:	4ba7      	ldr	r3, [pc, #668]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800838e:	e1e9      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 8008390:	4ba4      	ldr	r3, [pc, #656]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008392:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008396:	4aa3      	ldr	r2, [pc, #652]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008398:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800839c:	4619      	mov	r1, r3
 800839e:	2002      	movs	r0, #2
 80083a0:	f7fc f966 	bl	8004670 <Servo_Control>
 80083a4:	4b9f      	ldr	r3, [pc, #636]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083a6:	2202      	movs	r2, #2
 80083a8:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80083ac:	4b9d      	ldr	r3, [pc, #628]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80083b4:	e1d6      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 80083b6:	4b9b      	ldr	r3, [pc, #620]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083b8:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80083bc:	4a99      	ldr	r2, [pc, #612]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083be:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80083c2:	4619      	mov	r1, r3
 80083c4:	2003      	movs	r0, #3
 80083c6:	f7fc f953 	bl	8004670 <Servo_Control>
 80083ca:	4b96      	ldr	r3, [pc, #600]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80083d2:	4b94      	ldr	r3, [pc, #592]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80083da:	e1c3      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 80083dc:	4b91      	ldr	r3, [pc, #580]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083de:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	4a90      	ldr	r2, [pc, #576]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083e4:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80083e8:	4619      	mov	r1, r3
 80083ea:	2003      	movs	r0, #3
 80083ec:	f7fc f940 	bl	8004670 <Servo_Control>
 80083f0:	4b8c      	ldr	r3, [pc, #560]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80083f8:	4b8a      	ldr	r3, [pc, #552]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008400:	e1b0      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 2;return;
 8008402:	4b88      	ldr	r3, [pc, #544]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008404:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008408:	4a86      	ldr	r2, [pc, #536]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800840a:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800840e:	4619      	mov	r1, r3
 8008410:	2003      	movs	r0, #3
 8008412:	f7fc f92d 	bl	8004670 <Servo_Control>
 8008416:	4b83      	ldr	r3, [pc, #524]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008418:	2200      	movs	r2, #0
 800841a:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800841e:	4b81      	ldr	r3, [pc, #516]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008420:	2202      	movs	r2, #2
 8008422:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008426:	e19d      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008428:	4b7e      	ldr	r3, [pc, #504]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800842a:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800842e:	4a7d      	ldr	r2, [pc, #500]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008430:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008434:	4619      	mov	r1, r3
 8008436:	2003      	movs	r0, #3
 8008438:	f7fc f91a 	bl	8004670 <Servo_Control>
 800843c:	4b79      	ldr	r3, [pc, #484]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008444:	4b77      	ldr	r3, [pc, #476]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008446:	2201      	movs	r2, #1
 8008448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800844c:	e18a      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
	  Servo_Control(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 800844e:	4b75      	ldr	r3, [pc, #468]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008450:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008454:	4a73      	ldr	r2, [pc, #460]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008456:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800845a:	4619      	mov	r1, r3
 800845c:	2004      	movs	r0, #4
 800845e:	f7fc f907 	bl	8004670 <Servo_Control>
 8008462:	4b70      	ldr	r3, [pc, #448]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800846a:	4b6e      	ldr	r3, [pc, #440]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800846c:	2201      	movs	r2, #1
 800846e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008472:	e177      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
	  Servo_Control(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 8008474:	4b6b      	ldr	r3, [pc, #428]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008476:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800847a:	4a6a      	ldr	r2, [pc, #424]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800847c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008480:	4619      	mov	r1, r3
 8008482:	2004      	movs	r0, #4
 8008484:	f7fc f8f4 	bl	8004670 <Servo_Control>
 8008488:	4b66      	ldr	r3, [pc, #408]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800848a:	2201      	movs	r2, #1
 800848c:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008490:	4b64      	ldr	r3, [pc, #400]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008492:	2201      	movs	r2, #1
 8008494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008498:	e164      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
	  Servo_Control(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 800849a:	4b62      	ldr	r3, [pc, #392]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800849c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80084a0:	4a60      	ldr	r2, [pc, #384]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084a2:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80084a6:	4619      	mov	r1, r3
 80084a8:	2005      	movs	r0, #5
 80084aa:	f7fc f8e1 	bl	8004670 <Servo_Control>
 80084ae:	4b5d      	ldr	r3, [pc, #372]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084b0:	2201      	movs	r2, #1
 80084b2:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80084b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084b8:	2202      	movs	r2, #2
 80084ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80084be:	e151      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
	  Servo_Control(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 80084c0:	4b58      	ldr	r3, [pc, #352]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084c2:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80084c6:	4a57      	ldr	r2, [pc, #348]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084c8:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80084cc:	4619      	mov	r1, r3
 80084ce:	2005      	movs	r0, #5
 80084d0:	f7fc f8ce 	bl	8004670 <Servo_Control>
 80084d4:	4b53      	ldr	r3, [pc, #332]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80084dc:	4b51      	ldr	r3, [pc, #324]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084de:	2202      	movs	r2, #2
 80084e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80084e4:	e13e      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
	  Servo_Control(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 80084e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084e8:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80084ec:	4a4d      	ldr	r2, [pc, #308]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084ee:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80084f2:	4619      	mov	r1, r3
 80084f4:	2006      	movs	r0, #6
 80084f6:	f7fc f8bb 	bl	8004670 <Servo_Control>
 80084fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80084fc:	2202      	movs	r2, #2
 80084fe:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008502:	4b48      	ldr	r3, [pc, #288]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008504:	2201      	movs	r2, #1
 8008506:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800850a:	e12b      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
	  Servo_Control(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 800850c:	4b45      	ldr	r3, [pc, #276]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800850e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008512:	4a44      	ldr	r2, [pc, #272]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008514:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008518:	4619      	mov	r1, r3
 800851a:	2006      	movs	r0, #6
 800851c:	f7fc f8a8 	bl	8004670 <Servo_Control>
 8008520:	4b40      	ldr	r3, [pc, #256]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008522:	2202      	movs	r2, #2
 8008524:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008528:	4b3e      	ldr	r3, [pc, #248]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800852a:	2201      	movs	r2, #1
 800852c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008530:	e118      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
	  Servo_Control(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008532:	4b3c      	ldr	r3, [pc, #240]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008534:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008538:	4a3a      	ldr	r2, [pc, #232]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800853a:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800853e:	4619      	mov	r1, r3
 8008540:	2007      	movs	r0, #7
 8008542:	f7fc f895 	bl	8004670 <Servo_Control>
 8008546:	4b37      	ldr	r3, [pc, #220]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008548:	2202      	movs	r2, #2
 800854a:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800854e:	4b35      	ldr	r3, [pc, #212]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008550:	2202      	movs	r2, #2
 8008552:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008556:	e105      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
	  Servo_Control(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008558:	4b32      	ldr	r3, [pc, #200]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800855a:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800855e:	4a31      	ldr	r2, [pc, #196]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008560:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008564:	4619      	mov	r1, r3
 8008566:	2007      	movs	r0, #7
 8008568:	f7fc f882 	bl	8004670 <Servo_Control>
 800856c:	4b2d      	ldr	r3, [pc, #180]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800856e:	2202      	movs	r2, #2
 8008570:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008574:	4b2b      	ldr	r3, [pc, #172]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008576:	2202      	movs	r2, #2
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800857c:	e0f2      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  default:
		break;
	}
  }
  else if(status == Mode_CAN){
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b02      	cmp	r3, #2
 8008582:	f040 80ee 	bne.w	8008762 <Status_get_and_Powerset+0x4da>
	switch(state)
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	2b12      	cmp	r3, #18
 800858a:	f200 80e9 	bhi.w	8008760 <Status_get_and_Powerset+0x4d8>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <Status_get_and_Powerset+0x30c>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085e1 	.word	0x080085e1
 8008598:	080085f7 	.word	0x080085f7
 800859c:	0800860d 	.word	0x0800860d
 80085a0:	08008629 	.word	0x08008629
 80085a4:	0800863f 	.word	0x0800863f
 80085a8:	08008655 	.word	0x08008655
 80085ac:	0800866b 	.word	0x0800866b
 80085b0:	08008681 	.word	0x08008681
 80085b4:	08008697 	.word	0x08008697
 80085b8:	08008761 	.word	0x08008761
 80085bc:	080086ad 	.word	0x080086ad
 80085c0:	080086c3 	.word	0x080086c3
 80085c4:	080086d9 	.word	0x080086d9
 80085c8:	080086ef 	.word	0x080086ef
 80085cc:	08008705 	.word	0x08008705
 80085d0:	0800871b 	.word	0x0800871b
 80085d4:	08008731 	.word	0x08008731
 80085d8:	08008747 	.word	0x08008747
 80085dc:	08008761 	.word	0x08008761
	{
	  case KEYSTOP://printf("No State\r\n");
		  Servo_Control_CAN(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085e0:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80085e2:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80085e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80085e8:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80085ec:	4619      	mov	r1, r3
 80085ee:	2001      	movs	r0, #1
 80085f0:	f7fd f8a0 	bl	8005734 <Servo_Control_CAN>
 80085f4:	e0b6      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUP://printf("Key Up\r\n");
		  Servo_Control_CAN(2,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80085f8:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80085fc:	4a09      	ldr	r2, [pc, #36]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 80085fe:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008602:	4619      	mov	r1, r3
 8008604:	2002      	movs	r0, #2
 8008606:	f7fd f895 	bl	8005734 <Servo_Control_CAN>
 800860a:	e0ab      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
		  Servo_Control_CAN(2,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800860c:	4b05      	ldr	r3, [pc, #20]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 800860e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008612:	4a04      	ldr	r2, [pc, #16]	@ (8008624 <Status_get_and_Powerset+0x39c>)
 8008614:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008618:	4619      	mov	r1, r3
 800861a:	2002      	movs	r0, #2
 800861c:	f7fd f88a 	bl	8005734 <Servo_Control_CAN>
 8008620:	e0a0      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
 8008622:	bf00      	nop
 8008624:	200005d8 	.word	0x200005d8
		break;
	  case KEYDOWN://printf("Key Down\r\n");
		  Servo_Control_CAN(3,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008628:	4b50      	ldr	r3, [pc, #320]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800862a:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800862e:	4a4f      	ldr	r2, [pc, #316]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008630:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008634:	4619      	mov	r1, r3
 8008636:	2003      	movs	r0, #3
 8008638:	f7fd f87c 	bl	8005734 <Servo_Control_CAN>
 800863c:	e092      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
		  Servo_Control_CAN(3,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800863e:	4b4b      	ldr	r3, [pc, #300]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008640:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008644:	4a49      	ldr	r2, [pc, #292]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008646:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800864a:	4619      	mov	r1, r3
 800864c:	2003      	movs	r0, #3
 800864e:	f7fd f871 	bl	8005734 <Servo_Control_CAN>
 8008652:	e087      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
		  Servo_Control_CAN(4,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008654:	4b45      	ldr	r3, [pc, #276]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008656:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800865a:	4a44      	ldr	r2, [pc, #272]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800865c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008660:	4619      	mov	r1, r3
 8008662:	2004      	movs	r0, #4
 8008664:	f7fd f866 	bl	8005734 <Servo_Control_CAN>
 8008668:	e07c      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
		  Servo_Control_CAN(4,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800866a:	4b40      	ldr	r3, [pc, #256]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800866c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008670:	4a3e      	ldr	r2, [pc, #248]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008672:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008676:	4619      	mov	r1, r3
 8008678:	2004      	movs	r0, #4
 800867a:	f7fd f85b 	bl	8005734 <Servo_Control_CAN>
 800867e:	e071      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
		  Servo_Control_CAN(5,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008680:	4b3a      	ldr	r3, [pc, #232]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008682:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008686:	4a39      	ldr	r2, [pc, #228]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008688:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800868c:	4619      	mov	r1, r3
 800868e:	2005      	movs	r0, #5
 8008690:	f7fd f850 	bl	8005734 <Servo_Control_CAN>
 8008694:	e066      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
		  Servo_Control_CAN(5,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008696:	4b35      	ldr	r3, [pc, #212]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008698:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800869c:	4a33      	ldr	r2, [pc, #204]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800869e:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80086a2:	4619      	mov	r1, r3
 80086a4:	2005      	movs	r0, #5
 80086a6:	f7fd f845 	bl	8005734 <Servo_Control_CAN>
 80086aa:	e05b      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
		  Servo_Control_CAN(6,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80086ac:	4b2f      	ldr	r3, [pc, #188]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086ae:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80086b2:	4a2e      	ldr	r2, [pc, #184]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086b4:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80086b8:	4619      	mov	r1, r3
 80086ba:	2006      	movs	r0, #6
 80086bc:	f7fd f83a 	bl	8005734 <Servo_Control_CAN>
 80086c0:	e050      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
		  Servo_Control_CAN(6,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80086c2:	4b2a      	ldr	r3, [pc, #168]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086c4:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80086c8:	4a28      	ldr	r2, [pc, #160]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086ca:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80086ce:	4619      	mov	r1, r3
 80086d0:	2006      	movs	r0, #6
 80086d2:	f7fd f82f 	bl	8005734 <Servo_Control_CAN>
 80086d6:	e045      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
		  Servo_Control_CAN(7,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80086d8:	4b24      	ldr	r3, [pc, #144]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086da:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80086de:	4a23      	ldr	r2, [pc, #140]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086e0:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80086e4:	4619      	mov	r1, r3
 80086e6:	2007      	movs	r0, #7
 80086e8:	f7fd f824 	bl	8005734 <Servo_Control_CAN>
 80086ec:	e03a      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
		  Servo_Control_CAN(7,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80086ee:	4b1f      	ldr	r3, [pc, #124]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086f0:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80086f4:	4a1d      	ldr	r2, [pc, #116]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 80086f6:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80086fa:	4619      	mov	r1, r3
 80086fc:	2007      	movs	r0, #7
 80086fe:	f7fd f819 	bl	8005734 <Servo_Control_CAN>
 8008702:	e02f      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
		  Servo_Control_CAN(8,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008704:	4b19      	ldr	r3, [pc, #100]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008706:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800870a:	4a18      	ldr	r2, [pc, #96]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800870c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008710:	4619      	mov	r1, r3
 8008712:	2008      	movs	r0, #8
 8008714:	f7fd f80e 	bl	8005734 <Servo_Control_CAN>
 8008718:	e024      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
		  Servo_Control_CAN(8,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800871a:	4b14      	ldr	r3, [pc, #80]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800871c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008720:	4a12      	ldr	r2, [pc, #72]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008722:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008726:	4619      	mov	r1, r3
 8008728:	2008      	movs	r0, #8
 800872a:	f7fd f803 	bl	8005734 <Servo_Control_CAN>
 800872e:	e019      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
		  Servo_Control_CAN(9,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008730:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008732:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008736:	4a0d      	ldr	r2, [pc, #52]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008738:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800873c:	4619      	mov	r1, r3
 800873e:	2009      	movs	r0, #9
 8008740:	f7fc fff8 	bl	8005734 <Servo_Control_CAN>
 8008744:	e00e      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
		  Servo_Control_CAN(9,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 8008748:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800874c:	4a07      	ldr	r2, [pc, #28]	@ (800876c <Status_get_and_Powerset+0x4e4>)
 800874e:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008752:	4619      	mov	r1, r3
 8008754:	2009      	movs	r0, #9
 8008756:	f7fc ffed 	bl	8005734 <Servo_Control_CAN>
 800875a:	e003      	b.n	8008764 <Status_get_and_Powerset+0x4dc>
		break;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <Status_get_and_Powerset+0x4da>
		break;
	  case KEYState_MAX://printf("State\r\n");
		break;
	  default:
		break;
 8008760:	bf00      	nop
	}
  }
  return;
 8008762:	bf00      	nop
}
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	200005d8 	.word	0x200005d8

08008770 <Status_get_and_Powerset_Blue>:

void Status_get_and_Powerset_Blue(E_RKEYState state){
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
	switch(state)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b12      	cmp	r3, #18
 800877e:	f200 816c 	bhi.w	8008a5a <Status_get_and_Powerset_Blue+0x2ea>
 8008782:	a201      	add	r2, pc, #4	@ (adr r2, 8008788 <Status_get_and_Powerset_Blue+0x18>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087d5 	.word	0x080087d5
 800878c:	080087fb 	.word	0x080087fb
 8008790:	08008821 	.word	0x08008821
 8008794:	08008847 	.word	0x08008847
 8008798:	0800886d 	.word	0x0800886d
 800879c:	08008893 	.word	0x08008893
 80087a0:	080088b9 	.word	0x080088b9
 80087a4:	080088df 	.word	0x080088df
 80087a8:	08008905 	.word	0x08008905
 80087ac:	08008a5b 	.word	0x08008a5b
 80087b0:	0800892b 	.word	0x0800892b
 80087b4:	08008951 	.word	0x08008951
 80087b8:	08008977 	.word	0x08008977
 80087bc:	0800899d 	.word	0x0800899d
 80087c0:	080089c3 	.word	0x080089c3
 80087c4:	080089e9 	.word	0x080089e9
 80087c8:	08008a0f 	.word	0x08008a0f
 80087cc:	08008a35 	.word	0x08008a35
 80087d0:	08008a5b 	.word	0x08008a5b
	{
	  case KEYSTOP://printf("No State\r\n");
	  Servo_Control_Blue(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 0;return;
 80087d4:	4ba3      	ldr	r3, [pc, #652]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80087d6:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80087da:	4aa2      	ldr	r2, [pc, #648]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80087dc:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80087e0:	4619      	mov	r1, r3
 80087e2:	2001      	movs	r0, #1
 80087e4:	f7fc fb74 	bl	8004ed0 <Servo_Control_Blue>
 80087e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80087f0:	4b9c      	ldr	r3, [pc, #624]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80087f8:	e131      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYUP://printf("Key Up\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 80087fa:	4b9a      	ldr	r3, [pc, #616]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80087fc:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008800:	4a98      	ldr	r2, [pc, #608]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008802:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008806:	4619      	mov	r1, r3
 8008808:	2002      	movs	r0, #2
 800880a:	f7fc fb61 	bl	8004ed0 <Servo_Control_Blue>
 800880e:	4b95      	ldr	r3, [pc, #596]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008810:	2201      	movs	r2, #1
 8008812:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008816:	4b93      	ldr	r3, [pc, #588]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800881e:	e11e      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 8008820:	4b90      	ldr	r3, [pc, #576]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008822:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008826:	4a8f      	ldr	r2, [pc, #572]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008828:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800882c:	4619      	mov	r1, r3
 800882e:	2002      	movs	r0, #2
 8008830:	f7fc fb4e 	bl	8004ed0 <Servo_Control_Blue>
 8008834:	4b8b      	ldr	r3, [pc, #556]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008836:	2201      	movs	r2, #1
 8008838:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800883c:	4b89      	ldr	r3, [pc, #548]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008844:	e10b      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWN://printf("Key Down\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 8008846:	4b87      	ldr	r3, [pc, #540]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008848:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800884c:	4a85      	ldr	r2, [pc, #532]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800884e:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008852:	4619      	mov	r1, r3
 8008854:	2002      	movs	r0, #2
 8008856:	f7fc fb3b 	bl	8004ed0 <Servo_Control_Blue>
 800885a:	4b82      	ldr	r3, [pc, #520]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800885c:	2202      	movs	r2, #2
 800885e:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008862:	4b80      	ldr	r3, [pc, #512]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800886a:	e0f8      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 800886c:	4b7d      	ldr	r3, [pc, #500]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800886e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008872:	4a7c      	ldr	r2, [pc, #496]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008874:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008878:	4619      	mov	r1, r3
 800887a:	2002      	movs	r0, #2
 800887c:	f7fc fb28 	bl	8004ed0 <Servo_Control_Blue>
 8008880:	4b78      	ldr	r3, [pc, #480]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008882:	2202      	movs	r2, #2
 8008884:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008888:	4b76      	ldr	r3, [pc, #472]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008890:	e0e5      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008892:	4b74      	ldr	r3, [pc, #464]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008894:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008898:	4a72      	ldr	r2, [pc, #456]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800889a:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800889e:	4619      	mov	r1, r3
 80088a0:	2003      	movs	r0, #3
 80088a2:	f7fc fb15 	bl	8004ed0 <Servo_Control_Blue>
 80088a6:	4b6f      	ldr	r3, [pc, #444]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80088ae:	4b6d      	ldr	r3, [pc, #436]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80088b6:	e0d2      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 80088b8:	4b6a      	ldr	r3, [pc, #424]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088ba:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80088be:	4a69      	ldr	r2, [pc, #420]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088c0:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80088c4:	4619      	mov	r1, r3
 80088c6:	2003      	movs	r0, #3
 80088c8:	f7fc fb02 	bl	8004ed0 <Servo_Control_Blue>
 80088cc:	4b65      	ldr	r3, [pc, #404]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80088d4:	4b63      	ldr	r3, [pc, #396]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80088dc:	e0bf      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 2;return;
 80088de:	4b61      	ldr	r3, [pc, #388]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088e0:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80088e4:	4a5f      	ldr	r2, [pc, #380]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088e6:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80088ea:	4619      	mov	r1, r3
 80088ec:	2003      	movs	r0, #3
 80088ee:	f7fc faef 	bl	8004ed0 <Servo_Control_Blue>
 80088f2:	4b5c      	ldr	r3, [pc, #368]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80088fa:	4b5a      	ldr	r3, [pc, #360]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80088fc:	2202      	movs	r2, #2
 80088fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008902:	e0ac      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008904:	4b57      	ldr	r3, [pc, #348]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008906:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800890a:	4a56      	ldr	r2, [pc, #344]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800890c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008910:	4619      	mov	r1, r3
 8008912:	2003      	movs	r0, #3
 8008914:	f7fc fadc 	bl	8004ed0 <Servo_Control_Blue>
 8008918:	4b52      	ldr	r3, [pc, #328]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008920:	4b50      	ldr	r3, [pc, #320]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008922:	2201      	movs	r2, #1
 8008924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008928:	e099      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
	  Servo_Control_Blue(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 800892a:	4b4e      	ldr	r3, [pc, #312]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800892c:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008930:	4a4c      	ldr	r2, [pc, #304]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008932:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008936:	4619      	mov	r1, r3
 8008938:	2004      	movs	r0, #4
 800893a:	f7fc fac9 	bl	8004ed0 <Servo_Control_Blue>
 800893e:	4b49      	ldr	r3, [pc, #292]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008940:	2201      	movs	r2, #1
 8008942:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008946:	4b47      	ldr	r3, [pc, #284]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008948:	2201      	movs	r2, #1
 800894a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800894e:	e086      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
	  Servo_Control_Blue(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 8008950:	4b44      	ldr	r3, [pc, #272]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008952:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008956:	4a43      	ldr	r2, [pc, #268]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008958:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 800895c:	4619      	mov	r1, r3
 800895e:	2004      	movs	r0, #4
 8008960:	f7fc fab6 	bl	8004ed0 <Servo_Control_Blue>
 8008964:	4b3f      	ldr	r3, [pc, #252]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008966:	2201      	movs	r2, #1
 8008968:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 800896c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800896e:	2201      	movs	r2, #1
 8008970:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008974:	e073      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
	  Servo_Control_Blue(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 8008976:	4b3b      	ldr	r3, [pc, #236]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008978:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 800897c:	4a39      	ldr	r2, [pc, #228]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800897e:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008982:	4619      	mov	r1, r3
 8008984:	2005      	movs	r0, #5
 8008986:	f7fc faa3 	bl	8004ed0 <Servo_Control_Blue>
 800898a:	4b36      	ldr	r3, [pc, #216]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800898c:	2201      	movs	r2, #1
 800898e:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008992:	4b34      	ldr	r3, [pc, #208]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008994:	2202      	movs	r2, #2
 8008996:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 800899a:	e060      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
	  Servo_Control_Blue(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 800899c:	4b31      	ldr	r3, [pc, #196]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 800899e:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80089a2:	4a30      	ldr	r2, [pc, #192]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089a4:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80089a8:	4619      	mov	r1, r3
 80089aa:	2005      	movs	r0, #5
 80089ac:	f7fc fa90 	bl	8004ed0 <Servo_Control_Blue>
 80089b0:	4b2c      	ldr	r3, [pc, #176]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80089b8:	4b2a      	ldr	r3, [pc, #168]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089ba:	2202      	movs	r2, #2
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80089c0:	e04d      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
	  Servo_Control_Blue(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 80089c2:	4b28      	ldr	r3, [pc, #160]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089c4:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80089c8:	4a26      	ldr	r2, [pc, #152]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089ca:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80089ce:	4619      	mov	r1, r3
 80089d0:	2006      	movs	r0, #6
 80089d2:	f7fc fa7d 	bl	8004ed0 <Servo_Control_Blue>
 80089d6:	4b23      	ldr	r3, [pc, #140]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089d8:	2202      	movs	r2, #2
 80089da:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80089de:	4b21      	ldr	r3, [pc, #132]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80089e6:	e03a      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
	  Servo_Control_Blue(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 80089e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089ea:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 80089ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089f0:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 80089f4:	4619      	mov	r1, r3
 80089f6:	2006      	movs	r0, #6
 80089f8:	f7fc fa6a 	bl	8004ed0 <Servo_Control_Blue>
 80089fc:	4b19      	ldr	r3, [pc, #100]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 80089fe:	2202      	movs	r2, #2
 8008a00:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008a04:	4b17      	ldr	r3, [pc, #92]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008a0c:	e027      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
	  Servo_Control_Blue(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008a0e:	4b15      	ldr	r3, [pc, #84]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a10:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008a14:	4a13      	ldr	r2, [pc, #76]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a16:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	2007      	movs	r0, #7
 8008a1e:	f7fc fa57 	bl	8004ed0 <Servo_Control_Blue>
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a24:	2202      	movs	r2, #2
 8008a26:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008a32:	e014      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
	  Servo_Control_Blue(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008a34:	4b0b      	ldr	r3, [pc, #44]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a36:	f8b3 32b8 	ldrh.w	r3, [r3, #696]	@ 0x2b8
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a3c:	f8b2 22ba 	ldrh.w	r2, [r2, #698]	@ 0x2ba
 8008a40:	4619      	mov	r1, r3
 8008a42:	2007      	movs	r0, #7
 8008a44:	f7fc fa44 	bl	8004ed0 <Servo_Control_Blue>
 8008a48:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <Status_get_and_Powerset_Blue+0x2f4>)
 8008a52:	2202      	movs	r2, #2
 8008a54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8008a58:	e001      	b.n	8008a5e <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYState_MAX://printf("State\r\n");
		break;
	  default:
		break;
 8008a5a:	bf00      	nop
	}
	return ;
 8008a5c:	bf00      	nop
}
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	200005d8 	.word	0x200005d8

08008a68 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8008adc <MX_UART4_Init+0x74>)
 8008a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008a72:	4b19      	ldr	r3, [pc, #100]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008a7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008a80:	4b15      	ldr	r3, [pc, #84]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008a86:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008a8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a8e:	220c      	movs	r2, #12
 8008a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a92:	4b11      	ldr	r3, [pc, #68]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a98:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008a9e:	480e      	ldr	r0, [pc, #56]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008aa0:	f003 fc7a 	bl	800c398 <HAL_UART_Init>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008aaa:	f7fb fddb 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
   __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);  // 启用IDLE中断
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	4b08      	ldr	r3, [pc, #32]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0210 	orr.w	r2, r2, #16
 8008abc:	60da      	str	r2, [r3, #12]
   __HAL_UART_CLEAR_FLAG(&huart4, UART_FLAG_TC | UART_FLAG_RXNE | UART_FLAG_IDLE);  // 清除标志
 8008abe:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f06f 0270 	mvn.w	r2, #112	@ 0x70
 8008ac6:	601a      	str	r2, [r3, #0]
   HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 8008ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008acc:	4904      	ldr	r1, [pc, #16]	@ (8008ae0 <MX_UART4_Init+0x78>)
 8008ace:	4802      	ldr	r0, [pc, #8]	@ (8008ad8 <MX_UART4_Init+0x70>)
 8008ad0:	f003 fd62 	bl	800c598 <HAL_UART_Receive_DMA>
  /* USER CODE END UART4_Init 2 */

}
 8008ad4:	bf00      	nop
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000a90 	.word	0x20000a90
 8008adc:	40004c00 	.word	0x40004c00
 8008ae0:	200008c4 	.word	0x200008c4

08008ae4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008ae8:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008aea:	4a12      	ldr	r2, [pc, #72]	@ (8008b34 <MX_UART5_Init+0x50>)
 8008aec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8008aee:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008af4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008af6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008afc:	4b0c      	ldr	r3, [pc, #48]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008b02:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008b08:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008b0a:	220c      	movs	r2, #12
 8008b0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b0e:	4b08      	ldr	r3, [pc, #32]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b14:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008b1a:	4805      	ldr	r0, [pc, #20]	@ (8008b30 <MX_UART5_Init+0x4c>)
 8008b1c:	f003 fc3c 	bl	800c398 <HAL_UART_Init>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8008b26:	f7fb fd9d 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000ad8 	.word	0x20000ad8
 8008b34:	40005000 	.word	0x40005000

08008b38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008b3c:	4b11      	ldr	r3, [pc, #68]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b3e:	4a12      	ldr	r2, [pc, #72]	@ (8008b88 <MX_USART1_UART_Init+0x50>)
 8008b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8008b42:	4b10      	ldr	r3, [pc, #64]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008b5c:	4b09      	ldr	r3, [pc, #36]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b5e:	220c      	movs	r2, #12
 8008b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b62:	4b08      	ldr	r3, [pc, #32]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b68:	4b06      	ldr	r3, [pc, #24]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008b6e:	4805      	ldr	r0, [pc, #20]	@ (8008b84 <MX_USART1_UART_Init+0x4c>)
 8008b70:	f003 fc12 	bl	800c398 <HAL_UART_Init>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008b7a:	f7fb fd73 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20000b20 	.word	0x20000b20
 8008b88:	40011000 	.word	0x40011000

08008b8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008b90:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008b92:	4a1c      	ldr	r2, [pc, #112]	@ (8008c04 <MX_USART2_UART_Init+0x78>)
 8008b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008b96:	4b1a      	ldr	r3, [pc, #104]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008b9e:	4b18      	ldr	r3, [pc, #96]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008ba4:	4b16      	ldr	r3, [pc, #88]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008baa:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008bb0:	4b13      	ldr	r3, [pc, #76]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bb2:	220c      	movs	r2, #12
 8008bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bb6:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008bc2:	480f      	ldr	r0, [pc, #60]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bc4:	f003 fbe8 	bl	800c398 <HAL_UART_Init>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008bce:	f7fb fd49 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // 启用IDLE中断
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	4b09      	ldr	r3, [pc, #36]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0210 	orr.w	r2, r2, #16
 8008be0:	60da      	str	r2, [r3, #12]
  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_TC | UART_FLAG_RXNE | UART_FLAG_IDLE);  // 清除标志
 8008be2:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f06f 0270 	mvn.w	r2, #112	@ 0x70
 8008bea:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)imu_buf, imu_buf);
 8008bec:	4b06      	ldr	r3, [pc, #24]	@ (8008c08 <MX_USART2_UART_Init+0x7c>)
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4905      	ldr	r1, [pc, #20]	@ (8008c08 <MX_USART2_UART_Init+0x7c>)
 8008bf4:	4802      	ldr	r0, [pc, #8]	@ (8008c00 <MX_USART2_UART_Init+0x74>)
 8008bf6:	f003 fccf 	bl	800c598 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000b68 	.word	0x20000b68
 8008c04:	40004400 	.word	0x40004400
 8008c08:	200004d4 	.word	0x200004d4

08008c0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008c10:	4b11      	ldr	r3, [pc, #68]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c12:	4a12      	ldr	r2, [pc, #72]	@ (8008c5c <MX_USART3_UART_Init+0x50>)
 8008c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008c16:	4b10      	ldr	r3, [pc, #64]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c32:	220c      	movs	r2, #12
 8008c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008c42:	4805      	ldr	r0, [pc, #20]	@ (8008c58 <MX_USART3_UART_Init+0x4c>)
 8008c44:	f003 fba8 	bl	800c398 <HAL_UART_Init>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008c4e:	f7fb fd09 	bl	8004664 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
//    HAL_UART_Receive_DMA(&huart3,RECV_4G_BUFF,sizeof(RECV_4G_BUFF));
  /* USER CODE END USART3_Init 2 */

}
 8008c52:	bf00      	nop
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000bb0 	.word	0x20000bb0
 8008c5c:	40004800 	.word	0x40004800

08008c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b092      	sub	sp, #72	@ 0x48
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8008da8 <HAL_UART_MspInit+0x148>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f040 80a0 	bne.w	8008dc4 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008c84:	2300      	movs	r3, #0
 8008c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c88:	4b48      	ldr	r3, [pc, #288]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	4a47      	ldr	r2, [pc, #284]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008c8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c94:	4b45      	ldr	r3, [pc, #276]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ca4:	4b41      	ldr	r3, [pc, #260]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca8:	4a40      	ldr	r2, [pc, #256]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008caa:	f043 0304 	orr.w	r3, r3, #4
 8008cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8008dac <HAL_UART_MspInit+0x14c>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008cbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008cce:	2308      	movs	r3, #8
 8008cd0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4835      	ldr	r0, [pc, #212]	@ (8008db0 <HAL_UART_MspInit+0x150>)
 8008cda:	f001 fe13 	bl	800a904 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8008cde:	4b35      	ldr	r3, [pc, #212]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008ce0:	4a35      	ldr	r2, [pc, #212]	@ (8008db8 <HAL_UART_MspInit+0x158>)
 8008ce2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8008ce4:	4b33      	ldr	r3, [pc, #204]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008ce6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008cea:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cec:	4b31      	ldr	r3, [pc, #196]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008cee:	2240      	movs	r2, #64	@ 0x40
 8008cf0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cf2:	4b30      	ldr	r3, [pc, #192]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cfe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d00:	4b2c      	ldr	r3, [pc, #176]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d06:	4b2b      	ldr	r3, [pc, #172]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008d0c:	4b29      	ldr	r3, [pc, #164]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008d12:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d18:	4b26      	ldr	r3, [pc, #152]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008d1e:	4825      	ldr	r0, [pc, #148]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d20:	f001 f9ee 	bl	800a100 <HAL_DMA_Init>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8008d2a:	f7fb fc9b 	bl	8004664 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a20      	ldr	r2, [pc, #128]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d32:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d34:	4a1f      	ldr	r2, [pc, #124]	@ (8008db4 <HAL_UART_MspInit+0x154>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008d3a:	4b20      	ldr	r3, [pc, #128]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d3c:	4a20      	ldr	r2, [pc, #128]	@ (8008dc0 <HAL_UART_MspInit+0x160>)
 8008d3e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8008d40:	4b1e      	ldr	r3, [pc, #120]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008d46:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d48:	4b1c      	ldr	r3, [pc, #112]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d54:	4b19      	ldr	r3, [pc, #100]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d5a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d5c:	4b17      	ldr	r3, [pc, #92]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d62:	4b16      	ldr	r3, [pc, #88]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008d68:	4b14      	ldr	r3, [pc, #80]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008d6e:	4b13      	ldr	r3, [pc, #76]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d74:	4b11      	ldr	r3, [pc, #68]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008d7a:	4810      	ldr	r0, [pc, #64]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d7c:	f001 f9c0 	bl	800a100 <HAL_DMA_Init>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008d86:	f7fb fc6d 	bl	8004664 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d90:	4a0a      	ldr	r2, [pc, #40]	@ (8008dbc <HAL_UART_MspInit+0x15c>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008d96:	2200      	movs	r2, #0
 8008d98:	2100      	movs	r1, #0
 8008d9a:	2034      	movs	r0, #52	@ 0x34
 8008d9c:	f001 f979 	bl	800a092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008da0:	2034      	movs	r0, #52	@ 0x34
 8008da2:	f001 f992 	bl	800a0ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008da6:	e20d      	b.n	80091c4 <HAL_UART_MspInit+0x564>
 8008da8:	40004c00 	.word	0x40004c00
 8008dac:	40023800 	.word	0x40023800
 8008db0:	40020800 	.word	0x40020800
 8008db4:	20000bf8 	.word	0x20000bf8
 8008db8:	40026070 	.word	0x40026070
 8008dbc:	20000c58 	.word	0x20000c58
 8008dc0:	40026040 	.word	0x40026040
  else if(uartHandle->Instance==UART5)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8008ff4 <HAL_UART_MspInit+0x394>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	f040 80b0 	bne.w	8008f30 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dd4:	4b88      	ldr	r3, [pc, #544]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd8:	4a87      	ldr	r2, [pc, #540]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8008de0:	4b85      	ldr	r3, [pc, #532]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dec:	2300      	movs	r3, #0
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df0:	4b81      	ldr	r3, [pc, #516]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df4:	4a80      	ldr	r2, [pc, #512]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008df6:	f043 0304 	orr.w	r3, r3, #4
 8008dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e08:	2300      	movs	r3, #0
 8008e0a:	623b      	str	r3, [r7, #32]
 8008e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e10:	4a79      	ldr	r2, [pc, #484]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008e12:	f043 0308 	orr.w	r3, r3, #8
 8008e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e18:	4b77      	ldr	r3, [pc, #476]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e32:	2303      	movs	r3, #3
 8008e34:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008e36:	2308      	movs	r3, #8
 8008e38:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e3e:	4619      	mov	r1, r3
 8008e40:	486e      	ldr	r0, [pc, #440]	@ (8008ffc <HAL_UART_MspInit+0x39c>)
 8008e42:	f001 fd5f 	bl	800a904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008e46:	2304      	movs	r3, #4
 8008e48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e52:	2303      	movs	r3, #3
 8008e54:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008e56:	2308      	movs	r3, #8
 8008e58:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4867      	ldr	r0, [pc, #412]	@ (8009000 <HAL_UART_MspInit+0x3a0>)
 8008e62:	f001 fd4f 	bl	800a904 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008e66:	4b67      	ldr	r3, [pc, #412]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e68:	4a67      	ldr	r2, [pc, #412]	@ (8009008 <HAL_UART_MspInit+0x3a8>)
 8008e6a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008e6c:	4b65      	ldr	r3, [pc, #404]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e72:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e74:	4b63      	ldr	r3, [pc, #396]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e7a:	4b62      	ldr	r3, [pc, #392]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e80:	4b60      	ldr	r3, [pc, #384]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e86:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e88:	4b5e      	ldr	r3, [pc, #376]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8008e94:	4b5b      	ldr	r3, [pc, #364]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ea0:	4b58      	ldr	r3, [pc, #352]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008ea6:	4857      	ldr	r0, [pc, #348]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008ea8:	f001 f92a 	bl	800a100 <HAL_DMA_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8008eb2:	f7fb fbd7 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a52      	ldr	r2, [pc, #328]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008eba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ebc:	4a51      	ldr	r2, [pc, #324]	@ (8009004 <HAL_UART_MspInit+0x3a4>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8008ec2:	4b52      	ldr	r3, [pc, #328]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ec4:	4a52      	ldr	r2, [pc, #328]	@ (8009010 <HAL_UART_MspInit+0x3b0>)
 8008ec6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8008ec8:	4b50      	ldr	r3, [pc, #320]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008eca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008ece:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ed2:	2240      	movs	r2, #64	@ 0x40
 8008ed4:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008edc:	4b4b      	ldr	r3, [pc, #300]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ee2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ee4:	4b49      	ldr	r3, [pc, #292]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008eea:	4b48      	ldr	r3, [pc, #288]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8008ef0:	4b46      	ldr	r3, [pc, #280]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ef6:	4b45      	ldr	r3, [pc, #276]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008efc:	4b43      	ldr	r3, [pc, #268]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8008f02:	4842      	ldr	r0, [pc, #264]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008f04:	f001 f8fc 	bl	800a100 <HAL_DMA_Init>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8008f0e:	f7fb fba9 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a3d      	ldr	r2, [pc, #244]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008f16:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f18:	4a3c      	ldr	r2, [pc, #240]	@ (800900c <HAL_UART_MspInit+0x3ac>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	2035      	movs	r0, #53	@ 0x35
 8008f24:	f001 f8b5 	bl	800a092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8008f28:	2035      	movs	r0, #53	@ 0x35
 8008f2a:	f001 f8ce 	bl	800a0ca <HAL_NVIC_EnableIRQ>
}
 8008f2e:	e149      	b.n	80091c4 <HAL_UART_MspInit+0x564>
  else if(uartHandle->Instance==USART1)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a37      	ldr	r2, [pc, #220]	@ (8009014 <HAL_UART_MspInit+0x3b4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d174      	bne.n	8009024 <HAL_UART_MspInit+0x3c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f42:	4a2d      	ldr	r2, [pc, #180]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f44:	f043 0310 	orr.w	r3, r3, #16
 8008f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4e:	f003 0310 	and.w	r3, r3, #16
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f56:	2300      	movs	r3, #0
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5e:	4a26      	ldr	r2, [pc, #152]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f60:	f043 0301 	orr.w	r3, r3, #1
 8008f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f66:	4b24      	ldr	r3, [pc, #144]	@ (8008ff8 <HAL_UART_MspInit+0x398>)
 8008f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008f72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f80:	2303      	movs	r3, #3
 8008f82:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f84:	2307      	movs	r3, #7
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4822      	ldr	r0, [pc, #136]	@ (8009018 <HAL_UART_MspInit+0x3b8>)
 8008f90:	f001 fcb8 	bl	800a904 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008f94:	4b21      	ldr	r3, [pc, #132]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008f96:	4a22      	ldr	r2, [pc, #136]	@ (8009020 <HAL_UART_MspInit+0x3c0>)
 8008f98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008f9a:	4b20      	ldr	r3, [pc, #128]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008f9c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008fae:	4b1b      	ldr	r3, [pc, #108]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008fb6:	4b19      	ldr	r3, [pc, #100]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008fbc:	4b17      	ldr	r3, [pc, #92]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008fc2:	4b16      	ldr	r3, [pc, #88]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008fc8:	4b14      	ldr	r3, [pc, #80]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008fce:	4b13      	ldr	r3, [pc, #76]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008fd4:	4811      	ldr	r0, [pc, #68]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fd6:	f001 f893 	bl	800a100 <HAL_DMA_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <HAL_UART_MspInit+0x384>
      Error_Handler();
 8008fe0:	f7fb fb40 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008fea:	4a0c      	ldr	r2, [pc, #48]	@ (800901c <HAL_UART_MspInit+0x3bc>)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008ff0:	e0e8      	b.n	80091c4 <HAL_UART_MspInit+0x564>
 8008ff2:	bf00      	nop
 8008ff4:	40005000 	.word	0x40005000
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40020800 	.word	0x40020800
 8009000:	40020c00 	.word	0x40020c00
 8009004:	20000cb8 	.word	0x20000cb8
 8009008:	40026010 	.word	0x40026010
 800900c:	20000d18 	.word	0x20000d18
 8009010:	400260b8 	.word	0x400260b8
 8009014:	40011000 	.word	0x40011000
 8009018:	40020000 	.word	0x40020000
 800901c:	20000d78 	.word	0x20000d78
 8009020:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART2)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a68      	ldr	r2, [pc, #416]	@ (80091cc <HAL_UART_MspInit+0x56c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d162      	bne.n	80090f4 <HAL_UART_MspInit+0x494>
    __HAL_RCC_USART2_CLK_ENABLE();
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	4b67      	ldr	r3, [pc, #412]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009036:	4a66      	ldr	r2, [pc, #408]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800903c:	6413      	str	r3, [r2, #64]	@ 0x40
 800903e:	4b64      	ldr	r3, [pc, #400]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	4b60      	ldr	r3, [pc, #384]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009052:	4a5f      	ldr	r2, [pc, #380]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	6313      	str	r3, [r2, #48]	@ 0x30
 800905a:	4b5d      	ldr	r3, [pc, #372]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009066:	230c      	movs	r3, #12
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800906a:	2302      	movs	r3, #2
 800906c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800906e:	2300      	movs	r3, #0
 8009070:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009072:	2303      	movs	r3, #3
 8009074:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009076:	2307      	movs	r3, #7
 8009078:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800907a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800907e:	4619      	mov	r1, r3
 8009080:	4854      	ldr	r0, [pc, #336]	@ (80091d4 <HAL_UART_MspInit+0x574>)
 8009082:	f001 fc3f 	bl	800a904 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009086:	4b54      	ldr	r3, [pc, #336]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 8009088:	4a54      	ldr	r2, [pc, #336]	@ (80091dc <HAL_UART_MspInit+0x57c>)
 800908a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800908c:	4b52      	ldr	r3, [pc, #328]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 800908e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009092:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009094:	4b50      	ldr	r3, [pc, #320]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 8009096:	2200      	movs	r2, #0
 8009098:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800909a:	4b4f      	ldr	r3, [pc, #316]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 800909c:	2200      	movs	r2, #0
 800909e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090a0:	4b4d      	ldr	r3, [pc, #308]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090a8:	4b4b      	ldr	r3, [pc, #300]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090ae:	4b4a      	ldr	r3, [pc, #296]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80090b4:	4b48      	ldr	r3, [pc, #288]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80090ba:	4b47      	ldr	r3, [pc, #284]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090bc:	2200      	movs	r2, #0
 80090be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80090c0:	4b45      	ldr	r3, [pc, #276]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80090c6:	4844      	ldr	r0, [pc, #272]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090c8:	f001 f81a 	bl	800a100 <HAL_DMA_Init>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <HAL_UART_MspInit+0x476>
      Error_Handler();
 80090d2:	f7fb fac7 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a3f      	ldr	r2, [pc, #252]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80090dc:	4a3e      	ldr	r2, [pc, #248]	@ (80091d8 <HAL_UART_MspInit+0x578>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	2026      	movs	r0, #38	@ 0x26
 80090e8:	f000 ffd3 	bl	800a092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80090ec:	2026      	movs	r0, #38	@ 0x26
 80090ee:	f000 ffec 	bl	800a0ca <HAL_NVIC_EnableIRQ>
}
 80090f2:	e067      	b.n	80091c4 <HAL_UART_MspInit+0x564>
  else if(uartHandle->Instance==USART3)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a39      	ldr	r2, [pc, #228]	@ (80091e0 <HAL_UART_MspInit+0x580>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d162      	bne.n	80091c4 <HAL_UART_MspInit+0x564>
    __HAL_RCC_USART3_CLK_ENABLE();
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	4b33      	ldr	r3, [pc, #204]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009106:	4a32      	ldr	r2, [pc, #200]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800910c:	6413      	str	r3, [r2, #64]	@ 0x40
 800910e:	4b30      	ldr	r3, [pc, #192]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800911a:	2300      	movs	r3, #0
 800911c:	60bb      	str	r3, [r7, #8]
 800911e:	4b2c      	ldr	r3, [pc, #176]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009122:	4a2b      	ldr	r2, [pc, #172]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 8009124:	f043 0302 	orr.w	r3, r3, #2
 8009128:	6313      	str	r3, [r2, #48]	@ 0x30
 800912a:	4b29      	ldr	r3, [pc, #164]	@ (80091d0 <HAL_UART_MspInit+0x570>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	60bb      	str	r3, [r7, #8]
 8009134:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009136:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913c:	2302      	movs	r3, #2
 800913e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009140:	2300      	movs	r3, #0
 8009142:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009144:	2303      	movs	r3, #3
 8009146:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009148:	2307      	movs	r3, #7
 800914a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800914c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009150:	4619      	mov	r1, r3
 8009152:	4824      	ldr	r0, [pc, #144]	@ (80091e4 <HAL_UART_MspInit+0x584>)
 8009154:	f001 fbd6 	bl	800a904 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8009158:	4b23      	ldr	r3, [pc, #140]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 800915a:	4a24      	ldr	r2, [pc, #144]	@ (80091ec <HAL_UART_MspInit+0x58c>)
 800915c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800915e:	4b22      	ldr	r3, [pc, #136]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009160:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009164:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009166:	4b20      	ldr	r3, [pc, #128]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009168:	2200      	movs	r2, #0
 800916a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800916c:	4b1e      	ldr	r3, [pc, #120]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 800916e:	2200      	movs	r2, #0
 8009170:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009172:	4b1d      	ldr	r3, [pc, #116]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009174:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009178:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800917a:	4b1b      	ldr	r3, [pc, #108]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 800917c:	2200      	movs	r2, #0
 800917e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009180:	4b19      	ldr	r3, [pc, #100]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009182:	2200      	movs	r2, #0
 8009184:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8009186:	4b18      	ldr	r3, [pc, #96]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009188:	2200      	movs	r2, #0
 800918a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800918c:	4b16      	ldr	r3, [pc, #88]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 800918e:	2200      	movs	r2, #0
 8009190:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009192:	4b15      	ldr	r3, [pc, #84]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 8009194:	2200      	movs	r2, #0
 8009196:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009198:	4813      	ldr	r0, [pc, #76]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 800919a:	f000 ffb1 	bl	800a100 <HAL_DMA_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <HAL_UART_MspInit+0x548>
      Error_Handler();
 80091a4:	f7fb fa5e 	bl	8004664 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a0f      	ldr	r2, [pc, #60]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 80091ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091ae:	4a0e      	ldr	r2, [pc, #56]	@ (80091e8 <HAL_UART_MspInit+0x588>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	2027      	movs	r0, #39	@ 0x27
 80091ba:	f000 ff6a 	bl	800a092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80091be:	2027      	movs	r0, #39	@ 0x27
 80091c0:	f000 ff83 	bl	800a0ca <HAL_NVIC_EnableIRQ>
}
 80091c4:	bf00      	nop
 80091c6:	3748      	adds	r7, #72	@ 0x48
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40004400 	.word	0x40004400
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40020000 	.word	0x40020000
 80091d8:	20000dd8 	.word	0x20000dd8
 80091dc:	40026088 	.word	0x40026088
 80091e0:	40004800 	.word	0x40004800
 80091e4:	40020400 	.word	0x40020400
 80091e8:	20000e38 	.word	0x20000e38
 80091ec:	40026028 	.word	0x40026028

080091f0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
//同样USART3改为你的串口
	HAL_UART_Transmit(&huart5, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 80091f8:	1d39      	adds	r1, r7, #4
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	2201      	movs	r2, #1
 8009200:	4803      	ldr	r0, [pc, #12]	@ (8009210 <__io_putchar+0x20>)
 8009202:	f003 f919 	bl	800c438 <HAL_UART_Transmit>
    return ch;
 8009206:	687b      	ldr	r3, [r7, #4]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000ad8 	.word	0x20000ad8

08009214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800924c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009218:	f7fe fa82 	bl	8007720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800921c:	480c      	ldr	r0, [pc, #48]	@ (8009250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800921e:	490d      	ldr	r1, [pc, #52]	@ (8009254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009220:	4a0d      	ldr	r2, [pc, #52]	@ (8009258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009224:	e002      	b.n	800922c <LoopCopyDataInit>

08009226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800922a:	3304      	adds	r3, #4

0800922c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800922c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800922e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009230:	d3f9      	bcc.n	8009226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009232:	4a0a      	ldr	r2, [pc, #40]	@ (800925c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009234:	4c0a      	ldr	r4, [pc, #40]	@ (8009260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009238:	e001      	b.n	800923e <LoopFillZerobss>

0800923a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800923a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800923c:	3204      	adds	r2, #4

0800923e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800923e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009240:	d3fb      	bcc.n	800923a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8009242:	f006 fc3b 	bl	800fabc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009246:	f7fb f8c3 	bl	80043d0 <main>
  bx  lr    
 800924a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800924c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009254:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8009258:	08016220 	.word	0x08016220
  ldr r2, =_sbss
 800925c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8009260:	20000fe8 	.word	0x20000fe8

08009264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009264:	e7fe      	b.n	8009264 <ADC_IRQHandler>
	...

08009268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800926c:	4b0e      	ldr	r3, [pc, #56]	@ (80092a8 <HAL_Init+0x40>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a0d      	ldr	r2, [pc, #52]	@ (80092a8 <HAL_Init+0x40>)
 8009272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009278:	4b0b      	ldr	r3, [pc, #44]	@ (80092a8 <HAL_Init+0x40>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a0a      	ldr	r2, [pc, #40]	@ (80092a8 <HAL_Init+0x40>)
 800927e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009284:	4b08      	ldr	r3, [pc, #32]	@ (80092a8 <HAL_Init+0x40>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a07      	ldr	r2, [pc, #28]	@ (80092a8 <HAL_Init+0x40>)
 800928a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800928e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009290:	2003      	movs	r0, #3
 8009292:	f000 fef3 	bl	800a07c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009296:	200f      	movs	r0, #15
 8009298:	f000 f808 	bl	80092ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800929c:	f7fd ff96 	bl	80071cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40023c00 	.word	0x40023c00

080092ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092b4:	4b12      	ldr	r3, [pc, #72]	@ (8009300 <HAL_InitTick+0x54>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <HAL_InitTick+0x58>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80092c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 ff0b 	bl	800a0e6 <HAL_SYSTICK_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e00e      	b.n	80092f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b0f      	cmp	r3, #15
 80092de:	d80a      	bhi.n	80092f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80092e0:	2200      	movs	r2, #0
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	f000 fed3 	bl	800a092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80092ec:	4a06      	ldr	r2, [pc, #24]	@ (8009308 <HAL_InitTick+0x5c>)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e000      	b.n	80092f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20000010 	.word	0x20000010
 8009304:	20000018 	.word	0x20000018
 8009308:	20000014 	.word	0x20000014

0800930c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009310:	4b06      	ldr	r3, [pc, #24]	@ (800932c <HAL_IncTick+0x20>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	4b06      	ldr	r3, [pc, #24]	@ (8009330 <HAL_IncTick+0x24>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4413      	add	r3, r2
 800931c:	4a04      	ldr	r2, [pc, #16]	@ (8009330 <HAL_IncTick+0x24>)
 800931e:	6013      	str	r3, [r2, #0]
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20000018 	.word	0x20000018
 8009330:	20000e98 	.word	0x20000e98

08009334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
  return uwTick;
 8009338:	4b03      	ldr	r3, [pc, #12]	@ (8009348 <HAL_GetTick+0x14>)
 800933a:	681b      	ldr	r3, [r3, #0]
}
 800933c:	4618      	mov	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000e98 	.word	0x20000e98

0800934c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009354:	f7ff ffee 	bl	8009334 <HAL_GetTick>
 8009358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d005      	beq.n	8009372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009366:	4b0a      	ldr	r3, [pc, #40]	@ (8009390 <HAL_Delay+0x44>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009372:	bf00      	nop
 8009374:	f7ff ffde 	bl	8009334 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d8f7      	bhi.n	8009374 <HAL_Delay+0x28>
  {
  }
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000018 	.word	0x20000018

08009394 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e033      	b.n	8009412 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7f8 fd58 	bl	8001e68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d118      	bne.n	8009404 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80093da:	f023 0302 	bic.w	r3, r3, #2
 80093de:	f043 0202 	orr.w	r2, r3, #2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fab0 	bl	800994c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	f043 0201 	orr.w	r2, r3, #1
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	641a      	str	r2, [r3, #64]	@ 0x40
 8009402:	e001      	b.n	8009408 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_ADC_Start+0x1a>
 8009432:	2302      	movs	r3, #2
 8009434:	e0b2      	b.n	800959c <HAL_ADC_Start+0x180>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b01      	cmp	r3, #1
 800944a:	d018      	beq.n	800947e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800945c:	4b52      	ldr	r3, [pc, #328]	@ (80095a8 <HAL_ADC_Start+0x18c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a52      	ldr	r2, [pc, #328]	@ (80095ac <HAL_ADC_Start+0x190>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0c9a      	lsrs	r2, r3, #18
 8009468:	4613      	mov	r3, r2
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	4413      	add	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8009470:	e002      	b.n	8009478 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3b01      	subs	r3, #1
 8009476:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1f9      	bne.n	8009472 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b01      	cmp	r3, #1
 800948a:	d17a      	bne.n	8009582 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009490:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80094b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80094c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ca:	d106      	bne.n	80094da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d0:	f023 0206 	bic.w	r2, r3, #6
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80094d8:	e002      	b.n	80094e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094e8:	4b31      	ldr	r3, [pc, #196]	@ (80095b0 <HAL_ADC_Start+0x194>)
 80094ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80094f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 031f 	and.w	r3, r3, #31
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d12a      	bne.n	8009558 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a2b      	ldr	r2, [pc, #172]	@ (80095b4 <HAL_ADC_Start+0x198>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d015      	beq.n	8009538 <HAL_ADC_Start+0x11c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a29      	ldr	r2, [pc, #164]	@ (80095b8 <HAL_ADC_Start+0x19c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d105      	bne.n	8009522 <HAL_ADC_Start+0x106>
 8009516:	4b26      	ldr	r3, [pc, #152]	@ (80095b0 <HAL_ADC_Start+0x194>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f003 031f 	and.w	r3, r3, #31
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a25      	ldr	r2, [pc, #148]	@ (80095bc <HAL_ADC_Start+0x1a0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d136      	bne.n	800959a <HAL_ADC_Start+0x17e>
 800952c:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <HAL_ADC_Start+0x194>)
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b00      	cmp	r3, #0
 8009536:	d130      	bne.n	800959a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d129      	bne.n	800959a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	e020      	b.n	800959a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a15      	ldr	r2, [pc, #84]	@ (80095b4 <HAL_ADC_Start+0x198>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d11b      	bne.n	800959a <HAL_ADC_Start+0x17e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d114      	bne.n	800959a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800957e:	609a      	str	r2, [r3, #8]
 8009580:	e00b      	b.n	800959a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	f043 0210 	orr.w	r2, r3, #16
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000010 	.word	0x20000010
 80095ac:	431bde83 	.word	0x431bde83
 80095b0:	40012300 	.word	0x40012300
 80095b4:	40012000 	.word	0x40012000
 80095b8:	40012100 	.word	0x40012100
 80095bc:	40012200 	.word	0x40012200

080095c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095dc:	d113      	bne.n	8009606 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ec:	d10b      	bne.n	8009606 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f2:	f043 0220 	orr.w	r2, r3, #32
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e063      	b.n	80096ce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8009606:	f7ff fe95 	bl	8009334 <HAL_GetTick>
 800960a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800960c:	e021      	b.n	8009652 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d01d      	beq.n	8009652 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <HAL_ADC_PollForConversion+0x6c>
 800961c:	f7ff fe8a 	bl	8009334 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d212      	bcs.n	8009652 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b02      	cmp	r3, #2
 8009638:	d00b      	beq.n	8009652 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963e:	f043 0204 	orr.w	r2, r3, #4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e03d      	b.n	80096ce <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b02      	cmp	r3, #2
 800965e:	d1d6      	bne.n	800960e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0212 	mvn.w	r2, #18
 8009668:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d123      	bne.n	80096cc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	d11f      	bne.n	80096cc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009692:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d111      	bne.n	80096cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d105      	bne.n	80096cc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c4:	f043 0201 	orr.w	r2, r3, #1
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_ADC_ConfigChannel+0x1c>
 8009708:	2302      	movs	r3, #2
 800970a:	e105      	b.n	8009918 <HAL_ADC_ConfigChannel+0x228>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b09      	cmp	r3, #9
 800971a:	d925      	bls.n	8009768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68d9      	ldr	r1, [r3, #12]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	461a      	mov	r2, r3
 800972a:	4613      	mov	r3, r2
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4413      	add	r3, r2
 8009730:	3b1e      	subs	r3, #30
 8009732:	2207      	movs	r2, #7
 8009734:	fa02 f303 	lsl.w	r3, r2, r3
 8009738:	43da      	mvns	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	400a      	ands	r2, r1
 8009740:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68d9      	ldr	r1, [r3, #12]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	4618      	mov	r0, r3
 8009754:	4603      	mov	r3, r0
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	4403      	add	r3, r0
 800975a:	3b1e      	subs	r3, #30
 800975c:	409a      	lsls	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	60da      	str	r2, [r3, #12]
 8009766:	e022      	b.n	80097ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6919      	ldr	r1, [r3, #16]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	461a      	mov	r2, r3
 8009776:	4613      	mov	r3, r2
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4413      	add	r3, r2
 800977c:	2207      	movs	r2, #7
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	43da      	mvns	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	400a      	ands	r2, r1
 800978a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6919      	ldr	r1, [r3, #16]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	4618      	mov	r0, r3
 800979e:	4603      	mov	r3, r0
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4403      	add	r3, r0
 80097a4:	409a      	lsls	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d824      	bhi.n	8009800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	3b05      	subs	r3, #5
 80097c8:	221f      	movs	r2, #31
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
 80097ce:	43da      	mvns	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	400a      	ands	r2, r1
 80097d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	4618      	mov	r0, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	3b05      	subs	r3, #5
 80097f2:	fa00 f203 	lsl.w	r2, r0, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80097fe:	e04c      	b.n	800989a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b0c      	cmp	r3, #12
 8009806:	d824      	bhi.n	8009852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	3b23      	subs	r3, #35	@ 0x23
 800981a:	221f      	movs	r2, #31
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	43da      	mvns	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	400a      	ands	r2, r1
 8009828:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	4618      	mov	r0, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	3b23      	subs	r3, #35	@ 0x23
 8009844:	fa00 f203 	lsl.w	r2, r0, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009850:	e023      	b.n	800989a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	3b41      	subs	r3, #65	@ 0x41
 8009864:	221f      	movs	r2, #31
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	43da      	mvns	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	400a      	ands	r2, r1
 8009872:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	4618      	mov	r0, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	3b41      	subs	r3, #65	@ 0x41
 800988e:	fa00 f203 	lsl.w	r2, r0, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800989a:	4b22      	ldr	r3, [pc, #136]	@ (8009924 <HAL_ADC_ConfigChannel+0x234>)
 800989c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a21      	ldr	r2, [pc, #132]	@ (8009928 <HAL_ADC_ConfigChannel+0x238>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d109      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x1cc>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b12      	cmp	r3, #18
 80098ae:	d105      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a19      	ldr	r2, [pc, #100]	@ (8009928 <HAL_ADC_ConfigChannel+0x238>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d123      	bne.n	800990e <HAL_ADC_ConfigChannel+0x21e>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d003      	beq.n	80098d6 <HAL_ADC_ConfigChannel+0x1e6>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b11      	cmp	r3, #17
 80098d4:	d11b      	bne.n	800990e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d111      	bne.n	800990e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80098ea:	4b10      	ldr	r3, [pc, #64]	@ (800992c <HAL_ADC_ConfigChannel+0x23c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a10      	ldr	r2, [pc, #64]	@ (8009930 <HAL_ADC_ConfigChannel+0x240>)
 80098f0:	fba2 2303 	umull	r2, r3, r2, r3
 80098f4:	0c9a      	lsrs	r2, r3, #18
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009900:	e002      	b.n	8009908 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	3b01      	subs	r3, #1
 8009906:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f9      	bne.n	8009902 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	40012300 	.word	0x40012300
 8009928:	40012000 	.word	0x40012000
 800992c:	20000010 	.word	0x20000010
 8009930:	431bde83 	.word	0x431bde83

08009934 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009940:	4618      	mov	r0, r3
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009954:	4b79      	ldr	r3, [pc, #484]	@ (8009b3c <ADC_Init+0x1f0>)
 8009956:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	431a      	orrs	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6859      	ldr	r1, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	021a      	lsls	r2, r3, #8
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80099a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6859      	ldr	r1, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	430a      	orrs	r2, r1
 80099b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80099c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6899      	ldr	r1, [r3, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	4a58      	ldr	r2, [pc, #352]	@ (8009b40 <ADC_Init+0x1f4>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d022      	beq.n	8009a2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80099f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6899      	ldr	r1, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6899      	ldr	r1, [r3, #8]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	e00f      	b.n	8009a4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009a48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0202 	bic.w	r2, r2, #2
 8009a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6899      	ldr	r1, [r3, #8]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7e1b      	ldrb	r3, [r3, #24]
 8009a64:	005a      	lsls	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01b      	beq.n	8009ab0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8009a96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6859      	ldr	r1, [r3, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	035a      	lsls	r2, r3, #13
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	e007      	b.n	8009ac0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009abe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	051a      	lsls	r2, r3, #20
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6899      	ldr	r1, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b02:	025a      	lsls	r2, r3, #9
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6899      	ldr	r1, [r3, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	029a      	lsls	r2, r3, #10
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	609a      	str	r2, [r3, #8]
}
 8009b30:	bf00      	nop
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	40012300 	.word	0x40012300
 8009b40:	0f000001 	.word	0x0f000001

08009b44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0ed      	b.n	8009d32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f9 fc44 	bl	80033f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0201 	orr.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b78:	f7ff fbdc 	bl	8009334 <HAL_GetTick>
 8009b7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b7e:	e012      	b.n	8009ba6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b80:	f7ff fbd8 	bl	8009334 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b0a      	cmp	r3, #10
 8009b8c:	d90b      	bls.n	8009ba6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2205      	movs	r2, #5
 8009b9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e0c5      	b.n	8009d32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0e5      	beq.n	8009b80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f022 0202 	bic.w	r2, r2, #2
 8009bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bc4:	f7ff fbb6 	bl	8009334 <HAL_GetTick>
 8009bc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009bca:	e012      	b.n	8009bf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009bcc:	f7ff fbb2 	bl	8009334 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b0a      	cmp	r3, #10
 8009bd8:	d90b      	bls.n	8009bf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2205      	movs	r2, #5
 8009bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e09f      	b.n	8009d32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e5      	bne.n	8009bcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7e1b      	ldrb	r3, [r3, #24]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d108      	bne.n	8009c1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e007      	b.n	8009c2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	7e5b      	ldrb	r3, [r3, #25]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d108      	bne.n	8009c44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e007      	b.n	8009c54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7e9b      	ldrb	r3, [r3, #26]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d108      	bne.n	8009c6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0220 	orr.w	r2, r2, #32
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	e007      	b.n	8009c7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0220 	bic.w	r2, r2, #32
 8009c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7edb      	ldrb	r3, [r3, #27]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d108      	bne.n	8009c98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0210 	bic.w	r2, r2, #16
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	e007      	b.n	8009ca8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0210 	orr.w	r2, r2, #16
 8009ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7f1b      	ldrb	r3, [r3, #28]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d108      	bne.n	8009cc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0208 	orr.w	r2, r2, #8
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	e007      	b.n	8009cd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0208 	bic.w	r2, r2, #8
 8009cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7f5b      	ldrb	r3, [r3, #29]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d108      	bne.n	8009cec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0204 	orr.w	r2, r2, #4
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e007      	b.n	8009cfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0204 	bic.w	r2, r2, #4
 8009cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	ea42 0103 	orr.w	r1, r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b089      	sub	sp, #36	@ 0x24
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d58:	7ffb      	ldrb	r3, [r7, #31]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d003      	beq.n	8009d66 <HAL_CAN_AddTxMessage+0x2c>
 8009d5e:	7ffb      	ldrb	r3, [r7, #31]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	f040 80ad 	bne.w	8009ec0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 8095 	beq.w	8009eb0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009d90:	2201      	movs	r2, #1
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	409a      	lsls	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10d      	bne.n	8009dbe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009dac:	68f9      	ldr	r1, [r7, #12]
 8009dae:	6809      	ldr	r1, [r1, #0]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	3318      	adds	r3, #24
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	440b      	add	r3, r1
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	e00f      	b.n	8009dde <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009dc8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009dd2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	440b      	add	r3, r1
 8009ddc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6819      	ldr	r1, [r3, #0]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	691a      	ldr	r2, [r3, #16]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	3318      	adds	r3, #24
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	440b      	add	r3, r1
 8009dee:	3304      	adds	r3, #4
 8009df0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	7d1b      	ldrb	r3, [r3, #20]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d111      	bne.n	8009e1e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	3318      	adds	r3, #24
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	4413      	add	r3, r2
 8009e06:	3304      	adds	r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	3318      	adds	r3, #24
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	440b      	add	r3, r1
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3307      	adds	r3, #7
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	061a      	lsls	r2, r3, #24
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3306      	adds	r3, #6
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	041b      	lsls	r3, r3, #16
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3305      	adds	r3, #5
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	021b      	lsls	r3, r3, #8
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	3204      	adds	r2, #4
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	4610      	mov	r0, r2
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	6811      	ldr	r1, [r2, #0]
 8009e46:	ea43 0200 	orr.w	r2, r3, r0
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	440b      	add	r3, r1
 8009e50:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8009e54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3303      	adds	r3, #3
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	061a      	lsls	r2, r3, #24
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3302      	adds	r3, #2
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	041b      	lsls	r3, r3, #16
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	4313      	orrs	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	7812      	ldrb	r2, [r2, #0]
 8009e76:	4610      	mov	r0, r2
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	6811      	ldr	r1, [r2, #0]
 8009e7c:	ea43 0200 	orr.w	r2, r3, r0
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	440b      	add	r3, r1
 8009e86:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8009e8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3318      	adds	r3, #24
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	4413      	add	r3, r2
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	6811      	ldr	r1, [r2, #0]
 8009e9e:	f043 0201 	orr.w	r2, r3, #1
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	440b      	add	r3, r1
 8009eaa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e00e      	b.n	8009ece <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e006      	b.n	8009ece <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
  }
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3724      	adds	r7, #36	@ 0x24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009eec:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <__NVIC_SetPriorityGrouping+0x44>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f0e:	4a04      	ldr	r2, [pc, #16]	@ (8009f20 <__NVIC_SetPriorityGrouping+0x44>)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	60d3      	str	r3, [r2, #12]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	e000ed00 	.word	0xe000ed00

08009f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f28:	4b04      	ldr	r3, [pc, #16]	@ (8009f3c <__NVIC_GetPriorityGrouping+0x18>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	0a1b      	lsrs	r3, r3, #8
 8009f2e:	f003 0307 	and.w	r3, r3, #7
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	e000ed00 	.word	0xe000ed00

08009f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	db0b      	blt.n	8009f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	f003 021f 	and.w	r2, r3, #31
 8009f58:	4907      	ldr	r1, [pc, #28]	@ (8009f78 <__NVIC_EnableIRQ+0x38>)
 8009f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	2001      	movs	r0, #1
 8009f62:	fa00 f202 	lsl.w	r2, r0, r2
 8009f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	e000e100 	.word	0xe000e100

08009f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	6039      	str	r1, [r7, #0]
 8009f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	db0a      	blt.n	8009fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	490c      	ldr	r1, [pc, #48]	@ (8009fc8 <__NVIC_SetPriority+0x4c>)
 8009f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f9a:	0112      	lsls	r2, r2, #4
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009fa4:	e00a      	b.n	8009fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4908      	ldr	r1, [pc, #32]	@ (8009fcc <__NVIC_SetPriority+0x50>)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	3b04      	subs	r3, #4
 8009fb4:	0112      	lsls	r2, r2, #4
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	440b      	add	r3, r1
 8009fba:	761a      	strb	r2, [r3, #24]
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	e000e100 	.word	0xe000e100
 8009fcc:	e000ed00 	.word	0xe000ed00

08009fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b089      	sub	sp, #36	@ 0x24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f1c3 0307 	rsb	r3, r3, #7
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	bf28      	it	cs
 8009fee:	2304      	movcs	r3, #4
 8009ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d902      	bls.n	800a000 <NVIC_EncodePriority+0x30>
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	3b03      	subs	r3, #3
 8009ffe:	e000      	b.n	800a002 <NVIC_EncodePriority+0x32>
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	fa02 f303 	lsl.w	r3, r2, r3
 800a00e:	43da      	mvns	r2, r3
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	401a      	ands	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a018:	f04f 31ff 	mov.w	r1, #4294967295
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	fa01 f303 	lsl.w	r3, r1, r3
 800a022:	43d9      	mvns	r1, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a028:	4313      	orrs	r3, r2
         );
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3724      	adds	r7, #36	@ 0x24
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
	...

0800a038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3b01      	subs	r3, #1
 800a044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a048:	d301      	bcc.n	800a04e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a04a:	2301      	movs	r3, #1
 800a04c:	e00f      	b.n	800a06e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a04e:	4a0a      	ldr	r2, [pc, #40]	@ (800a078 <SysTick_Config+0x40>)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3b01      	subs	r3, #1
 800a054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a056:	210f      	movs	r1, #15
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	f7ff ff8e 	bl	8009f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a060:	4b05      	ldr	r3, [pc, #20]	@ (800a078 <SysTick_Config+0x40>)
 800a062:	2200      	movs	r2, #0
 800a064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a066:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <SysTick_Config+0x40>)
 800a068:	2207      	movs	r2, #7
 800a06a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	e000e010 	.word	0xe000e010

0800a07c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ff29 	bl	8009edc <__NVIC_SetPriorityGrouping>
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a092:	b580      	push	{r7, lr}
 800a094:	b086      	sub	sp, #24
 800a096:	af00      	add	r7, sp, #0
 800a098:	4603      	mov	r3, r0
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
 800a09e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0a4:	f7ff ff3e 	bl	8009f24 <__NVIC_GetPriorityGrouping>
 800a0a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f7ff ff8e 	bl	8009fd0 <NVIC_EncodePriority>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff ff5d 	bl	8009f7c <__NVIC_SetPriority>
}
 800a0c2:	bf00      	nop
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff ff31 	bl	8009f40 <__NVIC_EnableIRQ>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff ffa2 	bl	800a038 <SysTick_Config>
 800a0f4:	4603      	mov	r3, r0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a10c:	f7ff f912 	bl	8009334 <HAL_GetTick>
 800a110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e099      	b.n	800a250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 0201 	bic.w	r2, r2, #1
 800a13a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a13c:	e00f      	b.n	800a15e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a13e:	f7ff f8f9 	bl	8009334 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d908      	bls.n	800a15e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2220      	movs	r2, #32
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2203      	movs	r2, #3
 800a156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e078      	b.n	800a250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e8      	bne.n	800a13e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	4b38      	ldr	r3, [pc, #224]	@ (800a258 <HAL_DMA_Init+0x158>)
 800a178:	4013      	ands	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a18a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d107      	bne.n	800a1c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f023 0307 	bic.w	r3, r3, #7
 800a1de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d117      	bne.n	800a222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00e      	beq.n	800a222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fb01 	bl	800a80c <DMA_CheckFifoParam>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2240      	movs	r2, #64	@ 0x40
 800a214:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a21e:	2301      	movs	r3, #1
 800a220:	e016      	b.n	800a250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fab8 	bl	800a7a0 <DMA_CalcBaseAndBitshift>
 800a230:	4603      	mov	r3, r0
 800a232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a238:	223f      	movs	r2, #63	@ 0x3f
 800a23a:	409a      	lsls	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	f010803f 	.word	0xf010803f

0800a25c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d101      	bne.n	800a282 <HAL_DMA_Start_IT+0x26>
 800a27e:	2302      	movs	r3, #2
 800a280:	e040      	b.n	800a304 <HAL_DMA_Start_IT+0xa8>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b01      	cmp	r3, #1
 800a294:	d12f      	bne.n	800a2f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2202      	movs	r2, #2
 800a29a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fa4a 	bl	800a744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2b4:	223f      	movs	r2, #63	@ 0x3f
 800a2b6:	409a      	lsls	r2, r3
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0216 	orr.w	r2, r2, #22
 800a2ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0208 	orr.w	r2, r2, #8
 800a2e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e005      	b.n	800a302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
 800a300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a318:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a31a:	f7ff f80b 	bl	8009334 <HAL_GetTick>
 800a31e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d008      	beq.n	800a33e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2280      	movs	r2, #128	@ 0x80
 800a330:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e052      	b.n	800a3e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0216 	bic.w	r2, r2, #22
 800a34c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	695a      	ldr	r2, [r3, #20]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a35c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d103      	bne.n	800a36e <HAL_DMA_Abort+0x62>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0208 	bic.w	r2, r2, #8
 800a37c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0201 	bic.w	r2, r2, #1
 800a38c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a38e:	e013      	b.n	800a3b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a390:	f7fe ffd0 	bl	8009334 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	d90c      	bls.n	800a3b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2203      	movs	r2, #3
 800a3a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e015      	b.n	800a3e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e4      	bne.n	800a390 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ca:	223f      	movs	r2, #63	@ 0x3f
 800a3cc:	409a      	lsls	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d004      	beq.n	800a40a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2280      	movs	r2, #128	@ 0x80
 800a404:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e00c      	b.n	800a424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2205      	movs	r2, #5
 800a40e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a43c:	4b8e      	ldr	r3, [pc, #568]	@ (800a678 <HAL_DMA_IRQHandler+0x248>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a8e      	ldr	r2, [pc, #568]	@ (800a67c <HAL_DMA_IRQHandler+0x24c>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	0a9b      	lsrs	r3, r3, #10
 800a448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a44e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45a:	2208      	movs	r2, #8
 800a45c:	409a      	lsls	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4013      	ands	r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01a      	beq.n	800a49c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d013      	beq.n	800a49c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0204 	bic.w	r2, r2, #4
 800a482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a488:	2208      	movs	r2, #8
 800a48a:	409a      	lsls	r2, r3
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a494:	f043 0201 	orr.w	r2, r3, #1
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	409a      	lsls	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d012      	beq.n	800a4d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00b      	beq.n	800a4d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4be:	2201      	movs	r2, #1
 800a4c0:	409a      	lsls	r2, r3
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ca:	f043 0202 	orr.w	r2, r3, #2
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d6:	2204      	movs	r2, #4
 800a4d8:	409a      	lsls	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4013      	ands	r3, r2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d012      	beq.n	800a508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0302 	and.w	r3, r3, #2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	409a      	lsls	r2, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a500:	f043 0204 	orr.w	r2, r3, #4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50c:	2210      	movs	r2, #16
 800a50e:	409a      	lsls	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4013      	ands	r3, r2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d043      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d03c      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a52a:	2210      	movs	r2, #16
 800a52c:	409a      	lsls	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d018      	beq.n	800a572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d108      	bne.n	800a560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a552:	2b00      	cmp	r3, #0
 800a554:	d024      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	4798      	blx	r3
 800a55e:	e01f      	b.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01b      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	4798      	blx	r3
 800a570:	e016      	b.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d107      	bne.n	800a590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0208 	bic.w	r2, r2, #8
 800a58e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	409a      	lsls	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 808f 	beq.w	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 0310 	and.w	r3, r3, #16
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8087 	beq.w	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	409a      	lsls	r2, r3
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b05      	cmp	r3, #5
 800a5d8:	d136      	bne.n	800a648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0216 	bic.w	r2, r2, #22
 800a5e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	695a      	ldr	r2, [r3, #20]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <HAL_DMA_IRQHandler+0x1da>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0208 	bic.w	r2, r2, #8
 800a618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a61e:	223f      	movs	r2, #63	@ 0x3f
 800a620:	409a      	lsls	r2, r3
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d07e      	beq.n	800a73c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
        }
        return;
 800a646:	e079      	b.n	800a73c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d01d      	beq.n	800a692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10d      	bne.n	800a680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d031      	beq.n	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
 800a674:	e02c      	b.n	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
 800a676:	bf00      	nop
 800a678:	20000010 	.word	0x20000010
 800a67c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d023      	beq.n	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	4798      	blx	r3
 800a690:	e01e      	b.n	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10f      	bne.n	800a6c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0210 	bic.w	r2, r2, #16
 800a6ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d032      	beq.n	800a73e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d022      	beq.n	800a72a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2205      	movs	r2, #5
 800a6e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0201 	bic.w	r2, r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	3301      	adds	r3, #1
 800a700:	60bb      	str	r3, [r7, #8]
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	429a      	cmp	r2, r3
 800a706:	d307      	bcc.n	800a718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f2      	bne.n	800a6fc <HAL_DMA_IRQHandler+0x2cc>
 800a716:	e000      	b.n	800a71a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
 800a73a:	e000      	b.n	800a73e <HAL_DMA_IRQHandler+0x30e>
        return;
 800a73c:	bf00      	nop
    }
  }
}
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b40      	cmp	r3, #64	@ 0x40
 800a770:	d108      	bne.n	800a784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a782:	e007      	b.n	800a794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	60da      	str	r2, [r3, #12]
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	3b10      	subs	r3, #16
 800a7b0:	4a14      	ldr	r2, [pc, #80]	@ (800a804 <DMA_CalcBaseAndBitshift+0x64>)
 800a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b6:	091b      	lsrs	r3, r3, #4
 800a7b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7ba:	4a13      	ldr	r2, [pc, #76]	@ (800a808 <DMA_CalcBaseAndBitshift+0x68>)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4413      	add	r3, r2
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d909      	bls.n	800a7e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	1d1a      	adds	r2, r3, #4
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7e0:	e007      	b.n	800a7f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	aaaaaaab 	.word	0xaaaaaaab
 800a808:	08015ae0 	.word	0x08015ae0

0800a80c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d11f      	bne.n	800a866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d856      	bhi.n	800a8da <DMA_CheckFifoParam+0xce>
 800a82c:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <DMA_CheckFifoParam+0x28>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a845 	.word	0x0800a845
 800a838:	0800a857 	.word	0x0800a857
 800a83c:	0800a845 	.word	0x0800a845
 800a840:	0800a8db 	.word	0x0800a8db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d046      	beq.n	800a8de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a854:	e043      	b.n	800a8de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a85e:	d140      	bne.n	800a8e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a864:	e03d      	b.n	800a8e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86e:	d121      	bne.n	800a8b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b03      	cmp	r3, #3
 800a874:	d837      	bhi.n	800a8e6 <DMA_CheckFifoParam+0xda>
 800a876:	a201      	add	r2, pc, #4	@ (adr r2, 800a87c <DMA_CheckFifoParam+0x70>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a88d 	.word	0x0800a88d
 800a880:	0800a893 	.word	0x0800a893
 800a884:	0800a88d 	.word	0x0800a88d
 800a888:	0800a8a5 	.word	0x0800a8a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	73fb      	strb	r3, [r7, #15]
      break;
 800a890:	e030      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d025      	beq.n	800a8ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8a2:	e022      	b.n	800a8ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a8ac:	d11f      	bne.n	800a8ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a8b2:	e01c      	b.n	800a8ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d903      	bls.n	800a8c2 <DMA_CheckFifoParam+0xb6>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d003      	beq.n	800a8c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a8c0:	e018      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c6:	e015      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00e      	beq.n	800a8f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d8:	e00b      	b.n	800a8f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a8da:	bf00      	nop
 800a8dc:	e00a      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a8de:	bf00      	nop
 800a8e0:	e008      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a8e2:	bf00      	nop
 800a8e4:	e006      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a8e6:	bf00      	nop
 800a8e8:	e004      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a8ea:	bf00      	nop
 800a8ec:	e002      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a8ee:	bf00      	nop
 800a8f0:	e000      	b.n	800a8f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a8f2:	bf00      	nop
    }
  } 
  
  return status; 
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop

0800a904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a904:	b480      	push	{r7}
 800a906:	b089      	sub	sp, #36	@ 0x24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a916:	2300      	movs	r3, #0
 800a918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	e16b      	b.n	800abf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a920:	2201      	movs	r2, #1
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4013      	ands	r3, r2
 800a932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	429a      	cmp	r2, r3
 800a93a:	f040 815a 	bne.w	800abf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	2b01      	cmp	r3, #1
 800a948:	d005      	beq.n	800a956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a952:	2b02      	cmp	r3, #2
 800a954:	d130      	bne.n	800a9b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	2203      	movs	r2, #3
 800a962:	fa02 f303 	lsl.w	r3, r2, r3
 800a966:	43db      	mvns	r3, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4013      	ands	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68da      	ldr	r2, [r3, #12]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	fa02 f303 	lsl.w	r3, r2, r3
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a98c:	2201      	movs	r2, #1
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	43db      	mvns	r3, r3
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	4013      	ands	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	091b      	lsrs	r3, r3, #4
 800a9a2:	f003 0201 	and.w	r2, r3, #1
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d017      	beq.n	800a9f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d4:	43db      	mvns	r3, r3
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d123      	bne.n	800aa48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	08da      	lsrs	r2, r3, #3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3208      	adds	r2, #8
 800aa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	220f      	movs	r2, #15
 800aa18:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1c:	43db      	mvns	r3, r3
 800aa1e:	69ba      	ldr	r2, [r7, #24]
 800aa20:	4013      	ands	r3, r2
 800aa22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	fa02 f303 	lsl.w	r3, r2, r3
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	08da      	lsrs	r2, r3, #3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3208      	adds	r2, #8
 800aa42:	69b9      	ldr	r1, [r7, #24]
 800aa44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	2203      	movs	r2, #3
 800aa54:	fa02 f303 	lsl.w	r3, r2, r3
 800aa58:	43db      	mvns	r3, r3
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f003 0203 	and.w	r2, r3, #3
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 80b4 	beq.w	800abf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	4b60      	ldr	r3, [pc, #384]	@ (800ac10 <HAL_GPIO_Init+0x30c>)
 800aa90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa92:	4a5f      	ldr	r2, [pc, #380]	@ (800ac10 <HAL_GPIO_Init+0x30c>)
 800aa94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa98:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa9a:	4b5d      	ldr	r3, [pc, #372]	@ (800ac10 <HAL_GPIO_Init+0x30c>)
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aaa6:	4a5b      	ldr	r2, [pc, #364]	@ (800ac14 <HAL_GPIO_Init+0x310>)
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	089b      	lsrs	r3, r3, #2
 800aaac:	3302      	adds	r3, #2
 800aaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	220f      	movs	r2, #15
 800aabe:	fa02 f303 	lsl.w	r3, r2, r3
 800aac2:	43db      	mvns	r3, r3
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	4013      	ands	r3, r2
 800aac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a52      	ldr	r2, [pc, #328]	@ (800ac18 <HAL_GPIO_Init+0x314>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d02b      	beq.n	800ab2a <HAL_GPIO_Init+0x226>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a51      	ldr	r2, [pc, #324]	@ (800ac1c <HAL_GPIO_Init+0x318>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d025      	beq.n	800ab26 <HAL_GPIO_Init+0x222>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a50      	ldr	r2, [pc, #320]	@ (800ac20 <HAL_GPIO_Init+0x31c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01f      	beq.n	800ab22 <HAL_GPIO_Init+0x21e>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a4f      	ldr	r2, [pc, #316]	@ (800ac24 <HAL_GPIO_Init+0x320>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d019      	beq.n	800ab1e <HAL_GPIO_Init+0x21a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a4e      	ldr	r2, [pc, #312]	@ (800ac28 <HAL_GPIO_Init+0x324>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d013      	beq.n	800ab1a <HAL_GPIO_Init+0x216>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a4d      	ldr	r2, [pc, #308]	@ (800ac2c <HAL_GPIO_Init+0x328>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d00d      	beq.n	800ab16 <HAL_GPIO_Init+0x212>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a4c      	ldr	r2, [pc, #304]	@ (800ac30 <HAL_GPIO_Init+0x32c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d007      	beq.n	800ab12 <HAL_GPIO_Init+0x20e>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a4b      	ldr	r2, [pc, #300]	@ (800ac34 <HAL_GPIO_Init+0x330>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d101      	bne.n	800ab0e <HAL_GPIO_Init+0x20a>
 800ab0a:	2307      	movs	r3, #7
 800ab0c:	e00e      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab0e:	2308      	movs	r3, #8
 800ab10:	e00c      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab12:	2306      	movs	r3, #6
 800ab14:	e00a      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab16:	2305      	movs	r3, #5
 800ab18:	e008      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab1a:	2304      	movs	r3, #4
 800ab1c:	e006      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e004      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab22:	2302      	movs	r3, #2
 800ab24:	e002      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <HAL_GPIO_Init+0x228>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	f002 0203 	and.w	r2, r2, #3
 800ab32:	0092      	lsls	r2, r2, #2
 800ab34:	4093      	lsls	r3, r2
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab3c:	4935      	ldr	r1, [pc, #212]	@ (800ac14 <HAL_GPIO_Init+0x310>)
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	089b      	lsrs	r3, r3, #2
 800ab42:	3302      	adds	r3, #2
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab4a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	43db      	mvns	r3, r3
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	4013      	ands	r3, r2
 800ab58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab6e:	4a32      	ldr	r2, [pc, #200]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab74:	4b30      	ldr	r3, [pc, #192]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	43db      	mvns	r3, r3
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	4013      	ands	r3, r2
 800ab82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab98:	4a27      	ldr	r2, [pc, #156]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ab9e:	4b26      	ldr	r3, [pc, #152]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	43db      	mvns	r3, r3
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	4013      	ands	r3, r2
 800abac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abc2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800abc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	43db      	mvns	r3, r3
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	4013      	ands	r3, r2
 800abd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abec:	4a12      	ldr	r2, [pc, #72]	@ (800ac38 <HAL_GPIO_Init+0x334>)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	3301      	adds	r3, #1
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2b0f      	cmp	r3, #15
 800abfc:	f67f ae90 	bls.w	800a920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	3724      	adds	r7, #36	@ 0x24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40013800 	.word	0x40013800
 800ac18:	40020000 	.word	0x40020000
 800ac1c:	40020400 	.word	0x40020400
 800ac20:	40020800 	.word	0x40020800
 800ac24:	40020c00 	.word	0x40020c00
 800ac28:	40021000 	.word	0x40021000
 800ac2c:	40021400 	.word	0x40021400
 800ac30:	40021800 	.word	0x40021800
 800ac34:	40021c00 	.word	0x40021c00
 800ac38:	40013c00 	.word	0x40013c00

0800ac3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	887b      	ldrh	r3, [r7, #2]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac54:	2301      	movs	r3, #1
 800ac56:	73fb      	strb	r3, [r7, #15]
 800ac58:	e001      	b.n	800ac5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	807b      	strh	r3, [r7, #2]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac7c:	787b      	ldrb	r3, [r7, #1]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac82:	887a      	ldrh	r2, [r7, #2]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac88:	e003      	b.n	800ac92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac8a:	887b      	ldrh	r3, [r7, #2]
 800ac8c:	041a      	lsls	r2, r3, #16
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	619a      	str	r2, [r3, #24]
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d101      	bne.n	800acb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e267      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d075      	beq.n	800adaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800acbe:	4b88      	ldr	r3, [pc, #544]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f003 030c 	and.w	r3, r3, #12
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d00c      	beq.n	800ace4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acca:	4b85      	ldr	r3, [pc, #532]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d112      	bne.n	800acfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acd6:	4b82      	ldr	r3, [pc, #520]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ace2:	d10b      	bne.n	800acfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ace4:	4b7e      	ldr	r3, [pc, #504]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05b      	beq.n	800ada8 <HAL_RCC_OscConfig+0x108>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d157      	bne.n	800ada8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e242      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad04:	d106      	bne.n	800ad14 <HAL_RCC_OscConfig+0x74>
 800ad06:	4b76      	ldr	r3, [pc, #472]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a75      	ldr	r2, [pc, #468]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	e01d      	b.n	800ad50 <HAL_RCC_OscConfig+0xb0>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad1c:	d10c      	bne.n	800ad38 <HAL_RCC_OscConfig+0x98>
 800ad1e:	4b70      	ldr	r3, [pc, #448]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a6f      	ldr	r2, [pc, #444]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	4b6d      	ldr	r3, [pc, #436]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a6c      	ldr	r2, [pc, #432]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	e00b      	b.n	800ad50 <HAL_RCC_OscConfig+0xb0>
 800ad38:	4b69      	ldr	r3, [pc, #420]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a68      	ldr	r2, [pc, #416]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	4b66      	ldr	r3, [pc, #408]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a65      	ldr	r2, [pc, #404]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d013      	beq.n	800ad80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad58:	f7fe faec 	bl	8009334 <HAL_GetTick>
 800ad5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	e008      	b.n	800ad72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad60:	f7fe fae8 	bl	8009334 <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b64      	cmp	r3, #100	@ 0x64
 800ad6c:	d901      	bls.n	800ad72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e207      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad72:	4b5b      	ldr	r3, [pc, #364]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f0      	beq.n	800ad60 <HAL_RCC_OscConfig+0xc0>
 800ad7e:	e014      	b.n	800adaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad80:	f7fe fad8 	bl	8009334 <HAL_GetTick>
 800ad84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad88:	f7fe fad4 	bl	8009334 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b64      	cmp	r3, #100	@ 0x64
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e1f3      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad9a:	4b51      	ldr	r3, [pc, #324]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f0      	bne.n	800ad88 <HAL_RCC_OscConfig+0xe8>
 800ada6:	e000      	b.n	800adaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ada8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d063      	beq.n	800ae7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800adb6:	4b4a      	ldr	r3, [pc, #296]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f003 030c 	and.w	r3, r3, #12
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adc2:	4b47      	ldr	r3, [pc, #284]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d11c      	bne.n	800ae08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adce:	4b44      	ldr	r3, [pc, #272]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d116      	bne.n	800ae08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adda:	4b41      	ldr	r3, [pc, #260]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <HAL_RCC_OscConfig+0x152>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d001      	beq.n	800adf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e1c7      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adf2:	4b3b      	ldr	r3, [pc, #236]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	4937      	ldr	r1, [pc, #220]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae06:	e03a      	b.n	800ae7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d020      	beq.n	800ae52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae10:	4b34      	ldr	r3, [pc, #208]	@ (800aee4 <HAL_RCC_OscConfig+0x244>)
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae16:	f7fe fa8d 	bl	8009334 <HAL_GetTick>
 800ae1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae1c:	e008      	b.n	800ae30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae1e:	f7fe fa89 	bl	8009334 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e1a8      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae30:	4b2b      	ldr	r3, [pc, #172]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0f0      	beq.n	800ae1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae3c:	4b28      	ldr	r3, [pc, #160]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	4925      	ldr	r1, [pc, #148]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	600b      	str	r3, [r1, #0]
 800ae50:	e015      	b.n	800ae7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae52:	4b24      	ldr	r3, [pc, #144]	@ (800aee4 <HAL_RCC_OscConfig+0x244>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae58:	f7fe fa6c 	bl	8009334 <HAL_GetTick>
 800ae5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae60:	f7fe fa68 	bl	8009334 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e187      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae72:	4b1b      	ldr	r3, [pc, #108]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f0      	bne.n	800ae60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0308 	and.w	r3, r3, #8
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d036      	beq.n	800aef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d016      	beq.n	800aec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae92:	4b15      	ldr	r3, [pc, #84]	@ (800aee8 <HAL_RCC_OscConfig+0x248>)
 800ae94:	2201      	movs	r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae98:	f7fe fa4c 	bl	8009334 <HAL_GetTick>
 800ae9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae9e:	e008      	b.n	800aeb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aea0:	f7fe fa48 	bl	8009334 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e167      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	@ (800aee0 <HAL_RCC_OscConfig+0x240>)
 800aeb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f0      	beq.n	800aea0 <HAL_RCC_OscConfig+0x200>
 800aebe:	e01b      	b.n	800aef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aec0:	4b09      	ldr	r3, [pc, #36]	@ (800aee8 <HAL_RCC_OscConfig+0x248>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aec6:	f7fe fa35 	bl	8009334 <HAL_GetTick>
 800aeca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aecc:	e00e      	b.n	800aeec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aece:	f7fe fa31 	bl	8009334 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d907      	bls.n	800aeec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e150      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
 800aee0:	40023800 	.word	0x40023800
 800aee4:	42470000 	.word	0x42470000
 800aee8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeec:	4b88      	ldr	r3, [pc, #544]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800aeee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1ea      	bne.n	800aece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8097 	beq.w	800b034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af0a:	4b81      	ldr	r3, [pc, #516]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10f      	bne.n	800af36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]
 800af1a:	4b7d      	ldr	r3, [pc, #500]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	4a7c      	ldr	r2, [pc, #496]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af24:	6413      	str	r3, [r2, #64]	@ 0x40
 800af26:	4b7a      	ldr	r3, [pc, #488]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af2e:	60bb      	str	r3, [r7, #8]
 800af30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af32:	2301      	movs	r3, #1
 800af34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af36:	4b77      	ldr	r3, [pc, #476]	@ (800b114 <HAL_RCC_OscConfig+0x474>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d118      	bne.n	800af74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af42:	4b74      	ldr	r3, [pc, #464]	@ (800b114 <HAL_RCC_OscConfig+0x474>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a73      	ldr	r2, [pc, #460]	@ (800b114 <HAL_RCC_OscConfig+0x474>)
 800af48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af4e:	f7fe f9f1 	bl	8009334 <HAL_GetTick>
 800af52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af54:	e008      	b.n	800af68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af56:	f7fe f9ed 	bl	8009334 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d901      	bls.n	800af68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800af64:	2303      	movs	r3, #3
 800af66:	e10c      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af68:	4b6a      	ldr	r3, [pc, #424]	@ (800b114 <HAL_RCC_OscConfig+0x474>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af70:	2b00      	cmp	r3, #0
 800af72:	d0f0      	beq.n	800af56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d106      	bne.n	800af8a <HAL_RCC_OscConfig+0x2ea>
 800af7c:	4b64      	ldr	r3, [pc, #400]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af80:	4a63      	ldr	r2, [pc, #396]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	6713      	str	r3, [r2, #112]	@ 0x70
 800af88:	e01c      	b.n	800afc4 <HAL_RCC_OscConfig+0x324>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	2b05      	cmp	r3, #5
 800af90:	d10c      	bne.n	800afac <HAL_RCC_OscConfig+0x30c>
 800af92:	4b5f      	ldr	r3, [pc, #380]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af96:	4a5e      	ldr	r2, [pc, #376]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800af98:	f043 0304 	orr.w	r3, r3, #4
 800af9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800af9e:	4b5c      	ldr	r3, [pc, #368]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa2:	4a5b      	ldr	r2, [pc, #364]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afa4:	f043 0301 	orr.w	r3, r3, #1
 800afa8:	6713      	str	r3, [r2, #112]	@ 0x70
 800afaa:	e00b      	b.n	800afc4 <HAL_RCC_OscConfig+0x324>
 800afac:	4b58      	ldr	r3, [pc, #352]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afb0:	4a57      	ldr	r2, [pc, #348]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	6713      	str	r3, [r2, #112]	@ 0x70
 800afb8:	4b55      	ldr	r3, [pc, #340]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afbc:	4a54      	ldr	r2, [pc, #336]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afbe:	f023 0304 	bic.w	r3, r3, #4
 800afc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d015      	beq.n	800aff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afcc:	f7fe f9b2 	bl	8009334 <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd2:	e00a      	b.n	800afea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afd4:	f7fe f9ae 	bl	8009334 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e0cb      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afea:	4b49      	ldr	r3, [pc, #292]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0ee      	beq.n	800afd4 <HAL_RCC_OscConfig+0x334>
 800aff6:	e014      	b.n	800b022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aff8:	f7fe f99c 	bl	8009334 <HAL_GetTick>
 800affc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800affe:	e00a      	b.n	800b016 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b000:	f7fe f998 	bl	8009334 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b00e:	4293      	cmp	r3, r2
 800b010:	d901      	bls.n	800b016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e0b5      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b016:	4b3e      	ldr	r3, [pc, #248]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1ee      	bne.n	800b000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d105      	bne.n	800b034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b028:	4b39      	ldr	r3, [pc, #228]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02c:	4a38      	ldr	r2, [pc, #224]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b02e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b032:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 80a1 	beq.w	800b180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b03e:	4b34      	ldr	r3, [pc, #208]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f003 030c 	and.w	r3, r3, #12
 800b046:	2b08      	cmp	r3, #8
 800b048:	d05c      	beq.n	800b104 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d141      	bne.n	800b0d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b052:	4b31      	ldr	r3, [pc, #196]	@ (800b118 <HAL_RCC_OscConfig+0x478>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b058:	f7fe f96c 	bl	8009334 <HAL_GetTick>
 800b05c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b05e:	e008      	b.n	800b072 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b060:	f7fe f968 	bl	8009334 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e087      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b072:	4b27      	ldr	r3, [pc, #156]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f0      	bne.n	800b060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	019b      	lsls	r3, r3, #6
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b094:	085b      	lsrs	r3, r3, #1
 800b096:	3b01      	subs	r3, #1
 800b098:	041b      	lsls	r3, r3, #16
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	061b      	lsls	r3, r3, #24
 800b0a2:	491b      	ldr	r1, [pc, #108]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b118 <HAL_RCC_OscConfig+0x478>)
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0ae:	f7fe f941 	bl	8009334 <HAL_GetTick>
 800b0b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b6:	f7fe f93d 	bl	8009334 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e05c      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0c8:	4b11      	ldr	r3, [pc, #68]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x416>
 800b0d4:	e054      	b.n	800b180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0d6:	4b10      	ldr	r3, [pc, #64]	@ (800b118 <HAL_RCC_OscConfig+0x478>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0dc:	f7fe f92a 	bl	8009334 <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e4:	f7fe f926 	bl	8009334 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e045      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0f6:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <HAL_RCC_OscConfig+0x470>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f0      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x444>
 800b102:	e03d      	b.n	800b180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d107      	bne.n	800b11c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e038      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
 800b110:	40023800 	.word	0x40023800
 800b114:	40007000 	.word	0x40007000
 800b118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b11c:	4b1b      	ldr	r3, [pc, #108]	@ (800b18c <HAL_RCC_OscConfig+0x4ec>)
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d028      	beq.n	800b17c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b134:	429a      	cmp	r2, r3
 800b136:	d121      	bne.n	800b17c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b142:	429a      	cmp	r2, r3
 800b144:	d11a      	bne.n	800b17c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b14c:	4013      	ands	r3, r2
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b154:	4293      	cmp	r3, r2
 800b156:	d111      	bne.n	800b17c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b162:	085b      	lsrs	r3, r3, #1
 800b164:	3b01      	subs	r3, #1
 800b166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b168:	429a      	cmp	r2, r3
 800b16a:	d107      	bne.n	800b17c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b178:	429a      	cmp	r2, r3
 800b17a:	d001      	beq.n	800b180 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	40023800 	.word	0x40023800

0800b190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e0cc      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1a4:	4b68      	ldr	r3, [pc, #416]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d90c      	bls.n	800b1cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1b2:	4b65      	ldr	r3, [pc, #404]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ba:	4b63      	ldr	r3, [pc, #396]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d001      	beq.n	800b1cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e0b8      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d020      	beq.n	800b21a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1e4:	4b59      	ldr	r3, [pc, #356]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	4a58      	ldr	r2, [pc, #352]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b1ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b1ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0308 	and.w	r3, r3, #8
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1fc:	4b53      	ldr	r3, [pc, #332]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	4a52      	ldr	r2, [pc, #328]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b202:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b208:	4b50      	ldr	r3, [pc, #320]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	494d      	ldr	r1, [pc, #308]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b216:	4313      	orrs	r3, r2
 800b218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d044      	beq.n	800b2b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d107      	bne.n	800b23e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b22e:	4b47      	ldr	r3, [pc, #284]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d119      	bne.n	800b26e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e07f      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d003      	beq.n	800b24e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d107      	bne.n	800b25e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b24e:	4b3f      	ldr	r3, [pc, #252]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e06f      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b25e:	4b3b      	ldr	r3, [pc, #236]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e067      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b26e:	4b37      	ldr	r3, [pc, #220]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f023 0203 	bic.w	r2, r3, #3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	4934      	ldr	r1, [pc, #208]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b280:	f7fe f858 	bl	8009334 <HAL_GetTick>
 800b284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b286:	e00a      	b.n	800b29e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b288:	f7fe f854 	bl	8009334 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b296:	4293      	cmp	r3, r2
 800b298:	d901      	bls.n	800b29e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e04f      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b29e:	4b2b      	ldr	r3, [pc, #172]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 020c 	and.w	r2, r3, #12
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d1eb      	bne.n	800b288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2b0:	4b25      	ldr	r3, [pc, #148]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d20c      	bcs.n	800b2d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2be:	4b22      	ldr	r3, [pc, #136]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2c6:	4b20      	ldr	r3, [pc, #128]	@ (800b348 <HAL_RCC_ClockConfig+0x1b8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d001      	beq.n	800b2d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e032      	b.n	800b33e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0304 	and.w	r3, r3, #4
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d008      	beq.n	800b2f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2e4:	4b19      	ldr	r3, [pc, #100]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	4916      	ldr	r1, [pc, #88]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	490e      	ldr	r1, [pc, #56]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b312:	4313      	orrs	r3, r2
 800b314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b316:	f000 f821 	bl	800b35c <HAL_RCC_GetSysClockFreq>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <HAL_RCC_ClockConfig+0x1bc>)
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	091b      	lsrs	r3, r3, #4
 800b322:	f003 030f 	and.w	r3, r3, #15
 800b326:	490a      	ldr	r1, [pc, #40]	@ (800b350 <HAL_RCC_ClockConfig+0x1c0>)
 800b328:	5ccb      	ldrb	r3, [r1, r3]
 800b32a:	fa22 f303 	lsr.w	r3, r2, r3
 800b32e:	4a09      	ldr	r2, [pc, #36]	@ (800b354 <HAL_RCC_ClockConfig+0x1c4>)
 800b330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b332:	4b09      	ldr	r3, [pc, #36]	@ (800b358 <HAL_RCC_ClockConfig+0x1c8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4618      	mov	r0, r3
 800b338:	f7fd ffb8 	bl	80092ac <HAL_InitTick>

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40023c00 	.word	0x40023c00
 800b34c:	40023800 	.word	0x40023800
 800b350:	08015ac8 	.word	0x08015ac8
 800b354:	20000010 	.word	0x20000010
 800b358:	20000014 	.word	0x20000014

0800b35c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b35c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b360:	b094      	sub	sp, #80	@ 0x50
 800b362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b374:	4b79      	ldr	r3, [pc, #484]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f003 030c 	and.w	r3, r3, #12
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d00d      	beq.n	800b39c <HAL_RCC_GetSysClockFreq+0x40>
 800b380:	2b08      	cmp	r3, #8
 800b382:	f200 80e1 	bhi.w	800b548 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <HAL_RCC_GetSysClockFreq+0x34>
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d003      	beq.n	800b396 <HAL_RCC_GetSysClockFreq+0x3a>
 800b38e:	e0db      	b.n	800b548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b390:	4b73      	ldr	r3, [pc, #460]	@ (800b560 <HAL_RCC_GetSysClockFreq+0x204>)
 800b392:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b394:	e0db      	b.n	800b54e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b396:	4b73      	ldr	r3, [pc, #460]	@ (800b564 <HAL_RCC_GetSysClockFreq+0x208>)
 800b398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b39a:	e0d8      	b.n	800b54e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b39c:	4b6f      	ldr	r3, [pc, #444]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b3a6:	4b6d      	ldr	r3, [pc, #436]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d063      	beq.n	800b47a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3b2:	4b6a      	ldr	r3, [pc, #424]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	099b      	lsrs	r3, r3, #6
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f04f 0100 	mov.w	r1, #0
 800b3da:	0159      	lsls	r1, r3, #5
 800b3dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b3e0:	0150      	lsls	r0, r2, #5
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	1a51      	subs	r1, r2, r1
 800b3ea:	6139      	str	r1, [r7, #16]
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	eb63 0301 	sbc.w	r3, r3, r1
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	f04f 0300 	mov.w	r3, #0
 800b3fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b400:	4659      	mov	r1, fp
 800b402:	018b      	lsls	r3, r1, #6
 800b404:	4651      	mov	r1, sl
 800b406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b40a:	4651      	mov	r1, sl
 800b40c:	018a      	lsls	r2, r1, #6
 800b40e:	4651      	mov	r1, sl
 800b410:	ebb2 0801 	subs.w	r8, r2, r1
 800b414:	4659      	mov	r1, fp
 800b416:	eb63 0901 	sbc.w	r9, r3, r1
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b42a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b42e:	4690      	mov	r8, r2
 800b430:	4699      	mov	r9, r3
 800b432:	4623      	mov	r3, r4
 800b434:	eb18 0303 	adds.w	r3, r8, r3
 800b438:	60bb      	str	r3, [r7, #8]
 800b43a:	462b      	mov	r3, r5
 800b43c:	eb49 0303 	adc.w	r3, r9, r3
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	f04f 0200 	mov.w	r2, #0
 800b446:	f04f 0300 	mov.w	r3, #0
 800b44a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b44e:	4629      	mov	r1, r5
 800b450:	024b      	lsls	r3, r1, #9
 800b452:	4621      	mov	r1, r4
 800b454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b458:	4621      	mov	r1, r4
 800b45a:	024a      	lsls	r2, r1, #9
 800b45c:	4610      	mov	r0, r2
 800b45e:	4619      	mov	r1, r3
 800b460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b462:	2200      	movs	r2, #0
 800b464:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b46c:	f7f5 fc1c 	bl	8000ca8 <__aeabi_uldivmod>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4613      	mov	r3, r2
 800b476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b478:	e058      	b.n	800b52c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b47a:	4b38      	ldr	r3, [pc, #224]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	099b      	lsrs	r3, r3, #6
 800b480:	2200      	movs	r2, #0
 800b482:	4618      	mov	r0, r3
 800b484:	4611      	mov	r1, r2
 800b486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b48a:	623b      	str	r3, [r7, #32]
 800b48c:	2300      	movs	r3, #0
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b494:	4642      	mov	r2, r8
 800b496:	464b      	mov	r3, r9
 800b498:	f04f 0000 	mov.w	r0, #0
 800b49c:	f04f 0100 	mov.w	r1, #0
 800b4a0:	0159      	lsls	r1, r3, #5
 800b4a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b4a6:	0150      	lsls	r0, r2, #5
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4641      	mov	r1, r8
 800b4ae:	ebb2 0a01 	subs.w	sl, r2, r1
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	eb63 0b01 	sbc.w	fp, r3, r1
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	f04f 0300 	mov.w	r3, #0
 800b4c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b4c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b4c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b4cc:	ebb2 040a 	subs.w	r4, r2, sl
 800b4d0:	eb63 050b 	sbc.w	r5, r3, fp
 800b4d4:	f04f 0200 	mov.w	r2, #0
 800b4d8:	f04f 0300 	mov.w	r3, #0
 800b4dc:	00eb      	lsls	r3, r5, #3
 800b4de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4e2:	00e2      	lsls	r2, r4, #3
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	461d      	mov	r5, r3
 800b4e8:	4643      	mov	r3, r8
 800b4ea:	18e3      	adds	r3, r4, r3
 800b4ec:	603b      	str	r3, [r7, #0]
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	eb45 0303 	adc.w	r3, r5, r3
 800b4f4:	607b      	str	r3, [r7, #4]
 800b4f6:	f04f 0200 	mov.w	r2, #0
 800b4fa:	f04f 0300 	mov.w	r3, #0
 800b4fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b502:	4629      	mov	r1, r5
 800b504:	028b      	lsls	r3, r1, #10
 800b506:	4621      	mov	r1, r4
 800b508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b50c:	4621      	mov	r1, r4
 800b50e:	028a      	lsls	r2, r1, #10
 800b510:	4610      	mov	r0, r2
 800b512:	4619      	mov	r1, r3
 800b514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b516:	2200      	movs	r2, #0
 800b518:	61bb      	str	r3, [r7, #24]
 800b51a:	61fa      	str	r2, [r7, #28]
 800b51c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b520:	f7f5 fbc2 	bl	8000ca8 <__aeabi_uldivmod>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4613      	mov	r3, r2
 800b52a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b52c:	4b0b      	ldr	r3, [pc, #44]	@ (800b55c <HAL_RCC_GetSysClockFreq+0x200>)
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	0c1b      	lsrs	r3, r3, #16
 800b532:	f003 0303 	and.w	r3, r3, #3
 800b536:	3301      	adds	r3, #1
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b53c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b53e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b540:	fbb2 f3f3 	udiv	r3, r2, r3
 800b544:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b546:	e002      	b.n	800b54e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b548:	4b05      	ldr	r3, [pc, #20]	@ (800b560 <HAL_RCC_GetSysClockFreq+0x204>)
 800b54a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b54c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b54e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b550:	4618      	mov	r0, r3
 800b552:	3750      	adds	r7, #80	@ 0x50
 800b554:	46bd      	mov	sp, r7
 800b556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b55a:	bf00      	nop
 800b55c:	40023800 	.word	0x40023800
 800b560:	00f42400 	.word	0x00f42400
 800b564:	007a1200 	.word	0x007a1200

0800b568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b56c:	4b03      	ldr	r3, [pc, #12]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x14>)
 800b56e:	681b      	ldr	r3, [r3, #0]
}
 800b570:	4618      	mov	r0, r3
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000010 	.word	0x20000010

0800b580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b584:	f7ff fff0 	bl	800b568 <HAL_RCC_GetHCLKFreq>
 800b588:	4602      	mov	r2, r0
 800b58a:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	0a9b      	lsrs	r3, r3, #10
 800b590:	f003 0307 	and.w	r3, r3, #7
 800b594:	4903      	ldr	r1, [pc, #12]	@ (800b5a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b596:	5ccb      	ldrb	r3, [r1, r3]
 800b598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	40023800 	.word	0x40023800
 800b5a4:	08015ad8 	.word	0x08015ad8

0800b5a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b5ac:	f7ff ffdc 	bl	800b568 <HAL_RCC_GetHCLKFreq>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	4b05      	ldr	r3, [pc, #20]	@ (800b5c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	0b5b      	lsrs	r3, r3, #13
 800b5b8:	f003 0307 	and.w	r3, r3, #7
 800b5bc:	4903      	ldr	r1, [pc, #12]	@ (800b5cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5be:	5ccb      	ldrb	r3, [r1, r3]
 800b5c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	40023800 	.word	0x40023800
 800b5cc:	08015ad8 	.word	0x08015ad8

0800b5d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e041      	b.n	800b666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fc f9ba 	bl	8007970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3304      	adds	r3, #4
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f000 fad8 	bl	800bbc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e041      	b.n	800b704 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d106      	bne.n	800b69a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f839 	bl	800b70c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2202      	movs	r2, #2
 800b69e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f000 fa89 	bl	800bbc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <HAL_TIM_PWM_Start+0x24>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b01      	cmp	r3, #1
 800b73a:	bf14      	ite	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	2300      	moveq	r3, #0
 800b740:	b2db      	uxtb	r3, r3
 800b742:	e022      	b.n	800b78a <HAL_TIM_PWM_Start+0x6a>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b04      	cmp	r3, #4
 800b748:	d109      	bne.n	800b75e <HAL_TIM_PWM_Start+0x3e>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b01      	cmp	r3, #1
 800b754:	bf14      	ite	ne
 800b756:	2301      	movne	r3, #1
 800b758:	2300      	moveq	r3, #0
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	e015      	b.n	800b78a <HAL_TIM_PWM_Start+0x6a>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b08      	cmp	r3, #8
 800b762:	d109      	bne.n	800b778 <HAL_TIM_PWM_Start+0x58>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	bf14      	ite	ne
 800b770:	2301      	movne	r3, #1
 800b772:	2300      	moveq	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	e008      	b.n	800b78a <HAL_TIM_PWM_Start+0x6a>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b01      	cmp	r3, #1
 800b782:	bf14      	ite	ne
 800b784:	2301      	movne	r3, #1
 800b786:	2300      	moveq	r3, #0
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e07c      	b.n	800b88c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <HAL_TIM_PWM_Start+0x82>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7a0:	e013      	b.n	800b7ca <HAL_TIM_PWM_Start+0xaa>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d104      	bne.n	800b7b2 <HAL_TIM_PWM_Start+0x92>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7b0:	e00b      	b.n	800b7ca <HAL_TIM_PWM_Start+0xaa>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d104      	bne.n	800b7c2 <HAL_TIM_PWM_Start+0xa2>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7c0:	e003      	b.n	800b7ca <HAL_TIM_PWM_Start+0xaa>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 fcec 	bl	800c1b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a2d      	ldr	r2, [pc, #180]	@ (800b894 <HAL_TIM_PWM_Start+0x174>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d004      	beq.n	800b7ec <HAL_TIM_PWM_Start+0xcc>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b898 <HAL_TIM_PWM_Start+0x178>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d101      	bne.n	800b7f0 <HAL_TIM_PWM_Start+0xd0>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <HAL_TIM_PWM_Start+0xd2>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b804:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a22      	ldr	r2, [pc, #136]	@ (800b894 <HAL_TIM_PWM_Start+0x174>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d022      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b818:	d01d      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a1f      	ldr	r2, [pc, #124]	@ (800b89c <HAL_TIM_PWM_Start+0x17c>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d018      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a0 <HAL_TIM_PWM_Start+0x180>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d013      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a4 <HAL_TIM_PWM_Start+0x184>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00e      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a16      	ldr	r2, [pc, #88]	@ (800b898 <HAL_TIM_PWM_Start+0x178>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d009      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a18      	ldr	r2, [pc, #96]	@ (800b8a8 <HAL_TIM_PWM_Start+0x188>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d004      	beq.n	800b856 <HAL_TIM_PWM_Start+0x136>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a16      	ldr	r2, [pc, #88]	@ (800b8ac <HAL_TIM_PWM_Start+0x18c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d111      	bne.n	800b87a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f003 0307 	and.w	r3, r3, #7
 800b860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b06      	cmp	r3, #6
 800b866:	d010      	beq.n	800b88a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b878:	e007      	b.n	800b88a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f042 0201 	orr.w	r2, r2, #1
 800b888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	40010000 	.word	0x40010000
 800b898:	40010400 	.word	0x40010400
 800b89c:	40000400 	.word	0x40000400
 800b8a0:	40000800 	.word	0x40000800
 800b8a4:	40000c00 	.word	0x40000c00
 800b8a8:	40014000 	.word	0x40014000
 800b8ac:	40001800 	.word	0x40001800

0800b8b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d101      	bne.n	800b8ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e0ae      	b.n	800ba2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b0c      	cmp	r3, #12
 800b8da:	f200 809f 	bhi.w	800ba1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b8de:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e4:	0800b919 	.word	0x0800b919
 800b8e8:	0800ba1d 	.word	0x0800ba1d
 800b8ec:	0800ba1d 	.word	0x0800ba1d
 800b8f0:	0800ba1d 	.word	0x0800ba1d
 800b8f4:	0800b959 	.word	0x0800b959
 800b8f8:	0800ba1d 	.word	0x0800ba1d
 800b8fc:	0800ba1d 	.word	0x0800ba1d
 800b900:	0800ba1d 	.word	0x0800ba1d
 800b904:	0800b99b 	.word	0x0800b99b
 800b908:	0800ba1d 	.word	0x0800ba1d
 800b90c:	0800ba1d 	.word	0x0800ba1d
 800b910:	0800ba1d 	.word	0x0800ba1d
 800b914:	0800b9db 	.word	0x0800b9db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68b9      	ldr	r1, [r7, #8]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f9fc 	bl	800bd1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	699a      	ldr	r2, [r3, #24]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0208 	orr.w	r2, r2, #8
 800b932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699a      	ldr	r2, [r3, #24]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f022 0204 	bic.w	r2, r2, #4
 800b942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6999      	ldr	r1, [r3, #24]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	691a      	ldr	r2, [r3, #16]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	619a      	str	r2, [r3, #24]
      break;
 800b956:	e064      	b.n	800ba22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fa4c 	bl	800bdfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699a      	ldr	r2, [r3, #24]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6999      	ldr	r1, [r3, #24]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	021a      	lsls	r2, r3, #8
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	619a      	str	r2, [r3, #24]
      break;
 800b998:	e043      	b.n	800ba22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 faa1 	bl	800bee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	69da      	ldr	r2, [r3, #28]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f042 0208 	orr.w	r2, r2, #8
 800b9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 0204 	bic.w	r2, r2, #4
 800b9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69d9      	ldr	r1, [r3, #28]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	691a      	ldr	r2, [r3, #16]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	61da      	str	r2, [r3, #28]
      break;
 800b9d8:	e023      	b.n	800ba22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 faf5 	bl	800bfd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	69da      	ldr	r2, [r3, #28]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	69d9      	ldr	r1, [r3, #28]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	021a      	lsls	r2, r3, #8
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	61da      	str	r2, [r3, #28]
      break;
 800ba1a:	e002      	b.n	800ba22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d101      	bne.n	800ba50 <HAL_TIM_ConfigClockSource+0x1c>
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	e0b4      	b.n	800bbba <HAL_TIM_ConfigClockSource+0x186>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ba6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba88:	d03e      	beq.n	800bb08 <HAL_TIM_ConfigClockSource+0xd4>
 800ba8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba8e:	f200 8087 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800ba92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba96:	f000 8086 	beq.w	800bba6 <HAL_TIM_ConfigClockSource+0x172>
 800ba9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba9e:	d87f      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800baa0:	2b70      	cmp	r3, #112	@ 0x70
 800baa2:	d01a      	beq.n	800bada <HAL_TIM_ConfigClockSource+0xa6>
 800baa4:	2b70      	cmp	r3, #112	@ 0x70
 800baa6:	d87b      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800baa8:	2b60      	cmp	r3, #96	@ 0x60
 800baaa:	d050      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x11a>
 800baac:	2b60      	cmp	r3, #96	@ 0x60
 800baae:	d877      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800bab0:	2b50      	cmp	r3, #80	@ 0x50
 800bab2:	d03c      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0xfa>
 800bab4:	2b50      	cmp	r3, #80	@ 0x50
 800bab6:	d873      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800bab8:	2b40      	cmp	r3, #64	@ 0x40
 800baba:	d058      	beq.n	800bb6e <HAL_TIM_ConfigClockSource+0x13a>
 800babc:	2b40      	cmp	r3, #64	@ 0x40
 800babe:	d86f      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800bac0:	2b30      	cmp	r3, #48	@ 0x30
 800bac2:	d064      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x15a>
 800bac4:	2b30      	cmp	r3, #48	@ 0x30
 800bac6:	d86b      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d060      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x15a>
 800bacc:	2b20      	cmp	r3, #32
 800bace:	d867      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d05c      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x15a>
 800bad4:	2b10      	cmp	r3, #16
 800bad6:	d05a      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x15a>
 800bad8:	e062      	b.n	800bba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800baea:	f000 fb41 	bl	800c170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bafc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	609a      	str	r2, [r3, #8]
      break;
 800bb06:	e04f      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb18:	f000 fb2a 	bl	800c170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb2a:	609a      	str	r2, [r3, #8]
      break;
 800bb2c:	e03c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f000 fa9e 	bl	800c07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2150      	movs	r1, #80	@ 0x50
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 faf7 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bb4c:	e02c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f000 fabd 	bl	800c0da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2160      	movs	r1, #96	@ 0x60
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fae7 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bb6c:	e01c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f000 fa7e 	bl	800c07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2140      	movs	r1, #64	@ 0x40
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 fad7 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bb8c:	e00c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f000 face 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bb9e:	e003      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]
      break;
 800bba4:	e000      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a46      	ldr	r2, [pc, #280]	@ (800bcf0 <TIM_Base_SetConfig+0x12c>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d013      	beq.n	800bc04 <TIM_Base_SetConfig+0x40>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbe2:	d00f      	beq.n	800bc04 <TIM_Base_SetConfig+0x40>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a43      	ldr	r2, [pc, #268]	@ (800bcf4 <TIM_Base_SetConfig+0x130>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00b      	beq.n	800bc04 <TIM_Base_SetConfig+0x40>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a42      	ldr	r2, [pc, #264]	@ (800bcf8 <TIM_Base_SetConfig+0x134>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d007      	beq.n	800bc04 <TIM_Base_SetConfig+0x40>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a41      	ldr	r2, [pc, #260]	@ (800bcfc <TIM_Base_SetConfig+0x138>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d003      	beq.n	800bc04 <TIM_Base_SetConfig+0x40>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a40      	ldr	r2, [pc, #256]	@ (800bd00 <TIM_Base_SetConfig+0x13c>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d108      	bne.n	800bc16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a35      	ldr	r2, [pc, #212]	@ (800bcf0 <TIM_Base_SetConfig+0x12c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d02b      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc24:	d027      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a32      	ldr	r2, [pc, #200]	@ (800bcf4 <TIM_Base_SetConfig+0x130>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d023      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a31      	ldr	r2, [pc, #196]	@ (800bcf8 <TIM_Base_SetConfig+0x134>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d01f      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a30      	ldr	r2, [pc, #192]	@ (800bcfc <TIM_Base_SetConfig+0x138>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d01b      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a2f      	ldr	r2, [pc, #188]	@ (800bd00 <TIM_Base_SetConfig+0x13c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d017      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a2e      	ldr	r2, [pc, #184]	@ (800bd04 <TIM_Base_SetConfig+0x140>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d013      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a2d      	ldr	r2, [pc, #180]	@ (800bd08 <TIM_Base_SetConfig+0x144>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d00f      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a2c      	ldr	r2, [pc, #176]	@ (800bd0c <TIM_Base_SetConfig+0x148>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00b      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a2b      	ldr	r2, [pc, #172]	@ (800bd10 <TIM_Base_SetConfig+0x14c>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d007      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a2a      	ldr	r2, [pc, #168]	@ (800bd14 <TIM_Base_SetConfig+0x150>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d003      	beq.n	800bc76 <TIM_Base_SetConfig+0xb2>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a29      	ldr	r2, [pc, #164]	@ (800bd18 <TIM_Base_SetConfig+0x154>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d108      	bne.n	800bc88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a10      	ldr	r2, [pc, #64]	@ (800bcf0 <TIM_Base_SetConfig+0x12c>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d003      	beq.n	800bcbc <TIM_Base_SetConfig+0xf8>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a12      	ldr	r2, [pc, #72]	@ (800bd00 <TIM_Base_SetConfig+0x13c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d103      	bne.n	800bcc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	691a      	ldr	r2, [r3, #16]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d105      	bne.n	800bce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	f023 0201 	bic.w	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	611a      	str	r2, [r3, #16]
  }
}
 800bce2:	bf00      	nop
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	40010000 	.word	0x40010000
 800bcf4:	40000400 	.word	0x40000400
 800bcf8:	40000800 	.word	0x40000800
 800bcfc:	40000c00 	.word	0x40000c00
 800bd00:	40010400 	.word	0x40010400
 800bd04:	40014000 	.word	0x40014000
 800bd08:	40014400 	.word	0x40014400
 800bd0c:	40014800 	.word	0x40014800
 800bd10:	40001800 	.word	0x40001800
 800bd14:	40001c00 	.word	0x40001c00
 800bd18:	40002000 	.word	0x40002000

0800bd1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	f023 0201 	bic.w	r2, r3, #1
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f023 0303 	bic.w	r3, r3, #3
 800bd52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f023 0302 	bic.w	r3, r3, #2
 800bd64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a20      	ldr	r2, [pc, #128]	@ (800bdf4 <TIM_OC1_SetConfig+0xd8>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d003      	beq.n	800bd80 <TIM_OC1_SetConfig+0x64>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a1f      	ldr	r2, [pc, #124]	@ (800bdf8 <TIM_OC1_SetConfig+0xdc>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d10c      	bne.n	800bd9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f023 0308 	bic.w	r3, r3, #8
 800bd86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f023 0304 	bic.w	r3, r3, #4
 800bd98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a15      	ldr	r2, [pc, #84]	@ (800bdf4 <TIM_OC1_SetConfig+0xd8>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d003      	beq.n	800bdaa <TIM_OC1_SetConfig+0x8e>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a14      	ldr	r2, [pc, #80]	@ (800bdf8 <TIM_OC1_SetConfig+0xdc>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d111      	bne.n	800bdce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bdb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	621a      	str	r2, [r3, #32]
}
 800bde8:	bf00      	nop
 800bdea:	371c      	adds	r7, #28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	40010000 	.word	0x40010000
 800bdf8:	40010400 	.word	0x40010400

0800bdfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	f023 0210 	bic.w	r2, r3, #16
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f023 0320 	bic.w	r3, r3, #32
 800be46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	4313      	orrs	r3, r2
 800be52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a22      	ldr	r2, [pc, #136]	@ (800bee0 <TIM_OC2_SetConfig+0xe4>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d003      	beq.n	800be64 <TIM_OC2_SetConfig+0x68>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a21      	ldr	r2, [pc, #132]	@ (800bee4 <TIM_OC2_SetConfig+0xe8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d10d      	bne.n	800be80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	011b      	lsls	r3, r3, #4
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	4313      	orrs	r3, r2
 800be76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a17      	ldr	r2, [pc, #92]	@ (800bee0 <TIM_OC2_SetConfig+0xe4>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d003      	beq.n	800be90 <TIM_OC2_SetConfig+0x94>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a16      	ldr	r2, [pc, #88]	@ (800bee4 <TIM_OC2_SetConfig+0xe8>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d113      	bne.n	800beb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	621a      	str	r2, [r3, #32]
}
 800bed2:	bf00      	nop
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	40010000 	.word	0x40010000
 800bee4:	40010400 	.word	0x40010400

0800bee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	021b      	lsls	r3, r3, #8
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a21      	ldr	r2, [pc, #132]	@ (800bfc8 <TIM_OC3_SetConfig+0xe0>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d003      	beq.n	800bf4e <TIM_OC3_SetConfig+0x66>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a20      	ldr	r2, [pc, #128]	@ (800bfcc <TIM_OC3_SetConfig+0xe4>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d10d      	bne.n	800bf6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	021b      	lsls	r3, r3, #8
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a16      	ldr	r2, [pc, #88]	@ (800bfc8 <TIM_OC3_SetConfig+0xe0>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <TIM_OC3_SetConfig+0x92>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a15      	ldr	r2, [pc, #84]	@ (800bfcc <TIM_OC3_SetConfig+0xe4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d113      	bne.n	800bfa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	011b      	lsls	r3, r3, #4
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	621a      	str	r2, [r3, #32]
}
 800bfbc:	bf00      	nop
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	40010000 	.word	0x40010000
 800bfcc:	40010400 	.word	0x40010400

0800bfd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	4313      	orrs	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c01a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	031b      	lsls	r3, r3, #12
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	4313      	orrs	r3, r2
 800c026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a12      	ldr	r2, [pc, #72]	@ (800c074 <TIM_OC4_SetConfig+0xa4>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d003      	beq.n	800c038 <TIM_OC4_SetConfig+0x68>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a11      	ldr	r2, [pc, #68]	@ (800c078 <TIM_OC4_SetConfig+0xa8>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d109      	bne.n	800c04c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c03e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	019b      	lsls	r3, r3, #6
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4313      	orrs	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	621a      	str	r2, [r3, #32]
}
 800c066:	bf00      	nop
 800c068:	371c      	adds	r7, #28
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	40010000 	.word	0x40010000
 800c078:	40010400 	.word	0x40010400

0800c07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	f023 0201 	bic.w	r2, r3, #1
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f023 030a 	bic.w	r3, r3, #10
 800c0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	621a      	str	r2, [r3, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	371c      	adds	r7, #28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b087      	sub	sp, #28
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	f023 0210 	bic.w	r2, r3, #16
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	031b      	lsls	r3, r3, #12
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	f043 0307 	orr.w	r3, r3, #7
 800c15c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	609a      	str	r2, [r3, #8]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c18a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	021a      	lsls	r2, r3, #8
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	431a      	orrs	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4313      	orrs	r3, r2
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	609a      	str	r2, [r3, #8]
}
 800c1a4:	bf00      	nop
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	f003 031f 	and.w	r3, r3, #31
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a1a      	ldr	r2, [r3, #32]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6a1a      	ldr	r2, [r3, #32]
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f003 031f 	and.w	r3, r3, #31
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	621a      	str	r2, [r3, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
	...

0800c1fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d101      	bne.n	800c214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c210:	2302      	movs	r3, #2
 800c212:	e05a      	b.n	800c2ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a21      	ldr	r2, [pc, #132]	@ (800c2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d022      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c260:	d01d      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a1d      	ldr	r2, [pc, #116]	@ (800c2dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d018      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a1b      	ldr	r2, [pc, #108]	@ (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d013      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a1a      	ldr	r2, [pc, #104]	@ (800c2e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d00e      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a18      	ldr	r2, [pc, #96]	@ (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d009      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a17      	ldr	r2, [pc, #92]	@ (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d004      	beq.n	800c29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a15      	ldr	r2, [pc, #84]	@ (800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d10c      	bne.n	800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40000400 	.word	0x40000400
 800c2e0:	40000800 	.word	0x40000800
 800c2e4:	40000c00 	.word	0x40000c00
 800c2e8:	40010400 	.word	0x40010400
 800c2ec:	40014000 	.word	0x40014000
 800c2f0:	40001800 	.word	0x40001800

0800c2f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d101      	bne.n	800c310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c30c:	2302      	movs	r3, #2
 800c30e:	e03d      	b.n	800c38c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	4313      	orrs	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	4313      	orrs	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e042      	b.n	800c430 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fc fc4e 	bl	8008c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2224      	movs	r2, #36	@ 0x24
 800c3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68da      	ldr	r2, [r3, #12]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 f82d 	bl	800d43c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	691a      	ldr	r2, [r3, #16]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	695a      	ldr	r2, [r3, #20]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68da      	ldr	r2, [r3, #12]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2220      	movs	r2, #32
 800c41c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2220      	movs	r2, #32
 800c424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	@ 0x28
 800c43c:	af02      	add	r7, sp, #8
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	4613      	mov	r3, r2
 800c446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b20      	cmp	r3, #32
 800c456:	d175      	bne.n	800c544 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <HAL_UART_Transmit+0x2c>
 800c45e:	88fb      	ldrh	r3, [r7, #6]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e06e      	b.n	800c546 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2221      	movs	r2, #33	@ 0x21
 800c472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c476:	f7fc ff5d 	bl	8009334 <HAL_GetTick>
 800c47a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	88fa      	ldrh	r2, [r7, #6]
 800c480:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	88fa      	ldrh	r2, [r7, #6]
 800c486:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c490:	d108      	bne.n	800c4a4 <HAL_UART_Transmit+0x6c>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d104      	bne.n	800c4a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e003      	b.n	800c4ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c4ac:	e02e      	b.n	800c50c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2180      	movs	r1, #128	@ 0x80
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f000 fccb 	bl	800ce54 <UART_WaitOnFlagUntilTimeout>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d005      	beq.n	800c4d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e03a      	b.n	800c546 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	3302      	adds	r3, #2
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	e007      	b.n	800c4fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	781a      	ldrb	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c502:	b29b      	uxth	r3, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	b29a      	uxth	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c510:	b29b      	uxth	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1cb      	bne.n	800c4ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2200      	movs	r2, #0
 800c51e:	2140      	movs	r1, #64	@ 0x40
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 fc97 	bl	800ce54 <UART_WaitOnFlagUntilTimeout>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d005      	beq.n	800c538 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2220      	movs	r2, #32
 800c530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	e006      	b.n	800c546 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	e000      	b.n	800c546 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c544:	2302      	movs	r3, #2
  }
}
 800c546:	4618      	mov	r0, r3
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	60f8      	str	r0, [r7, #12]
 800c556:	60b9      	str	r1, [r7, #8]
 800c558:	4613      	mov	r3, r2
 800c55a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b20      	cmp	r3, #32
 800c566:	d112      	bne.n	800c58e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <HAL_UART_Receive_IT+0x26>
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e00b      	b.n	800c590 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c57e:	88fb      	ldrh	r3, [r7, #6]
 800c580:	461a      	mov	r2, r3
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 fcbe 	bl	800cf06 <UART_Start_Receive_IT>
 800c58a:	4603      	mov	r3, r0
 800c58c:	e000      	b.n	800c590 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c58e:	2302      	movs	r3, #2
  }
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b20      	cmp	r3, #32
 800c5b0:	d112      	bne.n	800c5d8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <HAL_UART_Receive_DMA+0x26>
 800c5b8:	88fb      	ldrh	r3, [r7, #6]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e00b      	b.n	800c5da <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 fcd4 	bl	800cf7c <UART_Start_Receive_DMA>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	e000      	b.n	800c5da <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c5d8:	2302      	movs	r3, #2
  }
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b090      	sub	sp, #64	@ 0x40
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	695b      	ldr	r3, [r3, #20]
 800c5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5f8:	2b80      	cmp	r3, #128	@ 0x80
 800c5fa:	bf0c      	ite	eq
 800c5fc:	2301      	moveq	r3, #1
 800c5fe:	2300      	movne	r3, #0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b21      	cmp	r3, #33	@ 0x21
 800c60e:	d128      	bne.n	800c662 <HAL_UART_DMAStop+0x80>
 800c610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d025      	beq.n	800c662 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3314      	adds	r3, #20
 800c61c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	623b      	str	r3, [r7, #32]
   return(result);
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c62c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3314      	adds	r3, #20
 800c634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c636:	633a      	str	r2, [r7, #48]	@ 0x30
 800c638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c63c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e5      	bne.n	800c616 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c656:	4618      	mov	r0, r3
 800c658:	f7fd fe58 	bl	800a30c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fd27 	bl	800d0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c66c:	2b40      	cmp	r3, #64	@ 0x40
 800c66e:	bf0c      	ite	eq
 800c670:	2301      	moveq	r3, #1
 800c672:	2300      	movne	r3, #0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b22      	cmp	r3, #34	@ 0x22
 800c682:	d128      	bne.n	800c6d6 <HAL_UART_DMAStop+0xf4>
 800c684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c686:	2b00      	cmp	r3, #0
 800c688:	d025      	beq.n	800c6d6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3314      	adds	r3, #20
 800c690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	60fb      	str	r3, [r7, #12]
   return(result);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3314      	adds	r3, #20
 800c6a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6aa:	61fa      	str	r2, [r7, #28]
 800c6ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ae:	69b9      	ldr	r1, [r7, #24]
 800c6b0:	69fa      	ldr	r2, [r7, #28]
 800c6b2:	e841 2300 	strex	r3, r2, [r1]
 800c6b6:	617b      	str	r3, [r7, #20]
   return(result);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1e5      	bne.n	800c68a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d004      	beq.n	800c6d0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fd fe1e 	bl	800a30c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fd15 	bl	800d100 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3740      	adds	r7, #64	@ 0x40
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b0ba      	sub	sp, #232	@ 0xe8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c706:	2300      	movs	r3, #0
 800c708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c716:	f003 030f 	and.w	r3, r3, #15
 800c71a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c71e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10f      	bne.n	800c746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c72a:	f003 0320 	and.w	r3, r3, #32
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d009      	beq.n	800c746 <HAL_UART_IRQHandler+0x66>
 800c732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c736:	f003 0320 	and.w	r3, r3, #32
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fdbd 	bl	800d2be <UART_Receive_IT>
      return;
 800c744:	e25b      	b.n	800cbfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80de 	beq.w	800c90c <HAL_UART_IRQHandler+0x22c>
 800c750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c760:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 80d1 	beq.w	800c90c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00b      	beq.n	800c78e <HAL_UART_IRQHandler+0xae>
 800c776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c77a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c786:	f043 0201 	orr.w	r2, r3, #1
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c792:	f003 0304 	and.w	r3, r3, #4
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00b      	beq.n	800c7b2 <HAL_UART_IRQHandler+0xd2>
 800c79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7aa:	f043 0202 	orr.w	r2, r3, #2
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7b6:	f003 0302 	and.w	r3, r3, #2
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <HAL_UART_IRQHandler+0xf6>
 800c7be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d005      	beq.n	800c7d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7ce:	f043 0204 	orr.w	r2, r3, #4
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7da:	f003 0308 	and.w	r3, r3, #8
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d011      	beq.n	800c806 <HAL_UART_IRQHandler+0x126>
 800c7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7e6:	f003 0320 	and.w	r3, r3, #32
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d105      	bne.n	800c7fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d005      	beq.n	800c806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7fe:	f043 0208 	orr.w	r2, r3, #8
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 81f2 	beq.w	800cbf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c814:	f003 0320 	and.w	r3, r3, #32
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d008      	beq.n	800c82e <HAL_UART_IRQHandler+0x14e>
 800c81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fd48 	bl	800d2be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c838:	2b40      	cmp	r3, #64	@ 0x40
 800c83a:	bf0c      	ite	eq
 800c83c:	2301      	moveq	r3, #1
 800c83e:	2300      	movne	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c84a:	f003 0308 	and.w	r3, r3, #8
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d103      	bne.n	800c85a <HAL_UART_IRQHandler+0x17a>
 800c852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c856:	2b00      	cmp	r3, #0
 800c858:	d04f      	beq.n	800c8fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fc50 	bl	800d100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c86a:	2b40      	cmp	r3, #64	@ 0x40
 800c86c:	d141      	bne.n	800c8f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3314      	adds	r3, #20
 800c874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c87c:	e853 3f00 	ldrex	r3, [r3]
 800c880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c88c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3314      	adds	r3, #20
 800c896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c89a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c89e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8aa:	e841 2300 	strex	r3, r2, [r1]
 800c8ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1d9      	bne.n	800c86e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d013      	beq.n	800c8ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c6:	4a7e      	ldr	r2, [pc, #504]	@ (800cac0 <HAL_UART_IRQHandler+0x3e0>)
 800c8c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fd fd8c 	bl	800a3ec <HAL_DMA_Abort_IT>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d016      	beq.n	800c908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8e8:	e00e      	b.n	800c908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f99e 	bl	800cc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f0:	e00a      	b.n	800c908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f99a 	bl	800cc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f8:	e006      	b.n	800c908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f996 	bl	800cc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c906:	e175      	b.n	800cbf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c908:	bf00      	nop
    return;
 800c90a:	e173      	b.n	800cbf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c910:	2b01      	cmp	r3, #1
 800c912:	f040 814f 	bne.w	800cbb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c91a:	f003 0310 	and.w	r3, r3, #16
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8148 	beq.w	800cbb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c928:	f003 0310 	and.w	r3, r3, #16
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 8141 	beq.w	800cbb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c932:	2300      	movs	r3, #0
 800c934:	60bb      	str	r3, [r7, #8]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	60bb      	str	r3, [r7, #8]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	60bb      	str	r3, [r7, #8]
 800c946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c952:	2b40      	cmp	r3, #64	@ 0x40
 800c954:	f040 80b6 	bne.w	800cac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f000 8145 	beq.w	800cbf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c976:	429a      	cmp	r2, r3
 800c978:	f080 813e 	bcs.w	800cbf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c982:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c98e:	f000 8088 	beq.w	800caa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	330c      	adds	r3, #12
 800c998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9a0:	e853 3f00 	ldrex	r3, [r3]
 800c9a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	330c      	adds	r3, #12
 800c9ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c9be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c9c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c9ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9ce:	e841 2300 	strex	r3, r2, [r1]
 800c9d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c9d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1d9      	bne.n	800c992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3314      	adds	r3, #20
 800c9e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9e8:	e853 3f00 	ldrex	r3, [r3]
 800c9ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c9ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9f0:	f023 0301 	bic.w	r3, r3, #1
 800c9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3314      	adds	r3, #20
 800c9fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca0e:	e841 2300 	strex	r3, r2, [r1]
 800ca12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1e1      	bne.n	800c9de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	3314      	adds	r3, #20
 800ca20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca24:	e853 3f00 	ldrex	r3, [r3]
 800ca28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3314      	adds	r3, #20
 800ca3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e3      	bne.n	800ca1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	330c      	adds	r3, #12
 800ca66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca6a:	e853 3f00 	ldrex	r3, [r3]
 800ca6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca72:	f023 0310 	bic.w	r3, r3, #16
 800ca76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	330c      	adds	r3, #12
 800ca80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ca84:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ca86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca8c:	e841 2300 	strex	r3, r2, [r1]
 800ca90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1e3      	bne.n	800ca60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fc35 	bl	800a30c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2202      	movs	r2, #2
 800caa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f8c1 	bl	800cc40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cabe:	e09b      	b.n	800cbf8 <HAL_UART_IRQHandler+0x518>
 800cac0:	0800d1c7 	.word	0x0800d1c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cacc:	b29b      	uxth	r3, r3
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cad8:	b29b      	uxth	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 808e 	beq.w	800cbfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f000 8089 	beq.w	800cbfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	330c      	adds	r3, #12
 800caf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	330c      	adds	r3, #12
 800cb0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cb0e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb16:	e841 2300 	strex	r3, r2, [r1]
 800cb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1e3      	bne.n	800caea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3314      	adds	r3, #20
 800cb28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	e853 3f00 	ldrex	r3, [r3]
 800cb30:	623b      	str	r3, [r7, #32]
   return(result);
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	f023 0301 	bic.w	r3, r3, #1
 800cb38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3314      	adds	r3, #20
 800cb42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb46:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb4e:	e841 2300 	strex	r3, r2, [r1]
 800cb52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e3      	bne.n	800cb22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 0310 	bic.w	r3, r3, #16
 800cb7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	330c      	adds	r3, #12
 800cb88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cb8c:	61fa      	str	r2, [r7, #28]
 800cb8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	69b9      	ldr	r1, [r7, #24]
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	617b      	str	r3, [r7, #20]
   return(result);
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e3      	bne.n	800cb68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbaa:	4619      	mov	r1, r3
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f847 	bl	800cc40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbb2:	e023      	b.n	800cbfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <HAL_UART_IRQHandler+0x4f4>
 800cbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fb0e 	bl	800d1ee <UART_Transmit_IT>
    return;
 800cbd2:	e014      	b.n	800cbfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00e      	beq.n	800cbfe <HAL_UART_IRQHandler+0x51e>
 800cbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d008      	beq.n	800cbfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fb4e 	bl	800d28e <UART_EndTransmit_IT>
    return;
 800cbf2:	e004      	b.n	800cbfe <HAL_UART_IRQHandler+0x51e>
    return;
 800cbf4:	bf00      	nop
 800cbf6:	e002      	b.n	800cbfe <HAL_UART_IRQHandler+0x51e>
      return;
 800cbf8:	bf00      	nop
 800cbfa:	e000      	b.n	800cbfe <HAL_UART_IRQHandler+0x51e>
      return;
 800cbfc:	bf00      	nop
  }
}
 800cbfe:	37e8      	adds	r7, #232	@ 0xe8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b09c      	sub	sp, #112	@ 0x70
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d172      	bne.n	800cd5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cc74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc76:	2200      	movs	r2, #0
 800cc78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	330c      	adds	r3, #12
 800cc80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc84:	e853 3f00 	ldrex	r3, [r3]
 800cc88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc90:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	330c      	adds	r3, #12
 800cc98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cc9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cca2:	e841 2300 	strex	r3, r2, [r1]
 800cca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e5      	bne.n	800cc7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	e853 3f00 	ldrex	r3, [r3]
 800ccbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc0:	f023 0301 	bic.w	r3, r3, #1
 800ccc4:	667b      	str	r3, [r7, #100]	@ 0x64
 800ccc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3314      	adds	r3, #20
 800cccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccce:	647a      	str	r2, [r7, #68]	@ 0x44
 800ccd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd6:	e841 2300 	strex	r3, r2, [r1]
 800ccda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e5      	bne.n	800ccae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3314      	adds	r3, #20
 800cce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	e853 3f00 	ldrex	r3, [r3]
 800ccf0:	623b      	str	r3, [r7, #32]
   return(result);
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccf8:	663b      	str	r3, [r7, #96]	@ 0x60
 800ccfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3314      	adds	r3, #20
 800cd00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd02:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd0a:	e841 2300 	strex	r3, r2, [r1]
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e5      	bne.n	800cce2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d119      	bne.n	800cd5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	e853 3f00 	ldrex	r3, [r3]
 800cd34:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f023 0310 	bic.w	r3, r3, #16
 800cd3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	330c      	adds	r3, #12
 800cd44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cd46:	61fa      	str	r2, [r7, #28]
 800cd48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	69fa      	ldr	r2, [r7, #28]
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	617b      	str	r3, [r7, #20]
   return(result);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e5      	bne.n	800cd26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d106      	bne.n	800cd76 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd70:	f7ff ff66 	bl	800cc40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd74:	e002      	b.n	800cd7c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cd76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd78:	f7f7 fc34 	bl	80045e4 <HAL_UART_RxCpltCallback>
}
 800cd7c:	bf00      	nop
 800cd7e:	3770      	adds	r7, #112	@ 0x70
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2201      	movs	r2, #1
 800cd96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d108      	bne.n	800cdb2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cda4:	085b      	lsrs	r3, r3, #1
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	4619      	mov	r1, r3
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff ff48 	bl	800cc40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdb0:	e002      	b.n	800cdb8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff ff30 	bl	800cc18 <HAL_UART_RxHalfCpltCallback>
}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	695b      	ldr	r3, [r3, #20]
 800cdd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cddc:	2b80      	cmp	r3, #128	@ 0x80
 800cdde:	bf0c      	ite	eq
 800cde0:	2301      	moveq	r3, #1
 800cde2:	2300      	movne	r3, #0
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b21      	cmp	r3, #33	@ 0x21
 800cdf2:	d108      	bne.n	800ce06 <UART_DMAError+0x46>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d005      	beq.n	800ce06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ce00:	68b8      	ldr	r0, [r7, #8]
 800ce02:	f000 f955 	bl	800d0b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce10:	2b40      	cmp	r3, #64	@ 0x40
 800ce12:	bf0c      	ite	eq
 800ce14:	2301      	moveq	r3, #1
 800ce16:	2300      	movne	r3, #0
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b22      	cmp	r3, #34	@ 0x22
 800ce26:	d108      	bne.n	800ce3a <UART_DMAError+0x7a>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2200      	movs	r2, #0
 800ce32:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ce34:	68b8      	ldr	r0, [r7, #8]
 800ce36:	f000 f963 	bl	800d100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce3e:	f043 0210 	orr.w	r2, r3, #16
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce46:	68b8      	ldr	r0, [r7, #8]
 800ce48:	f7ff fef0 	bl	800cc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	603b      	str	r3, [r7, #0]
 800ce60:	4613      	mov	r3, r2
 800ce62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce64:	e03b      	b.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6c:	d037      	beq.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce6e:	f7fc fa61 	bl	8009334 <HAL_GetTick>
 800ce72:	4602      	mov	r2, r0
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	6a3a      	ldr	r2, [r7, #32]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d302      	bcc.n	800ce84 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e03a      	b.n	800cefe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	f003 0304 	and.w	r3, r3, #4
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d023      	beq.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b80      	cmp	r3, #128	@ 0x80
 800ce9a:	d020      	beq.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b40      	cmp	r3, #64	@ 0x40
 800cea0:	d01d      	beq.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 0308 	and.w	r3, r3, #8
 800ceac:	2b08      	cmp	r3, #8
 800ceae:	d116      	bne.n	800cede <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	617b      	str	r3, [r7, #20]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 f91a 	bl	800d100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2208      	movs	r2, #8
 800ced0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e00f      	b.n	800cefe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4013      	ands	r3, r2
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	bf0c      	ite	eq
 800ceee:	2301      	moveq	r3, #1
 800cef0:	2300      	movne	r3, #0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	461a      	mov	r2, r3
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d0b4      	beq.n	800ce66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b085      	sub	sp, #20
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	4613      	mov	r3, r2
 800cf12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	88fa      	ldrh	r2, [r7, #6]
 800cf1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	88fa      	ldrh	r2, [r7, #6]
 800cf24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2222      	movs	r2, #34	@ 0x22
 800cf30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d007      	beq.n	800cf4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	695a      	ldr	r2, [r3, #20]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f042 0201 	orr.w	r2, r2, #1
 800cf5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f042 0220 	orr.w	r2, r2, #32
 800cf6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
	...

0800cf7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b098      	sub	sp, #96	@ 0x60
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	4613      	mov	r3, r2
 800cf88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2222      	movs	r2, #34	@ 0x22
 800cfa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0a4 <UART_Start_Receive_DMA+0x128>)
 800cfaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb0:	4a3d      	ldr	r2, [pc, #244]	@ (800d0a8 <UART_Start_Receive_DMA+0x12c>)
 800cfb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb8:	4a3c      	ldr	r2, [pc, #240]	@ (800d0ac <UART_Start_Receive_DMA+0x130>)
 800cfba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cfc4:	f107 0308 	add.w	r3, r7, #8
 800cfc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	88fb      	ldrh	r3, [r7, #6]
 800cfdc:	f7fd f93e 	bl	800a25c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	613b      	str	r3, [r7, #16]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d019      	beq.n	800d032 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	330c      	adds	r3, #12
 800d004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d008:	e853 3f00 	ldrex	r3, [r3]
 800d00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d014:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	330c      	adds	r3, #12
 800d01c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d01e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d026:	e841 2300 	strex	r3, r2, [r1]
 800d02a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1e5      	bne.n	800cffe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3314      	adds	r3, #20
 800d038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d044:	f043 0301 	orr.w	r3, r3, #1
 800d048:	657b      	str	r3, [r7, #84]	@ 0x54
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3314      	adds	r3, #20
 800d050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d052:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e5      	bne.n	800d032 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3314      	adds	r3, #20
 800d06c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	e853 3f00 	ldrex	r3, [r3]
 800d074:	617b      	str	r3, [r7, #20]
   return(result);
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3314      	adds	r3, #20
 800d084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d086:	627a      	str	r2, [r7, #36]	@ 0x24
 800d088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08a:	6a39      	ldr	r1, [r7, #32]
 800d08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	61fb      	str	r3, [r7, #28]
   return(result);
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1e5      	bne.n	800d066 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3760      	adds	r7, #96	@ 0x60
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	0800cc59 	.word	0x0800cc59
 800d0a8:	0800cd85 	.word	0x0800cd85
 800d0ac:	0800cdc1 	.word	0x0800cdc1

0800d0b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b089      	sub	sp, #36	@ 0x24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	330c      	adds	r3, #12
 800d0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	e853 3f00 	ldrex	r3, [r3]
 800d0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d0ce:	61fb      	str	r3, [r7, #28]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	330c      	adds	r3, #12
 800d0d6:	69fa      	ldr	r2, [r7, #28]
 800d0d8:	61ba      	str	r2, [r7, #24]
 800d0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	6979      	ldr	r1, [r7, #20]
 800d0de:	69ba      	ldr	r2, [r7, #24]
 800d0e0:	e841 2300 	strex	r3, r2, [r1]
 800d0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1e5      	bne.n	800d0b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2220      	movs	r2, #32
 800d0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d0f4:	bf00      	nop
 800d0f6:	3724      	adds	r7, #36	@ 0x24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d100:	b480      	push	{r7}
 800d102:	b095      	sub	sp, #84	@ 0x54
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	330c      	adds	r3, #12
 800d10e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d112:	e853 3f00 	ldrex	r3, [r3]
 800d116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d11e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	330c      	adds	r3, #12
 800d126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d128:	643a      	str	r2, [r7, #64]	@ 0x40
 800d12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d12e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d130:	e841 2300 	strex	r3, r2, [r1]
 800d134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e5      	bne.n	800d108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3314      	adds	r3, #20
 800d142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	e853 3f00 	ldrex	r3, [r3]
 800d14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	f023 0301 	bic.w	r3, r3, #1
 800d152:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3314      	adds	r3, #20
 800d15a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d15c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d15e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d164:	e841 2300 	strex	r3, r2, [r1]
 800d168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1e5      	bne.n	800d13c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d174:	2b01      	cmp	r3, #1
 800d176:	d119      	bne.n	800d1ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	330c      	adds	r3, #12
 800d17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	60bb      	str	r3, [r7, #8]
   return(result);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f023 0310 	bic.w	r3, r3, #16
 800d18e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	330c      	adds	r3, #12
 800d196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d198:	61ba      	str	r2, [r7, #24]
 800d19a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	e841 2300 	strex	r3, r2, [r1]
 800d1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e5      	bne.n	800d178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d1ba:	bf00      	nop
 800d1bc:	3754      	adds	r7, #84	@ 0x54
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b084      	sub	sp, #16
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff fd23 	bl	800cc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b085      	sub	sp, #20
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b21      	cmp	r3, #33	@ 0x21
 800d200:	d13e      	bne.n	800d280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d20a:	d114      	bne.n	800d236 <UART_Transmit_IT+0x48>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d110      	bne.n	800d236 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	1c9a      	adds	r2, r3, #2
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	621a      	str	r2, [r3, #32]
 800d234:	e008      	b.n	800d248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	6211      	str	r1, [r2, #32]
 800d240:	781a      	ldrb	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29b      	uxth	r3, r3
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	4619      	mov	r1, r3
 800d256:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10f      	bne.n	800d27c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68da      	ldr	r2, [r3, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d26a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68da      	ldr	r2, [r3, #12]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d27a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	e000      	b.n	800d282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d280:	2302      	movs	r3, #2
  }
}
 800d282:	4618      	mov	r0, r3
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d2a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff fca8 	bl	800cc04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b08c      	sub	sp, #48	@ 0x30
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	2b22      	cmp	r3, #34	@ 0x22
 800d2d0:	f040 80ae 	bne.w	800d430 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2dc:	d117      	bne.n	800d30e <UART_Receive_IT+0x50>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d113      	bne.n	800d30e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d306:	1c9a      	adds	r2, r3, #2
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d30c:	e026      	b.n	800d35c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d314:	2300      	movs	r3, #0
 800d316:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d320:	d007      	beq.n	800d332 <UART_Receive_IT+0x74>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <UART_Receive_IT+0x82>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	e008      	b.n	800d352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d360:	b29b      	uxth	r3, r3
 800d362:	3b01      	subs	r3, #1
 800d364:	b29b      	uxth	r3, r3
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	4619      	mov	r1, r3
 800d36a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d15d      	bne.n	800d42c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f022 0220 	bic.w	r2, r2, #32
 800d37e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d38e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	695a      	ldr	r2, [r3, #20]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f022 0201 	bic.w	r2, r2, #1
 800d39e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2220      	movs	r2, #32
 800d3a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d135      	bne.n	800d422 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	330c      	adds	r3, #12
 800d3c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f023 0310 	bic.w	r3, r3, #16
 800d3d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	330c      	adds	r3, #12
 800d3da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3dc:	623a      	str	r2, [r7, #32]
 800d3de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	69f9      	ldr	r1, [r7, #28]
 800d3e2:	6a3a      	ldr	r2, [r7, #32]
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e5      	bne.n	800d3bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0310 	and.w	r3, r3, #16
 800d3fa:	2b10      	cmp	r3, #16
 800d3fc:	d10a      	bne.n	800d414 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	60fb      	str	r3, [r7, #12]
 800d412:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7ff fc10 	bl	800cc40 <HAL_UARTEx_RxEventCallback>
 800d420:	e002      	b.n	800d428 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7f7 f8de 	bl	80045e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	e002      	b.n	800d432 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	e000      	b.n	800d432 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d430:	2302      	movs	r3, #2
  }
}
 800d432:	4618      	mov	r0, r3
 800d434:	3730      	adds	r7, #48	@ 0x30
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d43c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d440:	b0c0      	sub	sp, #256	@ 0x100
 800d442:	af00      	add	r7, sp, #0
 800d444:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d458:	68d9      	ldr	r1, [r3, #12]
 800d45a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	ea40 0301 	orr.w	r3, r0, r1
 800d464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	431a      	orrs	r2, r3
 800d474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	4313      	orrs	r3, r2
 800d484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d494:	f021 010c 	bic.w	r1, r1, #12
 800d498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d4a2:	430b      	orrs	r3, r1
 800d4a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4b6:	6999      	ldr	r1, [r3, #24]
 800d4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	ea40 0301 	orr.w	r3, r0, r1
 800d4c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	4b8f      	ldr	r3, [pc, #572]	@ (800d708 <UART_SetConfig+0x2cc>)
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d005      	beq.n	800d4dc <UART_SetConfig+0xa0>
 800d4d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	4b8d      	ldr	r3, [pc, #564]	@ (800d70c <UART_SetConfig+0x2d0>)
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d104      	bne.n	800d4e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4dc:	f7fe f864 	bl	800b5a8 <HAL_RCC_GetPCLK2Freq>
 800d4e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d4e4:	e003      	b.n	800d4ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d4e6:	f7fe f84b 	bl	800b580 <HAL_RCC_GetPCLK1Freq>
 800d4ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4f8:	f040 810c 	bne.w	800d714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d500:	2200      	movs	r2, #0
 800d502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d506:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d50a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d50e:	4622      	mov	r2, r4
 800d510:	462b      	mov	r3, r5
 800d512:	1891      	adds	r1, r2, r2
 800d514:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d516:	415b      	adcs	r3, r3
 800d518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d51a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d51e:	4621      	mov	r1, r4
 800d520:	eb12 0801 	adds.w	r8, r2, r1
 800d524:	4629      	mov	r1, r5
 800d526:	eb43 0901 	adc.w	r9, r3, r1
 800d52a:	f04f 0200 	mov.w	r2, #0
 800d52e:	f04f 0300 	mov.w	r3, #0
 800d532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d53a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d53e:	4690      	mov	r8, r2
 800d540:	4699      	mov	r9, r3
 800d542:	4623      	mov	r3, r4
 800d544:	eb18 0303 	adds.w	r3, r8, r3
 800d548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d54c:	462b      	mov	r3, r5
 800d54e:	eb49 0303 	adc.w	r3, r9, r3
 800d552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d562:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d56a:	460b      	mov	r3, r1
 800d56c:	18db      	adds	r3, r3, r3
 800d56e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d570:	4613      	mov	r3, r2
 800d572:	eb42 0303 	adc.w	r3, r2, r3
 800d576:	657b      	str	r3, [r7, #84]	@ 0x54
 800d578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d57c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d580:	f7f3 fb92 	bl	8000ca8 <__aeabi_uldivmod>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4b61      	ldr	r3, [pc, #388]	@ (800d710 <UART_SetConfig+0x2d4>)
 800d58a:	fba3 2302 	umull	r2, r3, r3, r2
 800d58e:	095b      	lsrs	r3, r3, #5
 800d590:	011c      	lsls	r4, r3, #4
 800d592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d596:	2200      	movs	r2, #0
 800d598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d59c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d5a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d5a4:	4642      	mov	r2, r8
 800d5a6:	464b      	mov	r3, r9
 800d5a8:	1891      	adds	r1, r2, r2
 800d5aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d5ac:	415b      	adcs	r3, r3
 800d5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	eb12 0a01 	adds.w	sl, r2, r1
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	eb43 0b01 	adc.w	fp, r3, r1
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	f04f 0300 	mov.w	r3, #0
 800d5c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d5cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d5d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5d4:	4692      	mov	sl, r2
 800d5d6:	469b      	mov	fp, r3
 800d5d8:	4643      	mov	r3, r8
 800d5da:	eb1a 0303 	adds.w	r3, sl, r3
 800d5de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	eb4b 0303 	adc.w	r3, fp, r3
 800d5e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d5fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d600:	460b      	mov	r3, r1
 800d602:	18db      	adds	r3, r3, r3
 800d604:	643b      	str	r3, [r7, #64]	@ 0x40
 800d606:	4613      	mov	r3, r2
 800d608:	eb42 0303 	adc.w	r3, r2, r3
 800d60c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d60e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d616:	f7f3 fb47 	bl	8000ca8 <__aeabi_uldivmod>
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	4611      	mov	r1, r2
 800d620:	4b3b      	ldr	r3, [pc, #236]	@ (800d710 <UART_SetConfig+0x2d4>)
 800d622:	fba3 2301 	umull	r2, r3, r3, r1
 800d626:	095b      	lsrs	r3, r3, #5
 800d628:	2264      	movs	r2, #100	@ 0x64
 800d62a:	fb02 f303 	mul.w	r3, r2, r3
 800d62e:	1acb      	subs	r3, r1, r3
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d636:	4b36      	ldr	r3, [pc, #216]	@ (800d710 <UART_SetConfig+0x2d4>)
 800d638:	fba3 2302 	umull	r2, r3, r3, r2
 800d63c:	095b      	lsrs	r3, r3, #5
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d644:	441c      	add	r4, r3
 800d646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d650:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d658:	4642      	mov	r2, r8
 800d65a:	464b      	mov	r3, r9
 800d65c:	1891      	adds	r1, r2, r2
 800d65e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d660:	415b      	adcs	r3, r3
 800d662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d668:	4641      	mov	r1, r8
 800d66a:	1851      	adds	r1, r2, r1
 800d66c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d66e:	4649      	mov	r1, r9
 800d670:	414b      	adcs	r3, r1
 800d672:	637b      	str	r3, [r7, #52]	@ 0x34
 800d674:	f04f 0200 	mov.w	r2, #0
 800d678:	f04f 0300 	mov.w	r3, #0
 800d67c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d680:	4659      	mov	r1, fp
 800d682:	00cb      	lsls	r3, r1, #3
 800d684:	4651      	mov	r1, sl
 800d686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d68a:	4651      	mov	r1, sl
 800d68c:	00ca      	lsls	r2, r1, #3
 800d68e:	4610      	mov	r0, r2
 800d690:	4619      	mov	r1, r3
 800d692:	4603      	mov	r3, r0
 800d694:	4642      	mov	r2, r8
 800d696:	189b      	adds	r3, r3, r2
 800d698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d69c:	464b      	mov	r3, r9
 800d69e:	460a      	mov	r2, r1
 800d6a0:	eb42 0303 	adc.w	r3, r2, r3
 800d6a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d6b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d6b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d6bc:	460b      	mov	r3, r1
 800d6be:	18db      	adds	r3, r3, r3
 800d6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	eb42 0303 	adc.w	r3, r2, r3
 800d6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d6ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d6d2:	f7f3 fae9 	bl	8000ca8 <__aeabi_uldivmod>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4b0d      	ldr	r3, [pc, #52]	@ (800d710 <UART_SetConfig+0x2d4>)
 800d6dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d6e0:	095b      	lsrs	r3, r3, #5
 800d6e2:	2164      	movs	r1, #100	@ 0x64
 800d6e4:	fb01 f303 	mul.w	r3, r1, r3
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	3332      	adds	r3, #50	@ 0x32
 800d6ee:	4a08      	ldr	r2, [pc, #32]	@ (800d710 <UART_SetConfig+0x2d4>)
 800d6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f4:	095b      	lsrs	r3, r3, #5
 800d6f6:	f003 0207 	and.w	r2, r3, #7
 800d6fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4422      	add	r2, r4
 800d702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d704:	e106      	b.n	800d914 <UART_SetConfig+0x4d8>
 800d706:	bf00      	nop
 800d708:	40011000 	.word	0x40011000
 800d70c:	40011400 	.word	0x40011400
 800d710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d718:	2200      	movs	r2, #0
 800d71a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d71e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d726:	4642      	mov	r2, r8
 800d728:	464b      	mov	r3, r9
 800d72a:	1891      	adds	r1, r2, r2
 800d72c:	6239      	str	r1, [r7, #32]
 800d72e:	415b      	adcs	r3, r3
 800d730:	627b      	str	r3, [r7, #36]	@ 0x24
 800d732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d736:	4641      	mov	r1, r8
 800d738:	1854      	adds	r4, r2, r1
 800d73a:	4649      	mov	r1, r9
 800d73c:	eb43 0501 	adc.w	r5, r3, r1
 800d740:	f04f 0200 	mov.w	r2, #0
 800d744:	f04f 0300 	mov.w	r3, #0
 800d748:	00eb      	lsls	r3, r5, #3
 800d74a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d74e:	00e2      	lsls	r2, r4, #3
 800d750:	4614      	mov	r4, r2
 800d752:	461d      	mov	r5, r3
 800d754:	4643      	mov	r3, r8
 800d756:	18e3      	adds	r3, r4, r3
 800d758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d75c:	464b      	mov	r3, r9
 800d75e:	eb45 0303 	adc.w	r3, r5, r3
 800d762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d776:	f04f 0200 	mov.w	r2, #0
 800d77a:	f04f 0300 	mov.w	r3, #0
 800d77e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d782:	4629      	mov	r1, r5
 800d784:	008b      	lsls	r3, r1, #2
 800d786:	4621      	mov	r1, r4
 800d788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d78c:	4621      	mov	r1, r4
 800d78e:	008a      	lsls	r2, r1, #2
 800d790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d794:	f7f3 fa88 	bl	8000ca8 <__aeabi_uldivmod>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4b60      	ldr	r3, [pc, #384]	@ (800d920 <UART_SetConfig+0x4e4>)
 800d79e:	fba3 2302 	umull	r2, r3, r3, r2
 800d7a2:	095b      	lsrs	r3, r3, #5
 800d7a4:	011c      	lsls	r4, r3, #4
 800d7a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d7b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d7b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d7b8:	4642      	mov	r2, r8
 800d7ba:	464b      	mov	r3, r9
 800d7bc:	1891      	adds	r1, r2, r2
 800d7be:	61b9      	str	r1, [r7, #24]
 800d7c0:	415b      	adcs	r3, r3
 800d7c2:	61fb      	str	r3, [r7, #28]
 800d7c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d7c8:	4641      	mov	r1, r8
 800d7ca:	1851      	adds	r1, r2, r1
 800d7cc:	6139      	str	r1, [r7, #16]
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	414b      	adcs	r3, r1
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d7e0:	4659      	mov	r1, fp
 800d7e2:	00cb      	lsls	r3, r1, #3
 800d7e4:	4651      	mov	r1, sl
 800d7e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d7ea:	4651      	mov	r1, sl
 800d7ec:	00ca      	lsls	r2, r1, #3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	4642      	mov	r2, r8
 800d7f6:	189b      	adds	r3, r3, r2
 800d7f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d7fc:	464b      	mov	r3, r9
 800d7fe:	460a      	mov	r2, r1
 800d800:	eb42 0303 	adc.w	r3, r2, r3
 800d804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d812:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	f04f 0300 	mov.w	r3, #0
 800d81c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d820:	4649      	mov	r1, r9
 800d822:	008b      	lsls	r3, r1, #2
 800d824:	4641      	mov	r1, r8
 800d826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d82a:	4641      	mov	r1, r8
 800d82c:	008a      	lsls	r2, r1, #2
 800d82e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d832:	f7f3 fa39 	bl	8000ca8 <__aeabi_uldivmod>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	4611      	mov	r1, r2
 800d83c:	4b38      	ldr	r3, [pc, #224]	@ (800d920 <UART_SetConfig+0x4e4>)
 800d83e:	fba3 2301 	umull	r2, r3, r3, r1
 800d842:	095b      	lsrs	r3, r3, #5
 800d844:	2264      	movs	r2, #100	@ 0x64
 800d846:	fb02 f303 	mul.w	r3, r2, r3
 800d84a:	1acb      	subs	r3, r1, r3
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	3332      	adds	r3, #50	@ 0x32
 800d850:	4a33      	ldr	r2, [pc, #204]	@ (800d920 <UART_SetConfig+0x4e4>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	095b      	lsrs	r3, r3, #5
 800d858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d85c:	441c      	add	r4, r3
 800d85e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d862:	2200      	movs	r2, #0
 800d864:	673b      	str	r3, [r7, #112]	@ 0x70
 800d866:	677a      	str	r2, [r7, #116]	@ 0x74
 800d868:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d86c:	4642      	mov	r2, r8
 800d86e:	464b      	mov	r3, r9
 800d870:	1891      	adds	r1, r2, r2
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	415b      	adcs	r3, r3
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d87c:	4641      	mov	r1, r8
 800d87e:	1851      	adds	r1, r2, r1
 800d880:	6039      	str	r1, [r7, #0]
 800d882:	4649      	mov	r1, r9
 800d884:	414b      	adcs	r3, r1
 800d886:	607b      	str	r3, [r7, #4]
 800d888:	f04f 0200 	mov.w	r2, #0
 800d88c:	f04f 0300 	mov.w	r3, #0
 800d890:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d894:	4659      	mov	r1, fp
 800d896:	00cb      	lsls	r3, r1, #3
 800d898:	4651      	mov	r1, sl
 800d89a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d89e:	4651      	mov	r1, sl
 800d8a0:	00ca      	lsls	r2, r1, #3
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	189b      	adds	r3, r3, r2
 800d8ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8ae:	464b      	mov	r3, r9
 800d8b0:	460a      	mov	r2, r1
 800d8b2:	eb42 0303 	adc.w	r3, r2, r3
 800d8b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8c2:	667a      	str	r2, [r7, #100]	@ 0x64
 800d8c4:	f04f 0200 	mov.w	r2, #0
 800d8c8:	f04f 0300 	mov.w	r3, #0
 800d8cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	008b      	lsls	r3, r1, #2
 800d8d4:	4641      	mov	r1, r8
 800d8d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8da:	4641      	mov	r1, r8
 800d8dc:	008a      	lsls	r2, r1, #2
 800d8de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d8e2:	f7f3 f9e1 	bl	8000ca8 <__aeabi_uldivmod>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <UART_SetConfig+0x4e4>)
 800d8ec:	fba3 1302 	umull	r1, r3, r3, r2
 800d8f0:	095b      	lsrs	r3, r3, #5
 800d8f2:	2164      	movs	r1, #100	@ 0x64
 800d8f4:	fb01 f303 	mul.w	r3, r1, r3
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	011b      	lsls	r3, r3, #4
 800d8fc:	3332      	adds	r3, #50	@ 0x32
 800d8fe:	4a08      	ldr	r2, [pc, #32]	@ (800d920 <UART_SetConfig+0x4e4>)
 800d900:	fba2 2303 	umull	r2, r3, r2, r3
 800d904:	095b      	lsrs	r3, r3, #5
 800d906:	f003 020f 	and.w	r2, r3, #15
 800d90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4422      	add	r2, r4
 800d912:	609a      	str	r2, [r3, #8]
}
 800d914:	bf00      	nop
 800d916:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d91a:	46bd      	mov	sp, r7
 800d91c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d920:	51eb851f 	.word	0x51eb851f

0800d924 <atof>:
 800d924:	2100      	movs	r1, #0
 800d926:	f000 befd 	b.w	800e724 <strtod>
	...

0800d92c <malloc>:
 800d92c:	4b02      	ldr	r3, [pc, #8]	@ (800d938 <malloc+0xc>)
 800d92e:	4601      	mov	r1, r0
 800d930:	6818      	ldr	r0, [r3, #0]
 800d932:	f000 b82d 	b.w	800d990 <_malloc_r>
 800d936:	bf00      	nop
 800d938:	20000194 	.word	0x20000194

0800d93c <free>:
 800d93c:	4b02      	ldr	r3, [pc, #8]	@ (800d948 <free+0xc>)
 800d93e:	4601      	mov	r1, r0
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f002 bf69 	b.w	8010818 <_free_r>
 800d946:	bf00      	nop
 800d948:	20000194 	.word	0x20000194

0800d94c <sbrk_aligned>:
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	4e0f      	ldr	r6, [pc, #60]	@ (800d98c <sbrk_aligned+0x40>)
 800d950:	460c      	mov	r4, r1
 800d952:	6831      	ldr	r1, [r6, #0]
 800d954:	4605      	mov	r5, r0
 800d956:	b911      	cbnz	r1, 800d95e <sbrk_aligned+0x12>
 800d958:	f002 f888 	bl	800fa6c <_sbrk_r>
 800d95c:	6030      	str	r0, [r6, #0]
 800d95e:	4621      	mov	r1, r4
 800d960:	4628      	mov	r0, r5
 800d962:	f002 f883 	bl	800fa6c <_sbrk_r>
 800d966:	1c43      	adds	r3, r0, #1
 800d968:	d103      	bne.n	800d972 <sbrk_aligned+0x26>
 800d96a:	f04f 34ff 	mov.w	r4, #4294967295
 800d96e:	4620      	mov	r0, r4
 800d970:	bd70      	pop	{r4, r5, r6, pc}
 800d972:	1cc4      	adds	r4, r0, #3
 800d974:	f024 0403 	bic.w	r4, r4, #3
 800d978:	42a0      	cmp	r0, r4
 800d97a:	d0f8      	beq.n	800d96e <sbrk_aligned+0x22>
 800d97c:	1a21      	subs	r1, r4, r0
 800d97e:	4628      	mov	r0, r5
 800d980:	f002 f874 	bl	800fa6c <_sbrk_r>
 800d984:	3001      	adds	r0, #1
 800d986:	d1f2      	bne.n	800d96e <sbrk_aligned+0x22>
 800d988:	e7ef      	b.n	800d96a <sbrk_aligned+0x1e>
 800d98a:	bf00      	nop
 800d98c:	20000e9c 	.word	0x20000e9c

0800d990 <_malloc_r>:
 800d990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d994:	1ccd      	adds	r5, r1, #3
 800d996:	f025 0503 	bic.w	r5, r5, #3
 800d99a:	3508      	adds	r5, #8
 800d99c:	2d0c      	cmp	r5, #12
 800d99e:	bf38      	it	cc
 800d9a0:	250c      	movcc	r5, #12
 800d9a2:	2d00      	cmp	r5, #0
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	db01      	blt.n	800d9ac <_malloc_r+0x1c>
 800d9a8:	42a9      	cmp	r1, r5
 800d9aa:	d904      	bls.n	800d9b6 <_malloc_r+0x26>
 800d9ac:	230c      	movs	r3, #12
 800d9ae:	6033      	str	r3, [r6, #0]
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da8c <_malloc_r+0xfc>
 800d9ba:	f000 f869 	bl	800da90 <__malloc_lock>
 800d9be:	f8d8 3000 	ldr.w	r3, [r8]
 800d9c2:	461c      	mov	r4, r3
 800d9c4:	bb44      	cbnz	r4, 800da18 <_malloc_r+0x88>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7ff ffbf 	bl	800d94c <sbrk_aligned>
 800d9ce:	1c43      	adds	r3, r0, #1
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	d158      	bne.n	800da86 <_malloc_r+0xf6>
 800d9d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d9d8:	4627      	mov	r7, r4
 800d9da:	2f00      	cmp	r7, #0
 800d9dc:	d143      	bne.n	800da66 <_malloc_r+0xd6>
 800d9de:	2c00      	cmp	r4, #0
 800d9e0:	d04b      	beq.n	800da7a <_malloc_r+0xea>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	eb04 0903 	add.w	r9, r4, r3
 800d9ec:	f002 f83e 	bl	800fa6c <_sbrk_r>
 800d9f0:	4581      	cmp	r9, r0
 800d9f2:	d142      	bne.n	800da7a <_malloc_r+0xea>
 800d9f4:	6821      	ldr	r1, [r4, #0]
 800d9f6:	1a6d      	subs	r5, r5, r1
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f7ff ffa6 	bl	800d94c <sbrk_aligned>
 800da00:	3001      	adds	r0, #1
 800da02:	d03a      	beq.n	800da7a <_malloc_r+0xea>
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	442b      	add	r3, r5
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	f8d8 3000 	ldr.w	r3, [r8]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	bb62      	cbnz	r2, 800da6c <_malloc_r+0xdc>
 800da12:	f8c8 7000 	str.w	r7, [r8]
 800da16:	e00f      	b.n	800da38 <_malloc_r+0xa8>
 800da18:	6822      	ldr	r2, [r4, #0]
 800da1a:	1b52      	subs	r2, r2, r5
 800da1c:	d420      	bmi.n	800da60 <_malloc_r+0xd0>
 800da1e:	2a0b      	cmp	r2, #11
 800da20:	d917      	bls.n	800da52 <_malloc_r+0xc2>
 800da22:	1961      	adds	r1, r4, r5
 800da24:	42a3      	cmp	r3, r4
 800da26:	6025      	str	r5, [r4, #0]
 800da28:	bf18      	it	ne
 800da2a:	6059      	strne	r1, [r3, #4]
 800da2c:	6863      	ldr	r3, [r4, #4]
 800da2e:	bf08      	it	eq
 800da30:	f8c8 1000 	streq.w	r1, [r8]
 800da34:	5162      	str	r2, [r4, r5]
 800da36:	604b      	str	r3, [r1, #4]
 800da38:	4630      	mov	r0, r6
 800da3a:	f000 f82f 	bl	800da9c <__malloc_unlock>
 800da3e:	f104 000b 	add.w	r0, r4, #11
 800da42:	1d23      	adds	r3, r4, #4
 800da44:	f020 0007 	bic.w	r0, r0, #7
 800da48:	1ac2      	subs	r2, r0, r3
 800da4a:	bf1c      	itt	ne
 800da4c:	1a1b      	subne	r3, r3, r0
 800da4e:	50a3      	strne	r3, [r4, r2]
 800da50:	e7af      	b.n	800d9b2 <_malloc_r+0x22>
 800da52:	6862      	ldr	r2, [r4, #4]
 800da54:	42a3      	cmp	r3, r4
 800da56:	bf0c      	ite	eq
 800da58:	f8c8 2000 	streq.w	r2, [r8]
 800da5c:	605a      	strne	r2, [r3, #4]
 800da5e:	e7eb      	b.n	800da38 <_malloc_r+0xa8>
 800da60:	4623      	mov	r3, r4
 800da62:	6864      	ldr	r4, [r4, #4]
 800da64:	e7ae      	b.n	800d9c4 <_malloc_r+0x34>
 800da66:	463c      	mov	r4, r7
 800da68:	687f      	ldr	r7, [r7, #4]
 800da6a:	e7b6      	b.n	800d9da <_malloc_r+0x4a>
 800da6c:	461a      	mov	r2, r3
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	42a3      	cmp	r3, r4
 800da72:	d1fb      	bne.n	800da6c <_malloc_r+0xdc>
 800da74:	2300      	movs	r3, #0
 800da76:	6053      	str	r3, [r2, #4]
 800da78:	e7de      	b.n	800da38 <_malloc_r+0xa8>
 800da7a:	230c      	movs	r3, #12
 800da7c:	6033      	str	r3, [r6, #0]
 800da7e:	4630      	mov	r0, r6
 800da80:	f000 f80c 	bl	800da9c <__malloc_unlock>
 800da84:	e794      	b.n	800d9b0 <_malloc_r+0x20>
 800da86:	6005      	str	r5, [r0, #0]
 800da88:	e7d6      	b.n	800da38 <_malloc_r+0xa8>
 800da8a:	bf00      	nop
 800da8c:	20000ea0 	.word	0x20000ea0

0800da90 <__malloc_lock>:
 800da90:	4801      	ldr	r0, [pc, #4]	@ (800da98 <__malloc_lock+0x8>)
 800da92:	f002 b838 	b.w	800fb06 <__retarget_lock_acquire_recursive>
 800da96:	bf00      	nop
 800da98:	20000fe4 	.word	0x20000fe4

0800da9c <__malloc_unlock>:
 800da9c:	4801      	ldr	r0, [pc, #4]	@ (800daa4 <__malloc_unlock+0x8>)
 800da9e:	f002 b833 	b.w	800fb08 <__retarget_lock_release_recursive>
 800daa2:	bf00      	nop
 800daa4:	20000fe4 	.word	0x20000fe4

0800daa8 <realloc>:
 800daa8:	4b02      	ldr	r3, [pc, #8]	@ (800dab4 <realloc+0xc>)
 800daaa:	460a      	mov	r2, r1
 800daac:	4601      	mov	r1, r0
 800daae:	6818      	ldr	r0, [r3, #0]
 800dab0:	f000 b802 	b.w	800dab8 <_realloc_r>
 800dab4:	20000194 	.word	0x20000194

0800dab8 <_realloc_r>:
 800dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dabc:	4680      	mov	r8, r0
 800dabe:	4615      	mov	r5, r2
 800dac0:	460c      	mov	r4, r1
 800dac2:	b921      	cbnz	r1, 800dace <_realloc_r+0x16>
 800dac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac8:	4611      	mov	r1, r2
 800daca:	f7ff bf61 	b.w	800d990 <_malloc_r>
 800dace:	b92a      	cbnz	r2, 800dadc <_realloc_r+0x24>
 800dad0:	f002 fea2 	bl	8010818 <_free_r>
 800dad4:	2400      	movs	r4, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dadc:	f003 fee4 	bl	80118a8 <_malloc_usable_size_r>
 800dae0:	4285      	cmp	r5, r0
 800dae2:	4606      	mov	r6, r0
 800dae4:	d802      	bhi.n	800daec <_realloc_r+0x34>
 800dae6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800daea:	d8f4      	bhi.n	800dad6 <_realloc_r+0x1e>
 800daec:	4629      	mov	r1, r5
 800daee:	4640      	mov	r0, r8
 800daf0:	f7ff ff4e 	bl	800d990 <_malloc_r>
 800daf4:	4607      	mov	r7, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d0ec      	beq.n	800dad4 <_realloc_r+0x1c>
 800dafa:	42b5      	cmp	r5, r6
 800dafc:	462a      	mov	r2, r5
 800dafe:	4621      	mov	r1, r4
 800db00:	bf28      	it	cs
 800db02:	4632      	movcs	r2, r6
 800db04:	f002 f801 	bl	800fb0a <memcpy>
 800db08:	4621      	mov	r1, r4
 800db0a:	4640      	mov	r0, r8
 800db0c:	f002 fe84 	bl	8010818 <_free_r>
 800db10:	463c      	mov	r4, r7
 800db12:	e7e0      	b.n	800dad6 <_realloc_r+0x1e>

0800db14 <sulp>:
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	4604      	mov	r4, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	ec45 4b10 	vmov	d0, r4, r5
 800db1e:	4616      	mov	r6, r2
 800db20:	f003 fd84 	bl	801162c <__ulp>
 800db24:	ec51 0b10 	vmov	r0, r1, d0
 800db28:	b17e      	cbz	r6, 800db4a <sulp+0x36>
 800db2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800db2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800db32:	2b00      	cmp	r3, #0
 800db34:	dd09      	ble.n	800db4a <sulp+0x36>
 800db36:	051b      	lsls	r3, r3, #20
 800db38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800db3c:	2400      	movs	r4, #0
 800db3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800db42:	4622      	mov	r2, r4
 800db44:	462b      	mov	r3, r5
 800db46:	f7f2 fd67 	bl	8000618 <__aeabi_dmul>
 800db4a:	ec41 0b10 	vmov	d0, r0, r1
 800db4e:	bd70      	pop	{r4, r5, r6, pc}

0800db50 <_strtod_l>:
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	b09f      	sub	sp, #124	@ 0x7c
 800db56:	460c      	mov	r4, r1
 800db58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800db5a:	2200      	movs	r2, #0
 800db5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800db5e:	9005      	str	r0, [sp, #20]
 800db60:	f04f 0a00 	mov.w	sl, #0
 800db64:	f04f 0b00 	mov.w	fp, #0
 800db68:	460a      	mov	r2, r1
 800db6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800db6c:	7811      	ldrb	r1, [r2, #0]
 800db6e:	292b      	cmp	r1, #43	@ 0x2b
 800db70:	d04a      	beq.n	800dc08 <_strtod_l+0xb8>
 800db72:	d838      	bhi.n	800dbe6 <_strtod_l+0x96>
 800db74:	290d      	cmp	r1, #13
 800db76:	d832      	bhi.n	800dbde <_strtod_l+0x8e>
 800db78:	2908      	cmp	r1, #8
 800db7a:	d832      	bhi.n	800dbe2 <_strtod_l+0x92>
 800db7c:	2900      	cmp	r1, #0
 800db7e:	d03b      	beq.n	800dbf8 <_strtod_l+0xa8>
 800db80:	2200      	movs	r2, #0
 800db82:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800db86:	782a      	ldrb	r2, [r5, #0]
 800db88:	2a30      	cmp	r2, #48	@ 0x30
 800db8a:	f040 80b3 	bne.w	800dcf4 <_strtod_l+0x1a4>
 800db8e:	786a      	ldrb	r2, [r5, #1]
 800db90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db94:	2a58      	cmp	r2, #88	@ 0x58
 800db96:	d16e      	bne.n	800dc76 <_strtod_l+0x126>
 800db98:	9302      	str	r3, [sp, #8]
 800db9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	4a8e      	ldr	r2, [pc, #568]	@ (800dddc <_strtod_l+0x28c>)
 800dba4:	9805      	ldr	r0, [sp, #20]
 800dba6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dba8:	a919      	add	r1, sp, #100	@ 0x64
 800dbaa:	f002 fee7 	bl	801097c <__gethex>
 800dbae:	f010 060f 	ands.w	r6, r0, #15
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	d005      	beq.n	800dbc2 <_strtod_l+0x72>
 800dbb6:	2e06      	cmp	r6, #6
 800dbb8:	d128      	bne.n	800dc0c <_strtod_l+0xbc>
 800dbba:	3501      	adds	r5, #1
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9519      	str	r5, [sp, #100]	@ 0x64
 800dbc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f040 858e 	bne.w	800e6e6 <_strtod_l+0xb96>
 800dbca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbcc:	b1cb      	cbz	r3, 800dc02 <_strtod_l+0xb2>
 800dbce:	4652      	mov	r2, sl
 800dbd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dbd4:	ec43 2b10 	vmov	d0, r2, r3
 800dbd8:	b01f      	add	sp, #124	@ 0x7c
 800dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbde:	2920      	cmp	r1, #32
 800dbe0:	d1ce      	bne.n	800db80 <_strtod_l+0x30>
 800dbe2:	3201      	adds	r2, #1
 800dbe4:	e7c1      	b.n	800db6a <_strtod_l+0x1a>
 800dbe6:	292d      	cmp	r1, #45	@ 0x2d
 800dbe8:	d1ca      	bne.n	800db80 <_strtod_l+0x30>
 800dbea:	2101      	movs	r1, #1
 800dbec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dbee:	1c51      	adds	r1, r2, #1
 800dbf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dbf2:	7852      	ldrb	r2, [r2, #1]
 800dbf4:	2a00      	cmp	r2, #0
 800dbf6:	d1c5      	bne.n	800db84 <_strtod_l+0x34>
 800dbf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dbfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 8570 	bne.w	800e6e2 <_strtod_l+0xb92>
 800dc02:	4652      	mov	r2, sl
 800dc04:	465b      	mov	r3, fp
 800dc06:	e7e5      	b.n	800dbd4 <_strtod_l+0x84>
 800dc08:	2100      	movs	r1, #0
 800dc0a:	e7ef      	b.n	800dbec <_strtod_l+0x9c>
 800dc0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc0e:	b13a      	cbz	r2, 800dc20 <_strtod_l+0xd0>
 800dc10:	2135      	movs	r1, #53	@ 0x35
 800dc12:	a81c      	add	r0, sp, #112	@ 0x70
 800dc14:	f003 fe04 	bl	8011820 <__copybits>
 800dc18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc1a:	9805      	ldr	r0, [sp, #20]
 800dc1c:	f003 f9d2 	bl	8010fc4 <_Bfree>
 800dc20:	3e01      	subs	r6, #1
 800dc22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dc24:	2e04      	cmp	r6, #4
 800dc26:	d806      	bhi.n	800dc36 <_strtod_l+0xe6>
 800dc28:	e8df f006 	tbb	[pc, r6]
 800dc2c:	201d0314 	.word	0x201d0314
 800dc30:	14          	.byte	0x14
 800dc31:	00          	.byte	0x00
 800dc32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dc36:	05e1      	lsls	r1, r4, #23
 800dc38:	bf48      	it	mi
 800dc3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dc3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc42:	0d1b      	lsrs	r3, r3, #20
 800dc44:	051b      	lsls	r3, r3, #20
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1bb      	bne.n	800dbc2 <_strtod_l+0x72>
 800dc4a:	f001 ff31 	bl	800fab0 <__errno>
 800dc4e:	2322      	movs	r3, #34	@ 0x22
 800dc50:	6003      	str	r3, [r0, #0]
 800dc52:	e7b6      	b.n	800dbc2 <_strtod_l+0x72>
 800dc54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dc58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dc5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dc60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dc64:	e7e7      	b.n	800dc36 <_strtod_l+0xe6>
 800dc66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dde4 <_strtod_l+0x294>
 800dc6a:	e7e4      	b.n	800dc36 <_strtod_l+0xe6>
 800dc6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dc70:	f04f 3aff 	mov.w	sl, #4294967295
 800dc74:	e7df      	b.n	800dc36 <_strtod_l+0xe6>
 800dc76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc7c:	785b      	ldrb	r3, [r3, #1]
 800dc7e:	2b30      	cmp	r3, #48	@ 0x30
 800dc80:	d0f9      	beq.n	800dc76 <_strtod_l+0x126>
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d09d      	beq.n	800dbc2 <_strtod_l+0x72>
 800dc86:	2301      	movs	r3, #1
 800dc88:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9308      	str	r3, [sp, #32]
 800dc92:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc94:	461f      	mov	r7, r3
 800dc96:	220a      	movs	r2, #10
 800dc98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dc9a:	7805      	ldrb	r5, [r0, #0]
 800dc9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dca0:	b2d9      	uxtb	r1, r3
 800dca2:	2909      	cmp	r1, #9
 800dca4:	d928      	bls.n	800dcf8 <_strtod_l+0x1a8>
 800dca6:	494e      	ldr	r1, [pc, #312]	@ (800dde0 <_strtod_l+0x290>)
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f001 fe23 	bl	800f8f4 <strncmp>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d032      	beq.n	800dd18 <_strtod_l+0x1c8>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	462a      	mov	r2, r5
 800dcb6:	4681      	mov	r9, r0
 800dcb8:	463d      	mov	r5, r7
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2a65      	cmp	r2, #101	@ 0x65
 800dcbe:	d001      	beq.n	800dcc4 <_strtod_l+0x174>
 800dcc0:	2a45      	cmp	r2, #69	@ 0x45
 800dcc2:	d114      	bne.n	800dcee <_strtod_l+0x19e>
 800dcc4:	b91d      	cbnz	r5, 800dcce <_strtod_l+0x17e>
 800dcc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcc8:	4302      	orrs	r2, r0
 800dcca:	d095      	beq.n	800dbf8 <_strtod_l+0xa8>
 800dccc:	2500      	movs	r5, #0
 800dcce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dcd0:	1c62      	adds	r2, r4, #1
 800dcd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcd4:	7862      	ldrb	r2, [r4, #1]
 800dcd6:	2a2b      	cmp	r2, #43	@ 0x2b
 800dcd8:	d077      	beq.n	800ddca <_strtod_l+0x27a>
 800dcda:	2a2d      	cmp	r2, #45	@ 0x2d
 800dcdc:	d07b      	beq.n	800ddd6 <_strtod_l+0x286>
 800dcde:	f04f 0c00 	mov.w	ip, #0
 800dce2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dce6:	2909      	cmp	r1, #9
 800dce8:	f240 8082 	bls.w	800ddf0 <_strtod_l+0x2a0>
 800dcec:	9419      	str	r4, [sp, #100]	@ 0x64
 800dcee:	f04f 0800 	mov.w	r8, #0
 800dcf2:	e0a2      	b.n	800de3a <_strtod_l+0x2ea>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e7c7      	b.n	800dc88 <_strtod_l+0x138>
 800dcf8:	2f08      	cmp	r7, #8
 800dcfa:	bfd5      	itete	le
 800dcfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dcfe:	9908      	ldrgt	r1, [sp, #32]
 800dd00:	fb02 3301 	mlale	r3, r2, r1, r3
 800dd04:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dd08:	f100 0001 	add.w	r0, r0, #1
 800dd0c:	bfd4      	ite	le
 800dd0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dd10:	9308      	strgt	r3, [sp, #32]
 800dd12:	3701      	adds	r7, #1
 800dd14:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd16:	e7bf      	b.n	800dc98 <_strtod_l+0x148>
 800dd18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd1a:	1c5a      	adds	r2, r3, #1
 800dd1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd1e:	785a      	ldrb	r2, [r3, #1]
 800dd20:	b37f      	cbz	r7, 800dd82 <_strtod_l+0x232>
 800dd22:	4681      	mov	r9, r0
 800dd24:	463d      	mov	r5, r7
 800dd26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dd2a:	2b09      	cmp	r3, #9
 800dd2c:	d912      	bls.n	800dd54 <_strtod_l+0x204>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e7c4      	b.n	800dcbc <_strtod_l+0x16c>
 800dd32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd38:	785a      	ldrb	r2, [r3, #1]
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	2a30      	cmp	r2, #48	@ 0x30
 800dd3e:	d0f8      	beq.n	800dd32 <_strtod_l+0x1e2>
 800dd40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dd44:	2b08      	cmp	r3, #8
 800dd46:	f200 84d3 	bhi.w	800e6f0 <_strtod_l+0xba0>
 800dd4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd4e:	4681      	mov	r9, r0
 800dd50:	2000      	movs	r0, #0
 800dd52:	4605      	mov	r5, r0
 800dd54:	3a30      	subs	r2, #48	@ 0x30
 800dd56:	f100 0301 	add.w	r3, r0, #1
 800dd5a:	d02a      	beq.n	800ddb2 <_strtod_l+0x262>
 800dd5c:	4499      	add	r9, r3
 800dd5e:	eb00 0c05 	add.w	ip, r0, r5
 800dd62:	462b      	mov	r3, r5
 800dd64:	210a      	movs	r1, #10
 800dd66:	4563      	cmp	r3, ip
 800dd68:	d10d      	bne.n	800dd86 <_strtod_l+0x236>
 800dd6a:	1c69      	adds	r1, r5, #1
 800dd6c:	4401      	add	r1, r0
 800dd6e:	4428      	add	r0, r5
 800dd70:	2808      	cmp	r0, #8
 800dd72:	dc16      	bgt.n	800dda2 <_strtod_l+0x252>
 800dd74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dd76:	230a      	movs	r3, #10
 800dd78:	fb03 2300 	mla	r3, r3, r0, r2
 800dd7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e018      	b.n	800ddb4 <_strtod_l+0x264>
 800dd82:	4638      	mov	r0, r7
 800dd84:	e7da      	b.n	800dd3c <_strtod_l+0x1ec>
 800dd86:	2b08      	cmp	r3, #8
 800dd88:	f103 0301 	add.w	r3, r3, #1
 800dd8c:	dc03      	bgt.n	800dd96 <_strtod_l+0x246>
 800dd8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dd90:	434e      	muls	r6, r1
 800dd92:	960a      	str	r6, [sp, #40]	@ 0x28
 800dd94:	e7e7      	b.n	800dd66 <_strtod_l+0x216>
 800dd96:	2b10      	cmp	r3, #16
 800dd98:	bfde      	ittt	le
 800dd9a:	9e08      	ldrle	r6, [sp, #32]
 800dd9c:	434e      	mulle	r6, r1
 800dd9e:	9608      	strle	r6, [sp, #32]
 800dda0:	e7e1      	b.n	800dd66 <_strtod_l+0x216>
 800dda2:	280f      	cmp	r0, #15
 800dda4:	dceb      	bgt.n	800dd7e <_strtod_l+0x22e>
 800dda6:	9808      	ldr	r0, [sp, #32]
 800dda8:	230a      	movs	r3, #10
 800ddaa:	fb03 2300 	mla	r3, r3, r0, r2
 800ddae:	9308      	str	r3, [sp, #32]
 800ddb0:	e7e5      	b.n	800dd7e <_strtod_l+0x22e>
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ddb6:	1c50      	adds	r0, r2, #1
 800ddb8:	9019      	str	r0, [sp, #100]	@ 0x64
 800ddba:	7852      	ldrb	r2, [r2, #1]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	460d      	mov	r5, r1
 800ddc0:	e7b1      	b.n	800dd26 <_strtod_l+0x1d6>
 800ddc2:	f04f 0900 	mov.w	r9, #0
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e77d      	b.n	800dcc6 <_strtod_l+0x176>
 800ddca:	f04f 0c00 	mov.w	ip, #0
 800ddce:	1ca2      	adds	r2, r4, #2
 800ddd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ddd2:	78a2      	ldrb	r2, [r4, #2]
 800ddd4:	e785      	b.n	800dce2 <_strtod_l+0x192>
 800ddd6:	f04f 0c01 	mov.w	ip, #1
 800ddda:	e7f8      	b.n	800ddce <_strtod_l+0x27e>
 800dddc:	08015b00 	.word	0x08015b00
 800dde0:	08015ae8 	.word	0x08015ae8
 800dde4:	7ff00000 	.word	0x7ff00000
 800dde8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ddea:	1c51      	adds	r1, r2, #1
 800ddec:	9119      	str	r1, [sp, #100]	@ 0x64
 800ddee:	7852      	ldrb	r2, [r2, #1]
 800ddf0:	2a30      	cmp	r2, #48	@ 0x30
 800ddf2:	d0f9      	beq.n	800dde8 <_strtod_l+0x298>
 800ddf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ddf8:	2908      	cmp	r1, #8
 800ddfa:	f63f af78 	bhi.w	800dcee <_strtod_l+0x19e>
 800ddfe:	3a30      	subs	r2, #48	@ 0x30
 800de00:	920e      	str	r2, [sp, #56]	@ 0x38
 800de02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800de06:	f04f 080a 	mov.w	r8, #10
 800de0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800de0c:	1c56      	adds	r6, r2, #1
 800de0e:	9619      	str	r6, [sp, #100]	@ 0x64
 800de10:	7852      	ldrb	r2, [r2, #1]
 800de12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800de16:	f1be 0f09 	cmp.w	lr, #9
 800de1a:	d939      	bls.n	800de90 <_strtod_l+0x340>
 800de1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de1e:	1a76      	subs	r6, r6, r1
 800de20:	2e08      	cmp	r6, #8
 800de22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800de26:	dc03      	bgt.n	800de30 <_strtod_l+0x2e0>
 800de28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800de2a:	4588      	cmp	r8, r1
 800de2c:	bfa8      	it	ge
 800de2e:	4688      	movge	r8, r1
 800de30:	f1bc 0f00 	cmp.w	ip, #0
 800de34:	d001      	beq.n	800de3a <_strtod_l+0x2ea>
 800de36:	f1c8 0800 	rsb	r8, r8, #0
 800de3a:	2d00      	cmp	r5, #0
 800de3c:	d14e      	bne.n	800dedc <_strtod_l+0x38c>
 800de3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de40:	4308      	orrs	r0, r1
 800de42:	f47f aebe 	bne.w	800dbc2 <_strtod_l+0x72>
 800de46:	2b00      	cmp	r3, #0
 800de48:	f47f aed6 	bne.w	800dbf8 <_strtod_l+0xa8>
 800de4c:	2a69      	cmp	r2, #105	@ 0x69
 800de4e:	d028      	beq.n	800dea2 <_strtod_l+0x352>
 800de50:	dc25      	bgt.n	800de9e <_strtod_l+0x34e>
 800de52:	2a49      	cmp	r2, #73	@ 0x49
 800de54:	d025      	beq.n	800dea2 <_strtod_l+0x352>
 800de56:	2a4e      	cmp	r2, #78	@ 0x4e
 800de58:	f47f aece 	bne.w	800dbf8 <_strtod_l+0xa8>
 800de5c:	499b      	ldr	r1, [pc, #620]	@ (800e0cc <_strtod_l+0x57c>)
 800de5e:	a819      	add	r0, sp, #100	@ 0x64
 800de60:	f002 ffae 	bl	8010dc0 <__match>
 800de64:	2800      	cmp	r0, #0
 800de66:	f43f aec7 	beq.w	800dbf8 <_strtod_l+0xa8>
 800de6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	2b28      	cmp	r3, #40	@ 0x28
 800de70:	d12e      	bne.n	800ded0 <_strtod_l+0x380>
 800de72:	4997      	ldr	r1, [pc, #604]	@ (800e0d0 <_strtod_l+0x580>)
 800de74:	aa1c      	add	r2, sp, #112	@ 0x70
 800de76:	a819      	add	r0, sp, #100	@ 0x64
 800de78:	f002 ffb6 	bl	8010de8 <__hexnan>
 800de7c:	2805      	cmp	r0, #5
 800de7e:	d127      	bne.n	800ded0 <_strtod_l+0x380>
 800de80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800de86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800de8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800de8e:	e698      	b.n	800dbc2 <_strtod_l+0x72>
 800de90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800de92:	fb08 2101 	mla	r1, r8, r1, r2
 800de96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800de9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800de9c:	e7b5      	b.n	800de0a <_strtod_l+0x2ba>
 800de9e:	2a6e      	cmp	r2, #110	@ 0x6e
 800dea0:	e7da      	b.n	800de58 <_strtod_l+0x308>
 800dea2:	498c      	ldr	r1, [pc, #560]	@ (800e0d4 <_strtod_l+0x584>)
 800dea4:	a819      	add	r0, sp, #100	@ 0x64
 800dea6:	f002 ff8b 	bl	8010dc0 <__match>
 800deaa:	2800      	cmp	r0, #0
 800deac:	f43f aea4 	beq.w	800dbf8 <_strtod_l+0xa8>
 800deb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deb2:	4989      	ldr	r1, [pc, #548]	@ (800e0d8 <_strtod_l+0x588>)
 800deb4:	3b01      	subs	r3, #1
 800deb6:	a819      	add	r0, sp, #100	@ 0x64
 800deb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800deba:	f002 ff81 	bl	8010dc0 <__match>
 800debe:	b910      	cbnz	r0, 800dec6 <_strtod_l+0x376>
 800dec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dec2:	3301      	adds	r3, #1
 800dec4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dec6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e0e8 <_strtod_l+0x598>
 800deca:	f04f 0a00 	mov.w	sl, #0
 800dece:	e678      	b.n	800dbc2 <_strtod_l+0x72>
 800ded0:	4882      	ldr	r0, [pc, #520]	@ (800e0dc <_strtod_l+0x58c>)
 800ded2:	f001 fe29 	bl	800fb28 <nan>
 800ded6:	ec5b ab10 	vmov	sl, fp, d0
 800deda:	e672      	b.n	800dbc2 <_strtod_l+0x72>
 800dedc:	eba8 0309 	sub.w	r3, r8, r9
 800dee0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dee4:	2f00      	cmp	r7, #0
 800dee6:	bf08      	it	eq
 800dee8:	462f      	moveq	r7, r5
 800deea:	2d10      	cmp	r5, #16
 800deec:	462c      	mov	r4, r5
 800deee:	bfa8      	it	ge
 800def0:	2410      	movge	r4, #16
 800def2:	f7f2 fb17 	bl	8000524 <__aeabi_ui2d>
 800def6:	2d09      	cmp	r5, #9
 800def8:	4682      	mov	sl, r0
 800defa:	468b      	mov	fp, r1
 800defc:	dc13      	bgt.n	800df26 <_strtod_l+0x3d6>
 800defe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	f43f ae5e 	beq.w	800dbc2 <_strtod_l+0x72>
 800df06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df08:	dd78      	ble.n	800dffc <_strtod_l+0x4ac>
 800df0a:	2b16      	cmp	r3, #22
 800df0c:	dc5f      	bgt.n	800dfce <_strtod_l+0x47e>
 800df0e:	4974      	ldr	r1, [pc, #464]	@ (800e0e0 <_strtod_l+0x590>)
 800df10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df18:	4652      	mov	r2, sl
 800df1a:	465b      	mov	r3, fp
 800df1c:	f7f2 fb7c 	bl	8000618 <__aeabi_dmul>
 800df20:	4682      	mov	sl, r0
 800df22:	468b      	mov	fp, r1
 800df24:	e64d      	b.n	800dbc2 <_strtod_l+0x72>
 800df26:	4b6e      	ldr	r3, [pc, #440]	@ (800e0e0 <_strtod_l+0x590>)
 800df28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800df30:	f7f2 fb72 	bl	8000618 <__aeabi_dmul>
 800df34:	4682      	mov	sl, r0
 800df36:	9808      	ldr	r0, [sp, #32]
 800df38:	468b      	mov	fp, r1
 800df3a:	f7f2 faf3 	bl	8000524 <__aeabi_ui2d>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4650      	mov	r0, sl
 800df44:	4659      	mov	r1, fp
 800df46:	f7f2 f9b1 	bl	80002ac <__adddf3>
 800df4a:	2d0f      	cmp	r5, #15
 800df4c:	4682      	mov	sl, r0
 800df4e:	468b      	mov	fp, r1
 800df50:	ddd5      	ble.n	800defe <_strtod_l+0x3ae>
 800df52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df54:	1b2c      	subs	r4, r5, r4
 800df56:	441c      	add	r4, r3
 800df58:	2c00      	cmp	r4, #0
 800df5a:	f340 8096 	ble.w	800e08a <_strtod_l+0x53a>
 800df5e:	f014 030f 	ands.w	r3, r4, #15
 800df62:	d00a      	beq.n	800df7a <_strtod_l+0x42a>
 800df64:	495e      	ldr	r1, [pc, #376]	@ (800e0e0 <_strtod_l+0x590>)
 800df66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df6a:	4652      	mov	r2, sl
 800df6c:	465b      	mov	r3, fp
 800df6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df72:	f7f2 fb51 	bl	8000618 <__aeabi_dmul>
 800df76:	4682      	mov	sl, r0
 800df78:	468b      	mov	fp, r1
 800df7a:	f034 040f 	bics.w	r4, r4, #15
 800df7e:	d073      	beq.n	800e068 <_strtod_l+0x518>
 800df80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800df84:	dd48      	ble.n	800e018 <_strtod_l+0x4c8>
 800df86:	2400      	movs	r4, #0
 800df88:	46a0      	mov	r8, r4
 800df8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800df8c:	46a1      	mov	r9, r4
 800df8e:	9a05      	ldr	r2, [sp, #20]
 800df90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e0e8 <_strtod_l+0x598>
 800df94:	2322      	movs	r3, #34	@ 0x22
 800df96:	6013      	str	r3, [r2, #0]
 800df98:	f04f 0a00 	mov.w	sl, #0
 800df9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f43f ae0f 	beq.w	800dbc2 <_strtod_l+0x72>
 800dfa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfa6:	9805      	ldr	r0, [sp, #20]
 800dfa8:	f003 f80c 	bl	8010fc4 <_Bfree>
 800dfac:	9805      	ldr	r0, [sp, #20]
 800dfae:	4649      	mov	r1, r9
 800dfb0:	f003 f808 	bl	8010fc4 <_Bfree>
 800dfb4:	9805      	ldr	r0, [sp, #20]
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	f003 f804 	bl	8010fc4 <_Bfree>
 800dfbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dfbe:	9805      	ldr	r0, [sp, #20]
 800dfc0:	f003 f800 	bl	8010fc4 <_Bfree>
 800dfc4:	9805      	ldr	r0, [sp, #20]
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	f002 fffc 	bl	8010fc4 <_Bfree>
 800dfcc:	e5f9      	b.n	800dbc2 <_strtod_l+0x72>
 800dfce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	dbbc      	blt.n	800df52 <_strtod_l+0x402>
 800dfd8:	4c41      	ldr	r4, [pc, #260]	@ (800e0e0 <_strtod_l+0x590>)
 800dfda:	f1c5 050f 	rsb	r5, r5, #15
 800dfde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dfe2:	4652      	mov	r2, sl
 800dfe4:	465b      	mov	r3, fp
 800dfe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfea:	f7f2 fb15 	bl	8000618 <__aeabi_dmul>
 800dfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff0:	1b5d      	subs	r5, r3, r5
 800dff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dffa:	e78f      	b.n	800df1c <_strtod_l+0x3cc>
 800dffc:	3316      	adds	r3, #22
 800dffe:	dba8      	blt.n	800df52 <_strtod_l+0x402>
 800e000:	4b37      	ldr	r3, [pc, #220]	@ (800e0e0 <_strtod_l+0x590>)
 800e002:	eba9 0808 	sub.w	r8, r9, r8
 800e006:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e00a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e00e:	4650      	mov	r0, sl
 800e010:	4659      	mov	r1, fp
 800e012:	f7f2 fc2b 	bl	800086c <__aeabi_ddiv>
 800e016:	e783      	b.n	800df20 <_strtod_l+0x3d0>
 800e018:	4b32      	ldr	r3, [pc, #200]	@ (800e0e4 <_strtod_l+0x594>)
 800e01a:	9308      	str	r3, [sp, #32]
 800e01c:	2300      	movs	r3, #0
 800e01e:	1124      	asrs	r4, r4, #4
 800e020:	4650      	mov	r0, sl
 800e022:	4659      	mov	r1, fp
 800e024:	461e      	mov	r6, r3
 800e026:	2c01      	cmp	r4, #1
 800e028:	dc21      	bgt.n	800e06e <_strtod_l+0x51e>
 800e02a:	b10b      	cbz	r3, 800e030 <_strtod_l+0x4e0>
 800e02c:	4682      	mov	sl, r0
 800e02e:	468b      	mov	fp, r1
 800e030:	492c      	ldr	r1, [pc, #176]	@ (800e0e4 <_strtod_l+0x594>)
 800e032:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e036:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e03a:	4652      	mov	r2, sl
 800e03c:	465b      	mov	r3, fp
 800e03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e042:	f7f2 fae9 	bl	8000618 <__aeabi_dmul>
 800e046:	4b28      	ldr	r3, [pc, #160]	@ (800e0e8 <_strtod_l+0x598>)
 800e048:	460a      	mov	r2, r1
 800e04a:	400b      	ands	r3, r1
 800e04c:	4927      	ldr	r1, [pc, #156]	@ (800e0ec <_strtod_l+0x59c>)
 800e04e:	428b      	cmp	r3, r1
 800e050:	4682      	mov	sl, r0
 800e052:	d898      	bhi.n	800df86 <_strtod_l+0x436>
 800e054:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e058:	428b      	cmp	r3, r1
 800e05a:	bf86      	itte	hi
 800e05c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e0f0 <_strtod_l+0x5a0>
 800e060:	f04f 3aff 	movhi.w	sl, #4294967295
 800e064:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e068:	2300      	movs	r3, #0
 800e06a:	9308      	str	r3, [sp, #32]
 800e06c:	e07a      	b.n	800e164 <_strtod_l+0x614>
 800e06e:	07e2      	lsls	r2, r4, #31
 800e070:	d505      	bpl.n	800e07e <_strtod_l+0x52e>
 800e072:	9b08      	ldr	r3, [sp, #32]
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 face 	bl	8000618 <__aeabi_dmul>
 800e07c:	2301      	movs	r3, #1
 800e07e:	9a08      	ldr	r2, [sp, #32]
 800e080:	3208      	adds	r2, #8
 800e082:	3601      	adds	r6, #1
 800e084:	1064      	asrs	r4, r4, #1
 800e086:	9208      	str	r2, [sp, #32]
 800e088:	e7cd      	b.n	800e026 <_strtod_l+0x4d6>
 800e08a:	d0ed      	beq.n	800e068 <_strtod_l+0x518>
 800e08c:	4264      	negs	r4, r4
 800e08e:	f014 020f 	ands.w	r2, r4, #15
 800e092:	d00a      	beq.n	800e0aa <_strtod_l+0x55a>
 800e094:	4b12      	ldr	r3, [pc, #72]	@ (800e0e0 <_strtod_l+0x590>)
 800e096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e09a:	4650      	mov	r0, sl
 800e09c:	4659      	mov	r1, fp
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	f7f2 fbe3 	bl	800086c <__aeabi_ddiv>
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	468b      	mov	fp, r1
 800e0aa:	1124      	asrs	r4, r4, #4
 800e0ac:	d0dc      	beq.n	800e068 <_strtod_l+0x518>
 800e0ae:	2c1f      	cmp	r4, #31
 800e0b0:	dd20      	ble.n	800e0f4 <_strtod_l+0x5a4>
 800e0b2:	2400      	movs	r4, #0
 800e0b4:	46a0      	mov	r8, r4
 800e0b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e0b8:	46a1      	mov	r9, r4
 800e0ba:	9a05      	ldr	r2, [sp, #20]
 800e0bc:	2322      	movs	r3, #34	@ 0x22
 800e0be:	f04f 0a00 	mov.w	sl, #0
 800e0c2:	f04f 0b00 	mov.w	fp, #0
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	e768      	b.n	800df9c <_strtod_l+0x44c>
 800e0ca:	bf00      	nop
 800e0cc:	08015c4e 	.word	0x08015c4e
 800e0d0:	08015aec 	.word	0x08015aec
 800e0d4:	08015c46 	.word	0x08015c46
 800e0d8:	08015d30 	.word	0x08015d30
 800e0dc:	08015d2c 	.word	0x08015d2c
 800e0e0:	08015e90 	.word	0x08015e90
 800e0e4:	08015e68 	.word	0x08015e68
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	7ca00000 	.word	0x7ca00000
 800e0f0:	7fefffff 	.word	0x7fefffff
 800e0f4:	f014 0310 	ands.w	r3, r4, #16
 800e0f8:	bf18      	it	ne
 800e0fa:	236a      	movne	r3, #106	@ 0x6a
 800e0fc:	4ea9      	ldr	r6, [pc, #676]	@ (800e3a4 <_strtod_l+0x854>)
 800e0fe:	9308      	str	r3, [sp, #32]
 800e100:	4650      	mov	r0, sl
 800e102:	4659      	mov	r1, fp
 800e104:	2300      	movs	r3, #0
 800e106:	07e2      	lsls	r2, r4, #31
 800e108:	d504      	bpl.n	800e114 <_strtod_l+0x5c4>
 800e10a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e10e:	f7f2 fa83 	bl	8000618 <__aeabi_dmul>
 800e112:	2301      	movs	r3, #1
 800e114:	1064      	asrs	r4, r4, #1
 800e116:	f106 0608 	add.w	r6, r6, #8
 800e11a:	d1f4      	bne.n	800e106 <_strtod_l+0x5b6>
 800e11c:	b10b      	cbz	r3, 800e122 <_strtod_l+0x5d2>
 800e11e:	4682      	mov	sl, r0
 800e120:	468b      	mov	fp, r1
 800e122:	9b08      	ldr	r3, [sp, #32]
 800e124:	b1b3      	cbz	r3, 800e154 <_strtod_l+0x604>
 800e126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e12a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e12e:	2b00      	cmp	r3, #0
 800e130:	4659      	mov	r1, fp
 800e132:	dd0f      	ble.n	800e154 <_strtod_l+0x604>
 800e134:	2b1f      	cmp	r3, #31
 800e136:	dd55      	ble.n	800e1e4 <_strtod_l+0x694>
 800e138:	2b34      	cmp	r3, #52	@ 0x34
 800e13a:	bfde      	ittt	le
 800e13c:	f04f 33ff 	movle.w	r3, #4294967295
 800e140:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e144:	4093      	lslle	r3, r2
 800e146:	f04f 0a00 	mov.w	sl, #0
 800e14a:	bfcc      	ite	gt
 800e14c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e150:	ea03 0b01 	andle.w	fp, r3, r1
 800e154:	2200      	movs	r2, #0
 800e156:	2300      	movs	r3, #0
 800e158:	4650      	mov	r0, sl
 800e15a:	4659      	mov	r1, fp
 800e15c:	f7f2 fcc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e160:	2800      	cmp	r0, #0
 800e162:	d1a6      	bne.n	800e0b2 <_strtod_l+0x562>
 800e164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e16a:	9805      	ldr	r0, [sp, #20]
 800e16c:	462b      	mov	r3, r5
 800e16e:	463a      	mov	r2, r7
 800e170:	f002 ff90 	bl	8011094 <__s2b>
 800e174:	900a      	str	r0, [sp, #40]	@ 0x28
 800e176:	2800      	cmp	r0, #0
 800e178:	f43f af05 	beq.w	800df86 <_strtod_l+0x436>
 800e17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e17e:	2a00      	cmp	r2, #0
 800e180:	eba9 0308 	sub.w	r3, r9, r8
 800e184:	bfa8      	it	ge
 800e186:	2300      	movge	r3, #0
 800e188:	9312      	str	r3, [sp, #72]	@ 0x48
 800e18a:	2400      	movs	r4, #0
 800e18c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e190:	9316      	str	r3, [sp, #88]	@ 0x58
 800e192:	46a0      	mov	r8, r4
 800e194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e196:	9805      	ldr	r0, [sp, #20]
 800e198:	6859      	ldr	r1, [r3, #4]
 800e19a:	f002 fed3 	bl	8010f44 <_Balloc>
 800e19e:	4681      	mov	r9, r0
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f43f aef4 	beq.w	800df8e <_strtod_l+0x43e>
 800e1a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1a8:	691a      	ldr	r2, [r3, #16]
 800e1aa:	3202      	adds	r2, #2
 800e1ac:	f103 010c 	add.w	r1, r3, #12
 800e1b0:	0092      	lsls	r2, r2, #2
 800e1b2:	300c      	adds	r0, #12
 800e1b4:	f001 fca9 	bl	800fb0a <memcpy>
 800e1b8:	ec4b ab10 	vmov	d0, sl, fp
 800e1bc:	9805      	ldr	r0, [sp, #20]
 800e1be:	aa1c      	add	r2, sp, #112	@ 0x70
 800e1c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e1c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e1c6:	f003 faa1 	bl	801170c <__d2b>
 800e1ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	f43f aede 	beq.w	800df8e <_strtod_l+0x43e>
 800e1d2:	9805      	ldr	r0, [sp, #20]
 800e1d4:	2101      	movs	r1, #1
 800e1d6:	f002 fff3 	bl	80111c0 <__i2b>
 800e1da:	4680      	mov	r8, r0
 800e1dc:	b948      	cbnz	r0, 800e1f2 <_strtod_l+0x6a2>
 800e1de:	f04f 0800 	mov.w	r8, #0
 800e1e2:	e6d4      	b.n	800df8e <_strtod_l+0x43e>
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ec:	ea03 0a0a 	and.w	sl, r3, sl
 800e1f0:	e7b0      	b.n	800e154 <_strtod_l+0x604>
 800e1f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e1f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	bfab      	itete	ge
 800e1fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e1fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e1fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e200:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e202:	bfac      	ite	ge
 800e204:	18ef      	addge	r7, r5, r3
 800e206:	1b5e      	sublt	r6, r3, r5
 800e208:	9b08      	ldr	r3, [sp, #32]
 800e20a:	1aed      	subs	r5, r5, r3
 800e20c:	4415      	add	r5, r2
 800e20e:	4b66      	ldr	r3, [pc, #408]	@ (800e3a8 <_strtod_l+0x858>)
 800e210:	3d01      	subs	r5, #1
 800e212:	429d      	cmp	r5, r3
 800e214:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e218:	da50      	bge.n	800e2bc <_strtod_l+0x76c>
 800e21a:	1b5b      	subs	r3, r3, r5
 800e21c:	2b1f      	cmp	r3, #31
 800e21e:	eba2 0203 	sub.w	r2, r2, r3
 800e222:	f04f 0101 	mov.w	r1, #1
 800e226:	dc3d      	bgt.n	800e2a4 <_strtod_l+0x754>
 800e228:	fa01 f303 	lsl.w	r3, r1, r3
 800e22c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e22e:	2300      	movs	r3, #0
 800e230:	9310      	str	r3, [sp, #64]	@ 0x40
 800e232:	18bd      	adds	r5, r7, r2
 800e234:	9b08      	ldr	r3, [sp, #32]
 800e236:	42af      	cmp	r7, r5
 800e238:	4416      	add	r6, r2
 800e23a:	441e      	add	r6, r3
 800e23c:	463b      	mov	r3, r7
 800e23e:	bfa8      	it	ge
 800e240:	462b      	movge	r3, r5
 800e242:	42b3      	cmp	r3, r6
 800e244:	bfa8      	it	ge
 800e246:	4633      	movge	r3, r6
 800e248:	2b00      	cmp	r3, #0
 800e24a:	bfc2      	ittt	gt
 800e24c:	1aed      	subgt	r5, r5, r3
 800e24e:	1af6      	subgt	r6, r6, r3
 800e250:	1aff      	subgt	r7, r7, r3
 800e252:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e254:	2b00      	cmp	r3, #0
 800e256:	dd16      	ble.n	800e286 <_strtod_l+0x736>
 800e258:	4641      	mov	r1, r8
 800e25a:	9805      	ldr	r0, [sp, #20]
 800e25c:	461a      	mov	r2, r3
 800e25e:	f003 f86f 	bl	8011340 <__pow5mult>
 800e262:	4680      	mov	r8, r0
 800e264:	2800      	cmp	r0, #0
 800e266:	d0ba      	beq.n	800e1de <_strtod_l+0x68e>
 800e268:	4601      	mov	r1, r0
 800e26a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e26c:	9805      	ldr	r0, [sp, #20]
 800e26e:	f002 ffbd 	bl	80111ec <__multiply>
 800e272:	900e      	str	r0, [sp, #56]	@ 0x38
 800e274:	2800      	cmp	r0, #0
 800e276:	f43f ae8a 	beq.w	800df8e <_strtod_l+0x43e>
 800e27a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e27c:	9805      	ldr	r0, [sp, #20]
 800e27e:	f002 fea1 	bl	8010fc4 <_Bfree>
 800e282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e284:	931a      	str	r3, [sp, #104]	@ 0x68
 800e286:	2d00      	cmp	r5, #0
 800e288:	dc1d      	bgt.n	800e2c6 <_strtod_l+0x776>
 800e28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dd23      	ble.n	800e2d8 <_strtod_l+0x788>
 800e290:	4649      	mov	r1, r9
 800e292:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e294:	9805      	ldr	r0, [sp, #20]
 800e296:	f003 f853 	bl	8011340 <__pow5mult>
 800e29a:	4681      	mov	r9, r0
 800e29c:	b9e0      	cbnz	r0, 800e2d8 <_strtod_l+0x788>
 800e29e:	f04f 0900 	mov.w	r9, #0
 800e2a2:	e674      	b.n	800df8e <_strtod_l+0x43e>
 800e2a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e2a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e2ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e2b0:	35e2      	adds	r5, #226	@ 0xe2
 800e2b2:	fa01 f305 	lsl.w	r3, r1, r5
 800e2b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e2ba:	e7ba      	b.n	800e232 <_strtod_l+0x6e2>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9310      	str	r3, [sp, #64]	@ 0x40
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2c4:	e7b5      	b.n	800e232 <_strtod_l+0x6e2>
 800e2c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e2c8:	9805      	ldr	r0, [sp, #20]
 800e2ca:	462a      	mov	r2, r5
 800e2cc:	f003 f892 	bl	80113f4 <__lshift>
 800e2d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d1d9      	bne.n	800e28a <_strtod_l+0x73a>
 800e2d6:	e65a      	b.n	800df8e <_strtod_l+0x43e>
 800e2d8:	2e00      	cmp	r6, #0
 800e2da:	dd07      	ble.n	800e2ec <_strtod_l+0x79c>
 800e2dc:	4649      	mov	r1, r9
 800e2de:	9805      	ldr	r0, [sp, #20]
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	f003 f887 	bl	80113f4 <__lshift>
 800e2e6:	4681      	mov	r9, r0
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d0d8      	beq.n	800e29e <_strtod_l+0x74e>
 800e2ec:	2f00      	cmp	r7, #0
 800e2ee:	dd08      	ble.n	800e302 <_strtod_l+0x7b2>
 800e2f0:	4641      	mov	r1, r8
 800e2f2:	9805      	ldr	r0, [sp, #20]
 800e2f4:	463a      	mov	r2, r7
 800e2f6:	f003 f87d 	bl	80113f4 <__lshift>
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	f43f ae46 	beq.w	800df8e <_strtod_l+0x43e>
 800e302:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e304:	9805      	ldr	r0, [sp, #20]
 800e306:	464a      	mov	r2, r9
 800e308:	f003 f8fc 	bl	8011504 <__mdiff>
 800e30c:	4604      	mov	r4, r0
 800e30e:	2800      	cmp	r0, #0
 800e310:	f43f ae3d 	beq.w	800df8e <_strtod_l+0x43e>
 800e314:	68c3      	ldr	r3, [r0, #12]
 800e316:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e318:	2300      	movs	r3, #0
 800e31a:	60c3      	str	r3, [r0, #12]
 800e31c:	4641      	mov	r1, r8
 800e31e:	f003 f8d5 	bl	80114cc <__mcmp>
 800e322:	2800      	cmp	r0, #0
 800e324:	da46      	bge.n	800e3b4 <_strtod_l+0x864>
 800e326:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e328:	ea53 030a 	orrs.w	r3, r3, sl
 800e32c:	d16c      	bne.n	800e408 <_strtod_l+0x8b8>
 800e32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e332:	2b00      	cmp	r3, #0
 800e334:	d168      	bne.n	800e408 <_strtod_l+0x8b8>
 800e336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e33a:	0d1b      	lsrs	r3, r3, #20
 800e33c:	051b      	lsls	r3, r3, #20
 800e33e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e342:	d961      	bls.n	800e408 <_strtod_l+0x8b8>
 800e344:	6963      	ldr	r3, [r4, #20]
 800e346:	b913      	cbnz	r3, 800e34e <_strtod_l+0x7fe>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	dd5c      	ble.n	800e408 <_strtod_l+0x8b8>
 800e34e:	4621      	mov	r1, r4
 800e350:	2201      	movs	r2, #1
 800e352:	9805      	ldr	r0, [sp, #20]
 800e354:	f003 f84e 	bl	80113f4 <__lshift>
 800e358:	4641      	mov	r1, r8
 800e35a:	4604      	mov	r4, r0
 800e35c:	f003 f8b6 	bl	80114cc <__mcmp>
 800e360:	2800      	cmp	r0, #0
 800e362:	dd51      	ble.n	800e408 <_strtod_l+0x8b8>
 800e364:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e368:	9a08      	ldr	r2, [sp, #32]
 800e36a:	0d1b      	lsrs	r3, r3, #20
 800e36c:	051b      	lsls	r3, r3, #20
 800e36e:	2a00      	cmp	r2, #0
 800e370:	d06b      	beq.n	800e44a <_strtod_l+0x8fa>
 800e372:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e376:	d868      	bhi.n	800e44a <_strtod_l+0x8fa>
 800e378:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e37c:	f67f ae9d 	bls.w	800e0ba <_strtod_l+0x56a>
 800e380:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ac <_strtod_l+0x85c>)
 800e382:	4650      	mov	r0, sl
 800e384:	4659      	mov	r1, fp
 800e386:	2200      	movs	r2, #0
 800e388:	f7f2 f946 	bl	8000618 <__aeabi_dmul>
 800e38c:	4b08      	ldr	r3, [pc, #32]	@ (800e3b0 <_strtod_l+0x860>)
 800e38e:	400b      	ands	r3, r1
 800e390:	4682      	mov	sl, r0
 800e392:	468b      	mov	fp, r1
 800e394:	2b00      	cmp	r3, #0
 800e396:	f47f ae05 	bne.w	800dfa4 <_strtod_l+0x454>
 800e39a:	9a05      	ldr	r2, [sp, #20]
 800e39c:	2322      	movs	r3, #34	@ 0x22
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	e600      	b.n	800dfa4 <_strtod_l+0x454>
 800e3a2:	bf00      	nop
 800e3a4:	08015b18 	.word	0x08015b18
 800e3a8:	fffffc02 	.word	0xfffffc02
 800e3ac:	39500000 	.word	0x39500000
 800e3b0:	7ff00000 	.word	0x7ff00000
 800e3b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e3b8:	d165      	bne.n	800e486 <_strtod_l+0x936>
 800e3ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e3bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c0:	b35a      	cbz	r2, 800e41a <_strtod_l+0x8ca>
 800e3c2:	4a9f      	ldr	r2, [pc, #636]	@ (800e640 <_strtod_l+0xaf0>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d12b      	bne.n	800e420 <_strtod_l+0x8d0>
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	4651      	mov	r1, sl
 800e3cc:	b303      	cbz	r3, 800e410 <_strtod_l+0x8c0>
 800e3ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e644 <_strtod_l+0xaf4>)
 800e3d0:	465a      	mov	r2, fp
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3dc:	d81b      	bhi.n	800e416 <_strtod_l+0x8c6>
 800e3de:	0d1b      	lsrs	r3, r3, #20
 800e3e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e8:	4299      	cmp	r1, r3
 800e3ea:	d119      	bne.n	800e420 <_strtod_l+0x8d0>
 800e3ec:	4b96      	ldr	r3, [pc, #600]	@ (800e648 <_strtod_l+0xaf8>)
 800e3ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d102      	bne.n	800e3fa <_strtod_l+0x8aa>
 800e3f4:	3101      	adds	r1, #1
 800e3f6:	f43f adca 	beq.w	800df8e <_strtod_l+0x43e>
 800e3fa:	4b92      	ldr	r3, [pc, #584]	@ (800e644 <_strtod_l+0xaf4>)
 800e3fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3fe:	401a      	ands	r2, r3
 800e400:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e404:	f04f 0a00 	mov.w	sl, #0
 800e408:	9b08      	ldr	r3, [sp, #32]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1b8      	bne.n	800e380 <_strtod_l+0x830>
 800e40e:	e5c9      	b.n	800dfa4 <_strtod_l+0x454>
 800e410:	f04f 33ff 	mov.w	r3, #4294967295
 800e414:	e7e8      	b.n	800e3e8 <_strtod_l+0x898>
 800e416:	4613      	mov	r3, r2
 800e418:	e7e6      	b.n	800e3e8 <_strtod_l+0x898>
 800e41a:	ea53 030a 	orrs.w	r3, r3, sl
 800e41e:	d0a1      	beq.n	800e364 <_strtod_l+0x814>
 800e420:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e422:	b1db      	cbz	r3, 800e45c <_strtod_l+0x90c>
 800e424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e426:	4213      	tst	r3, r2
 800e428:	d0ee      	beq.n	800e408 <_strtod_l+0x8b8>
 800e42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e42c:	9a08      	ldr	r2, [sp, #32]
 800e42e:	4650      	mov	r0, sl
 800e430:	4659      	mov	r1, fp
 800e432:	b1bb      	cbz	r3, 800e464 <_strtod_l+0x914>
 800e434:	f7ff fb6e 	bl	800db14 <sulp>
 800e438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e43c:	ec53 2b10 	vmov	r2, r3, d0
 800e440:	f7f1 ff34 	bl	80002ac <__adddf3>
 800e444:	4682      	mov	sl, r0
 800e446:	468b      	mov	fp, r1
 800e448:	e7de      	b.n	800e408 <_strtod_l+0x8b8>
 800e44a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e44e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e452:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e456:	f04f 3aff 	mov.w	sl, #4294967295
 800e45a:	e7d5      	b.n	800e408 <_strtod_l+0x8b8>
 800e45c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e45e:	ea13 0f0a 	tst.w	r3, sl
 800e462:	e7e1      	b.n	800e428 <_strtod_l+0x8d8>
 800e464:	f7ff fb56 	bl	800db14 <sulp>
 800e468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e46c:	ec53 2b10 	vmov	r2, r3, d0
 800e470:	f7f1 ff1a 	bl	80002a8 <__aeabi_dsub>
 800e474:	2200      	movs	r2, #0
 800e476:	2300      	movs	r3, #0
 800e478:	4682      	mov	sl, r0
 800e47a:	468b      	mov	fp, r1
 800e47c:	f7f2 fb34 	bl	8000ae8 <__aeabi_dcmpeq>
 800e480:	2800      	cmp	r0, #0
 800e482:	d0c1      	beq.n	800e408 <_strtod_l+0x8b8>
 800e484:	e619      	b.n	800e0ba <_strtod_l+0x56a>
 800e486:	4641      	mov	r1, r8
 800e488:	4620      	mov	r0, r4
 800e48a:	f003 f997 	bl	80117bc <__ratio>
 800e48e:	ec57 6b10 	vmov	r6, r7, d0
 800e492:	2200      	movs	r2, #0
 800e494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e498:	4630      	mov	r0, r6
 800e49a:	4639      	mov	r1, r7
 800e49c:	f7f2 fb38 	bl	8000b10 <__aeabi_dcmple>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d06f      	beq.n	800e584 <_strtod_l+0xa34>
 800e4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d17a      	bne.n	800e5a0 <_strtod_l+0xa50>
 800e4aa:	f1ba 0f00 	cmp.w	sl, #0
 800e4ae:	d158      	bne.n	800e562 <_strtod_l+0xa12>
 800e4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d15a      	bne.n	800e570 <_strtod_l+0xa20>
 800e4ba:	4b64      	ldr	r3, [pc, #400]	@ (800e64c <_strtod_l+0xafc>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	f7f2 fb1b 	bl	8000afc <__aeabi_dcmplt>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d159      	bne.n	800e57e <_strtod_l+0xa2e>
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	4b60      	ldr	r3, [pc, #384]	@ (800e650 <_strtod_l+0xb00>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f7f2 f8a1 	bl	8000618 <__aeabi_dmul>
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	460f      	mov	r7, r1
 800e4da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e4de:	9606      	str	r6, [sp, #24]
 800e4e0:	9307      	str	r3, [sp, #28]
 800e4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4e6:	4d57      	ldr	r5, [pc, #348]	@ (800e644 <_strtod_l+0xaf4>)
 800e4e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ee:	401d      	ands	r5, r3
 800e4f0:	4b58      	ldr	r3, [pc, #352]	@ (800e654 <_strtod_l+0xb04>)
 800e4f2:	429d      	cmp	r5, r3
 800e4f4:	f040 80b2 	bne.w	800e65c <_strtod_l+0xb0c>
 800e4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e4fe:	ec4b ab10 	vmov	d0, sl, fp
 800e502:	f003 f893 	bl	801162c <__ulp>
 800e506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e50a:	ec51 0b10 	vmov	r0, r1, d0
 800e50e:	f7f2 f883 	bl	8000618 <__aeabi_dmul>
 800e512:	4652      	mov	r2, sl
 800e514:	465b      	mov	r3, fp
 800e516:	f7f1 fec9 	bl	80002ac <__adddf3>
 800e51a:	460b      	mov	r3, r1
 800e51c:	4949      	ldr	r1, [pc, #292]	@ (800e644 <_strtod_l+0xaf4>)
 800e51e:	4a4e      	ldr	r2, [pc, #312]	@ (800e658 <_strtod_l+0xb08>)
 800e520:	4019      	ands	r1, r3
 800e522:	4291      	cmp	r1, r2
 800e524:	4682      	mov	sl, r0
 800e526:	d942      	bls.n	800e5ae <_strtod_l+0xa5e>
 800e528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e52a:	4b47      	ldr	r3, [pc, #284]	@ (800e648 <_strtod_l+0xaf8>)
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d103      	bne.n	800e538 <_strtod_l+0x9e8>
 800e530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e532:	3301      	adds	r3, #1
 800e534:	f43f ad2b 	beq.w	800df8e <_strtod_l+0x43e>
 800e538:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e648 <_strtod_l+0xaf8>
 800e53c:	f04f 3aff 	mov.w	sl, #4294967295
 800e540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e542:	9805      	ldr	r0, [sp, #20]
 800e544:	f002 fd3e 	bl	8010fc4 <_Bfree>
 800e548:	9805      	ldr	r0, [sp, #20]
 800e54a:	4649      	mov	r1, r9
 800e54c:	f002 fd3a 	bl	8010fc4 <_Bfree>
 800e550:	9805      	ldr	r0, [sp, #20]
 800e552:	4641      	mov	r1, r8
 800e554:	f002 fd36 	bl	8010fc4 <_Bfree>
 800e558:	9805      	ldr	r0, [sp, #20]
 800e55a:	4621      	mov	r1, r4
 800e55c:	f002 fd32 	bl	8010fc4 <_Bfree>
 800e560:	e618      	b.n	800e194 <_strtod_l+0x644>
 800e562:	f1ba 0f01 	cmp.w	sl, #1
 800e566:	d103      	bne.n	800e570 <_strtod_l+0xa20>
 800e568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f43f ada5 	beq.w	800e0ba <_strtod_l+0x56a>
 800e570:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e620 <_strtod_l+0xad0>
 800e574:	4f35      	ldr	r7, [pc, #212]	@ (800e64c <_strtod_l+0xafc>)
 800e576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e57a:	2600      	movs	r6, #0
 800e57c:	e7b1      	b.n	800e4e2 <_strtod_l+0x992>
 800e57e:	4f34      	ldr	r7, [pc, #208]	@ (800e650 <_strtod_l+0xb00>)
 800e580:	2600      	movs	r6, #0
 800e582:	e7aa      	b.n	800e4da <_strtod_l+0x98a>
 800e584:	4b32      	ldr	r3, [pc, #200]	@ (800e650 <_strtod_l+0xb00>)
 800e586:	4630      	mov	r0, r6
 800e588:	4639      	mov	r1, r7
 800e58a:	2200      	movs	r2, #0
 800e58c:	f7f2 f844 	bl	8000618 <__aeabi_dmul>
 800e590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e592:	4606      	mov	r6, r0
 800e594:	460f      	mov	r7, r1
 800e596:	2b00      	cmp	r3, #0
 800e598:	d09f      	beq.n	800e4da <_strtod_l+0x98a>
 800e59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e59e:	e7a0      	b.n	800e4e2 <_strtod_l+0x992>
 800e5a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e628 <_strtod_l+0xad8>
 800e5a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e5a8:	ec57 6b17 	vmov	r6, r7, d7
 800e5ac:	e799      	b.n	800e4e2 <_strtod_l+0x992>
 800e5ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e5b2:	9b08      	ldr	r3, [sp, #32]
 800e5b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1c1      	bne.n	800e540 <_strtod_l+0x9f0>
 800e5bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5c0:	0d1b      	lsrs	r3, r3, #20
 800e5c2:	051b      	lsls	r3, r3, #20
 800e5c4:	429d      	cmp	r5, r3
 800e5c6:	d1bb      	bne.n	800e540 <_strtod_l+0x9f0>
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	4639      	mov	r1, r7
 800e5cc:	f7f2 fb84 	bl	8000cd8 <__aeabi_d2lz>
 800e5d0:	f7f1 fff4 	bl	80005bc <__aeabi_l2d>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4630      	mov	r0, r6
 800e5da:	4639      	mov	r1, r7
 800e5dc:	f7f1 fe64 	bl	80002a8 <__aeabi_dsub>
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e5e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ee:	ea46 060a 	orr.w	r6, r6, sl
 800e5f2:	431e      	orrs	r6, r3
 800e5f4:	d06f      	beq.n	800e6d6 <_strtod_l+0xb86>
 800e5f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e630 <_strtod_l+0xae0>)
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	f7f2 fa7e 	bl	8000afc <__aeabi_dcmplt>
 800e600:	2800      	cmp	r0, #0
 800e602:	f47f accf 	bne.w	800dfa4 <_strtod_l+0x454>
 800e606:	a30c      	add	r3, pc, #48	@ (adr r3, 800e638 <_strtod_l+0xae8>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e610:	f7f2 fa92 	bl	8000b38 <__aeabi_dcmpgt>
 800e614:	2800      	cmp	r0, #0
 800e616:	d093      	beq.n	800e540 <_strtod_l+0x9f0>
 800e618:	e4c4      	b.n	800dfa4 <_strtod_l+0x454>
 800e61a:	bf00      	nop
 800e61c:	f3af 8000 	nop.w
 800e620:	00000000 	.word	0x00000000
 800e624:	bff00000 	.word	0xbff00000
 800e628:	00000000 	.word	0x00000000
 800e62c:	3ff00000 	.word	0x3ff00000
 800e630:	94a03595 	.word	0x94a03595
 800e634:	3fdfffff 	.word	0x3fdfffff
 800e638:	35afe535 	.word	0x35afe535
 800e63c:	3fe00000 	.word	0x3fe00000
 800e640:	000fffff 	.word	0x000fffff
 800e644:	7ff00000 	.word	0x7ff00000
 800e648:	7fefffff 	.word	0x7fefffff
 800e64c:	3ff00000 	.word	0x3ff00000
 800e650:	3fe00000 	.word	0x3fe00000
 800e654:	7fe00000 	.word	0x7fe00000
 800e658:	7c9fffff 	.word	0x7c9fffff
 800e65c:	9b08      	ldr	r3, [sp, #32]
 800e65e:	b323      	cbz	r3, 800e6aa <_strtod_l+0xb5a>
 800e660:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e664:	d821      	bhi.n	800e6aa <_strtod_l+0xb5a>
 800e666:	a328      	add	r3, pc, #160	@ (adr r3, 800e708 <_strtod_l+0xbb8>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	4630      	mov	r0, r6
 800e66e:	4639      	mov	r1, r7
 800e670:	f7f2 fa4e 	bl	8000b10 <__aeabi_dcmple>
 800e674:	b1a0      	cbz	r0, 800e6a0 <_strtod_l+0xb50>
 800e676:	4639      	mov	r1, r7
 800e678:	4630      	mov	r0, r6
 800e67a:	f7f2 faa5 	bl	8000bc8 <__aeabi_d2uiz>
 800e67e:	2801      	cmp	r0, #1
 800e680:	bf38      	it	cc
 800e682:	2001      	movcc	r0, #1
 800e684:	f7f1 ff4e 	bl	8000524 <__aeabi_ui2d>
 800e688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e68a:	4606      	mov	r6, r0
 800e68c:	460f      	mov	r7, r1
 800e68e:	b9fb      	cbnz	r3, 800e6d0 <_strtod_l+0xb80>
 800e690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e694:	9014      	str	r0, [sp, #80]	@ 0x50
 800e696:	9315      	str	r3, [sp, #84]	@ 0x54
 800e698:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e69c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e6a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e6a6:	1b5b      	subs	r3, r3, r5
 800e6a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e6aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e6ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e6b2:	f002 ffbb 	bl	801162c <__ulp>
 800e6b6:	4650      	mov	r0, sl
 800e6b8:	ec53 2b10 	vmov	r2, r3, d0
 800e6bc:	4659      	mov	r1, fp
 800e6be:	f7f1 ffab 	bl	8000618 <__aeabi_dmul>
 800e6c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e6c6:	f7f1 fdf1 	bl	80002ac <__adddf3>
 800e6ca:	4682      	mov	sl, r0
 800e6cc:	468b      	mov	fp, r1
 800e6ce:	e770      	b.n	800e5b2 <_strtod_l+0xa62>
 800e6d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e6d4:	e7e0      	b.n	800e698 <_strtod_l+0xb48>
 800e6d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e710 <_strtod_l+0xbc0>)
 800e6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6dc:	f7f2 fa0e 	bl	8000afc <__aeabi_dcmplt>
 800e6e0:	e798      	b.n	800e614 <_strtod_l+0xac4>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6ea:	6013      	str	r3, [r2, #0]
 800e6ec:	f7ff ba6d 	b.w	800dbca <_strtod_l+0x7a>
 800e6f0:	2a65      	cmp	r2, #101	@ 0x65
 800e6f2:	f43f ab66 	beq.w	800ddc2 <_strtod_l+0x272>
 800e6f6:	2a45      	cmp	r2, #69	@ 0x45
 800e6f8:	f43f ab63 	beq.w	800ddc2 <_strtod_l+0x272>
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f7ff bb9e 	b.w	800de3e <_strtod_l+0x2ee>
 800e702:	bf00      	nop
 800e704:	f3af 8000 	nop.w
 800e708:	ffc00000 	.word	0xffc00000
 800e70c:	41dfffff 	.word	0x41dfffff
 800e710:	94a03595 	.word	0x94a03595
 800e714:	3fcfffff 	.word	0x3fcfffff

0800e718 <_strtod_r>:
 800e718:	4b01      	ldr	r3, [pc, #4]	@ (800e720 <_strtod_r+0x8>)
 800e71a:	f7ff ba19 	b.w	800db50 <_strtod_l>
 800e71e:	bf00      	nop
 800e720:	20000028 	.word	0x20000028

0800e724 <strtod>:
 800e724:	460a      	mov	r2, r1
 800e726:	4601      	mov	r1, r0
 800e728:	4802      	ldr	r0, [pc, #8]	@ (800e734 <strtod+0x10>)
 800e72a:	4b03      	ldr	r3, [pc, #12]	@ (800e738 <strtod+0x14>)
 800e72c:	6800      	ldr	r0, [r0, #0]
 800e72e:	f7ff ba0f 	b.w	800db50 <_strtod_l>
 800e732:	bf00      	nop
 800e734:	20000194 	.word	0x20000194
 800e738:	20000028 	.word	0x20000028

0800e73c <__cvt>:
 800e73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e740:	ec57 6b10 	vmov	r6, r7, d0
 800e744:	2f00      	cmp	r7, #0
 800e746:	460c      	mov	r4, r1
 800e748:	4619      	mov	r1, r3
 800e74a:	463b      	mov	r3, r7
 800e74c:	bfbb      	ittet	lt
 800e74e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e752:	461f      	movlt	r7, r3
 800e754:	2300      	movge	r3, #0
 800e756:	232d      	movlt	r3, #45	@ 0x2d
 800e758:	700b      	strb	r3, [r1, #0]
 800e75a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e75c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e760:	4691      	mov	r9, r2
 800e762:	f023 0820 	bic.w	r8, r3, #32
 800e766:	bfbc      	itt	lt
 800e768:	4632      	movlt	r2, r6
 800e76a:	4616      	movlt	r6, r2
 800e76c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e770:	d005      	beq.n	800e77e <__cvt+0x42>
 800e772:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e776:	d100      	bne.n	800e77a <__cvt+0x3e>
 800e778:	3401      	adds	r4, #1
 800e77a:	2102      	movs	r1, #2
 800e77c:	e000      	b.n	800e780 <__cvt+0x44>
 800e77e:	2103      	movs	r1, #3
 800e780:	ab03      	add	r3, sp, #12
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	ab02      	add	r3, sp, #8
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	ec47 6b10 	vmov	d0, r6, r7
 800e78c:	4653      	mov	r3, sl
 800e78e:	4622      	mov	r2, r4
 800e790:	f001 fa7e 	bl	800fc90 <_dtoa_r>
 800e794:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e798:	4605      	mov	r5, r0
 800e79a:	d119      	bne.n	800e7d0 <__cvt+0x94>
 800e79c:	f019 0f01 	tst.w	r9, #1
 800e7a0:	d00e      	beq.n	800e7c0 <__cvt+0x84>
 800e7a2:	eb00 0904 	add.w	r9, r0, r4
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	f7f2 f99b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7b2:	b108      	cbz	r0, 800e7b8 <__cvt+0x7c>
 800e7b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7b8:	2230      	movs	r2, #48	@ 0x30
 800e7ba:	9b03      	ldr	r3, [sp, #12]
 800e7bc:	454b      	cmp	r3, r9
 800e7be:	d31e      	bcc.n	800e7fe <__cvt+0xc2>
 800e7c0:	9b03      	ldr	r3, [sp, #12]
 800e7c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7c4:	1b5b      	subs	r3, r3, r5
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	6013      	str	r3, [r2, #0]
 800e7ca:	b004      	add	sp, #16
 800e7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7d4:	eb00 0904 	add.w	r9, r0, r4
 800e7d8:	d1e5      	bne.n	800e7a6 <__cvt+0x6a>
 800e7da:	7803      	ldrb	r3, [r0, #0]
 800e7dc:	2b30      	cmp	r3, #48	@ 0x30
 800e7de:	d10a      	bne.n	800e7f6 <__cvt+0xba>
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	f7f2 f97e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7ec:	b918      	cbnz	r0, 800e7f6 <__cvt+0xba>
 800e7ee:	f1c4 0401 	rsb	r4, r4, #1
 800e7f2:	f8ca 4000 	str.w	r4, [sl]
 800e7f6:	f8da 3000 	ldr.w	r3, [sl]
 800e7fa:	4499      	add	r9, r3
 800e7fc:	e7d3      	b.n	800e7a6 <__cvt+0x6a>
 800e7fe:	1c59      	adds	r1, r3, #1
 800e800:	9103      	str	r1, [sp, #12]
 800e802:	701a      	strb	r2, [r3, #0]
 800e804:	e7d9      	b.n	800e7ba <__cvt+0x7e>

0800e806 <__exponent>:
 800e806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e808:	2900      	cmp	r1, #0
 800e80a:	bfba      	itte	lt
 800e80c:	4249      	neglt	r1, r1
 800e80e:	232d      	movlt	r3, #45	@ 0x2d
 800e810:	232b      	movge	r3, #43	@ 0x2b
 800e812:	2909      	cmp	r1, #9
 800e814:	7002      	strb	r2, [r0, #0]
 800e816:	7043      	strb	r3, [r0, #1]
 800e818:	dd29      	ble.n	800e86e <__exponent+0x68>
 800e81a:	f10d 0307 	add.w	r3, sp, #7
 800e81e:	461d      	mov	r5, r3
 800e820:	270a      	movs	r7, #10
 800e822:	461a      	mov	r2, r3
 800e824:	fbb1 f6f7 	udiv	r6, r1, r7
 800e828:	fb07 1416 	mls	r4, r7, r6, r1
 800e82c:	3430      	adds	r4, #48	@ 0x30
 800e82e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e832:	460c      	mov	r4, r1
 800e834:	2c63      	cmp	r4, #99	@ 0x63
 800e836:	f103 33ff 	add.w	r3, r3, #4294967295
 800e83a:	4631      	mov	r1, r6
 800e83c:	dcf1      	bgt.n	800e822 <__exponent+0x1c>
 800e83e:	3130      	adds	r1, #48	@ 0x30
 800e840:	1e94      	subs	r4, r2, #2
 800e842:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e846:	1c41      	adds	r1, r0, #1
 800e848:	4623      	mov	r3, r4
 800e84a:	42ab      	cmp	r3, r5
 800e84c:	d30a      	bcc.n	800e864 <__exponent+0x5e>
 800e84e:	f10d 0309 	add.w	r3, sp, #9
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	42ac      	cmp	r4, r5
 800e856:	bf88      	it	hi
 800e858:	2300      	movhi	r3, #0
 800e85a:	3302      	adds	r3, #2
 800e85c:	4403      	add	r3, r0
 800e85e:	1a18      	subs	r0, r3, r0
 800e860:	b003      	add	sp, #12
 800e862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e864:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e868:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e86c:	e7ed      	b.n	800e84a <__exponent+0x44>
 800e86e:	2330      	movs	r3, #48	@ 0x30
 800e870:	3130      	adds	r1, #48	@ 0x30
 800e872:	7083      	strb	r3, [r0, #2]
 800e874:	70c1      	strb	r1, [r0, #3]
 800e876:	1d03      	adds	r3, r0, #4
 800e878:	e7f1      	b.n	800e85e <__exponent+0x58>
	...

0800e87c <_printf_float>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	b08d      	sub	sp, #52	@ 0x34
 800e882:	460c      	mov	r4, r1
 800e884:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e888:	4616      	mov	r6, r2
 800e88a:	461f      	mov	r7, r3
 800e88c:	4605      	mov	r5, r0
 800e88e:	f001 f8b5 	bl	800f9fc <_localeconv_r>
 800e892:	6803      	ldr	r3, [r0, #0]
 800e894:	9304      	str	r3, [sp, #16]
 800e896:	4618      	mov	r0, r3
 800e898:	f7f1 fcfa 	bl	8000290 <strlen>
 800e89c:	2300      	movs	r3, #0
 800e89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a4:	9005      	str	r0, [sp, #20]
 800e8a6:	3307      	adds	r3, #7
 800e8a8:	f023 0307 	bic.w	r3, r3, #7
 800e8ac:	f103 0208 	add.w	r2, r3, #8
 800e8b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e8b8:	f8c8 2000 	str.w	r2, [r8]
 800e8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8c4:	9307      	str	r3, [sp, #28]
 800e8c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e8ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8d2:	4b9c      	ldr	r3, [pc, #624]	@ (800eb44 <_printf_float+0x2c8>)
 800e8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d8:	f7f2 f938 	bl	8000b4c <__aeabi_dcmpun>
 800e8dc:	bb70      	cbnz	r0, 800e93c <_printf_float+0xc0>
 800e8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8e2:	4b98      	ldr	r3, [pc, #608]	@ (800eb44 <_printf_float+0x2c8>)
 800e8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e8:	f7f2 f912 	bl	8000b10 <__aeabi_dcmple>
 800e8ec:	bb30      	cbnz	r0, 800e93c <_printf_float+0xc0>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f2 f901 	bl	8000afc <__aeabi_dcmplt>
 800e8fa:	b110      	cbz	r0, 800e902 <_printf_float+0x86>
 800e8fc:	232d      	movs	r3, #45	@ 0x2d
 800e8fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e902:	4a91      	ldr	r2, [pc, #580]	@ (800eb48 <_printf_float+0x2cc>)
 800e904:	4b91      	ldr	r3, [pc, #580]	@ (800eb4c <_printf_float+0x2d0>)
 800e906:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e90a:	bf94      	ite	ls
 800e90c:	4690      	movls	r8, r2
 800e90e:	4698      	movhi	r8, r3
 800e910:	2303      	movs	r3, #3
 800e912:	6123      	str	r3, [r4, #16]
 800e914:	f02b 0304 	bic.w	r3, fp, #4
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	f04f 0900 	mov.w	r9, #0
 800e91e:	9700      	str	r7, [sp, #0]
 800e920:	4633      	mov	r3, r6
 800e922:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e924:	4621      	mov	r1, r4
 800e926:	4628      	mov	r0, r5
 800e928:	f000 f9d2 	bl	800ecd0 <_printf_common>
 800e92c:	3001      	adds	r0, #1
 800e92e:	f040 808d 	bne.w	800ea4c <_printf_float+0x1d0>
 800e932:	f04f 30ff 	mov.w	r0, #4294967295
 800e936:	b00d      	add	sp, #52	@ 0x34
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	4640      	mov	r0, r8
 800e942:	4649      	mov	r1, r9
 800e944:	f7f2 f902 	bl	8000b4c <__aeabi_dcmpun>
 800e948:	b140      	cbz	r0, 800e95c <_printf_float+0xe0>
 800e94a:	464b      	mov	r3, r9
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	bfbc      	itt	lt
 800e950:	232d      	movlt	r3, #45	@ 0x2d
 800e952:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e956:	4a7e      	ldr	r2, [pc, #504]	@ (800eb50 <_printf_float+0x2d4>)
 800e958:	4b7e      	ldr	r3, [pc, #504]	@ (800eb54 <_printf_float+0x2d8>)
 800e95a:	e7d4      	b.n	800e906 <_printf_float+0x8a>
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e962:	9206      	str	r2, [sp, #24]
 800e964:	1c5a      	adds	r2, r3, #1
 800e966:	d13b      	bne.n	800e9e0 <_printf_float+0x164>
 800e968:	2306      	movs	r3, #6
 800e96a:	6063      	str	r3, [r4, #4]
 800e96c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e970:	2300      	movs	r3, #0
 800e972:	6022      	str	r2, [r4, #0]
 800e974:	9303      	str	r3, [sp, #12]
 800e976:	ab0a      	add	r3, sp, #40	@ 0x28
 800e978:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e97c:	ab09      	add	r3, sp, #36	@ 0x24
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	6861      	ldr	r1, [r4, #4]
 800e982:	ec49 8b10 	vmov	d0, r8, r9
 800e986:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7ff fed6 	bl	800e73c <__cvt>
 800e990:	9b06      	ldr	r3, [sp, #24]
 800e992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e994:	2b47      	cmp	r3, #71	@ 0x47
 800e996:	4680      	mov	r8, r0
 800e998:	d129      	bne.n	800e9ee <_printf_float+0x172>
 800e99a:	1cc8      	adds	r0, r1, #3
 800e99c:	db02      	blt.n	800e9a4 <_printf_float+0x128>
 800e99e:	6863      	ldr	r3, [r4, #4]
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	dd41      	ble.n	800ea28 <_printf_float+0x1ac>
 800e9a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9a8:	fa5f fa8a 	uxtb.w	sl, sl
 800e9ac:	3901      	subs	r1, #1
 800e9ae:	4652      	mov	r2, sl
 800e9b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9b6:	f7ff ff26 	bl	800e806 <__exponent>
 800e9ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9bc:	1813      	adds	r3, r2, r0
 800e9be:	2a01      	cmp	r2, #1
 800e9c0:	4681      	mov	r9, r0
 800e9c2:	6123      	str	r3, [r4, #16]
 800e9c4:	dc02      	bgt.n	800e9cc <_printf_float+0x150>
 800e9c6:	6822      	ldr	r2, [r4, #0]
 800e9c8:	07d2      	lsls	r2, r2, #31
 800e9ca:	d501      	bpl.n	800e9d0 <_printf_float+0x154>
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	6123      	str	r3, [r4, #16]
 800e9d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d0a2      	beq.n	800e91e <_printf_float+0xa2>
 800e9d8:	232d      	movs	r3, #45	@ 0x2d
 800e9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9de:	e79e      	b.n	800e91e <_printf_float+0xa2>
 800e9e0:	9a06      	ldr	r2, [sp, #24]
 800e9e2:	2a47      	cmp	r2, #71	@ 0x47
 800e9e4:	d1c2      	bne.n	800e96c <_printf_float+0xf0>
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1c0      	bne.n	800e96c <_printf_float+0xf0>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e7bd      	b.n	800e96a <_printf_float+0xee>
 800e9ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9f2:	d9db      	bls.n	800e9ac <_printf_float+0x130>
 800e9f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e9f8:	d118      	bne.n	800ea2c <_printf_float+0x1b0>
 800e9fa:	2900      	cmp	r1, #0
 800e9fc:	6863      	ldr	r3, [r4, #4]
 800e9fe:	dd0b      	ble.n	800ea18 <_printf_float+0x19c>
 800ea00:	6121      	str	r1, [r4, #16]
 800ea02:	b913      	cbnz	r3, 800ea0a <_printf_float+0x18e>
 800ea04:	6822      	ldr	r2, [r4, #0]
 800ea06:	07d0      	lsls	r0, r2, #31
 800ea08:	d502      	bpl.n	800ea10 <_printf_float+0x194>
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	440b      	add	r3, r1
 800ea0e:	6123      	str	r3, [r4, #16]
 800ea10:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea12:	f04f 0900 	mov.w	r9, #0
 800ea16:	e7db      	b.n	800e9d0 <_printf_float+0x154>
 800ea18:	b913      	cbnz	r3, 800ea20 <_printf_float+0x1a4>
 800ea1a:	6822      	ldr	r2, [r4, #0]
 800ea1c:	07d2      	lsls	r2, r2, #31
 800ea1e:	d501      	bpl.n	800ea24 <_printf_float+0x1a8>
 800ea20:	3302      	adds	r3, #2
 800ea22:	e7f4      	b.n	800ea0e <_printf_float+0x192>
 800ea24:	2301      	movs	r3, #1
 800ea26:	e7f2      	b.n	800ea0e <_printf_float+0x192>
 800ea28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea2e:	4299      	cmp	r1, r3
 800ea30:	db05      	blt.n	800ea3e <_printf_float+0x1c2>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	6121      	str	r1, [r4, #16]
 800ea36:	07d8      	lsls	r0, r3, #31
 800ea38:	d5ea      	bpl.n	800ea10 <_printf_float+0x194>
 800ea3a:	1c4b      	adds	r3, r1, #1
 800ea3c:	e7e7      	b.n	800ea0e <_printf_float+0x192>
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	bfd4      	ite	le
 800ea42:	f1c1 0202 	rsble	r2, r1, #2
 800ea46:	2201      	movgt	r2, #1
 800ea48:	4413      	add	r3, r2
 800ea4a:	e7e0      	b.n	800ea0e <_printf_float+0x192>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	055a      	lsls	r2, r3, #21
 800ea50:	d407      	bmi.n	800ea62 <_printf_float+0x1e6>
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	4642      	mov	r2, r8
 800ea56:	4631      	mov	r1, r6
 800ea58:	4628      	mov	r0, r5
 800ea5a:	47b8      	blx	r7
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d12b      	bne.n	800eab8 <_printf_float+0x23c>
 800ea60:	e767      	b.n	800e932 <_printf_float+0xb6>
 800ea62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea66:	f240 80dd 	bls.w	800ec24 <_printf_float+0x3a8>
 800ea6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea6e:	2200      	movs	r2, #0
 800ea70:	2300      	movs	r3, #0
 800ea72:	f7f2 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d033      	beq.n	800eae2 <_printf_float+0x266>
 800ea7a:	4a37      	ldr	r2, [pc, #220]	@ (800eb58 <_printf_float+0x2dc>)
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	f43f af54 	beq.w	800e932 <_printf_float+0xb6>
 800ea8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea8e:	4543      	cmp	r3, r8
 800ea90:	db02      	blt.n	800ea98 <_printf_float+0x21c>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	07d8      	lsls	r0, r3, #31
 800ea96:	d50f      	bpl.n	800eab8 <_printf_float+0x23c>
 800ea98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	47b8      	blx	r7
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	f43f af45 	beq.w	800e932 <_printf_float+0xb6>
 800eaa8:	f04f 0900 	mov.w	r9, #0
 800eaac:	f108 38ff 	add.w	r8, r8, #4294967295
 800eab0:	f104 0a1a 	add.w	sl, r4, #26
 800eab4:	45c8      	cmp	r8, r9
 800eab6:	dc09      	bgt.n	800eacc <_printf_float+0x250>
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	079b      	lsls	r3, r3, #30
 800eabc:	f100 8103 	bmi.w	800ecc6 <_printf_float+0x44a>
 800eac0:	68e0      	ldr	r0, [r4, #12]
 800eac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eac4:	4298      	cmp	r0, r3
 800eac6:	bfb8      	it	lt
 800eac8:	4618      	movlt	r0, r3
 800eaca:	e734      	b.n	800e936 <_printf_float+0xba>
 800eacc:	2301      	movs	r3, #1
 800eace:	4652      	mov	r2, sl
 800ead0:	4631      	mov	r1, r6
 800ead2:	4628      	mov	r0, r5
 800ead4:	47b8      	blx	r7
 800ead6:	3001      	adds	r0, #1
 800ead8:	f43f af2b 	beq.w	800e932 <_printf_float+0xb6>
 800eadc:	f109 0901 	add.w	r9, r9, #1
 800eae0:	e7e8      	b.n	800eab4 <_printf_float+0x238>
 800eae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dc39      	bgt.n	800eb5c <_printf_float+0x2e0>
 800eae8:	4a1b      	ldr	r2, [pc, #108]	@ (800eb58 <_printf_float+0x2dc>)
 800eaea:	2301      	movs	r3, #1
 800eaec:	4631      	mov	r1, r6
 800eaee:	4628      	mov	r0, r5
 800eaf0:	47b8      	blx	r7
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	f43f af1d 	beq.w	800e932 <_printf_float+0xb6>
 800eaf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eafc:	ea59 0303 	orrs.w	r3, r9, r3
 800eb00:	d102      	bne.n	800eb08 <_printf_float+0x28c>
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	07d9      	lsls	r1, r3, #31
 800eb06:	d5d7      	bpl.n	800eab8 <_printf_float+0x23c>
 800eb08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	f43f af0d 	beq.w	800e932 <_printf_float+0xb6>
 800eb18:	f04f 0a00 	mov.w	sl, #0
 800eb1c:	f104 0b1a 	add.w	fp, r4, #26
 800eb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb22:	425b      	negs	r3, r3
 800eb24:	4553      	cmp	r3, sl
 800eb26:	dc01      	bgt.n	800eb2c <_printf_float+0x2b0>
 800eb28:	464b      	mov	r3, r9
 800eb2a:	e793      	b.n	800ea54 <_printf_float+0x1d8>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	465a      	mov	r2, fp
 800eb30:	4631      	mov	r1, r6
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b8      	blx	r7
 800eb36:	3001      	adds	r0, #1
 800eb38:	f43f aefb 	beq.w	800e932 <_printf_float+0xb6>
 800eb3c:	f10a 0a01 	add.w	sl, sl, #1
 800eb40:	e7ee      	b.n	800eb20 <_printf_float+0x2a4>
 800eb42:	bf00      	nop
 800eb44:	7fefffff 	.word	0x7fefffff
 800eb48:	08015c41 	.word	0x08015c41
 800eb4c:	08015c45 	.word	0x08015c45
 800eb50:	08015c49 	.word	0x08015c49
 800eb54:	08015c4d 	.word	0x08015c4d
 800eb58:	08015f7f 	.word	0x08015f7f
 800eb5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb62:	4553      	cmp	r3, sl
 800eb64:	bfa8      	it	ge
 800eb66:	4653      	movge	r3, sl
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	4699      	mov	r9, r3
 800eb6c:	dc36      	bgt.n	800ebdc <_printf_float+0x360>
 800eb6e:	f04f 0b00 	mov.w	fp, #0
 800eb72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb76:	f104 021a 	add.w	r2, r4, #26
 800eb7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb7c:	9306      	str	r3, [sp, #24]
 800eb7e:	eba3 0309 	sub.w	r3, r3, r9
 800eb82:	455b      	cmp	r3, fp
 800eb84:	dc31      	bgt.n	800ebea <_printf_float+0x36e>
 800eb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb88:	459a      	cmp	sl, r3
 800eb8a:	dc3a      	bgt.n	800ec02 <_printf_float+0x386>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	07da      	lsls	r2, r3, #31
 800eb90:	d437      	bmi.n	800ec02 <_printf_float+0x386>
 800eb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb94:	ebaa 0903 	sub.w	r9, sl, r3
 800eb98:	9b06      	ldr	r3, [sp, #24]
 800eb9a:	ebaa 0303 	sub.w	r3, sl, r3
 800eb9e:	4599      	cmp	r9, r3
 800eba0:	bfa8      	it	ge
 800eba2:	4699      	movge	r9, r3
 800eba4:	f1b9 0f00 	cmp.w	r9, #0
 800eba8:	dc33      	bgt.n	800ec12 <_printf_float+0x396>
 800ebaa:	f04f 0800 	mov.w	r8, #0
 800ebae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebb2:	f104 0b1a 	add.w	fp, r4, #26
 800ebb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb8:	ebaa 0303 	sub.w	r3, sl, r3
 800ebbc:	eba3 0309 	sub.w	r3, r3, r9
 800ebc0:	4543      	cmp	r3, r8
 800ebc2:	f77f af79 	ble.w	800eab8 <_printf_float+0x23c>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	465a      	mov	r2, fp
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4628      	mov	r0, r5
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f43f aeae 	beq.w	800e932 <_printf_float+0xb6>
 800ebd6:	f108 0801 	add.w	r8, r8, #1
 800ebda:	e7ec      	b.n	800ebb6 <_printf_float+0x33a>
 800ebdc:	4642      	mov	r2, r8
 800ebde:	4631      	mov	r1, r6
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b8      	blx	r7
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d1c2      	bne.n	800eb6e <_printf_float+0x2f2>
 800ebe8:	e6a3      	b.n	800e932 <_printf_float+0xb6>
 800ebea:	2301      	movs	r3, #1
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	9206      	str	r2, [sp, #24]
 800ebf2:	47b8      	blx	r7
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	f43f ae9c 	beq.w	800e932 <_printf_float+0xb6>
 800ebfa:	9a06      	ldr	r2, [sp, #24]
 800ebfc:	f10b 0b01 	add.w	fp, fp, #1
 800ec00:	e7bb      	b.n	800eb7a <_printf_float+0x2fe>
 800ec02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec06:	4631      	mov	r1, r6
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b8      	blx	r7
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	d1c0      	bne.n	800eb92 <_printf_float+0x316>
 800ec10:	e68f      	b.n	800e932 <_printf_float+0xb6>
 800ec12:	9a06      	ldr	r2, [sp, #24]
 800ec14:	464b      	mov	r3, r9
 800ec16:	4442      	add	r2, r8
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b8      	blx	r7
 800ec1e:	3001      	adds	r0, #1
 800ec20:	d1c3      	bne.n	800ebaa <_printf_float+0x32e>
 800ec22:	e686      	b.n	800e932 <_printf_float+0xb6>
 800ec24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec28:	f1ba 0f01 	cmp.w	sl, #1
 800ec2c:	dc01      	bgt.n	800ec32 <_printf_float+0x3b6>
 800ec2e:	07db      	lsls	r3, r3, #31
 800ec30:	d536      	bpl.n	800eca0 <_printf_float+0x424>
 800ec32:	2301      	movs	r3, #1
 800ec34:	4642      	mov	r2, r8
 800ec36:	4631      	mov	r1, r6
 800ec38:	4628      	mov	r0, r5
 800ec3a:	47b8      	blx	r7
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	f43f ae78 	beq.w	800e932 <_printf_float+0xb6>
 800ec42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec46:	4631      	mov	r1, r6
 800ec48:	4628      	mov	r0, r5
 800ec4a:	47b8      	blx	r7
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	f43f ae70 	beq.w	800e932 <_printf_float+0xb6>
 800ec52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec56:	2200      	movs	r2, #0
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec5e:	f7f1 ff43 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec62:	b9c0      	cbnz	r0, 800ec96 <_printf_float+0x41a>
 800ec64:	4653      	mov	r3, sl
 800ec66:	f108 0201 	add.w	r2, r8, #1
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d10c      	bne.n	800ec8e <_printf_float+0x412>
 800ec74:	e65d      	b.n	800e932 <_printf_float+0xb6>
 800ec76:	2301      	movs	r3, #1
 800ec78:	465a      	mov	r2, fp
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae56 	beq.w	800e932 <_printf_float+0xb6>
 800ec86:	f108 0801 	add.w	r8, r8, #1
 800ec8a:	45d0      	cmp	r8, sl
 800ec8c:	dbf3      	blt.n	800ec76 <_printf_float+0x3fa>
 800ec8e:	464b      	mov	r3, r9
 800ec90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec94:	e6df      	b.n	800ea56 <_printf_float+0x1da>
 800ec96:	f04f 0800 	mov.w	r8, #0
 800ec9a:	f104 0b1a 	add.w	fp, r4, #26
 800ec9e:	e7f4      	b.n	800ec8a <_printf_float+0x40e>
 800eca0:	2301      	movs	r3, #1
 800eca2:	4642      	mov	r2, r8
 800eca4:	e7e1      	b.n	800ec6a <_printf_float+0x3ee>
 800eca6:	2301      	movs	r3, #1
 800eca8:	464a      	mov	r2, r9
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b8      	blx	r7
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	f43f ae3e 	beq.w	800e932 <_printf_float+0xb6>
 800ecb6:	f108 0801 	add.w	r8, r8, #1
 800ecba:	68e3      	ldr	r3, [r4, #12]
 800ecbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecbe:	1a5b      	subs	r3, r3, r1
 800ecc0:	4543      	cmp	r3, r8
 800ecc2:	dcf0      	bgt.n	800eca6 <_printf_float+0x42a>
 800ecc4:	e6fc      	b.n	800eac0 <_printf_float+0x244>
 800ecc6:	f04f 0800 	mov.w	r8, #0
 800ecca:	f104 0919 	add.w	r9, r4, #25
 800ecce:	e7f4      	b.n	800ecba <_printf_float+0x43e>

0800ecd0 <_printf_common>:
 800ecd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd4:	4616      	mov	r6, r2
 800ecd6:	4698      	mov	r8, r3
 800ecd8:	688a      	ldr	r2, [r1, #8]
 800ecda:	690b      	ldr	r3, [r1, #16]
 800ecdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ece0:	4293      	cmp	r3, r2
 800ece2:	bfb8      	it	lt
 800ece4:	4613      	movlt	r3, r2
 800ece6:	6033      	str	r3, [r6, #0]
 800ece8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecec:	4607      	mov	r7, r0
 800ecee:	460c      	mov	r4, r1
 800ecf0:	b10a      	cbz	r2, 800ecf6 <_printf_common+0x26>
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	6033      	str	r3, [r6, #0]
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	0699      	lsls	r1, r3, #26
 800ecfa:	bf42      	ittt	mi
 800ecfc:	6833      	ldrmi	r3, [r6, #0]
 800ecfe:	3302      	addmi	r3, #2
 800ed00:	6033      	strmi	r3, [r6, #0]
 800ed02:	6825      	ldr	r5, [r4, #0]
 800ed04:	f015 0506 	ands.w	r5, r5, #6
 800ed08:	d106      	bne.n	800ed18 <_printf_common+0x48>
 800ed0a:	f104 0a19 	add.w	sl, r4, #25
 800ed0e:	68e3      	ldr	r3, [r4, #12]
 800ed10:	6832      	ldr	r2, [r6, #0]
 800ed12:	1a9b      	subs	r3, r3, r2
 800ed14:	42ab      	cmp	r3, r5
 800ed16:	dc26      	bgt.n	800ed66 <_printf_common+0x96>
 800ed18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed1c:	6822      	ldr	r2, [r4, #0]
 800ed1e:	3b00      	subs	r3, #0
 800ed20:	bf18      	it	ne
 800ed22:	2301      	movne	r3, #1
 800ed24:	0692      	lsls	r2, r2, #26
 800ed26:	d42b      	bmi.n	800ed80 <_printf_common+0xb0>
 800ed28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed2c:	4641      	mov	r1, r8
 800ed2e:	4638      	mov	r0, r7
 800ed30:	47c8      	blx	r9
 800ed32:	3001      	adds	r0, #1
 800ed34:	d01e      	beq.n	800ed74 <_printf_common+0xa4>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	6922      	ldr	r2, [r4, #16]
 800ed3a:	f003 0306 	and.w	r3, r3, #6
 800ed3e:	2b04      	cmp	r3, #4
 800ed40:	bf02      	ittt	eq
 800ed42:	68e5      	ldreq	r5, [r4, #12]
 800ed44:	6833      	ldreq	r3, [r6, #0]
 800ed46:	1aed      	subeq	r5, r5, r3
 800ed48:	68a3      	ldr	r3, [r4, #8]
 800ed4a:	bf0c      	ite	eq
 800ed4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed50:	2500      	movne	r5, #0
 800ed52:	4293      	cmp	r3, r2
 800ed54:	bfc4      	itt	gt
 800ed56:	1a9b      	subgt	r3, r3, r2
 800ed58:	18ed      	addgt	r5, r5, r3
 800ed5a:	2600      	movs	r6, #0
 800ed5c:	341a      	adds	r4, #26
 800ed5e:	42b5      	cmp	r5, r6
 800ed60:	d11a      	bne.n	800ed98 <_printf_common+0xc8>
 800ed62:	2000      	movs	r0, #0
 800ed64:	e008      	b.n	800ed78 <_printf_common+0xa8>
 800ed66:	2301      	movs	r3, #1
 800ed68:	4652      	mov	r2, sl
 800ed6a:	4641      	mov	r1, r8
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	47c8      	blx	r9
 800ed70:	3001      	adds	r0, #1
 800ed72:	d103      	bne.n	800ed7c <_printf_common+0xac>
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7c:	3501      	adds	r5, #1
 800ed7e:	e7c6      	b.n	800ed0e <_printf_common+0x3e>
 800ed80:	18e1      	adds	r1, r4, r3
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	2030      	movs	r0, #48	@ 0x30
 800ed86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed8a:	4422      	add	r2, r4
 800ed8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed94:	3302      	adds	r3, #2
 800ed96:	e7c7      	b.n	800ed28 <_printf_common+0x58>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	4622      	mov	r2, r4
 800ed9c:	4641      	mov	r1, r8
 800ed9e:	4638      	mov	r0, r7
 800eda0:	47c8      	blx	r9
 800eda2:	3001      	adds	r0, #1
 800eda4:	d0e6      	beq.n	800ed74 <_printf_common+0xa4>
 800eda6:	3601      	adds	r6, #1
 800eda8:	e7d9      	b.n	800ed5e <_printf_common+0x8e>
	...

0800edac <_printf_i>:
 800edac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edb0:	7e0f      	ldrb	r7, [r1, #24]
 800edb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edb4:	2f78      	cmp	r7, #120	@ 0x78
 800edb6:	4691      	mov	r9, r2
 800edb8:	4680      	mov	r8, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	469a      	mov	sl, r3
 800edbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edc2:	d807      	bhi.n	800edd4 <_printf_i+0x28>
 800edc4:	2f62      	cmp	r7, #98	@ 0x62
 800edc6:	d80a      	bhi.n	800edde <_printf_i+0x32>
 800edc8:	2f00      	cmp	r7, #0
 800edca:	f000 80d2 	beq.w	800ef72 <_printf_i+0x1c6>
 800edce:	2f58      	cmp	r7, #88	@ 0x58
 800edd0:	f000 80b9 	beq.w	800ef46 <_printf_i+0x19a>
 800edd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eddc:	e03a      	b.n	800ee54 <_printf_i+0xa8>
 800edde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ede2:	2b15      	cmp	r3, #21
 800ede4:	d8f6      	bhi.n	800edd4 <_printf_i+0x28>
 800ede6:	a101      	add	r1, pc, #4	@ (adr r1, 800edec <_printf_i+0x40>)
 800ede8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edec:	0800ee45 	.word	0x0800ee45
 800edf0:	0800ee59 	.word	0x0800ee59
 800edf4:	0800edd5 	.word	0x0800edd5
 800edf8:	0800edd5 	.word	0x0800edd5
 800edfc:	0800edd5 	.word	0x0800edd5
 800ee00:	0800edd5 	.word	0x0800edd5
 800ee04:	0800ee59 	.word	0x0800ee59
 800ee08:	0800edd5 	.word	0x0800edd5
 800ee0c:	0800edd5 	.word	0x0800edd5
 800ee10:	0800edd5 	.word	0x0800edd5
 800ee14:	0800edd5 	.word	0x0800edd5
 800ee18:	0800ef59 	.word	0x0800ef59
 800ee1c:	0800ee83 	.word	0x0800ee83
 800ee20:	0800ef13 	.word	0x0800ef13
 800ee24:	0800edd5 	.word	0x0800edd5
 800ee28:	0800edd5 	.word	0x0800edd5
 800ee2c:	0800ef7b 	.word	0x0800ef7b
 800ee30:	0800edd5 	.word	0x0800edd5
 800ee34:	0800ee83 	.word	0x0800ee83
 800ee38:	0800edd5 	.word	0x0800edd5
 800ee3c:	0800edd5 	.word	0x0800edd5
 800ee40:	0800ef1b 	.word	0x0800ef1b
 800ee44:	6833      	ldr	r3, [r6, #0]
 800ee46:	1d1a      	adds	r2, r3, #4
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6032      	str	r2, [r6, #0]
 800ee4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee54:	2301      	movs	r3, #1
 800ee56:	e09d      	b.n	800ef94 <_printf_i+0x1e8>
 800ee58:	6833      	ldr	r3, [r6, #0]
 800ee5a:	6820      	ldr	r0, [r4, #0]
 800ee5c:	1d19      	adds	r1, r3, #4
 800ee5e:	6031      	str	r1, [r6, #0]
 800ee60:	0606      	lsls	r6, r0, #24
 800ee62:	d501      	bpl.n	800ee68 <_printf_i+0xbc>
 800ee64:	681d      	ldr	r5, [r3, #0]
 800ee66:	e003      	b.n	800ee70 <_printf_i+0xc4>
 800ee68:	0645      	lsls	r5, r0, #25
 800ee6a:	d5fb      	bpl.n	800ee64 <_printf_i+0xb8>
 800ee6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee70:	2d00      	cmp	r5, #0
 800ee72:	da03      	bge.n	800ee7c <_printf_i+0xd0>
 800ee74:	232d      	movs	r3, #45	@ 0x2d
 800ee76:	426d      	negs	r5, r5
 800ee78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee7c:	4859      	ldr	r0, [pc, #356]	@ (800efe4 <_printf_i+0x238>)
 800ee7e:	230a      	movs	r3, #10
 800ee80:	e011      	b.n	800eea6 <_printf_i+0xfa>
 800ee82:	6821      	ldr	r1, [r4, #0]
 800ee84:	6833      	ldr	r3, [r6, #0]
 800ee86:	0608      	lsls	r0, r1, #24
 800ee88:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee8c:	d402      	bmi.n	800ee94 <_printf_i+0xe8>
 800ee8e:	0649      	lsls	r1, r1, #25
 800ee90:	bf48      	it	mi
 800ee92:	b2ad      	uxthmi	r5, r5
 800ee94:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee96:	4853      	ldr	r0, [pc, #332]	@ (800efe4 <_printf_i+0x238>)
 800ee98:	6033      	str	r3, [r6, #0]
 800ee9a:	bf14      	ite	ne
 800ee9c:	230a      	movne	r3, #10
 800ee9e:	2308      	moveq	r3, #8
 800eea0:	2100      	movs	r1, #0
 800eea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eea6:	6866      	ldr	r6, [r4, #4]
 800eea8:	60a6      	str	r6, [r4, #8]
 800eeaa:	2e00      	cmp	r6, #0
 800eeac:	bfa2      	ittt	ge
 800eeae:	6821      	ldrge	r1, [r4, #0]
 800eeb0:	f021 0104 	bicge.w	r1, r1, #4
 800eeb4:	6021      	strge	r1, [r4, #0]
 800eeb6:	b90d      	cbnz	r5, 800eebc <_printf_i+0x110>
 800eeb8:	2e00      	cmp	r6, #0
 800eeba:	d04b      	beq.n	800ef54 <_printf_i+0x1a8>
 800eebc:	4616      	mov	r6, r2
 800eebe:	fbb5 f1f3 	udiv	r1, r5, r3
 800eec2:	fb03 5711 	mls	r7, r3, r1, r5
 800eec6:	5dc7      	ldrb	r7, [r0, r7]
 800eec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eecc:	462f      	mov	r7, r5
 800eece:	42bb      	cmp	r3, r7
 800eed0:	460d      	mov	r5, r1
 800eed2:	d9f4      	bls.n	800eebe <_printf_i+0x112>
 800eed4:	2b08      	cmp	r3, #8
 800eed6:	d10b      	bne.n	800eef0 <_printf_i+0x144>
 800eed8:	6823      	ldr	r3, [r4, #0]
 800eeda:	07df      	lsls	r7, r3, #31
 800eedc:	d508      	bpl.n	800eef0 <_printf_i+0x144>
 800eede:	6923      	ldr	r3, [r4, #16]
 800eee0:	6861      	ldr	r1, [r4, #4]
 800eee2:	4299      	cmp	r1, r3
 800eee4:	bfde      	ittt	le
 800eee6:	2330      	movle	r3, #48	@ 0x30
 800eee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eef0:	1b92      	subs	r2, r2, r6
 800eef2:	6122      	str	r2, [r4, #16]
 800eef4:	f8cd a000 	str.w	sl, [sp]
 800eef8:	464b      	mov	r3, r9
 800eefa:	aa03      	add	r2, sp, #12
 800eefc:	4621      	mov	r1, r4
 800eefe:	4640      	mov	r0, r8
 800ef00:	f7ff fee6 	bl	800ecd0 <_printf_common>
 800ef04:	3001      	adds	r0, #1
 800ef06:	d14a      	bne.n	800ef9e <_printf_i+0x1f2>
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	b004      	add	sp, #16
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	f043 0320 	orr.w	r3, r3, #32
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	4833      	ldr	r0, [pc, #204]	@ (800efe8 <_printf_i+0x23c>)
 800ef1c:	2778      	movs	r7, #120	@ 0x78
 800ef1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	6831      	ldr	r1, [r6, #0]
 800ef26:	061f      	lsls	r7, r3, #24
 800ef28:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef2c:	d402      	bmi.n	800ef34 <_printf_i+0x188>
 800ef2e:	065f      	lsls	r7, r3, #25
 800ef30:	bf48      	it	mi
 800ef32:	b2ad      	uxthmi	r5, r5
 800ef34:	6031      	str	r1, [r6, #0]
 800ef36:	07d9      	lsls	r1, r3, #31
 800ef38:	bf44      	itt	mi
 800ef3a:	f043 0320 	orrmi.w	r3, r3, #32
 800ef3e:	6023      	strmi	r3, [r4, #0]
 800ef40:	b11d      	cbz	r5, 800ef4a <_printf_i+0x19e>
 800ef42:	2310      	movs	r3, #16
 800ef44:	e7ac      	b.n	800eea0 <_printf_i+0xf4>
 800ef46:	4827      	ldr	r0, [pc, #156]	@ (800efe4 <_printf_i+0x238>)
 800ef48:	e7e9      	b.n	800ef1e <_printf_i+0x172>
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	f023 0320 	bic.w	r3, r3, #32
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	e7f6      	b.n	800ef42 <_printf_i+0x196>
 800ef54:	4616      	mov	r6, r2
 800ef56:	e7bd      	b.n	800eed4 <_printf_i+0x128>
 800ef58:	6833      	ldr	r3, [r6, #0]
 800ef5a:	6825      	ldr	r5, [r4, #0]
 800ef5c:	6961      	ldr	r1, [r4, #20]
 800ef5e:	1d18      	adds	r0, r3, #4
 800ef60:	6030      	str	r0, [r6, #0]
 800ef62:	062e      	lsls	r6, r5, #24
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	d501      	bpl.n	800ef6c <_printf_i+0x1c0>
 800ef68:	6019      	str	r1, [r3, #0]
 800ef6a:	e002      	b.n	800ef72 <_printf_i+0x1c6>
 800ef6c:	0668      	lsls	r0, r5, #25
 800ef6e:	d5fb      	bpl.n	800ef68 <_printf_i+0x1bc>
 800ef70:	8019      	strh	r1, [r3, #0]
 800ef72:	2300      	movs	r3, #0
 800ef74:	6123      	str	r3, [r4, #16]
 800ef76:	4616      	mov	r6, r2
 800ef78:	e7bc      	b.n	800eef4 <_printf_i+0x148>
 800ef7a:	6833      	ldr	r3, [r6, #0]
 800ef7c:	1d1a      	adds	r2, r3, #4
 800ef7e:	6032      	str	r2, [r6, #0]
 800ef80:	681e      	ldr	r6, [r3, #0]
 800ef82:	6862      	ldr	r2, [r4, #4]
 800ef84:	2100      	movs	r1, #0
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7f1 f932 	bl	80001f0 <memchr>
 800ef8c:	b108      	cbz	r0, 800ef92 <_printf_i+0x1e6>
 800ef8e:	1b80      	subs	r0, r0, r6
 800ef90:	6060      	str	r0, [r4, #4]
 800ef92:	6863      	ldr	r3, [r4, #4]
 800ef94:	6123      	str	r3, [r4, #16]
 800ef96:	2300      	movs	r3, #0
 800ef98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef9c:	e7aa      	b.n	800eef4 <_printf_i+0x148>
 800ef9e:	6923      	ldr	r3, [r4, #16]
 800efa0:	4632      	mov	r2, r6
 800efa2:	4649      	mov	r1, r9
 800efa4:	4640      	mov	r0, r8
 800efa6:	47d0      	blx	sl
 800efa8:	3001      	adds	r0, #1
 800efaa:	d0ad      	beq.n	800ef08 <_printf_i+0x15c>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	079b      	lsls	r3, r3, #30
 800efb0:	d413      	bmi.n	800efda <_printf_i+0x22e>
 800efb2:	68e0      	ldr	r0, [r4, #12]
 800efb4:	9b03      	ldr	r3, [sp, #12]
 800efb6:	4298      	cmp	r0, r3
 800efb8:	bfb8      	it	lt
 800efba:	4618      	movlt	r0, r3
 800efbc:	e7a6      	b.n	800ef0c <_printf_i+0x160>
 800efbe:	2301      	movs	r3, #1
 800efc0:	4632      	mov	r2, r6
 800efc2:	4649      	mov	r1, r9
 800efc4:	4640      	mov	r0, r8
 800efc6:	47d0      	blx	sl
 800efc8:	3001      	adds	r0, #1
 800efca:	d09d      	beq.n	800ef08 <_printf_i+0x15c>
 800efcc:	3501      	adds	r5, #1
 800efce:	68e3      	ldr	r3, [r4, #12]
 800efd0:	9903      	ldr	r1, [sp, #12]
 800efd2:	1a5b      	subs	r3, r3, r1
 800efd4:	42ab      	cmp	r3, r5
 800efd6:	dcf2      	bgt.n	800efbe <_printf_i+0x212>
 800efd8:	e7eb      	b.n	800efb2 <_printf_i+0x206>
 800efda:	2500      	movs	r5, #0
 800efdc:	f104 0619 	add.w	r6, r4, #25
 800efe0:	e7f5      	b.n	800efce <_printf_i+0x222>
 800efe2:	bf00      	nop
 800efe4:	08015c51 	.word	0x08015c51
 800efe8:	08015c62 	.word	0x08015c62

0800efec <_scanf_float>:
 800efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	b087      	sub	sp, #28
 800eff2:	4617      	mov	r7, r2
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	688b      	ldr	r3, [r1, #8]
 800eff8:	1e5a      	subs	r2, r3, #1
 800effa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800effe:	bf81      	itttt	hi
 800f000:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f004:	eb03 0b05 	addhi.w	fp, r3, r5
 800f008:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f00c:	608b      	strhi	r3, [r1, #8]
 800f00e:	680b      	ldr	r3, [r1, #0]
 800f010:	460a      	mov	r2, r1
 800f012:	f04f 0500 	mov.w	r5, #0
 800f016:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f01a:	f842 3b1c 	str.w	r3, [r2], #28
 800f01e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f022:	4680      	mov	r8, r0
 800f024:	460c      	mov	r4, r1
 800f026:	bf98      	it	ls
 800f028:	f04f 0b00 	movls.w	fp, #0
 800f02c:	9201      	str	r2, [sp, #4]
 800f02e:	4616      	mov	r6, r2
 800f030:	46aa      	mov	sl, r5
 800f032:	46a9      	mov	r9, r5
 800f034:	9502      	str	r5, [sp, #8]
 800f036:	68a2      	ldr	r2, [r4, #8]
 800f038:	b152      	cbz	r2, 800f050 <_scanf_float+0x64>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f040:	d864      	bhi.n	800f10c <_scanf_float+0x120>
 800f042:	2b40      	cmp	r3, #64	@ 0x40
 800f044:	d83c      	bhi.n	800f0c0 <_scanf_float+0xd4>
 800f046:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f04a:	b2c8      	uxtb	r0, r1
 800f04c:	280e      	cmp	r0, #14
 800f04e:	d93a      	bls.n	800f0c6 <_scanf_float+0xda>
 800f050:	f1b9 0f00 	cmp.w	r9, #0
 800f054:	d003      	beq.n	800f05e <_scanf_float+0x72>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f062:	f1ba 0f01 	cmp.w	sl, #1
 800f066:	f200 8117 	bhi.w	800f298 <_scanf_float+0x2ac>
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	429e      	cmp	r6, r3
 800f06e:	f200 8108 	bhi.w	800f282 <_scanf_float+0x296>
 800f072:	2001      	movs	r0, #1
 800f074:	b007      	add	sp, #28
 800f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f07e:	2a0d      	cmp	r2, #13
 800f080:	d8e6      	bhi.n	800f050 <_scanf_float+0x64>
 800f082:	a101      	add	r1, pc, #4	@ (adr r1, 800f088 <_scanf_float+0x9c>)
 800f084:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f088:	0800f1cf 	.word	0x0800f1cf
 800f08c:	0800f051 	.word	0x0800f051
 800f090:	0800f051 	.word	0x0800f051
 800f094:	0800f051 	.word	0x0800f051
 800f098:	0800f22f 	.word	0x0800f22f
 800f09c:	0800f207 	.word	0x0800f207
 800f0a0:	0800f051 	.word	0x0800f051
 800f0a4:	0800f051 	.word	0x0800f051
 800f0a8:	0800f1dd 	.word	0x0800f1dd
 800f0ac:	0800f051 	.word	0x0800f051
 800f0b0:	0800f051 	.word	0x0800f051
 800f0b4:	0800f051 	.word	0x0800f051
 800f0b8:	0800f051 	.word	0x0800f051
 800f0bc:	0800f195 	.word	0x0800f195
 800f0c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f0c4:	e7db      	b.n	800f07e <_scanf_float+0x92>
 800f0c6:	290e      	cmp	r1, #14
 800f0c8:	d8c2      	bhi.n	800f050 <_scanf_float+0x64>
 800f0ca:	a001      	add	r0, pc, #4	@ (adr r0, 800f0d0 <_scanf_float+0xe4>)
 800f0cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f0d0:	0800f185 	.word	0x0800f185
 800f0d4:	0800f051 	.word	0x0800f051
 800f0d8:	0800f185 	.word	0x0800f185
 800f0dc:	0800f21b 	.word	0x0800f21b
 800f0e0:	0800f051 	.word	0x0800f051
 800f0e4:	0800f12d 	.word	0x0800f12d
 800f0e8:	0800f16b 	.word	0x0800f16b
 800f0ec:	0800f16b 	.word	0x0800f16b
 800f0f0:	0800f16b 	.word	0x0800f16b
 800f0f4:	0800f16b 	.word	0x0800f16b
 800f0f8:	0800f16b 	.word	0x0800f16b
 800f0fc:	0800f16b 	.word	0x0800f16b
 800f100:	0800f16b 	.word	0x0800f16b
 800f104:	0800f16b 	.word	0x0800f16b
 800f108:	0800f16b 	.word	0x0800f16b
 800f10c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f10e:	d809      	bhi.n	800f124 <_scanf_float+0x138>
 800f110:	2b60      	cmp	r3, #96	@ 0x60
 800f112:	d8b2      	bhi.n	800f07a <_scanf_float+0x8e>
 800f114:	2b54      	cmp	r3, #84	@ 0x54
 800f116:	d07b      	beq.n	800f210 <_scanf_float+0x224>
 800f118:	2b59      	cmp	r3, #89	@ 0x59
 800f11a:	d199      	bne.n	800f050 <_scanf_float+0x64>
 800f11c:	2d07      	cmp	r5, #7
 800f11e:	d197      	bne.n	800f050 <_scanf_float+0x64>
 800f120:	2508      	movs	r5, #8
 800f122:	e02c      	b.n	800f17e <_scanf_float+0x192>
 800f124:	2b74      	cmp	r3, #116	@ 0x74
 800f126:	d073      	beq.n	800f210 <_scanf_float+0x224>
 800f128:	2b79      	cmp	r3, #121	@ 0x79
 800f12a:	e7f6      	b.n	800f11a <_scanf_float+0x12e>
 800f12c:	6821      	ldr	r1, [r4, #0]
 800f12e:	05c8      	lsls	r0, r1, #23
 800f130:	d51b      	bpl.n	800f16a <_scanf_float+0x17e>
 800f132:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f136:	6021      	str	r1, [r4, #0]
 800f138:	f109 0901 	add.w	r9, r9, #1
 800f13c:	f1bb 0f00 	cmp.w	fp, #0
 800f140:	d003      	beq.n	800f14a <_scanf_float+0x15e>
 800f142:	3201      	adds	r2, #1
 800f144:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f148:	60a2      	str	r2, [r4, #8]
 800f14a:	68a3      	ldr	r3, [r4, #8]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	60a3      	str	r3, [r4, #8]
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	3301      	adds	r3, #1
 800f154:	6123      	str	r3, [r4, #16]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3b01      	subs	r3, #1
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	607b      	str	r3, [r7, #4]
 800f15e:	f340 8087 	ble.w	800f270 <_scanf_float+0x284>
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	3301      	adds	r3, #1
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	e765      	b.n	800f036 <_scanf_float+0x4a>
 800f16a:	eb1a 0105 	adds.w	r1, sl, r5
 800f16e:	f47f af6f 	bne.w	800f050 <_scanf_float+0x64>
 800f172:	6822      	ldr	r2, [r4, #0]
 800f174:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f178:	6022      	str	r2, [r4, #0]
 800f17a:	460d      	mov	r5, r1
 800f17c:	468a      	mov	sl, r1
 800f17e:	f806 3b01 	strb.w	r3, [r6], #1
 800f182:	e7e2      	b.n	800f14a <_scanf_float+0x15e>
 800f184:	6822      	ldr	r2, [r4, #0]
 800f186:	0610      	lsls	r0, r2, #24
 800f188:	f57f af62 	bpl.w	800f050 <_scanf_float+0x64>
 800f18c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f190:	6022      	str	r2, [r4, #0]
 800f192:	e7f4      	b.n	800f17e <_scanf_float+0x192>
 800f194:	f1ba 0f00 	cmp.w	sl, #0
 800f198:	d10e      	bne.n	800f1b8 <_scanf_float+0x1cc>
 800f19a:	f1b9 0f00 	cmp.w	r9, #0
 800f19e:	d10e      	bne.n	800f1be <_scanf_float+0x1d2>
 800f1a0:	6822      	ldr	r2, [r4, #0]
 800f1a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1aa:	d108      	bne.n	800f1be <_scanf_float+0x1d2>
 800f1ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1b0:	6022      	str	r2, [r4, #0]
 800f1b2:	f04f 0a01 	mov.w	sl, #1
 800f1b6:	e7e2      	b.n	800f17e <_scanf_float+0x192>
 800f1b8:	f1ba 0f02 	cmp.w	sl, #2
 800f1bc:	d055      	beq.n	800f26a <_scanf_float+0x27e>
 800f1be:	2d01      	cmp	r5, #1
 800f1c0:	d002      	beq.n	800f1c8 <_scanf_float+0x1dc>
 800f1c2:	2d04      	cmp	r5, #4
 800f1c4:	f47f af44 	bne.w	800f050 <_scanf_float+0x64>
 800f1c8:	3501      	adds	r5, #1
 800f1ca:	b2ed      	uxtb	r5, r5
 800f1cc:	e7d7      	b.n	800f17e <_scanf_float+0x192>
 800f1ce:	f1ba 0f01 	cmp.w	sl, #1
 800f1d2:	f47f af3d 	bne.w	800f050 <_scanf_float+0x64>
 800f1d6:	f04f 0a02 	mov.w	sl, #2
 800f1da:	e7d0      	b.n	800f17e <_scanf_float+0x192>
 800f1dc:	b97d      	cbnz	r5, 800f1fe <_scanf_float+0x212>
 800f1de:	f1b9 0f00 	cmp.w	r9, #0
 800f1e2:	f47f af38 	bne.w	800f056 <_scanf_float+0x6a>
 800f1e6:	6822      	ldr	r2, [r4, #0]
 800f1e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1f0:	f040 8108 	bne.w	800f404 <_scanf_float+0x418>
 800f1f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1f8:	6022      	str	r2, [r4, #0]
 800f1fa:	2501      	movs	r5, #1
 800f1fc:	e7bf      	b.n	800f17e <_scanf_float+0x192>
 800f1fe:	2d03      	cmp	r5, #3
 800f200:	d0e2      	beq.n	800f1c8 <_scanf_float+0x1dc>
 800f202:	2d05      	cmp	r5, #5
 800f204:	e7de      	b.n	800f1c4 <_scanf_float+0x1d8>
 800f206:	2d02      	cmp	r5, #2
 800f208:	f47f af22 	bne.w	800f050 <_scanf_float+0x64>
 800f20c:	2503      	movs	r5, #3
 800f20e:	e7b6      	b.n	800f17e <_scanf_float+0x192>
 800f210:	2d06      	cmp	r5, #6
 800f212:	f47f af1d 	bne.w	800f050 <_scanf_float+0x64>
 800f216:	2507      	movs	r5, #7
 800f218:	e7b1      	b.n	800f17e <_scanf_float+0x192>
 800f21a:	6822      	ldr	r2, [r4, #0]
 800f21c:	0591      	lsls	r1, r2, #22
 800f21e:	f57f af17 	bpl.w	800f050 <_scanf_float+0x64>
 800f222:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	f8cd 9008 	str.w	r9, [sp, #8]
 800f22c:	e7a7      	b.n	800f17e <_scanf_float+0x192>
 800f22e:	6822      	ldr	r2, [r4, #0]
 800f230:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f234:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f238:	d006      	beq.n	800f248 <_scanf_float+0x25c>
 800f23a:	0550      	lsls	r0, r2, #21
 800f23c:	f57f af08 	bpl.w	800f050 <_scanf_float+0x64>
 800f240:	f1b9 0f00 	cmp.w	r9, #0
 800f244:	f000 80de 	beq.w	800f404 <_scanf_float+0x418>
 800f248:	0591      	lsls	r1, r2, #22
 800f24a:	bf58      	it	pl
 800f24c:	9902      	ldrpl	r1, [sp, #8]
 800f24e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f252:	bf58      	it	pl
 800f254:	eba9 0101 	subpl.w	r1, r9, r1
 800f258:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f25c:	bf58      	it	pl
 800f25e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f262:	6022      	str	r2, [r4, #0]
 800f264:	f04f 0900 	mov.w	r9, #0
 800f268:	e789      	b.n	800f17e <_scanf_float+0x192>
 800f26a:	f04f 0a03 	mov.w	sl, #3
 800f26e:	e786      	b.n	800f17e <_scanf_float+0x192>
 800f270:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f274:	4639      	mov	r1, r7
 800f276:	4640      	mov	r0, r8
 800f278:	4798      	blx	r3
 800f27a:	2800      	cmp	r0, #0
 800f27c:	f43f aedb 	beq.w	800f036 <_scanf_float+0x4a>
 800f280:	e6e6      	b.n	800f050 <_scanf_float+0x64>
 800f282:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f28a:	463a      	mov	r2, r7
 800f28c:	4640      	mov	r0, r8
 800f28e:	4798      	blx	r3
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	3b01      	subs	r3, #1
 800f294:	6123      	str	r3, [r4, #16]
 800f296:	e6e8      	b.n	800f06a <_scanf_float+0x7e>
 800f298:	1e6b      	subs	r3, r5, #1
 800f29a:	2b06      	cmp	r3, #6
 800f29c:	d824      	bhi.n	800f2e8 <_scanf_float+0x2fc>
 800f29e:	2d02      	cmp	r5, #2
 800f2a0:	d836      	bhi.n	800f310 <_scanf_float+0x324>
 800f2a2:	9b01      	ldr	r3, [sp, #4]
 800f2a4:	429e      	cmp	r6, r3
 800f2a6:	f67f aee4 	bls.w	800f072 <_scanf_float+0x86>
 800f2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2b2:	463a      	mov	r2, r7
 800f2b4:	4640      	mov	r0, r8
 800f2b6:	4798      	blx	r3
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	e7f0      	b.n	800f2a2 <_scanf_float+0x2b6>
 800f2c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f2c8:	463a      	mov	r2, r7
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	4798      	blx	r3
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	6123      	str	r3, [r4, #16]
 800f2d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2d8:	fa5f fa8a 	uxtb.w	sl, sl
 800f2dc:	f1ba 0f02 	cmp.w	sl, #2
 800f2e0:	d1ee      	bne.n	800f2c0 <_scanf_float+0x2d4>
 800f2e2:	3d03      	subs	r5, #3
 800f2e4:	b2ed      	uxtb	r5, r5
 800f2e6:	1b76      	subs	r6, r6, r5
 800f2e8:	6823      	ldr	r3, [r4, #0]
 800f2ea:	05da      	lsls	r2, r3, #23
 800f2ec:	d530      	bpl.n	800f350 <_scanf_float+0x364>
 800f2ee:	055b      	lsls	r3, r3, #21
 800f2f0:	d511      	bpl.n	800f316 <_scanf_float+0x32a>
 800f2f2:	9b01      	ldr	r3, [sp, #4]
 800f2f4:	429e      	cmp	r6, r3
 800f2f6:	f67f aebc 	bls.w	800f072 <_scanf_float+0x86>
 800f2fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f302:	463a      	mov	r2, r7
 800f304:	4640      	mov	r0, r8
 800f306:	4798      	blx	r3
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	6123      	str	r3, [r4, #16]
 800f30e:	e7f0      	b.n	800f2f2 <_scanf_float+0x306>
 800f310:	46aa      	mov	sl, r5
 800f312:	46b3      	mov	fp, r6
 800f314:	e7de      	b.n	800f2d4 <_scanf_float+0x2e8>
 800f316:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f31a:	6923      	ldr	r3, [r4, #16]
 800f31c:	2965      	cmp	r1, #101	@ 0x65
 800f31e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f322:	f106 35ff 	add.w	r5, r6, #4294967295
 800f326:	6123      	str	r3, [r4, #16]
 800f328:	d00c      	beq.n	800f344 <_scanf_float+0x358>
 800f32a:	2945      	cmp	r1, #69	@ 0x45
 800f32c:	d00a      	beq.n	800f344 <_scanf_float+0x358>
 800f32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f332:	463a      	mov	r2, r7
 800f334:	4640      	mov	r0, r8
 800f336:	4798      	blx	r3
 800f338:	6923      	ldr	r3, [r4, #16]
 800f33a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f33e:	3b01      	subs	r3, #1
 800f340:	1eb5      	subs	r5, r6, #2
 800f342:	6123      	str	r3, [r4, #16]
 800f344:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f348:	463a      	mov	r2, r7
 800f34a:	4640      	mov	r0, r8
 800f34c:	4798      	blx	r3
 800f34e:	462e      	mov	r6, r5
 800f350:	6822      	ldr	r2, [r4, #0]
 800f352:	f012 0210 	ands.w	r2, r2, #16
 800f356:	d001      	beq.n	800f35c <_scanf_float+0x370>
 800f358:	2000      	movs	r0, #0
 800f35a:	e68b      	b.n	800f074 <_scanf_float+0x88>
 800f35c:	7032      	strb	r2, [r6, #0]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f368:	d11c      	bne.n	800f3a4 <_scanf_float+0x3b8>
 800f36a:	9b02      	ldr	r3, [sp, #8]
 800f36c:	454b      	cmp	r3, r9
 800f36e:	eba3 0209 	sub.w	r2, r3, r9
 800f372:	d123      	bne.n	800f3bc <_scanf_float+0x3d0>
 800f374:	9901      	ldr	r1, [sp, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	4640      	mov	r0, r8
 800f37a:	f7ff f9cd 	bl	800e718 <_strtod_r>
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	6821      	ldr	r1, [r4, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f011 0f02 	tst.w	r1, #2
 800f388:	ec57 6b10 	vmov	r6, r7, d0
 800f38c:	f103 0204 	add.w	r2, r3, #4
 800f390:	d01f      	beq.n	800f3d2 <_scanf_float+0x3e6>
 800f392:	9903      	ldr	r1, [sp, #12]
 800f394:	600a      	str	r2, [r1, #0]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	e9c3 6700 	strd	r6, r7, [r3]
 800f39c:	68e3      	ldr	r3, [r4, #12]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	60e3      	str	r3, [r4, #12]
 800f3a2:	e7d9      	b.n	800f358 <_scanf_float+0x36c>
 800f3a4:	9b04      	ldr	r3, [sp, #16]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0e4      	beq.n	800f374 <_scanf_float+0x388>
 800f3aa:	9905      	ldr	r1, [sp, #20]
 800f3ac:	230a      	movs	r3, #10
 800f3ae:	3101      	adds	r1, #1
 800f3b0:	4640      	mov	r0, r8
 800f3b2:	f002 fafb 	bl	80119ac <_strtol_r>
 800f3b6:	9b04      	ldr	r3, [sp, #16]
 800f3b8:	9e05      	ldr	r6, [sp, #20]
 800f3ba:	1ac2      	subs	r2, r0, r3
 800f3bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f3c0:	429e      	cmp	r6, r3
 800f3c2:	bf28      	it	cs
 800f3c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f3c8:	4910      	ldr	r1, [pc, #64]	@ (800f40c <_scanf_float+0x420>)
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f000 f966 	bl	800f69c <siprintf>
 800f3d0:	e7d0      	b.n	800f374 <_scanf_float+0x388>
 800f3d2:	f011 0f04 	tst.w	r1, #4
 800f3d6:	9903      	ldr	r1, [sp, #12]
 800f3d8:	600a      	str	r2, [r1, #0]
 800f3da:	d1dc      	bne.n	800f396 <_scanf_float+0x3aa>
 800f3dc:	681d      	ldr	r5, [r3, #0]
 800f3de:	4632      	mov	r2, r6
 800f3e0:	463b      	mov	r3, r7
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	4639      	mov	r1, r7
 800f3e6:	f7f1 fbb1 	bl	8000b4c <__aeabi_dcmpun>
 800f3ea:	b128      	cbz	r0, 800f3f8 <_scanf_float+0x40c>
 800f3ec:	4808      	ldr	r0, [pc, #32]	@ (800f410 <_scanf_float+0x424>)
 800f3ee:	f000 fba3 	bl	800fb38 <nanf>
 800f3f2:	ed85 0a00 	vstr	s0, [r5]
 800f3f6:	e7d1      	b.n	800f39c <_scanf_float+0x3b0>
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	4639      	mov	r1, r7
 800f3fc:	f7f1 fc04 	bl	8000c08 <__aeabi_d2f>
 800f400:	6028      	str	r0, [r5, #0]
 800f402:	e7cb      	b.n	800f39c <_scanf_float+0x3b0>
 800f404:	f04f 0900 	mov.w	r9, #0
 800f408:	e629      	b.n	800f05e <_scanf_float+0x72>
 800f40a:	bf00      	nop
 800f40c:	08015c73 	.word	0x08015c73
 800f410:	08015d2c 	.word	0x08015d2c

0800f414 <std>:
 800f414:	2300      	movs	r3, #0
 800f416:	b510      	push	{r4, lr}
 800f418:	4604      	mov	r4, r0
 800f41a:	e9c0 3300 	strd	r3, r3, [r0]
 800f41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f422:	6083      	str	r3, [r0, #8]
 800f424:	8181      	strh	r1, [r0, #12]
 800f426:	6643      	str	r3, [r0, #100]	@ 0x64
 800f428:	81c2      	strh	r2, [r0, #14]
 800f42a:	6183      	str	r3, [r0, #24]
 800f42c:	4619      	mov	r1, r3
 800f42e:	2208      	movs	r2, #8
 800f430:	305c      	adds	r0, #92	@ 0x5c
 800f432:	f000 fa57 	bl	800f8e4 <memset>
 800f436:	4b0d      	ldr	r3, [pc, #52]	@ (800f46c <std+0x58>)
 800f438:	6263      	str	r3, [r4, #36]	@ 0x24
 800f43a:	4b0d      	ldr	r3, [pc, #52]	@ (800f470 <std+0x5c>)
 800f43c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f43e:	4b0d      	ldr	r3, [pc, #52]	@ (800f474 <std+0x60>)
 800f440:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f442:	4b0d      	ldr	r3, [pc, #52]	@ (800f478 <std+0x64>)
 800f444:	6323      	str	r3, [r4, #48]	@ 0x30
 800f446:	4b0d      	ldr	r3, [pc, #52]	@ (800f47c <std+0x68>)
 800f448:	6224      	str	r4, [r4, #32]
 800f44a:	429c      	cmp	r4, r3
 800f44c:	d006      	beq.n	800f45c <std+0x48>
 800f44e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f452:	4294      	cmp	r4, r2
 800f454:	d002      	beq.n	800f45c <std+0x48>
 800f456:	33d0      	adds	r3, #208	@ 0xd0
 800f458:	429c      	cmp	r4, r3
 800f45a:	d105      	bne.n	800f468 <std+0x54>
 800f45c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f464:	f000 bb4e 	b.w	800fb04 <__retarget_lock_init_recursive>
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	bf00      	nop
 800f46c:	0800f731 	.word	0x0800f731
 800f470:	0800f757 	.word	0x0800f757
 800f474:	0800f78f 	.word	0x0800f78f
 800f478:	0800f7b3 	.word	0x0800f7b3
 800f47c:	20000ea4 	.word	0x20000ea4

0800f480 <stdio_exit_handler>:
 800f480:	4a02      	ldr	r2, [pc, #8]	@ (800f48c <stdio_exit_handler+0xc>)
 800f482:	4903      	ldr	r1, [pc, #12]	@ (800f490 <stdio_exit_handler+0x10>)
 800f484:	4803      	ldr	r0, [pc, #12]	@ (800f494 <stdio_exit_handler+0x14>)
 800f486:	f000 b87b 	b.w	800f580 <_fwalk_sglue>
 800f48a:	bf00      	nop
 800f48c:	2000001c 	.word	0x2000001c
 800f490:	08012639 	.word	0x08012639
 800f494:	20000198 	.word	0x20000198

0800f498 <cleanup_stdio>:
 800f498:	6841      	ldr	r1, [r0, #4]
 800f49a:	4b0c      	ldr	r3, [pc, #48]	@ (800f4cc <cleanup_stdio+0x34>)
 800f49c:	4299      	cmp	r1, r3
 800f49e:	b510      	push	{r4, lr}
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	d001      	beq.n	800f4a8 <cleanup_stdio+0x10>
 800f4a4:	f003 f8c8 	bl	8012638 <_fflush_r>
 800f4a8:	68a1      	ldr	r1, [r4, #8]
 800f4aa:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <cleanup_stdio+0x38>)
 800f4ac:	4299      	cmp	r1, r3
 800f4ae:	d002      	beq.n	800f4b6 <cleanup_stdio+0x1e>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f003 f8c1 	bl	8012638 <_fflush_r>
 800f4b6:	68e1      	ldr	r1, [r4, #12]
 800f4b8:	4b06      	ldr	r3, [pc, #24]	@ (800f4d4 <cleanup_stdio+0x3c>)
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	d004      	beq.n	800f4c8 <cleanup_stdio+0x30>
 800f4be:	4620      	mov	r0, r4
 800f4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c4:	f003 b8b8 	b.w	8012638 <_fflush_r>
 800f4c8:	bd10      	pop	{r4, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20000ea4 	.word	0x20000ea4
 800f4d0:	20000f0c 	.word	0x20000f0c
 800f4d4:	20000f74 	.word	0x20000f74

0800f4d8 <global_stdio_init.part.0>:
 800f4d8:	b510      	push	{r4, lr}
 800f4da:	4b0b      	ldr	r3, [pc, #44]	@ (800f508 <global_stdio_init.part.0+0x30>)
 800f4dc:	4c0b      	ldr	r4, [pc, #44]	@ (800f50c <global_stdio_init.part.0+0x34>)
 800f4de:	4a0c      	ldr	r2, [pc, #48]	@ (800f510 <global_stdio_init.part.0+0x38>)
 800f4e0:	601a      	str	r2, [r3, #0]
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	2104      	movs	r1, #4
 800f4e8:	f7ff ff94 	bl	800f414 <std>
 800f4ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	2109      	movs	r1, #9
 800f4f4:	f7ff ff8e 	bl	800f414 <std>
 800f4f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4fc:	2202      	movs	r2, #2
 800f4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f502:	2112      	movs	r1, #18
 800f504:	f7ff bf86 	b.w	800f414 <std>
 800f508:	20000fdc 	.word	0x20000fdc
 800f50c:	20000ea4 	.word	0x20000ea4
 800f510:	0800f481 	.word	0x0800f481

0800f514 <__sfp_lock_acquire>:
 800f514:	4801      	ldr	r0, [pc, #4]	@ (800f51c <__sfp_lock_acquire+0x8>)
 800f516:	f000 baf6 	b.w	800fb06 <__retarget_lock_acquire_recursive>
 800f51a:	bf00      	nop
 800f51c:	20000fe5 	.word	0x20000fe5

0800f520 <__sfp_lock_release>:
 800f520:	4801      	ldr	r0, [pc, #4]	@ (800f528 <__sfp_lock_release+0x8>)
 800f522:	f000 baf1 	b.w	800fb08 <__retarget_lock_release_recursive>
 800f526:	bf00      	nop
 800f528:	20000fe5 	.word	0x20000fe5

0800f52c <__sinit>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	4604      	mov	r4, r0
 800f530:	f7ff fff0 	bl	800f514 <__sfp_lock_acquire>
 800f534:	6a23      	ldr	r3, [r4, #32]
 800f536:	b11b      	cbz	r3, 800f540 <__sinit+0x14>
 800f538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53c:	f7ff bff0 	b.w	800f520 <__sfp_lock_release>
 800f540:	4b04      	ldr	r3, [pc, #16]	@ (800f554 <__sinit+0x28>)
 800f542:	6223      	str	r3, [r4, #32]
 800f544:	4b04      	ldr	r3, [pc, #16]	@ (800f558 <__sinit+0x2c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1f5      	bne.n	800f538 <__sinit+0xc>
 800f54c:	f7ff ffc4 	bl	800f4d8 <global_stdio_init.part.0>
 800f550:	e7f2      	b.n	800f538 <__sinit+0xc>
 800f552:	bf00      	nop
 800f554:	0800f499 	.word	0x0800f499
 800f558:	20000fdc 	.word	0x20000fdc

0800f55c <fiprintf>:
 800f55c:	b40e      	push	{r1, r2, r3}
 800f55e:	b503      	push	{r0, r1, lr}
 800f560:	4601      	mov	r1, r0
 800f562:	ab03      	add	r3, sp, #12
 800f564:	4805      	ldr	r0, [pc, #20]	@ (800f57c <fiprintf+0x20>)
 800f566:	f853 2b04 	ldr.w	r2, [r3], #4
 800f56a:	6800      	ldr	r0, [r0, #0]
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	f002 fd79 	bl	8012064 <_vfiprintf_r>
 800f572:	b002      	add	sp, #8
 800f574:	f85d eb04 	ldr.w	lr, [sp], #4
 800f578:	b003      	add	sp, #12
 800f57a:	4770      	bx	lr
 800f57c:	20000194 	.word	0x20000194

0800f580 <_fwalk_sglue>:
 800f580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f584:	4607      	mov	r7, r0
 800f586:	4688      	mov	r8, r1
 800f588:	4614      	mov	r4, r2
 800f58a:	2600      	movs	r6, #0
 800f58c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f590:	f1b9 0901 	subs.w	r9, r9, #1
 800f594:	d505      	bpl.n	800f5a2 <_fwalk_sglue+0x22>
 800f596:	6824      	ldr	r4, [r4, #0]
 800f598:	2c00      	cmp	r4, #0
 800f59a:	d1f7      	bne.n	800f58c <_fwalk_sglue+0xc>
 800f59c:	4630      	mov	r0, r6
 800f59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5a2:	89ab      	ldrh	r3, [r5, #12]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d907      	bls.n	800f5b8 <_fwalk_sglue+0x38>
 800f5a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	d003      	beq.n	800f5b8 <_fwalk_sglue+0x38>
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	47c0      	blx	r8
 800f5b6:	4306      	orrs	r6, r0
 800f5b8:	3568      	adds	r5, #104	@ 0x68
 800f5ba:	e7e9      	b.n	800f590 <_fwalk_sglue+0x10>

0800f5bc <iprintf>:
 800f5bc:	b40f      	push	{r0, r1, r2, r3}
 800f5be:	b507      	push	{r0, r1, r2, lr}
 800f5c0:	4906      	ldr	r1, [pc, #24]	@ (800f5dc <iprintf+0x20>)
 800f5c2:	ab04      	add	r3, sp, #16
 800f5c4:	6808      	ldr	r0, [r1, #0]
 800f5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ca:	6881      	ldr	r1, [r0, #8]
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	f002 fd49 	bl	8012064 <_vfiprintf_r>
 800f5d2:	b003      	add	sp, #12
 800f5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5d8:	b004      	add	sp, #16
 800f5da:	4770      	bx	lr
 800f5dc:	20000194 	.word	0x20000194

0800f5e0 <_puts_r>:
 800f5e0:	6a03      	ldr	r3, [r0, #32]
 800f5e2:	b570      	push	{r4, r5, r6, lr}
 800f5e4:	6884      	ldr	r4, [r0, #8]
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	b90b      	cbnz	r3, 800f5f0 <_puts_r+0x10>
 800f5ec:	f7ff ff9e 	bl	800f52c <__sinit>
 800f5f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5f2:	07db      	lsls	r3, r3, #31
 800f5f4:	d405      	bmi.n	800f602 <_puts_r+0x22>
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	0598      	lsls	r0, r3, #22
 800f5fa:	d402      	bmi.n	800f602 <_puts_r+0x22>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5fe:	f000 fa82 	bl	800fb06 <__retarget_lock_acquire_recursive>
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	0719      	lsls	r1, r3, #28
 800f606:	d502      	bpl.n	800f60e <_puts_r+0x2e>
 800f608:	6923      	ldr	r3, [r4, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d135      	bne.n	800f67a <_puts_r+0x9a>
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	f000 f911 	bl	800f838 <__swsetup_r>
 800f616:	b380      	cbz	r0, 800f67a <_puts_r+0x9a>
 800f618:	f04f 35ff 	mov.w	r5, #4294967295
 800f61c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f61e:	07da      	lsls	r2, r3, #31
 800f620:	d405      	bmi.n	800f62e <_puts_r+0x4e>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	059b      	lsls	r3, r3, #22
 800f626:	d402      	bmi.n	800f62e <_puts_r+0x4e>
 800f628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f62a:	f000 fa6d 	bl	800fb08 <__retarget_lock_release_recursive>
 800f62e:	4628      	mov	r0, r5
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	2b00      	cmp	r3, #0
 800f634:	da04      	bge.n	800f640 <_puts_r+0x60>
 800f636:	69a2      	ldr	r2, [r4, #24]
 800f638:	429a      	cmp	r2, r3
 800f63a:	dc17      	bgt.n	800f66c <_puts_r+0x8c>
 800f63c:	290a      	cmp	r1, #10
 800f63e:	d015      	beq.n	800f66c <_puts_r+0x8c>
 800f640:	6823      	ldr	r3, [r4, #0]
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	6022      	str	r2, [r4, #0]
 800f646:	7019      	strb	r1, [r3, #0]
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f64e:	3b01      	subs	r3, #1
 800f650:	60a3      	str	r3, [r4, #8]
 800f652:	2900      	cmp	r1, #0
 800f654:	d1ed      	bne.n	800f632 <_puts_r+0x52>
 800f656:	2b00      	cmp	r3, #0
 800f658:	da11      	bge.n	800f67e <_puts_r+0x9e>
 800f65a:	4622      	mov	r2, r4
 800f65c:	210a      	movs	r1, #10
 800f65e:	4628      	mov	r0, r5
 800f660:	f000 f8ab 	bl	800f7ba <__swbuf_r>
 800f664:	3001      	adds	r0, #1
 800f666:	d0d7      	beq.n	800f618 <_puts_r+0x38>
 800f668:	250a      	movs	r5, #10
 800f66a:	e7d7      	b.n	800f61c <_puts_r+0x3c>
 800f66c:	4622      	mov	r2, r4
 800f66e:	4628      	mov	r0, r5
 800f670:	f000 f8a3 	bl	800f7ba <__swbuf_r>
 800f674:	3001      	adds	r0, #1
 800f676:	d1e7      	bne.n	800f648 <_puts_r+0x68>
 800f678:	e7ce      	b.n	800f618 <_puts_r+0x38>
 800f67a:	3e01      	subs	r6, #1
 800f67c:	e7e4      	b.n	800f648 <_puts_r+0x68>
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	1c5a      	adds	r2, r3, #1
 800f682:	6022      	str	r2, [r4, #0]
 800f684:	220a      	movs	r2, #10
 800f686:	701a      	strb	r2, [r3, #0]
 800f688:	e7ee      	b.n	800f668 <_puts_r+0x88>
	...

0800f68c <puts>:
 800f68c:	4b02      	ldr	r3, [pc, #8]	@ (800f698 <puts+0xc>)
 800f68e:	4601      	mov	r1, r0
 800f690:	6818      	ldr	r0, [r3, #0]
 800f692:	f7ff bfa5 	b.w	800f5e0 <_puts_r>
 800f696:	bf00      	nop
 800f698:	20000194 	.word	0x20000194

0800f69c <siprintf>:
 800f69c:	b40e      	push	{r1, r2, r3}
 800f69e:	b500      	push	{lr}
 800f6a0:	b09c      	sub	sp, #112	@ 0x70
 800f6a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f6a4:	9002      	str	r0, [sp, #8]
 800f6a6:	9006      	str	r0, [sp, #24]
 800f6a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f6ac:	4809      	ldr	r0, [pc, #36]	@ (800f6d4 <siprintf+0x38>)
 800f6ae:	9107      	str	r1, [sp, #28]
 800f6b0:	9104      	str	r1, [sp, #16]
 800f6b2:	4909      	ldr	r1, [pc, #36]	@ (800f6d8 <siprintf+0x3c>)
 800f6b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6b8:	9105      	str	r1, [sp, #20]
 800f6ba:	6800      	ldr	r0, [r0, #0]
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	a902      	add	r1, sp, #8
 800f6c0:	f002 f9de 	bl	8011a80 <_svfiprintf_r>
 800f6c4:	9b02      	ldr	r3, [sp, #8]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	701a      	strb	r2, [r3, #0]
 800f6ca:	b01c      	add	sp, #112	@ 0x70
 800f6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6d0:	b003      	add	sp, #12
 800f6d2:	4770      	bx	lr
 800f6d4:	20000194 	.word	0x20000194
 800f6d8:	ffff0208 	.word	0xffff0208

0800f6dc <siscanf>:
 800f6dc:	b40e      	push	{r1, r2, r3}
 800f6de:	b530      	push	{r4, r5, lr}
 800f6e0:	b09c      	sub	sp, #112	@ 0x70
 800f6e2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f6e4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f6e8:	f854 5b04 	ldr.w	r5, [r4], #4
 800f6ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f6f0:	9002      	str	r0, [sp, #8]
 800f6f2:	9006      	str	r0, [sp, #24]
 800f6f4:	f7f0 fdcc 	bl	8000290 <strlen>
 800f6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800f728 <siscanf+0x4c>)
 800f6fa:	9003      	str	r0, [sp, #12]
 800f6fc:	9007      	str	r0, [sp, #28]
 800f6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f700:	480a      	ldr	r0, [pc, #40]	@ (800f72c <siscanf+0x50>)
 800f702:	9401      	str	r4, [sp, #4]
 800f704:	2300      	movs	r3, #0
 800f706:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f708:	9314      	str	r3, [sp, #80]	@ 0x50
 800f70a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f70e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f712:	462a      	mov	r2, r5
 800f714:	4623      	mov	r3, r4
 800f716:	a902      	add	r1, sp, #8
 800f718:	6800      	ldr	r0, [r0, #0]
 800f71a:	f002 fb05 	bl	8011d28 <__ssvfiscanf_r>
 800f71e:	b01c      	add	sp, #112	@ 0x70
 800f720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f724:	b003      	add	sp, #12
 800f726:	4770      	bx	lr
 800f728:	0800f753 	.word	0x0800f753
 800f72c:	20000194 	.word	0x20000194

0800f730 <__sread>:
 800f730:	b510      	push	{r4, lr}
 800f732:	460c      	mov	r4, r1
 800f734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f738:	f000 f986 	bl	800fa48 <_read_r>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	bfab      	itete	ge
 800f740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f742:	89a3      	ldrhlt	r3, [r4, #12]
 800f744:	181b      	addge	r3, r3, r0
 800f746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f74a:	bfac      	ite	ge
 800f74c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f74e:	81a3      	strhlt	r3, [r4, #12]
 800f750:	bd10      	pop	{r4, pc}

0800f752 <__seofread>:
 800f752:	2000      	movs	r0, #0
 800f754:	4770      	bx	lr

0800f756 <__swrite>:
 800f756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75a:	461f      	mov	r7, r3
 800f75c:	898b      	ldrh	r3, [r1, #12]
 800f75e:	05db      	lsls	r3, r3, #23
 800f760:	4605      	mov	r5, r0
 800f762:	460c      	mov	r4, r1
 800f764:	4616      	mov	r6, r2
 800f766:	d505      	bpl.n	800f774 <__swrite+0x1e>
 800f768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f76c:	2302      	movs	r3, #2
 800f76e:	2200      	movs	r2, #0
 800f770:	f000 f958 	bl	800fa24 <_lseek_r>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f77a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	4632      	mov	r2, r6
 800f782:	463b      	mov	r3, r7
 800f784:	4628      	mov	r0, r5
 800f786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f78a:	f000 b97f 	b.w	800fa8c <_write_r>

0800f78e <__sseek>:
 800f78e:	b510      	push	{r4, lr}
 800f790:	460c      	mov	r4, r1
 800f792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f796:	f000 f945 	bl	800fa24 <_lseek_r>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	bf15      	itete	ne
 800f7a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f7a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f7a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f7aa:	81a3      	strheq	r3, [r4, #12]
 800f7ac:	bf18      	it	ne
 800f7ae:	81a3      	strhne	r3, [r4, #12]
 800f7b0:	bd10      	pop	{r4, pc}

0800f7b2 <__sclose>:
 800f7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b6:	f000 b925 	b.w	800fa04 <_close_r>

0800f7ba <__swbuf_r>:
 800f7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7bc:	460e      	mov	r6, r1
 800f7be:	4614      	mov	r4, r2
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	b118      	cbz	r0, 800f7cc <__swbuf_r+0x12>
 800f7c4:	6a03      	ldr	r3, [r0, #32]
 800f7c6:	b90b      	cbnz	r3, 800f7cc <__swbuf_r+0x12>
 800f7c8:	f7ff feb0 	bl	800f52c <__sinit>
 800f7cc:	69a3      	ldr	r3, [r4, #24]
 800f7ce:	60a3      	str	r3, [r4, #8]
 800f7d0:	89a3      	ldrh	r3, [r4, #12]
 800f7d2:	071a      	lsls	r2, r3, #28
 800f7d4:	d501      	bpl.n	800f7da <__swbuf_r+0x20>
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	b943      	cbnz	r3, 800f7ec <__swbuf_r+0x32>
 800f7da:	4621      	mov	r1, r4
 800f7dc:	4628      	mov	r0, r5
 800f7de:	f000 f82b 	bl	800f838 <__swsetup_r>
 800f7e2:	b118      	cbz	r0, 800f7ec <__swbuf_r+0x32>
 800f7e4:	f04f 37ff 	mov.w	r7, #4294967295
 800f7e8:	4638      	mov	r0, r7
 800f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ec:	6823      	ldr	r3, [r4, #0]
 800f7ee:	6922      	ldr	r2, [r4, #16]
 800f7f0:	1a98      	subs	r0, r3, r2
 800f7f2:	6963      	ldr	r3, [r4, #20]
 800f7f4:	b2f6      	uxtb	r6, r6
 800f7f6:	4283      	cmp	r3, r0
 800f7f8:	4637      	mov	r7, r6
 800f7fa:	dc05      	bgt.n	800f808 <__swbuf_r+0x4e>
 800f7fc:	4621      	mov	r1, r4
 800f7fe:	4628      	mov	r0, r5
 800f800:	f002 ff1a 	bl	8012638 <_fflush_r>
 800f804:	2800      	cmp	r0, #0
 800f806:	d1ed      	bne.n	800f7e4 <__swbuf_r+0x2a>
 800f808:	68a3      	ldr	r3, [r4, #8]
 800f80a:	3b01      	subs	r3, #1
 800f80c:	60a3      	str	r3, [r4, #8]
 800f80e:	6823      	ldr	r3, [r4, #0]
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	6022      	str	r2, [r4, #0]
 800f814:	701e      	strb	r6, [r3, #0]
 800f816:	6962      	ldr	r2, [r4, #20]
 800f818:	1c43      	adds	r3, r0, #1
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d004      	beq.n	800f828 <__swbuf_r+0x6e>
 800f81e:	89a3      	ldrh	r3, [r4, #12]
 800f820:	07db      	lsls	r3, r3, #31
 800f822:	d5e1      	bpl.n	800f7e8 <__swbuf_r+0x2e>
 800f824:	2e0a      	cmp	r6, #10
 800f826:	d1df      	bne.n	800f7e8 <__swbuf_r+0x2e>
 800f828:	4621      	mov	r1, r4
 800f82a:	4628      	mov	r0, r5
 800f82c:	f002 ff04 	bl	8012638 <_fflush_r>
 800f830:	2800      	cmp	r0, #0
 800f832:	d0d9      	beq.n	800f7e8 <__swbuf_r+0x2e>
 800f834:	e7d6      	b.n	800f7e4 <__swbuf_r+0x2a>
	...

0800f838 <__swsetup_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	4b29      	ldr	r3, [pc, #164]	@ (800f8e0 <__swsetup_r+0xa8>)
 800f83c:	4605      	mov	r5, r0
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	460c      	mov	r4, r1
 800f842:	b118      	cbz	r0, 800f84c <__swsetup_r+0x14>
 800f844:	6a03      	ldr	r3, [r0, #32]
 800f846:	b90b      	cbnz	r3, 800f84c <__swsetup_r+0x14>
 800f848:	f7ff fe70 	bl	800f52c <__sinit>
 800f84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f850:	0719      	lsls	r1, r3, #28
 800f852:	d422      	bmi.n	800f89a <__swsetup_r+0x62>
 800f854:	06da      	lsls	r2, r3, #27
 800f856:	d407      	bmi.n	800f868 <__swsetup_r+0x30>
 800f858:	2209      	movs	r2, #9
 800f85a:	602a      	str	r2, [r5, #0]
 800f85c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	f04f 30ff 	mov.w	r0, #4294967295
 800f866:	e033      	b.n	800f8d0 <__swsetup_r+0x98>
 800f868:	0758      	lsls	r0, r3, #29
 800f86a:	d512      	bpl.n	800f892 <__swsetup_r+0x5a>
 800f86c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f86e:	b141      	cbz	r1, 800f882 <__swsetup_r+0x4a>
 800f870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f874:	4299      	cmp	r1, r3
 800f876:	d002      	beq.n	800f87e <__swsetup_r+0x46>
 800f878:	4628      	mov	r0, r5
 800f87a:	f000 ffcd 	bl	8010818 <_free_r>
 800f87e:	2300      	movs	r3, #0
 800f880:	6363      	str	r3, [r4, #52]	@ 0x34
 800f882:	89a3      	ldrh	r3, [r4, #12]
 800f884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f888:	81a3      	strh	r3, [r4, #12]
 800f88a:	2300      	movs	r3, #0
 800f88c:	6063      	str	r3, [r4, #4]
 800f88e:	6923      	ldr	r3, [r4, #16]
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	89a3      	ldrh	r3, [r4, #12]
 800f894:	f043 0308 	orr.w	r3, r3, #8
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	6923      	ldr	r3, [r4, #16]
 800f89c:	b94b      	cbnz	r3, 800f8b2 <__swsetup_r+0x7a>
 800f89e:	89a3      	ldrh	r3, [r4, #12]
 800f8a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8a8:	d003      	beq.n	800f8b2 <__swsetup_r+0x7a>
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f002 ff11 	bl	80126d4 <__smakebuf_r>
 800f8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8b6:	f013 0201 	ands.w	r2, r3, #1
 800f8ba:	d00a      	beq.n	800f8d2 <__swsetup_r+0x9a>
 800f8bc:	2200      	movs	r2, #0
 800f8be:	60a2      	str	r2, [r4, #8]
 800f8c0:	6962      	ldr	r2, [r4, #20]
 800f8c2:	4252      	negs	r2, r2
 800f8c4:	61a2      	str	r2, [r4, #24]
 800f8c6:	6922      	ldr	r2, [r4, #16]
 800f8c8:	b942      	cbnz	r2, 800f8dc <__swsetup_r+0xa4>
 800f8ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8ce:	d1c5      	bne.n	800f85c <__swsetup_r+0x24>
 800f8d0:	bd38      	pop	{r3, r4, r5, pc}
 800f8d2:	0799      	lsls	r1, r3, #30
 800f8d4:	bf58      	it	pl
 800f8d6:	6962      	ldrpl	r2, [r4, #20]
 800f8d8:	60a2      	str	r2, [r4, #8]
 800f8da:	e7f4      	b.n	800f8c6 <__swsetup_r+0x8e>
 800f8dc:	2000      	movs	r0, #0
 800f8de:	e7f7      	b.n	800f8d0 <__swsetup_r+0x98>
 800f8e0:	20000194 	.word	0x20000194

0800f8e4 <memset>:
 800f8e4:	4402      	add	r2, r0
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d100      	bne.n	800f8ee <memset+0xa>
 800f8ec:	4770      	bx	lr
 800f8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f2:	e7f9      	b.n	800f8e8 <memset+0x4>

0800f8f4 <strncmp>:
 800f8f4:	b510      	push	{r4, lr}
 800f8f6:	b16a      	cbz	r2, 800f914 <strncmp+0x20>
 800f8f8:	3901      	subs	r1, #1
 800f8fa:	1884      	adds	r4, r0, r2
 800f8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f900:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f904:	429a      	cmp	r2, r3
 800f906:	d103      	bne.n	800f910 <strncmp+0x1c>
 800f908:	42a0      	cmp	r0, r4
 800f90a:	d001      	beq.n	800f910 <strncmp+0x1c>
 800f90c:	2a00      	cmp	r2, #0
 800f90e:	d1f5      	bne.n	800f8fc <strncmp+0x8>
 800f910:	1ad0      	subs	r0, r2, r3
 800f912:	bd10      	pop	{r4, pc}
 800f914:	4610      	mov	r0, r2
 800f916:	e7fc      	b.n	800f912 <strncmp+0x1e>

0800f918 <strtok>:
 800f918:	4b16      	ldr	r3, [pc, #88]	@ (800f974 <strtok+0x5c>)
 800f91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91e:	681f      	ldr	r7, [r3, #0]
 800f920:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f922:	4605      	mov	r5, r0
 800f924:	460e      	mov	r6, r1
 800f926:	b9ec      	cbnz	r4, 800f964 <strtok+0x4c>
 800f928:	2050      	movs	r0, #80	@ 0x50
 800f92a:	f7fd ffff 	bl	800d92c <malloc>
 800f92e:	4602      	mov	r2, r0
 800f930:	6478      	str	r0, [r7, #68]	@ 0x44
 800f932:	b920      	cbnz	r0, 800f93e <strtok+0x26>
 800f934:	4b10      	ldr	r3, [pc, #64]	@ (800f978 <strtok+0x60>)
 800f936:	4811      	ldr	r0, [pc, #68]	@ (800f97c <strtok+0x64>)
 800f938:	215b      	movs	r1, #91	@ 0x5b
 800f93a:	f000 f903 	bl	800fb44 <__assert_func>
 800f93e:	e9c0 4400 	strd	r4, r4, [r0]
 800f942:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f946:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f94a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f94e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f952:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f956:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f95a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f95e:	6184      	str	r4, [r0, #24]
 800f960:	7704      	strb	r4, [r0, #28]
 800f962:	6244      	str	r4, [r0, #36]	@ 0x24
 800f964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f966:	4631      	mov	r1, r6
 800f968:	4628      	mov	r0, r5
 800f96a:	2301      	movs	r3, #1
 800f96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	f000 b806 	b.w	800f980 <__strtok_r>
 800f974:	20000194 	.word	0x20000194
 800f978:	08015c78 	.word	0x08015c78
 800f97c:	08015c8f 	.word	0x08015c8f

0800f980 <__strtok_r>:
 800f980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f982:	4604      	mov	r4, r0
 800f984:	b908      	cbnz	r0, 800f98a <__strtok_r+0xa>
 800f986:	6814      	ldr	r4, [r2, #0]
 800f988:	b144      	cbz	r4, 800f99c <__strtok_r+0x1c>
 800f98a:	4620      	mov	r0, r4
 800f98c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f990:	460f      	mov	r7, r1
 800f992:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f996:	b91e      	cbnz	r6, 800f9a0 <__strtok_r+0x20>
 800f998:	b965      	cbnz	r5, 800f9b4 <__strtok_r+0x34>
 800f99a:	6015      	str	r5, [r2, #0]
 800f99c:	2000      	movs	r0, #0
 800f99e:	e005      	b.n	800f9ac <__strtok_r+0x2c>
 800f9a0:	42b5      	cmp	r5, r6
 800f9a2:	d1f6      	bne.n	800f992 <__strtok_r+0x12>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1f0      	bne.n	800f98a <__strtok_r+0xa>
 800f9a8:	6014      	str	r4, [r2, #0]
 800f9aa:	7003      	strb	r3, [r0, #0]
 800f9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ae:	461c      	mov	r4, r3
 800f9b0:	e00c      	b.n	800f9cc <__strtok_r+0x4c>
 800f9b2:	b915      	cbnz	r5, 800f9ba <__strtok_r+0x3a>
 800f9b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9b8:	460e      	mov	r6, r1
 800f9ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f9be:	42ab      	cmp	r3, r5
 800f9c0:	d1f7      	bne.n	800f9b2 <__strtok_r+0x32>
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d0f3      	beq.n	800f9ae <__strtok_r+0x2e>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f9cc:	6014      	str	r4, [r2, #0]
 800f9ce:	e7ed      	b.n	800f9ac <__strtok_r+0x2c>

0800f9d0 <strstr>:
 800f9d0:	780a      	ldrb	r2, [r1, #0]
 800f9d2:	b570      	push	{r4, r5, r6, lr}
 800f9d4:	b96a      	cbnz	r2, 800f9f2 <strstr+0x22>
 800f9d6:	bd70      	pop	{r4, r5, r6, pc}
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d109      	bne.n	800f9f0 <strstr+0x20>
 800f9dc:	460c      	mov	r4, r1
 800f9de:	4605      	mov	r5, r0
 800f9e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d0f6      	beq.n	800f9d6 <strstr+0x6>
 800f9e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f9ec:	429e      	cmp	r6, r3
 800f9ee:	d0f7      	beq.n	800f9e0 <strstr+0x10>
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	7803      	ldrb	r3, [r0, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1ef      	bne.n	800f9d8 <strstr+0x8>
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	e7ec      	b.n	800f9d6 <strstr+0x6>

0800f9fc <_localeconv_r>:
 800f9fc:	4800      	ldr	r0, [pc, #0]	@ (800fa00 <_localeconv_r+0x4>)
 800f9fe:	4770      	bx	lr
 800fa00:	20000118 	.word	0x20000118

0800fa04 <_close_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d06      	ldr	r5, [pc, #24]	@ (800fa20 <_close_r+0x1c>)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	602b      	str	r3, [r5, #0]
 800fa10:	f7f7 fe1c 	bl	800764c <_close>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	d102      	bne.n	800fa1e <_close_r+0x1a>
 800fa18:	682b      	ldr	r3, [r5, #0]
 800fa1a:	b103      	cbz	r3, 800fa1e <_close_r+0x1a>
 800fa1c:	6023      	str	r3, [r4, #0]
 800fa1e:	bd38      	pop	{r3, r4, r5, pc}
 800fa20:	20000fe0 	.word	0x20000fe0

0800fa24 <_lseek_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d07      	ldr	r5, [pc, #28]	@ (800fa44 <_lseek_r+0x20>)
 800fa28:	4604      	mov	r4, r0
 800fa2a:	4608      	mov	r0, r1
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	2200      	movs	r2, #0
 800fa30:	602a      	str	r2, [r5, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	f7f7 fe31 	bl	800769a <_lseek>
 800fa38:	1c43      	adds	r3, r0, #1
 800fa3a:	d102      	bne.n	800fa42 <_lseek_r+0x1e>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	b103      	cbz	r3, 800fa42 <_lseek_r+0x1e>
 800fa40:	6023      	str	r3, [r4, #0]
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	20000fe0 	.word	0x20000fe0

0800fa48 <_read_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d07      	ldr	r5, [pc, #28]	@ (800fa68 <_read_r+0x20>)
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	2200      	movs	r2, #0
 800fa54:	602a      	str	r2, [r5, #0]
 800fa56:	461a      	mov	r2, r3
 800fa58:	f7f7 fdbf 	bl	80075da <_read>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	d102      	bne.n	800fa66 <_read_r+0x1e>
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	b103      	cbz	r3, 800fa66 <_read_r+0x1e>
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	bd38      	pop	{r3, r4, r5, pc}
 800fa68:	20000fe0 	.word	0x20000fe0

0800fa6c <_sbrk_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4d06      	ldr	r5, [pc, #24]	@ (800fa88 <_sbrk_r+0x1c>)
 800fa70:	2300      	movs	r3, #0
 800fa72:	4604      	mov	r4, r0
 800fa74:	4608      	mov	r0, r1
 800fa76:	602b      	str	r3, [r5, #0]
 800fa78:	f7f7 fe1c 	bl	80076b4 <_sbrk>
 800fa7c:	1c43      	adds	r3, r0, #1
 800fa7e:	d102      	bne.n	800fa86 <_sbrk_r+0x1a>
 800fa80:	682b      	ldr	r3, [r5, #0]
 800fa82:	b103      	cbz	r3, 800fa86 <_sbrk_r+0x1a>
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	bd38      	pop	{r3, r4, r5, pc}
 800fa88:	20000fe0 	.word	0x20000fe0

0800fa8c <_write_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d07      	ldr	r5, [pc, #28]	@ (800faac <_write_r+0x20>)
 800fa90:	4604      	mov	r4, r0
 800fa92:	4608      	mov	r0, r1
 800fa94:	4611      	mov	r1, r2
 800fa96:	2200      	movs	r2, #0
 800fa98:	602a      	str	r2, [r5, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	f7f7 fdba 	bl	8007614 <_write>
 800faa0:	1c43      	adds	r3, r0, #1
 800faa2:	d102      	bne.n	800faaa <_write_r+0x1e>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	b103      	cbz	r3, 800faaa <_write_r+0x1e>
 800faa8:	6023      	str	r3, [r4, #0]
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	20000fe0 	.word	0x20000fe0

0800fab0 <__errno>:
 800fab0:	4b01      	ldr	r3, [pc, #4]	@ (800fab8 <__errno+0x8>)
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	20000194 	.word	0x20000194

0800fabc <__libc_init_array>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	4d0d      	ldr	r5, [pc, #52]	@ (800faf4 <__libc_init_array+0x38>)
 800fac0:	4c0d      	ldr	r4, [pc, #52]	@ (800faf8 <__libc_init_array+0x3c>)
 800fac2:	1b64      	subs	r4, r4, r5
 800fac4:	10a4      	asrs	r4, r4, #2
 800fac6:	2600      	movs	r6, #0
 800fac8:	42a6      	cmp	r6, r4
 800faca:	d109      	bne.n	800fae0 <__libc_init_array+0x24>
 800facc:	4d0b      	ldr	r5, [pc, #44]	@ (800fafc <__libc_init_array+0x40>)
 800face:	4c0c      	ldr	r4, [pc, #48]	@ (800fb00 <__libc_init_array+0x44>)
 800fad0:	f005 fd5a 	bl	8015588 <_init>
 800fad4:	1b64      	subs	r4, r4, r5
 800fad6:	10a4      	asrs	r4, r4, #2
 800fad8:	2600      	movs	r6, #0
 800fada:	42a6      	cmp	r6, r4
 800fadc:	d105      	bne.n	800faea <__libc_init_array+0x2e>
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fae4:	4798      	blx	r3
 800fae6:	3601      	adds	r6, #1
 800fae8:	e7ee      	b.n	800fac8 <__libc_init_array+0xc>
 800faea:	f855 3b04 	ldr.w	r3, [r5], #4
 800faee:	4798      	blx	r3
 800faf0:	3601      	adds	r6, #1
 800faf2:	e7f2      	b.n	800fada <__libc_init_array+0x1e>
 800faf4:	08016218 	.word	0x08016218
 800faf8:	08016218 	.word	0x08016218
 800fafc:	08016218 	.word	0x08016218
 800fb00:	0801621c 	.word	0x0801621c

0800fb04 <__retarget_lock_init_recursive>:
 800fb04:	4770      	bx	lr

0800fb06 <__retarget_lock_acquire_recursive>:
 800fb06:	4770      	bx	lr

0800fb08 <__retarget_lock_release_recursive>:
 800fb08:	4770      	bx	lr

0800fb0a <memcpy>:
 800fb0a:	440a      	add	r2, r1
 800fb0c:	4291      	cmp	r1, r2
 800fb0e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb12:	d100      	bne.n	800fb16 <memcpy+0xc>
 800fb14:	4770      	bx	lr
 800fb16:	b510      	push	{r4, lr}
 800fb18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb20:	4291      	cmp	r1, r2
 800fb22:	d1f9      	bne.n	800fb18 <memcpy+0xe>
 800fb24:	bd10      	pop	{r4, pc}
	...

0800fb28 <nan>:
 800fb28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb30 <nan+0x8>
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	00000000 	.word	0x00000000
 800fb34:	7ff80000 	.word	0x7ff80000

0800fb38 <nanf>:
 800fb38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb40 <nanf+0x8>
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	7fc00000 	.word	0x7fc00000

0800fb44 <__assert_func>:
 800fb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb46:	4614      	mov	r4, r2
 800fb48:	461a      	mov	r2, r3
 800fb4a:	4b09      	ldr	r3, [pc, #36]	@ (800fb70 <__assert_func+0x2c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4605      	mov	r5, r0
 800fb50:	68d8      	ldr	r0, [r3, #12]
 800fb52:	b954      	cbnz	r4, 800fb6a <__assert_func+0x26>
 800fb54:	4b07      	ldr	r3, [pc, #28]	@ (800fb74 <__assert_func+0x30>)
 800fb56:	461c      	mov	r4, r3
 800fb58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb5c:	9100      	str	r1, [sp, #0]
 800fb5e:	462b      	mov	r3, r5
 800fb60:	4905      	ldr	r1, [pc, #20]	@ (800fb78 <__assert_func+0x34>)
 800fb62:	f7ff fcfb 	bl	800f55c <fiprintf>
 800fb66:	f002 fea1 	bl	80128ac <abort>
 800fb6a:	4b04      	ldr	r3, [pc, #16]	@ (800fb7c <__assert_func+0x38>)
 800fb6c:	e7f4      	b.n	800fb58 <__assert_func+0x14>
 800fb6e:	bf00      	nop
 800fb70:	20000194 	.word	0x20000194
 800fb74:	08015d2c 	.word	0x08015d2c
 800fb78:	08015cfe 	.word	0x08015cfe
 800fb7c:	08015cf1 	.word	0x08015cf1

0800fb80 <quorem>:
 800fb80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	6903      	ldr	r3, [r0, #16]
 800fb86:	690c      	ldr	r4, [r1, #16]
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	4607      	mov	r7, r0
 800fb8c:	db7e      	blt.n	800fc8c <quorem+0x10c>
 800fb8e:	3c01      	subs	r4, #1
 800fb90:	f101 0814 	add.w	r8, r1, #20
 800fb94:	00a3      	lsls	r3, r4, #2
 800fb96:	f100 0514 	add.w	r5, r0, #20
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	429a      	cmp	r2, r3
 800fbae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbb2:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbb6:	d32e      	bcc.n	800fc16 <quorem+0x96>
 800fbb8:	f04f 0a00 	mov.w	sl, #0
 800fbbc:	46c4      	mov	ip, r8
 800fbbe:	46ae      	mov	lr, r5
 800fbc0:	46d3      	mov	fp, sl
 800fbc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbc6:	b298      	uxth	r0, r3
 800fbc8:	fb06 a000 	mla	r0, r6, r0, sl
 800fbcc:	0c02      	lsrs	r2, r0, #16
 800fbce:	0c1b      	lsrs	r3, r3, #16
 800fbd0:	fb06 2303 	mla	r3, r6, r3, r2
 800fbd4:	f8de 2000 	ldr.w	r2, [lr]
 800fbd8:	b280      	uxth	r0, r0
 800fbda:	b292      	uxth	r2, r2
 800fbdc:	1a12      	subs	r2, r2, r0
 800fbde:	445a      	add	r2, fp
 800fbe0:	f8de 0000 	ldr.w	r0, [lr]
 800fbe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fbee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fbf2:	b292      	uxth	r2, r2
 800fbf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fbf8:	45e1      	cmp	r9, ip
 800fbfa:	f84e 2b04 	str.w	r2, [lr], #4
 800fbfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc02:	d2de      	bcs.n	800fbc2 <quorem+0x42>
 800fc04:	9b00      	ldr	r3, [sp, #0]
 800fc06:	58eb      	ldr	r3, [r5, r3]
 800fc08:	b92b      	cbnz	r3, 800fc16 <quorem+0x96>
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	3b04      	subs	r3, #4
 800fc0e:	429d      	cmp	r5, r3
 800fc10:	461a      	mov	r2, r3
 800fc12:	d32f      	bcc.n	800fc74 <quorem+0xf4>
 800fc14:	613c      	str	r4, [r7, #16]
 800fc16:	4638      	mov	r0, r7
 800fc18:	f001 fc58 	bl	80114cc <__mcmp>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	db25      	blt.n	800fc6c <quorem+0xec>
 800fc20:	4629      	mov	r1, r5
 800fc22:	2000      	movs	r0, #0
 800fc24:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc28:	f8d1 c000 	ldr.w	ip, [r1]
 800fc2c:	fa1f fe82 	uxth.w	lr, r2
 800fc30:	fa1f f38c 	uxth.w	r3, ip
 800fc34:	eba3 030e 	sub.w	r3, r3, lr
 800fc38:	4403      	add	r3, r0
 800fc3a:	0c12      	lsrs	r2, r2, #16
 800fc3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc4a:	45c1      	cmp	r9, r8
 800fc4c:	f841 3b04 	str.w	r3, [r1], #4
 800fc50:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc54:	d2e6      	bcs.n	800fc24 <quorem+0xa4>
 800fc56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc5e:	b922      	cbnz	r2, 800fc6a <quorem+0xea>
 800fc60:	3b04      	subs	r3, #4
 800fc62:	429d      	cmp	r5, r3
 800fc64:	461a      	mov	r2, r3
 800fc66:	d30b      	bcc.n	800fc80 <quorem+0x100>
 800fc68:	613c      	str	r4, [r7, #16]
 800fc6a:	3601      	adds	r6, #1
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	b003      	add	sp, #12
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	6812      	ldr	r2, [r2, #0]
 800fc76:	3b04      	subs	r3, #4
 800fc78:	2a00      	cmp	r2, #0
 800fc7a:	d1cb      	bne.n	800fc14 <quorem+0x94>
 800fc7c:	3c01      	subs	r4, #1
 800fc7e:	e7c6      	b.n	800fc0e <quorem+0x8e>
 800fc80:	6812      	ldr	r2, [r2, #0]
 800fc82:	3b04      	subs	r3, #4
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	d1ef      	bne.n	800fc68 <quorem+0xe8>
 800fc88:	3c01      	subs	r4, #1
 800fc8a:	e7ea      	b.n	800fc62 <quorem+0xe2>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e7ee      	b.n	800fc6e <quorem+0xee>

0800fc90 <_dtoa_r>:
 800fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc94:	69c7      	ldr	r7, [r0, #28]
 800fc96:	b099      	sub	sp, #100	@ 0x64
 800fc98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc9c:	ec55 4b10 	vmov	r4, r5, d0
 800fca0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fca2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fca4:	4683      	mov	fp, r0
 800fca6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fcaa:	b97f      	cbnz	r7, 800fccc <_dtoa_r+0x3c>
 800fcac:	2010      	movs	r0, #16
 800fcae:	f7fd fe3d 	bl	800d92c <malloc>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	f8cb 001c 	str.w	r0, [fp, #28]
 800fcb8:	b920      	cbnz	r0, 800fcc4 <_dtoa_r+0x34>
 800fcba:	4ba7      	ldr	r3, [pc, #668]	@ (800ff58 <_dtoa_r+0x2c8>)
 800fcbc:	21ef      	movs	r1, #239	@ 0xef
 800fcbe:	48a7      	ldr	r0, [pc, #668]	@ (800ff5c <_dtoa_r+0x2cc>)
 800fcc0:	f7ff ff40 	bl	800fb44 <__assert_func>
 800fcc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fcc8:	6007      	str	r7, [r0, #0]
 800fcca:	60c7      	str	r7, [r0, #12]
 800fccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fcd0:	6819      	ldr	r1, [r3, #0]
 800fcd2:	b159      	cbz	r1, 800fcec <_dtoa_r+0x5c>
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	604a      	str	r2, [r1, #4]
 800fcd8:	2301      	movs	r3, #1
 800fcda:	4093      	lsls	r3, r2
 800fcdc:	608b      	str	r3, [r1, #8]
 800fcde:	4658      	mov	r0, fp
 800fce0:	f001 f970 	bl	8010fc4 <_Bfree>
 800fce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
 800fcec:	1e2b      	subs	r3, r5, #0
 800fcee:	bfb9      	ittee	lt
 800fcf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fcf4:	9303      	strlt	r3, [sp, #12]
 800fcf6:	2300      	movge	r3, #0
 800fcf8:	6033      	strge	r3, [r6, #0]
 800fcfa:	9f03      	ldr	r7, [sp, #12]
 800fcfc:	4b98      	ldr	r3, [pc, #608]	@ (800ff60 <_dtoa_r+0x2d0>)
 800fcfe:	bfbc      	itt	lt
 800fd00:	2201      	movlt	r2, #1
 800fd02:	6032      	strlt	r2, [r6, #0]
 800fd04:	43bb      	bics	r3, r7
 800fd06:	d112      	bne.n	800fd2e <_dtoa_r+0x9e>
 800fd08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd0e:	6013      	str	r3, [r2, #0]
 800fd10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd14:	4323      	orrs	r3, r4
 800fd16:	f000 854d 	beq.w	80107b4 <_dtoa_r+0xb24>
 800fd1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ff74 <_dtoa_r+0x2e4>
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 854f 	beq.w	80107c4 <_dtoa_r+0xb34>
 800fd26:	f10a 0303 	add.w	r3, sl, #3
 800fd2a:	f000 bd49 	b.w	80107c0 <_dtoa_r+0xb30>
 800fd2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd32:	2200      	movs	r2, #0
 800fd34:	ec51 0b17 	vmov	r0, r1, d7
 800fd38:	2300      	movs	r3, #0
 800fd3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fd3e:	f7f0 fed3 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd42:	4680      	mov	r8, r0
 800fd44:	b158      	cbz	r0, 800fd5e <_dtoa_r+0xce>
 800fd46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd48:	2301      	movs	r3, #1
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd4e:	b113      	cbz	r3, 800fd56 <_dtoa_r+0xc6>
 800fd50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd52:	4b84      	ldr	r3, [pc, #528]	@ (800ff64 <_dtoa_r+0x2d4>)
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ff78 <_dtoa_r+0x2e8>
 800fd5a:	f000 bd33 	b.w	80107c4 <_dtoa_r+0xb34>
 800fd5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd62:	aa16      	add	r2, sp, #88	@ 0x58
 800fd64:	a917      	add	r1, sp, #92	@ 0x5c
 800fd66:	4658      	mov	r0, fp
 800fd68:	f001 fcd0 	bl	801170c <__d2b>
 800fd6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fd70:	4681      	mov	r9, r0
 800fd72:	2e00      	cmp	r6, #0
 800fd74:	d077      	beq.n	800fe66 <_dtoa_r+0x1d6>
 800fd76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fd7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fd88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fd8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fd90:	4619      	mov	r1, r3
 800fd92:	2200      	movs	r2, #0
 800fd94:	4b74      	ldr	r3, [pc, #464]	@ (800ff68 <_dtoa_r+0x2d8>)
 800fd96:	f7f0 fa87 	bl	80002a8 <__aeabi_dsub>
 800fd9a:	a369      	add	r3, pc, #420	@ (adr r3, 800ff40 <_dtoa_r+0x2b0>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f7f0 fc3a 	bl	8000618 <__aeabi_dmul>
 800fda4:	a368      	add	r3, pc, #416	@ (adr r3, 800ff48 <_dtoa_r+0x2b8>)
 800fda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdaa:	f7f0 fa7f 	bl	80002ac <__adddf3>
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	460d      	mov	r5, r1
 800fdb4:	f7f0 fbc6 	bl	8000544 <__aeabi_i2d>
 800fdb8:	a365      	add	r3, pc, #404	@ (adr r3, 800ff50 <_dtoa_r+0x2c0>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	f7f0 fc2b 	bl	8000618 <__aeabi_dmul>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	4629      	mov	r1, r5
 800fdca:	f7f0 fa6f 	bl	80002ac <__adddf3>
 800fdce:	4604      	mov	r4, r0
 800fdd0:	460d      	mov	r5, r1
 800fdd2:	f7f0 fed1 	bl	8000b78 <__aeabi_d2iz>
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	4607      	mov	r7, r0
 800fdda:	2300      	movs	r3, #0
 800fddc:	4620      	mov	r0, r4
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 fe8c 	bl	8000afc <__aeabi_dcmplt>
 800fde4:	b140      	cbz	r0, 800fdf8 <_dtoa_r+0x168>
 800fde6:	4638      	mov	r0, r7
 800fde8:	f7f0 fbac 	bl	8000544 <__aeabi_i2d>
 800fdec:	4622      	mov	r2, r4
 800fdee:	462b      	mov	r3, r5
 800fdf0:	f7f0 fe7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdf4:	b900      	cbnz	r0, 800fdf8 <_dtoa_r+0x168>
 800fdf6:	3f01      	subs	r7, #1
 800fdf8:	2f16      	cmp	r7, #22
 800fdfa:	d851      	bhi.n	800fea0 <_dtoa_r+0x210>
 800fdfc:	4b5b      	ldr	r3, [pc, #364]	@ (800ff6c <_dtoa_r+0x2dc>)
 800fdfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe0a:	f7f0 fe77 	bl	8000afc <__aeabi_dcmplt>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d048      	beq.n	800fea4 <_dtoa_r+0x214>
 800fe12:	3f01      	subs	r7, #1
 800fe14:	2300      	movs	r3, #0
 800fe16:	9312      	str	r3, [sp, #72]	@ 0x48
 800fe18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe1a:	1b9b      	subs	r3, r3, r6
 800fe1c:	1e5a      	subs	r2, r3, #1
 800fe1e:	bf44      	itt	mi
 800fe20:	f1c3 0801 	rsbmi	r8, r3, #1
 800fe24:	2300      	movmi	r3, #0
 800fe26:	9208      	str	r2, [sp, #32]
 800fe28:	bf54      	ite	pl
 800fe2a:	f04f 0800 	movpl.w	r8, #0
 800fe2e:	9308      	strmi	r3, [sp, #32]
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	db39      	blt.n	800fea8 <_dtoa_r+0x218>
 800fe34:	9b08      	ldr	r3, [sp, #32]
 800fe36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fe38:	443b      	add	r3, r7
 800fe3a:	9308      	str	r3, [sp, #32]
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe42:	2b09      	cmp	r3, #9
 800fe44:	d864      	bhi.n	800ff10 <_dtoa_r+0x280>
 800fe46:	2b05      	cmp	r3, #5
 800fe48:	bfc4      	itt	gt
 800fe4a:	3b04      	subgt	r3, #4
 800fe4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fe4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe50:	f1a3 0302 	sub.w	r3, r3, #2
 800fe54:	bfcc      	ite	gt
 800fe56:	2400      	movgt	r4, #0
 800fe58:	2401      	movle	r4, #1
 800fe5a:	2b03      	cmp	r3, #3
 800fe5c:	d863      	bhi.n	800ff26 <_dtoa_r+0x296>
 800fe5e:	e8df f003 	tbb	[pc, r3]
 800fe62:	372a      	.short	0x372a
 800fe64:	5535      	.short	0x5535
 800fe66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fe6a:	441e      	add	r6, r3
 800fe6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fe70:	2b20      	cmp	r3, #32
 800fe72:	bfc1      	itttt	gt
 800fe74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fe78:	409f      	lslgt	r7, r3
 800fe7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fe7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fe82:	bfd6      	itet	le
 800fe84:	f1c3 0320 	rsble	r3, r3, #32
 800fe88:	ea47 0003 	orrgt.w	r0, r7, r3
 800fe8c:	fa04 f003 	lslle.w	r0, r4, r3
 800fe90:	f7f0 fb48 	bl	8000524 <__aeabi_ui2d>
 800fe94:	2201      	movs	r2, #1
 800fe96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fe9a:	3e01      	subs	r6, #1
 800fe9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fe9e:	e777      	b.n	800fd90 <_dtoa_r+0x100>
 800fea0:	2301      	movs	r3, #1
 800fea2:	e7b8      	b.n	800fe16 <_dtoa_r+0x186>
 800fea4:	9012      	str	r0, [sp, #72]	@ 0x48
 800fea6:	e7b7      	b.n	800fe18 <_dtoa_r+0x188>
 800fea8:	427b      	negs	r3, r7
 800feaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800feac:	2300      	movs	r3, #0
 800feae:	eba8 0807 	sub.w	r8, r8, r7
 800feb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800feb4:	e7c4      	b.n	800fe40 <_dtoa_r+0x1b0>
 800feb6:	2300      	movs	r3, #0
 800feb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800feba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800febc:	2b00      	cmp	r3, #0
 800febe:	dc35      	bgt.n	800ff2c <_dtoa_r+0x29c>
 800fec0:	2301      	movs	r3, #1
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	9307      	str	r3, [sp, #28]
 800fec6:	461a      	mov	r2, r3
 800fec8:	920e      	str	r2, [sp, #56]	@ 0x38
 800feca:	e00b      	b.n	800fee4 <_dtoa_r+0x254>
 800fecc:	2301      	movs	r3, #1
 800fece:	e7f3      	b.n	800feb8 <_dtoa_r+0x228>
 800fed0:	2300      	movs	r3, #0
 800fed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fed6:	18fb      	adds	r3, r7, r3
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	3301      	adds	r3, #1
 800fedc:	2b01      	cmp	r3, #1
 800fede:	9307      	str	r3, [sp, #28]
 800fee0:	bfb8      	it	lt
 800fee2:	2301      	movlt	r3, #1
 800fee4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fee8:	2100      	movs	r1, #0
 800feea:	2204      	movs	r2, #4
 800feec:	f102 0514 	add.w	r5, r2, #20
 800fef0:	429d      	cmp	r5, r3
 800fef2:	d91f      	bls.n	800ff34 <_dtoa_r+0x2a4>
 800fef4:	6041      	str	r1, [r0, #4]
 800fef6:	4658      	mov	r0, fp
 800fef8:	f001 f824 	bl	8010f44 <_Balloc>
 800fefc:	4682      	mov	sl, r0
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d13c      	bne.n	800ff7c <_dtoa_r+0x2ec>
 800ff02:	4b1b      	ldr	r3, [pc, #108]	@ (800ff70 <_dtoa_r+0x2e0>)
 800ff04:	4602      	mov	r2, r0
 800ff06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff0a:	e6d8      	b.n	800fcbe <_dtoa_r+0x2e>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	e7e0      	b.n	800fed2 <_dtoa_r+0x242>
 800ff10:	2401      	movs	r4, #1
 800ff12:	2300      	movs	r3, #0
 800ff14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff18:	f04f 33ff 	mov.w	r3, #4294967295
 800ff1c:	9300      	str	r3, [sp, #0]
 800ff1e:	9307      	str	r3, [sp, #28]
 800ff20:	2200      	movs	r2, #0
 800ff22:	2312      	movs	r3, #18
 800ff24:	e7d0      	b.n	800fec8 <_dtoa_r+0x238>
 800ff26:	2301      	movs	r3, #1
 800ff28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff2a:	e7f5      	b.n	800ff18 <_dtoa_r+0x288>
 800ff2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	9307      	str	r3, [sp, #28]
 800ff32:	e7d7      	b.n	800fee4 <_dtoa_r+0x254>
 800ff34:	3101      	adds	r1, #1
 800ff36:	0052      	lsls	r2, r2, #1
 800ff38:	e7d8      	b.n	800feec <_dtoa_r+0x25c>
 800ff3a:	bf00      	nop
 800ff3c:	f3af 8000 	nop.w
 800ff40:	636f4361 	.word	0x636f4361
 800ff44:	3fd287a7 	.word	0x3fd287a7
 800ff48:	8b60c8b3 	.word	0x8b60c8b3
 800ff4c:	3fc68a28 	.word	0x3fc68a28
 800ff50:	509f79fb 	.word	0x509f79fb
 800ff54:	3fd34413 	.word	0x3fd34413
 800ff58:	08015c78 	.word	0x08015c78
 800ff5c:	08015d3a 	.word	0x08015d3a
 800ff60:	7ff00000 	.word	0x7ff00000
 800ff64:	08015f80 	.word	0x08015f80
 800ff68:	3ff80000 	.word	0x3ff80000
 800ff6c:	08015e90 	.word	0x08015e90
 800ff70:	08015d92 	.word	0x08015d92
 800ff74:	08015d36 	.word	0x08015d36
 800ff78:	08015f7f 	.word	0x08015f7f
 800ff7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff80:	6018      	str	r0, [r3, #0]
 800ff82:	9b07      	ldr	r3, [sp, #28]
 800ff84:	2b0e      	cmp	r3, #14
 800ff86:	f200 80a4 	bhi.w	80100d2 <_dtoa_r+0x442>
 800ff8a:	2c00      	cmp	r4, #0
 800ff8c:	f000 80a1 	beq.w	80100d2 <_dtoa_r+0x442>
 800ff90:	2f00      	cmp	r7, #0
 800ff92:	dd33      	ble.n	800fffc <_dtoa_r+0x36c>
 800ff94:	4bad      	ldr	r3, [pc, #692]	@ (801024c <_dtoa_r+0x5bc>)
 800ff96:	f007 020f 	and.w	r2, r7, #15
 800ff9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9e:	ed93 7b00 	vldr	d7, [r3]
 800ffa2:	05f8      	lsls	r0, r7, #23
 800ffa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ffa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ffac:	d516      	bpl.n	800ffdc <_dtoa_r+0x34c>
 800ffae:	4ba8      	ldr	r3, [pc, #672]	@ (8010250 <_dtoa_r+0x5c0>)
 800ffb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffb8:	f7f0 fc58 	bl	800086c <__aeabi_ddiv>
 800ffbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffc0:	f004 040f 	and.w	r4, r4, #15
 800ffc4:	2603      	movs	r6, #3
 800ffc6:	4da2      	ldr	r5, [pc, #648]	@ (8010250 <_dtoa_r+0x5c0>)
 800ffc8:	b954      	cbnz	r4, 800ffe0 <_dtoa_r+0x350>
 800ffca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffd2:	f7f0 fc4b 	bl	800086c <__aeabi_ddiv>
 800ffd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffda:	e028      	b.n	801002e <_dtoa_r+0x39e>
 800ffdc:	2602      	movs	r6, #2
 800ffde:	e7f2      	b.n	800ffc6 <_dtoa_r+0x336>
 800ffe0:	07e1      	lsls	r1, r4, #31
 800ffe2:	d508      	bpl.n	800fff6 <_dtoa_r+0x366>
 800ffe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ffec:	f7f0 fb14 	bl	8000618 <__aeabi_dmul>
 800fff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fff4:	3601      	adds	r6, #1
 800fff6:	1064      	asrs	r4, r4, #1
 800fff8:	3508      	adds	r5, #8
 800fffa:	e7e5      	b.n	800ffc8 <_dtoa_r+0x338>
 800fffc:	f000 80d2 	beq.w	80101a4 <_dtoa_r+0x514>
 8010000:	427c      	negs	r4, r7
 8010002:	4b92      	ldr	r3, [pc, #584]	@ (801024c <_dtoa_r+0x5bc>)
 8010004:	4d92      	ldr	r5, [pc, #584]	@ (8010250 <_dtoa_r+0x5c0>)
 8010006:	f004 020f 	and.w	r2, r4, #15
 801000a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010016:	f7f0 faff 	bl	8000618 <__aeabi_dmul>
 801001a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801001e:	1124      	asrs	r4, r4, #4
 8010020:	2300      	movs	r3, #0
 8010022:	2602      	movs	r6, #2
 8010024:	2c00      	cmp	r4, #0
 8010026:	f040 80b2 	bne.w	801018e <_dtoa_r+0x4fe>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1d3      	bne.n	800ffd6 <_dtoa_r+0x346>
 801002e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010030:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f000 80b7 	beq.w	80101a8 <_dtoa_r+0x518>
 801003a:	4b86      	ldr	r3, [pc, #536]	@ (8010254 <_dtoa_r+0x5c4>)
 801003c:	2200      	movs	r2, #0
 801003e:	4620      	mov	r0, r4
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8010046:	2800      	cmp	r0, #0
 8010048:	f000 80ae 	beq.w	80101a8 <_dtoa_r+0x518>
 801004c:	9b07      	ldr	r3, [sp, #28]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 80aa 	beq.w	80101a8 <_dtoa_r+0x518>
 8010054:	9b00      	ldr	r3, [sp, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	dd37      	ble.n	80100ca <_dtoa_r+0x43a>
 801005a:	1e7b      	subs	r3, r7, #1
 801005c:	9304      	str	r3, [sp, #16]
 801005e:	4620      	mov	r0, r4
 8010060:	4b7d      	ldr	r3, [pc, #500]	@ (8010258 <_dtoa_r+0x5c8>)
 8010062:	2200      	movs	r2, #0
 8010064:	4629      	mov	r1, r5
 8010066:	f7f0 fad7 	bl	8000618 <__aeabi_dmul>
 801006a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801006e:	9c00      	ldr	r4, [sp, #0]
 8010070:	3601      	adds	r6, #1
 8010072:	4630      	mov	r0, r6
 8010074:	f7f0 fa66 	bl	8000544 <__aeabi_i2d>
 8010078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801007c:	f7f0 facc 	bl	8000618 <__aeabi_dmul>
 8010080:	4b76      	ldr	r3, [pc, #472]	@ (801025c <_dtoa_r+0x5cc>)
 8010082:	2200      	movs	r2, #0
 8010084:	f7f0 f912 	bl	80002ac <__adddf3>
 8010088:	4605      	mov	r5, r0
 801008a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801008e:	2c00      	cmp	r4, #0
 8010090:	f040 808d 	bne.w	80101ae <_dtoa_r+0x51e>
 8010094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010098:	4b71      	ldr	r3, [pc, #452]	@ (8010260 <_dtoa_r+0x5d0>)
 801009a:	2200      	movs	r2, #0
 801009c:	f7f0 f904 	bl	80002a8 <__aeabi_dsub>
 80100a0:	4602      	mov	r2, r0
 80100a2:	460b      	mov	r3, r1
 80100a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100a8:	462a      	mov	r2, r5
 80100aa:	4633      	mov	r3, r6
 80100ac:	f7f0 fd44 	bl	8000b38 <__aeabi_dcmpgt>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	f040 828b 	bne.w	80105cc <_dtoa_r+0x93c>
 80100b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ba:	462a      	mov	r2, r5
 80100bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80100c0:	f7f0 fd1c 	bl	8000afc <__aeabi_dcmplt>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	f040 8128 	bne.w	801031a <_dtoa_r+0x68a>
 80100ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80100ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80100d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f2c0 815a 	blt.w	801038e <_dtoa_r+0x6fe>
 80100da:	2f0e      	cmp	r7, #14
 80100dc:	f300 8157 	bgt.w	801038e <_dtoa_r+0x6fe>
 80100e0:	4b5a      	ldr	r3, [pc, #360]	@ (801024c <_dtoa_r+0x5bc>)
 80100e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100e6:	ed93 7b00 	vldr	d7, [r3]
 80100ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	ed8d 7b00 	vstr	d7, [sp]
 80100f2:	da03      	bge.n	80100fc <_dtoa_r+0x46c>
 80100f4:	9b07      	ldr	r3, [sp, #28]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f340 8101 	ble.w	80102fe <_dtoa_r+0x66e>
 80100fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010100:	4656      	mov	r6, sl
 8010102:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010106:	4620      	mov	r0, r4
 8010108:	4629      	mov	r1, r5
 801010a:	f7f0 fbaf 	bl	800086c <__aeabi_ddiv>
 801010e:	f7f0 fd33 	bl	8000b78 <__aeabi_d2iz>
 8010112:	4680      	mov	r8, r0
 8010114:	f7f0 fa16 	bl	8000544 <__aeabi_i2d>
 8010118:	e9dd 2300 	ldrd	r2, r3, [sp]
 801011c:	f7f0 fa7c 	bl	8000618 <__aeabi_dmul>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4620      	mov	r0, r4
 8010126:	4629      	mov	r1, r5
 8010128:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801012c:	f7f0 f8bc 	bl	80002a8 <__aeabi_dsub>
 8010130:	f806 4b01 	strb.w	r4, [r6], #1
 8010134:	9d07      	ldr	r5, [sp, #28]
 8010136:	eba6 040a 	sub.w	r4, r6, sl
 801013a:	42a5      	cmp	r5, r4
 801013c:	4602      	mov	r2, r0
 801013e:	460b      	mov	r3, r1
 8010140:	f040 8117 	bne.w	8010372 <_dtoa_r+0x6e2>
 8010144:	f7f0 f8b2 	bl	80002ac <__adddf3>
 8010148:	e9dd 2300 	ldrd	r2, r3, [sp]
 801014c:	4604      	mov	r4, r0
 801014e:	460d      	mov	r5, r1
 8010150:	f7f0 fcf2 	bl	8000b38 <__aeabi_dcmpgt>
 8010154:	2800      	cmp	r0, #0
 8010156:	f040 80f9 	bne.w	801034c <_dtoa_r+0x6bc>
 801015a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801015e:	4620      	mov	r0, r4
 8010160:	4629      	mov	r1, r5
 8010162:	f7f0 fcc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010166:	b118      	cbz	r0, 8010170 <_dtoa_r+0x4e0>
 8010168:	f018 0f01 	tst.w	r8, #1
 801016c:	f040 80ee 	bne.w	801034c <_dtoa_r+0x6bc>
 8010170:	4649      	mov	r1, r9
 8010172:	4658      	mov	r0, fp
 8010174:	f000 ff26 	bl	8010fc4 <_Bfree>
 8010178:	2300      	movs	r3, #0
 801017a:	7033      	strb	r3, [r6, #0]
 801017c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801017e:	3701      	adds	r7, #1
 8010180:	601f      	str	r7, [r3, #0]
 8010182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010184:	2b00      	cmp	r3, #0
 8010186:	f000 831d 	beq.w	80107c4 <_dtoa_r+0xb34>
 801018a:	601e      	str	r6, [r3, #0]
 801018c:	e31a      	b.n	80107c4 <_dtoa_r+0xb34>
 801018e:	07e2      	lsls	r2, r4, #31
 8010190:	d505      	bpl.n	801019e <_dtoa_r+0x50e>
 8010192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010196:	f7f0 fa3f 	bl	8000618 <__aeabi_dmul>
 801019a:	3601      	adds	r6, #1
 801019c:	2301      	movs	r3, #1
 801019e:	1064      	asrs	r4, r4, #1
 80101a0:	3508      	adds	r5, #8
 80101a2:	e73f      	b.n	8010024 <_dtoa_r+0x394>
 80101a4:	2602      	movs	r6, #2
 80101a6:	e742      	b.n	801002e <_dtoa_r+0x39e>
 80101a8:	9c07      	ldr	r4, [sp, #28]
 80101aa:	9704      	str	r7, [sp, #16]
 80101ac:	e761      	b.n	8010072 <_dtoa_r+0x3e2>
 80101ae:	4b27      	ldr	r3, [pc, #156]	@ (801024c <_dtoa_r+0x5bc>)
 80101b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80101b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101ba:	4454      	add	r4, sl
 80101bc:	2900      	cmp	r1, #0
 80101be:	d053      	beq.n	8010268 <_dtoa_r+0x5d8>
 80101c0:	4928      	ldr	r1, [pc, #160]	@ (8010264 <_dtoa_r+0x5d4>)
 80101c2:	2000      	movs	r0, #0
 80101c4:	f7f0 fb52 	bl	800086c <__aeabi_ddiv>
 80101c8:	4633      	mov	r3, r6
 80101ca:	462a      	mov	r2, r5
 80101cc:	f7f0 f86c 	bl	80002a8 <__aeabi_dsub>
 80101d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101d4:	4656      	mov	r6, sl
 80101d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101da:	f7f0 fccd 	bl	8000b78 <__aeabi_d2iz>
 80101de:	4605      	mov	r5, r0
 80101e0:	f7f0 f9b0 	bl	8000544 <__aeabi_i2d>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ec:	f7f0 f85c 	bl	80002a8 <__aeabi_dsub>
 80101f0:	3530      	adds	r5, #48	@ 0x30
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101fa:	f806 5b01 	strb.w	r5, [r6], #1
 80101fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010202:	f7f0 fc7b 	bl	8000afc <__aeabi_dcmplt>
 8010206:	2800      	cmp	r0, #0
 8010208:	d171      	bne.n	80102ee <_dtoa_r+0x65e>
 801020a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801020e:	4911      	ldr	r1, [pc, #68]	@ (8010254 <_dtoa_r+0x5c4>)
 8010210:	2000      	movs	r0, #0
 8010212:	f7f0 f849 	bl	80002a8 <__aeabi_dsub>
 8010216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801021a:	f7f0 fc6f 	bl	8000afc <__aeabi_dcmplt>
 801021e:	2800      	cmp	r0, #0
 8010220:	f040 8095 	bne.w	801034e <_dtoa_r+0x6be>
 8010224:	42a6      	cmp	r6, r4
 8010226:	f43f af50 	beq.w	80100ca <_dtoa_r+0x43a>
 801022a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801022e:	4b0a      	ldr	r3, [pc, #40]	@ (8010258 <_dtoa_r+0x5c8>)
 8010230:	2200      	movs	r2, #0
 8010232:	f7f0 f9f1 	bl	8000618 <__aeabi_dmul>
 8010236:	4b08      	ldr	r3, [pc, #32]	@ (8010258 <_dtoa_r+0x5c8>)
 8010238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801023c:	2200      	movs	r2, #0
 801023e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010242:	f7f0 f9e9 	bl	8000618 <__aeabi_dmul>
 8010246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801024a:	e7c4      	b.n	80101d6 <_dtoa_r+0x546>
 801024c:	08015e90 	.word	0x08015e90
 8010250:	08015e68 	.word	0x08015e68
 8010254:	3ff00000 	.word	0x3ff00000
 8010258:	40240000 	.word	0x40240000
 801025c:	401c0000 	.word	0x401c0000
 8010260:	40140000 	.word	0x40140000
 8010264:	3fe00000 	.word	0x3fe00000
 8010268:	4631      	mov	r1, r6
 801026a:	4628      	mov	r0, r5
 801026c:	f7f0 f9d4 	bl	8000618 <__aeabi_dmul>
 8010270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010274:	9415      	str	r4, [sp, #84]	@ 0x54
 8010276:	4656      	mov	r6, sl
 8010278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801027c:	f7f0 fc7c 	bl	8000b78 <__aeabi_d2iz>
 8010280:	4605      	mov	r5, r0
 8010282:	f7f0 f95f 	bl	8000544 <__aeabi_i2d>
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801028e:	f7f0 f80b 	bl	80002a8 <__aeabi_dsub>
 8010292:	3530      	adds	r5, #48	@ 0x30
 8010294:	f806 5b01 	strb.w	r5, [r6], #1
 8010298:	4602      	mov	r2, r0
 801029a:	460b      	mov	r3, r1
 801029c:	42a6      	cmp	r6, r4
 801029e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102a2:	f04f 0200 	mov.w	r2, #0
 80102a6:	d124      	bne.n	80102f2 <_dtoa_r+0x662>
 80102a8:	4bac      	ldr	r3, [pc, #688]	@ (801055c <_dtoa_r+0x8cc>)
 80102aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80102ae:	f7ef fffd 	bl	80002ac <__adddf3>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102ba:	f7f0 fc3d 	bl	8000b38 <__aeabi_dcmpgt>
 80102be:	2800      	cmp	r0, #0
 80102c0:	d145      	bne.n	801034e <_dtoa_r+0x6be>
 80102c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80102c6:	49a5      	ldr	r1, [pc, #660]	@ (801055c <_dtoa_r+0x8cc>)
 80102c8:	2000      	movs	r0, #0
 80102ca:	f7ef ffed 	bl	80002a8 <__aeabi_dsub>
 80102ce:	4602      	mov	r2, r0
 80102d0:	460b      	mov	r3, r1
 80102d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102d6:	f7f0 fc11 	bl	8000afc <__aeabi_dcmplt>
 80102da:	2800      	cmp	r0, #0
 80102dc:	f43f aef5 	beq.w	80100ca <_dtoa_r+0x43a>
 80102e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80102e2:	1e73      	subs	r3, r6, #1
 80102e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80102e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102ea:	2b30      	cmp	r3, #48	@ 0x30
 80102ec:	d0f8      	beq.n	80102e0 <_dtoa_r+0x650>
 80102ee:	9f04      	ldr	r7, [sp, #16]
 80102f0:	e73e      	b.n	8010170 <_dtoa_r+0x4e0>
 80102f2:	4b9b      	ldr	r3, [pc, #620]	@ (8010560 <_dtoa_r+0x8d0>)
 80102f4:	f7f0 f990 	bl	8000618 <__aeabi_dmul>
 80102f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102fc:	e7bc      	b.n	8010278 <_dtoa_r+0x5e8>
 80102fe:	d10c      	bne.n	801031a <_dtoa_r+0x68a>
 8010300:	4b98      	ldr	r3, [pc, #608]	@ (8010564 <_dtoa_r+0x8d4>)
 8010302:	2200      	movs	r2, #0
 8010304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010308:	f7f0 f986 	bl	8000618 <__aeabi_dmul>
 801030c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010310:	f7f0 fc08 	bl	8000b24 <__aeabi_dcmpge>
 8010314:	2800      	cmp	r0, #0
 8010316:	f000 8157 	beq.w	80105c8 <_dtoa_r+0x938>
 801031a:	2400      	movs	r4, #0
 801031c:	4625      	mov	r5, r4
 801031e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010320:	43db      	mvns	r3, r3
 8010322:	9304      	str	r3, [sp, #16]
 8010324:	4656      	mov	r6, sl
 8010326:	2700      	movs	r7, #0
 8010328:	4621      	mov	r1, r4
 801032a:	4658      	mov	r0, fp
 801032c:	f000 fe4a 	bl	8010fc4 <_Bfree>
 8010330:	2d00      	cmp	r5, #0
 8010332:	d0dc      	beq.n	80102ee <_dtoa_r+0x65e>
 8010334:	b12f      	cbz	r7, 8010342 <_dtoa_r+0x6b2>
 8010336:	42af      	cmp	r7, r5
 8010338:	d003      	beq.n	8010342 <_dtoa_r+0x6b2>
 801033a:	4639      	mov	r1, r7
 801033c:	4658      	mov	r0, fp
 801033e:	f000 fe41 	bl	8010fc4 <_Bfree>
 8010342:	4629      	mov	r1, r5
 8010344:	4658      	mov	r0, fp
 8010346:	f000 fe3d 	bl	8010fc4 <_Bfree>
 801034a:	e7d0      	b.n	80102ee <_dtoa_r+0x65e>
 801034c:	9704      	str	r7, [sp, #16]
 801034e:	4633      	mov	r3, r6
 8010350:	461e      	mov	r6, r3
 8010352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010356:	2a39      	cmp	r2, #57	@ 0x39
 8010358:	d107      	bne.n	801036a <_dtoa_r+0x6da>
 801035a:	459a      	cmp	sl, r3
 801035c:	d1f8      	bne.n	8010350 <_dtoa_r+0x6c0>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	3201      	adds	r2, #1
 8010362:	9204      	str	r2, [sp, #16]
 8010364:	2230      	movs	r2, #48	@ 0x30
 8010366:	f88a 2000 	strb.w	r2, [sl]
 801036a:	781a      	ldrb	r2, [r3, #0]
 801036c:	3201      	adds	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
 8010370:	e7bd      	b.n	80102ee <_dtoa_r+0x65e>
 8010372:	4b7b      	ldr	r3, [pc, #492]	@ (8010560 <_dtoa_r+0x8d0>)
 8010374:	2200      	movs	r2, #0
 8010376:	f7f0 f94f 	bl	8000618 <__aeabi_dmul>
 801037a:	2200      	movs	r2, #0
 801037c:	2300      	movs	r3, #0
 801037e:	4604      	mov	r4, r0
 8010380:	460d      	mov	r5, r1
 8010382:	f7f0 fbb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010386:	2800      	cmp	r0, #0
 8010388:	f43f aebb 	beq.w	8010102 <_dtoa_r+0x472>
 801038c:	e6f0      	b.n	8010170 <_dtoa_r+0x4e0>
 801038e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010390:	2a00      	cmp	r2, #0
 8010392:	f000 80db 	beq.w	801054c <_dtoa_r+0x8bc>
 8010396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010398:	2a01      	cmp	r2, #1
 801039a:	f300 80bf 	bgt.w	801051c <_dtoa_r+0x88c>
 801039e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	f000 80b7 	beq.w	8010514 <_dtoa_r+0x884>
 80103a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80103aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80103ac:	4646      	mov	r6, r8
 80103ae:	9a08      	ldr	r2, [sp, #32]
 80103b0:	2101      	movs	r1, #1
 80103b2:	441a      	add	r2, r3
 80103b4:	4658      	mov	r0, fp
 80103b6:	4498      	add	r8, r3
 80103b8:	9208      	str	r2, [sp, #32]
 80103ba:	f000 ff01 	bl	80111c0 <__i2b>
 80103be:	4605      	mov	r5, r0
 80103c0:	b15e      	cbz	r6, 80103da <_dtoa_r+0x74a>
 80103c2:	9b08      	ldr	r3, [sp, #32]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	dd08      	ble.n	80103da <_dtoa_r+0x74a>
 80103c8:	42b3      	cmp	r3, r6
 80103ca:	9a08      	ldr	r2, [sp, #32]
 80103cc:	bfa8      	it	ge
 80103ce:	4633      	movge	r3, r6
 80103d0:	eba8 0803 	sub.w	r8, r8, r3
 80103d4:	1af6      	subs	r6, r6, r3
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	9308      	str	r3, [sp, #32]
 80103da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103dc:	b1f3      	cbz	r3, 801041c <_dtoa_r+0x78c>
 80103de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 80b7 	beq.w	8010554 <_dtoa_r+0x8c4>
 80103e6:	b18c      	cbz	r4, 801040c <_dtoa_r+0x77c>
 80103e8:	4629      	mov	r1, r5
 80103ea:	4622      	mov	r2, r4
 80103ec:	4658      	mov	r0, fp
 80103ee:	f000 ffa7 	bl	8011340 <__pow5mult>
 80103f2:	464a      	mov	r2, r9
 80103f4:	4601      	mov	r1, r0
 80103f6:	4605      	mov	r5, r0
 80103f8:	4658      	mov	r0, fp
 80103fa:	f000 fef7 	bl	80111ec <__multiply>
 80103fe:	4649      	mov	r1, r9
 8010400:	9004      	str	r0, [sp, #16]
 8010402:	4658      	mov	r0, fp
 8010404:	f000 fdde 	bl	8010fc4 <_Bfree>
 8010408:	9b04      	ldr	r3, [sp, #16]
 801040a:	4699      	mov	r9, r3
 801040c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801040e:	1b1a      	subs	r2, r3, r4
 8010410:	d004      	beq.n	801041c <_dtoa_r+0x78c>
 8010412:	4649      	mov	r1, r9
 8010414:	4658      	mov	r0, fp
 8010416:	f000 ff93 	bl	8011340 <__pow5mult>
 801041a:	4681      	mov	r9, r0
 801041c:	2101      	movs	r1, #1
 801041e:	4658      	mov	r0, fp
 8010420:	f000 fece 	bl	80111c0 <__i2b>
 8010424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010426:	4604      	mov	r4, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 81cf 	beq.w	80107cc <_dtoa_r+0xb3c>
 801042e:	461a      	mov	r2, r3
 8010430:	4601      	mov	r1, r0
 8010432:	4658      	mov	r0, fp
 8010434:	f000 ff84 	bl	8011340 <__pow5mult>
 8010438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043a:	2b01      	cmp	r3, #1
 801043c:	4604      	mov	r4, r0
 801043e:	f300 8095 	bgt.w	801056c <_dtoa_r+0x8dc>
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	f040 8087 	bne.w	8010558 <_dtoa_r+0x8c8>
 801044a:	9b03      	ldr	r3, [sp, #12]
 801044c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010450:	2b00      	cmp	r3, #0
 8010452:	f040 8089 	bne.w	8010568 <_dtoa_r+0x8d8>
 8010456:	9b03      	ldr	r3, [sp, #12]
 8010458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801045c:	0d1b      	lsrs	r3, r3, #20
 801045e:	051b      	lsls	r3, r3, #20
 8010460:	b12b      	cbz	r3, 801046e <_dtoa_r+0x7de>
 8010462:	9b08      	ldr	r3, [sp, #32]
 8010464:	3301      	adds	r3, #1
 8010466:	9308      	str	r3, [sp, #32]
 8010468:	f108 0801 	add.w	r8, r8, #1
 801046c:	2301      	movs	r3, #1
 801046e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 81b0 	beq.w	80107d8 <_dtoa_r+0xb48>
 8010478:	6923      	ldr	r3, [r4, #16]
 801047a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801047e:	6918      	ldr	r0, [r3, #16]
 8010480:	f000 fe52 	bl	8011128 <__hi0bits>
 8010484:	f1c0 0020 	rsb	r0, r0, #32
 8010488:	9b08      	ldr	r3, [sp, #32]
 801048a:	4418      	add	r0, r3
 801048c:	f010 001f 	ands.w	r0, r0, #31
 8010490:	d077      	beq.n	8010582 <_dtoa_r+0x8f2>
 8010492:	f1c0 0320 	rsb	r3, r0, #32
 8010496:	2b04      	cmp	r3, #4
 8010498:	dd6b      	ble.n	8010572 <_dtoa_r+0x8e2>
 801049a:	9b08      	ldr	r3, [sp, #32]
 801049c:	f1c0 001c 	rsb	r0, r0, #28
 80104a0:	4403      	add	r3, r0
 80104a2:	4480      	add	r8, r0
 80104a4:	4406      	add	r6, r0
 80104a6:	9308      	str	r3, [sp, #32]
 80104a8:	f1b8 0f00 	cmp.w	r8, #0
 80104ac:	dd05      	ble.n	80104ba <_dtoa_r+0x82a>
 80104ae:	4649      	mov	r1, r9
 80104b0:	4642      	mov	r2, r8
 80104b2:	4658      	mov	r0, fp
 80104b4:	f000 ff9e 	bl	80113f4 <__lshift>
 80104b8:	4681      	mov	r9, r0
 80104ba:	9b08      	ldr	r3, [sp, #32]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dd05      	ble.n	80104cc <_dtoa_r+0x83c>
 80104c0:	4621      	mov	r1, r4
 80104c2:	461a      	mov	r2, r3
 80104c4:	4658      	mov	r0, fp
 80104c6:	f000 ff95 	bl	80113f4 <__lshift>
 80104ca:	4604      	mov	r4, r0
 80104cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d059      	beq.n	8010586 <_dtoa_r+0x8f6>
 80104d2:	4621      	mov	r1, r4
 80104d4:	4648      	mov	r0, r9
 80104d6:	f000 fff9 	bl	80114cc <__mcmp>
 80104da:	2800      	cmp	r0, #0
 80104dc:	da53      	bge.n	8010586 <_dtoa_r+0x8f6>
 80104de:	1e7b      	subs	r3, r7, #1
 80104e0:	9304      	str	r3, [sp, #16]
 80104e2:	4649      	mov	r1, r9
 80104e4:	2300      	movs	r3, #0
 80104e6:	220a      	movs	r2, #10
 80104e8:	4658      	mov	r0, fp
 80104ea:	f000 fd8d 	bl	8011008 <__multadd>
 80104ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104f0:	4681      	mov	r9, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f000 8172 	beq.w	80107dc <_dtoa_r+0xb4c>
 80104f8:	2300      	movs	r3, #0
 80104fa:	4629      	mov	r1, r5
 80104fc:	220a      	movs	r2, #10
 80104fe:	4658      	mov	r0, fp
 8010500:	f000 fd82 	bl	8011008 <__multadd>
 8010504:	9b00      	ldr	r3, [sp, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	4605      	mov	r5, r0
 801050a:	dc67      	bgt.n	80105dc <_dtoa_r+0x94c>
 801050c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801050e:	2b02      	cmp	r3, #2
 8010510:	dc41      	bgt.n	8010596 <_dtoa_r+0x906>
 8010512:	e063      	b.n	80105dc <_dtoa_r+0x94c>
 8010514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801051a:	e746      	b.n	80103aa <_dtoa_r+0x71a>
 801051c:	9b07      	ldr	r3, [sp, #28]
 801051e:	1e5c      	subs	r4, r3, #1
 8010520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010522:	42a3      	cmp	r3, r4
 8010524:	bfbf      	itttt	lt
 8010526:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010528:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801052a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801052c:	1ae3      	sublt	r3, r4, r3
 801052e:	bfb4      	ite	lt
 8010530:	18d2      	addlt	r2, r2, r3
 8010532:	1b1c      	subge	r4, r3, r4
 8010534:	9b07      	ldr	r3, [sp, #28]
 8010536:	bfbc      	itt	lt
 8010538:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801053a:	2400      	movlt	r4, #0
 801053c:	2b00      	cmp	r3, #0
 801053e:	bfb5      	itete	lt
 8010540:	eba8 0603 	sublt.w	r6, r8, r3
 8010544:	9b07      	ldrge	r3, [sp, #28]
 8010546:	2300      	movlt	r3, #0
 8010548:	4646      	movge	r6, r8
 801054a:	e730      	b.n	80103ae <_dtoa_r+0x71e>
 801054c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801054e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010550:	4646      	mov	r6, r8
 8010552:	e735      	b.n	80103c0 <_dtoa_r+0x730>
 8010554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010556:	e75c      	b.n	8010412 <_dtoa_r+0x782>
 8010558:	2300      	movs	r3, #0
 801055a:	e788      	b.n	801046e <_dtoa_r+0x7de>
 801055c:	3fe00000 	.word	0x3fe00000
 8010560:	40240000 	.word	0x40240000
 8010564:	40140000 	.word	0x40140000
 8010568:	9b02      	ldr	r3, [sp, #8]
 801056a:	e780      	b.n	801046e <_dtoa_r+0x7de>
 801056c:	2300      	movs	r3, #0
 801056e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010570:	e782      	b.n	8010478 <_dtoa_r+0x7e8>
 8010572:	d099      	beq.n	80104a8 <_dtoa_r+0x818>
 8010574:	9a08      	ldr	r2, [sp, #32]
 8010576:	331c      	adds	r3, #28
 8010578:	441a      	add	r2, r3
 801057a:	4498      	add	r8, r3
 801057c:	441e      	add	r6, r3
 801057e:	9208      	str	r2, [sp, #32]
 8010580:	e792      	b.n	80104a8 <_dtoa_r+0x818>
 8010582:	4603      	mov	r3, r0
 8010584:	e7f6      	b.n	8010574 <_dtoa_r+0x8e4>
 8010586:	9b07      	ldr	r3, [sp, #28]
 8010588:	9704      	str	r7, [sp, #16]
 801058a:	2b00      	cmp	r3, #0
 801058c:	dc20      	bgt.n	80105d0 <_dtoa_r+0x940>
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010592:	2b02      	cmp	r3, #2
 8010594:	dd1e      	ble.n	80105d4 <_dtoa_r+0x944>
 8010596:	9b00      	ldr	r3, [sp, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	f47f aec0 	bne.w	801031e <_dtoa_r+0x68e>
 801059e:	4621      	mov	r1, r4
 80105a0:	2205      	movs	r2, #5
 80105a2:	4658      	mov	r0, fp
 80105a4:	f000 fd30 	bl	8011008 <__multadd>
 80105a8:	4601      	mov	r1, r0
 80105aa:	4604      	mov	r4, r0
 80105ac:	4648      	mov	r0, r9
 80105ae:	f000 ff8d 	bl	80114cc <__mcmp>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	f77f aeb3 	ble.w	801031e <_dtoa_r+0x68e>
 80105b8:	4656      	mov	r6, sl
 80105ba:	2331      	movs	r3, #49	@ 0x31
 80105bc:	f806 3b01 	strb.w	r3, [r6], #1
 80105c0:	9b04      	ldr	r3, [sp, #16]
 80105c2:	3301      	adds	r3, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	e6ae      	b.n	8010326 <_dtoa_r+0x696>
 80105c8:	9c07      	ldr	r4, [sp, #28]
 80105ca:	9704      	str	r7, [sp, #16]
 80105cc:	4625      	mov	r5, r4
 80105ce:	e7f3      	b.n	80105b8 <_dtoa_r+0x928>
 80105d0:	9b07      	ldr	r3, [sp, #28]
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8104 	beq.w	80107e4 <_dtoa_r+0xb54>
 80105dc:	2e00      	cmp	r6, #0
 80105de:	dd05      	ble.n	80105ec <_dtoa_r+0x95c>
 80105e0:	4629      	mov	r1, r5
 80105e2:	4632      	mov	r2, r6
 80105e4:	4658      	mov	r0, fp
 80105e6:	f000 ff05 	bl	80113f4 <__lshift>
 80105ea:	4605      	mov	r5, r0
 80105ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d05a      	beq.n	80106a8 <_dtoa_r+0xa18>
 80105f2:	6869      	ldr	r1, [r5, #4]
 80105f4:	4658      	mov	r0, fp
 80105f6:	f000 fca5 	bl	8010f44 <_Balloc>
 80105fa:	4606      	mov	r6, r0
 80105fc:	b928      	cbnz	r0, 801060a <_dtoa_r+0x97a>
 80105fe:	4b84      	ldr	r3, [pc, #528]	@ (8010810 <_dtoa_r+0xb80>)
 8010600:	4602      	mov	r2, r0
 8010602:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010606:	f7ff bb5a 	b.w	800fcbe <_dtoa_r+0x2e>
 801060a:	692a      	ldr	r2, [r5, #16]
 801060c:	3202      	adds	r2, #2
 801060e:	0092      	lsls	r2, r2, #2
 8010610:	f105 010c 	add.w	r1, r5, #12
 8010614:	300c      	adds	r0, #12
 8010616:	f7ff fa78 	bl	800fb0a <memcpy>
 801061a:	2201      	movs	r2, #1
 801061c:	4631      	mov	r1, r6
 801061e:	4658      	mov	r0, fp
 8010620:	f000 fee8 	bl	80113f4 <__lshift>
 8010624:	f10a 0301 	add.w	r3, sl, #1
 8010628:	9307      	str	r3, [sp, #28]
 801062a:	9b00      	ldr	r3, [sp, #0]
 801062c:	4453      	add	r3, sl
 801062e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010630:	9b02      	ldr	r3, [sp, #8]
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	462f      	mov	r7, r5
 8010638:	930a      	str	r3, [sp, #40]	@ 0x28
 801063a:	4605      	mov	r5, r0
 801063c:	9b07      	ldr	r3, [sp, #28]
 801063e:	4621      	mov	r1, r4
 8010640:	3b01      	subs	r3, #1
 8010642:	4648      	mov	r0, r9
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	f7ff fa9b 	bl	800fb80 <quorem>
 801064a:	4639      	mov	r1, r7
 801064c:	9002      	str	r0, [sp, #8]
 801064e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010652:	4648      	mov	r0, r9
 8010654:	f000 ff3a 	bl	80114cc <__mcmp>
 8010658:	462a      	mov	r2, r5
 801065a:	9008      	str	r0, [sp, #32]
 801065c:	4621      	mov	r1, r4
 801065e:	4658      	mov	r0, fp
 8010660:	f000 ff50 	bl	8011504 <__mdiff>
 8010664:	68c2      	ldr	r2, [r0, #12]
 8010666:	4606      	mov	r6, r0
 8010668:	bb02      	cbnz	r2, 80106ac <_dtoa_r+0xa1c>
 801066a:	4601      	mov	r1, r0
 801066c:	4648      	mov	r0, r9
 801066e:	f000 ff2d 	bl	80114cc <__mcmp>
 8010672:	4602      	mov	r2, r0
 8010674:	4631      	mov	r1, r6
 8010676:	4658      	mov	r0, fp
 8010678:	920e      	str	r2, [sp, #56]	@ 0x38
 801067a:	f000 fca3 	bl	8010fc4 <_Bfree>
 801067e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010682:	9e07      	ldr	r6, [sp, #28]
 8010684:	ea43 0102 	orr.w	r1, r3, r2
 8010688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801068a:	4319      	orrs	r1, r3
 801068c:	d110      	bne.n	80106b0 <_dtoa_r+0xa20>
 801068e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010692:	d029      	beq.n	80106e8 <_dtoa_r+0xa58>
 8010694:	9b08      	ldr	r3, [sp, #32]
 8010696:	2b00      	cmp	r3, #0
 8010698:	dd02      	ble.n	80106a0 <_dtoa_r+0xa10>
 801069a:	9b02      	ldr	r3, [sp, #8]
 801069c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80106a0:	9b00      	ldr	r3, [sp, #0]
 80106a2:	f883 8000 	strb.w	r8, [r3]
 80106a6:	e63f      	b.n	8010328 <_dtoa_r+0x698>
 80106a8:	4628      	mov	r0, r5
 80106aa:	e7bb      	b.n	8010624 <_dtoa_r+0x994>
 80106ac:	2201      	movs	r2, #1
 80106ae:	e7e1      	b.n	8010674 <_dtoa_r+0x9e4>
 80106b0:	9b08      	ldr	r3, [sp, #32]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	db04      	blt.n	80106c0 <_dtoa_r+0xa30>
 80106b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106b8:	430b      	orrs	r3, r1
 80106ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80106bc:	430b      	orrs	r3, r1
 80106be:	d120      	bne.n	8010702 <_dtoa_r+0xa72>
 80106c0:	2a00      	cmp	r2, #0
 80106c2:	dded      	ble.n	80106a0 <_dtoa_r+0xa10>
 80106c4:	4649      	mov	r1, r9
 80106c6:	2201      	movs	r2, #1
 80106c8:	4658      	mov	r0, fp
 80106ca:	f000 fe93 	bl	80113f4 <__lshift>
 80106ce:	4621      	mov	r1, r4
 80106d0:	4681      	mov	r9, r0
 80106d2:	f000 fefb 	bl	80114cc <__mcmp>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	dc03      	bgt.n	80106e2 <_dtoa_r+0xa52>
 80106da:	d1e1      	bne.n	80106a0 <_dtoa_r+0xa10>
 80106dc:	f018 0f01 	tst.w	r8, #1
 80106e0:	d0de      	beq.n	80106a0 <_dtoa_r+0xa10>
 80106e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106e6:	d1d8      	bne.n	801069a <_dtoa_r+0xa0a>
 80106e8:	9a00      	ldr	r2, [sp, #0]
 80106ea:	2339      	movs	r3, #57	@ 0x39
 80106ec:	7013      	strb	r3, [r2, #0]
 80106ee:	4633      	mov	r3, r6
 80106f0:	461e      	mov	r6, r3
 80106f2:	3b01      	subs	r3, #1
 80106f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80106f8:	2a39      	cmp	r2, #57	@ 0x39
 80106fa:	d052      	beq.n	80107a2 <_dtoa_r+0xb12>
 80106fc:	3201      	adds	r2, #1
 80106fe:	701a      	strb	r2, [r3, #0]
 8010700:	e612      	b.n	8010328 <_dtoa_r+0x698>
 8010702:	2a00      	cmp	r2, #0
 8010704:	dd07      	ble.n	8010716 <_dtoa_r+0xa86>
 8010706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801070a:	d0ed      	beq.n	80106e8 <_dtoa_r+0xa58>
 801070c:	9a00      	ldr	r2, [sp, #0]
 801070e:	f108 0301 	add.w	r3, r8, #1
 8010712:	7013      	strb	r3, [r2, #0]
 8010714:	e608      	b.n	8010328 <_dtoa_r+0x698>
 8010716:	9b07      	ldr	r3, [sp, #28]
 8010718:	9a07      	ldr	r2, [sp, #28]
 801071a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801071e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010720:	4293      	cmp	r3, r2
 8010722:	d028      	beq.n	8010776 <_dtoa_r+0xae6>
 8010724:	4649      	mov	r1, r9
 8010726:	2300      	movs	r3, #0
 8010728:	220a      	movs	r2, #10
 801072a:	4658      	mov	r0, fp
 801072c:	f000 fc6c 	bl	8011008 <__multadd>
 8010730:	42af      	cmp	r7, r5
 8010732:	4681      	mov	r9, r0
 8010734:	f04f 0300 	mov.w	r3, #0
 8010738:	f04f 020a 	mov.w	r2, #10
 801073c:	4639      	mov	r1, r7
 801073e:	4658      	mov	r0, fp
 8010740:	d107      	bne.n	8010752 <_dtoa_r+0xac2>
 8010742:	f000 fc61 	bl	8011008 <__multadd>
 8010746:	4607      	mov	r7, r0
 8010748:	4605      	mov	r5, r0
 801074a:	9b07      	ldr	r3, [sp, #28]
 801074c:	3301      	adds	r3, #1
 801074e:	9307      	str	r3, [sp, #28]
 8010750:	e774      	b.n	801063c <_dtoa_r+0x9ac>
 8010752:	f000 fc59 	bl	8011008 <__multadd>
 8010756:	4629      	mov	r1, r5
 8010758:	4607      	mov	r7, r0
 801075a:	2300      	movs	r3, #0
 801075c:	220a      	movs	r2, #10
 801075e:	4658      	mov	r0, fp
 8010760:	f000 fc52 	bl	8011008 <__multadd>
 8010764:	4605      	mov	r5, r0
 8010766:	e7f0      	b.n	801074a <_dtoa_r+0xaba>
 8010768:	9b00      	ldr	r3, [sp, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	bfcc      	ite	gt
 801076e:	461e      	movgt	r6, r3
 8010770:	2601      	movle	r6, #1
 8010772:	4456      	add	r6, sl
 8010774:	2700      	movs	r7, #0
 8010776:	4649      	mov	r1, r9
 8010778:	2201      	movs	r2, #1
 801077a:	4658      	mov	r0, fp
 801077c:	f000 fe3a 	bl	80113f4 <__lshift>
 8010780:	4621      	mov	r1, r4
 8010782:	4681      	mov	r9, r0
 8010784:	f000 fea2 	bl	80114cc <__mcmp>
 8010788:	2800      	cmp	r0, #0
 801078a:	dcb0      	bgt.n	80106ee <_dtoa_r+0xa5e>
 801078c:	d102      	bne.n	8010794 <_dtoa_r+0xb04>
 801078e:	f018 0f01 	tst.w	r8, #1
 8010792:	d1ac      	bne.n	80106ee <_dtoa_r+0xa5e>
 8010794:	4633      	mov	r3, r6
 8010796:	461e      	mov	r6, r3
 8010798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801079c:	2a30      	cmp	r2, #48	@ 0x30
 801079e:	d0fa      	beq.n	8010796 <_dtoa_r+0xb06>
 80107a0:	e5c2      	b.n	8010328 <_dtoa_r+0x698>
 80107a2:	459a      	cmp	sl, r3
 80107a4:	d1a4      	bne.n	80106f0 <_dtoa_r+0xa60>
 80107a6:	9b04      	ldr	r3, [sp, #16]
 80107a8:	3301      	adds	r3, #1
 80107aa:	9304      	str	r3, [sp, #16]
 80107ac:	2331      	movs	r3, #49	@ 0x31
 80107ae:	f88a 3000 	strb.w	r3, [sl]
 80107b2:	e5b9      	b.n	8010328 <_dtoa_r+0x698>
 80107b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80107b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010814 <_dtoa_r+0xb84>
 80107ba:	b11b      	cbz	r3, 80107c4 <_dtoa_r+0xb34>
 80107bc:	f10a 0308 	add.w	r3, sl, #8
 80107c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80107c2:	6013      	str	r3, [r2, #0]
 80107c4:	4650      	mov	r0, sl
 80107c6:	b019      	add	sp, #100	@ 0x64
 80107c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	f77f ae37 	ble.w	8010442 <_dtoa_r+0x7b2>
 80107d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107d8:	2001      	movs	r0, #1
 80107da:	e655      	b.n	8010488 <_dtoa_r+0x7f8>
 80107dc:	9b00      	ldr	r3, [sp, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f77f aed6 	ble.w	8010590 <_dtoa_r+0x900>
 80107e4:	4656      	mov	r6, sl
 80107e6:	4621      	mov	r1, r4
 80107e8:	4648      	mov	r0, r9
 80107ea:	f7ff f9c9 	bl	800fb80 <quorem>
 80107ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80107f2:	f806 8b01 	strb.w	r8, [r6], #1
 80107f6:	9b00      	ldr	r3, [sp, #0]
 80107f8:	eba6 020a 	sub.w	r2, r6, sl
 80107fc:	4293      	cmp	r3, r2
 80107fe:	ddb3      	ble.n	8010768 <_dtoa_r+0xad8>
 8010800:	4649      	mov	r1, r9
 8010802:	2300      	movs	r3, #0
 8010804:	220a      	movs	r2, #10
 8010806:	4658      	mov	r0, fp
 8010808:	f000 fbfe 	bl	8011008 <__multadd>
 801080c:	4681      	mov	r9, r0
 801080e:	e7ea      	b.n	80107e6 <_dtoa_r+0xb56>
 8010810:	08015d92 	.word	0x08015d92
 8010814:	08015d2d 	.word	0x08015d2d

08010818 <_free_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4605      	mov	r5, r0
 801081c:	2900      	cmp	r1, #0
 801081e:	d041      	beq.n	80108a4 <_free_r+0x8c>
 8010820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010824:	1f0c      	subs	r4, r1, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfb8      	it	lt
 801082a:	18e4      	addlt	r4, r4, r3
 801082c:	f7fd f930 	bl	800da90 <__malloc_lock>
 8010830:	4a1d      	ldr	r2, [pc, #116]	@ (80108a8 <_free_r+0x90>)
 8010832:	6813      	ldr	r3, [r2, #0]
 8010834:	b933      	cbnz	r3, 8010844 <_free_r+0x2c>
 8010836:	6063      	str	r3, [r4, #4]
 8010838:	6014      	str	r4, [r2, #0]
 801083a:	4628      	mov	r0, r5
 801083c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010840:	f7fd b92c 	b.w	800da9c <__malloc_unlock>
 8010844:	42a3      	cmp	r3, r4
 8010846:	d908      	bls.n	801085a <_free_r+0x42>
 8010848:	6820      	ldr	r0, [r4, #0]
 801084a:	1821      	adds	r1, r4, r0
 801084c:	428b      	cmp	r3, r1
 801084e:	bf01      	itttt	eq
 8010850:	6819      	ldreq	r1, [r3, #0]
 8010852:	685b      	ldreq	r3, [r3, #4]
 8010854:	1809      	addeq	r1, r1, r0
 8010856:	6021      	streq	r1, [r4, #0]
 8010858:	e7ed      	b.n	8010836 <_free_r+0x1e>
 801085a:	461a      	mov	r2, r3
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	b10b      	cbz	r3, 8010864 <_free_r+0x4c>
 8010860:	42a3      	cmp	r3, r4
 8010862:	d9fa      	bls.n	801085a <_free_r+0x42>
 8010864:	6811      	ldr	r1, [r2, #0]
 8010866:	1850      	adds	r0, r2, r1
 8010868:	42a0      	cmp	r0, r4
 801086a:	d10b      	bne.n	8010884 <_free_r+0x6c>
 801086c:	6820      	ldr	r0, [r4, #0]
 801086e:	4401      	add	r1, r0
 8010870:	1850      	adds	r0, r2, r1
 8010872:	4283      	cmp	r3, r0
 8010874:	6011      	str	r1, [r2, #0]
 8010876:	d1e0      	bne.n	801083a <_free_r+0x22>
 8010878:	6818      	ldr	r0, [r3, #0]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	6053      	str	r3, [r2, #4]
 801087e:	4408      	add	r0, r1
 8010880:	6010      	str	r0, [r2, #0]
 8010882:	e7da      	b.n	801083a <_free_r+0x22>
 8010884:	d902      	bls.n	801088c <_free_r+0x74>
 8010886:	230c      	movs	r3, #12
 8010888:	602b      	str	r3, [r5, #0]
 801088a:	e7d6      	b.n	801083a <_free_r+0x22>
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	1821      	adds	r1, r4, r0
 8010890:	428b      	cmp	r3, r1
 8010892:	bf04      	itt	eq
 8010894:	6819      	ldreq	r1, [r3, #0]
 8010896:	685b      	ldreq	r3, [r3, #4]
 8010898:	6063      	str	r3, [r4, #4]
 801089a:	bf04      	itt	eq
 801089c:	1809      	addeq	r1, r1, r0
 801089e:	6021      	streq	r1, [r4, #0]
 80108a0:	6054      	str	r4, [r2, #4]
 80108a2:	e7ca      	b.n	801083a <_free_r+0x22>
 80108a4:	bd38      	pop	{r3, r4, r5, pc}
 80108a6:	bf00      	nop
 80108a8:	20000ea0 	.word	0x20000ea0

080108ac <rshift>:
 80108ac:	6903      	ldr	r3, [r0, #16]
 80108ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108ba:	f100 0414 	add.w	r4, r0, #20
 80108be:	dd45      	ble.n	801094c <rshift+0xa0>
 80108c0:	f011 011f 	ands.w	r1, r1, #31
 80108c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108cc:	d10c      	bne.n	80108e8 <rshift+0x3c>
 80108ce:	f100 0710 	add.w	r7, r0, #16
 80108d2:	4629      	mov	r1, r5
 80108d4:	42b1      	cmp	r1, r6
 80108d6:	d334      	bcc.n	8010942 <rshift+0x96>
 80108d8:	1a9b      	subs	r3, r3, r2
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	1eea      	subs	r2, r5, #3
 80108de:	4296      	cmp	r6, r2
 80108e0:	bf38      	it	cc
 80108e2:	2300      	movcc	r3, #0
 80108e4:	4423      	add	r3, r4
 80108e6:	e015      	b.n	8010914 <rshift+0x68>
 80108e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80108ec:	f1c1 0820 	rsb	r8, r1, #32
 80108f0:	40cf      	lsrs	r7, r1
 80108f2:	f105 0e04 	add.w	lr, r5, #4
 80108f6:	46a1      	mov	r9, r4
 80108f8:	4576      	cmp	r6, lr
 80108fa:	46f4      	mov	ip, lr
 80108fc:	d815      	bhi.n	801092a <rshift+0x7e>
 80108fe:	1a9a      	subs	r2, r3, r2
 8010900:	0092      	lsls	r2, r2, #2
 8010902:	3a04      	subs	r2, #4
 8010904:	3501      	adds	r5, #1
 8010906:	42ae      	cmp	r6, r5
 8010908:	bf38      	it	cc
 801090a:	2200      	movcc	r2, #0
 801090c:	18a3      	adds	r3, r4, r2
 801090e:	50a7      	str	r7, [r4, r2]
 8010910:	b107      	cbz	r7, 8010914 <rshift+0x68>
 8010912:	3304      	adds	r3, #4
 8010914:	1b1a      	subs	r2, r3, r4
 8010916:	42a3      	cmp	r3, r4
 8010918:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801091c:	bf08      	it	eq
 801091e:	2300      	moveq	r3, #0
 8010920:	6102      	str	r2, [r0, #16]
 8010922:	bf08      	it	eq
 8010924:	6143      	streq	r3, [r0, #20]
 8010926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801092a:	f8dc c000 	ldr.w	ip, [ip]
 801092e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010932:	ea4c 0707 	orr.w	r7, ip, r7
 8010936:	f849 7b04 	str.w	r7, [r9], #4
 801093a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801093e:	40cf      	lsrs	r7, r1
 8010940:	e7da      	b.n	80108f8 <rshift+0x4c>
 8010942:	f851 cb04 	ldr.w	ip, [r1], #4
 8010946:	f847 cf04 	str.w	ip, [r7, #4]!
 801094a:	e7c3      	b.n	80108d4 <rshift+0x28>
 801094c:	4623      	mov	r3, r4
 801094e:	e7e1      	b.n	8010914 <rshift+0x68>

08010950 <__hexdig_fun>:
 8010950:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010954:	2b09      	cmp	r3, #9
 8010956:	d802      	bhi.n	801095e <__hexdig_fun+0xe>
 8010958:	3820      	subs	r0, #32
 801095a:	b2c0      	uxtb	r0, r0
 801095c:	4770      	bx	lr
 801095e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010962:	2b05      	cmp	r3, #5
 8010964:	d801      	bhi.n	801096a <__hexdig_fun+0x1a>
 8010966:	3847      	subs	r0, #71	@ 0x47
 8010968:	e7f7      	b.n	801095a <__hexdig_fun+0xa>
 801096a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801096e:	2b05      	cmp	r3, #5
 8010970:	d801      	bhi.n	8010976 <__hexdig_fun+0x26>
 8010972:	3827      	subs	r0, #39	@ 0x27
 8010974:	e7f1      	b.n	801095a <__hexdig_fun+0xa>
 8010976:	2000      	movs	r0, #0
 8010978:	4770      	bx	lr
	...

0801097c <__gethex>:
 801097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010980:	b085      	sub	sp, #20
 8010982:	468a      	mov	sl, r1
 8010984:	9302      	str	r3, [sp, #8]
 8010986:	680b      	ldr	r3, [r1, #0]
 8010988:	9001      	str	r0, [sp, #4]
 801098a:	4690      	mov	r8, r2
 801098c:	1c9c      	adds	r4, r3, #2
 801098e:	46a1      	mov	r9, r4
 8010990:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010994:	2830      	cmp	r0, #48	@ 0x30
 8010996:	d0fa      	beq.n	801098e <__gethex+0x12>
 8010998:	eba9 0303 	sub.w	r3, r9, r3
 801099c:	f1a3 0b02 	sub.w	fp, r3, #2
 80109a0:	f7ff ffd6 	bl	8010950 <__hexdig_fun>
 80109a4:	4605      	mov	r5, r0
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d168      	bne.n	8010a7c <__gethex+0x100>
 80109aa:	49a0      	ldr	r1, [pc, #640]	@ (8010c2c <__gethex+0x2b0>)
 80109ac:	2201      	movs	r2, #1
 80109ae:	4648      	mov	r0, r9
 80109b0:	f7fe ffa0 	bl	800f8f4 <strncmp>
 80109b4:	4607      	mov	r7, r0
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d167      	bne.n	8010a8a <__gethex+0x10e>
 80109ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80109be:	4626      	mov	r6, r4
 80109c0:	f7ff ffc6 	bl	8010950 <__hexdig_fun>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d062      	beq.n	8010a8e <__gethex+0x112>
 80109c8:	4623      	mov	r3, r4
 80109ca:	7818      	ldrb	r0, [r3, #0]
 80109cc:	2830      	cmp	r0, #48	@ 0x30
 80109ce:	4699      	mov	r9, r3
 80109d0:	f103 0301 	add.w	r3, r3, #1
 80109d4:	d0f9      	beq.n	80109ca <__gethex+0x4e>
 80109d6:	f7ff ffbb 	bl	8010950 <__hexdig_fun>
 80109da:	fab0 f580 	clz	r5, r0
 80109de:	096d      	lsrs	r5, r5, #5
 80109e0:	f04f 0b01 	mov.w	fp, #1
 80109e4:	464a      	mov	r2, r9
 80109e6:	4616      	mov	r6, r2
 80109e8:	3201      	adds	r2, #1
 80109ea:	7830      	ldrb	r0, [r6, #0]
 80109ec:	f7ff ffb0 	bl	8010950 <__hexdig_fun>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d1f8      	bne.n	80109e6 <__gethex+0x6a>
 80109f4:	498d      	ldr	r1, [pc, #564]	@ (8010c2c <__gethex+0x2b0>)
 80109f6:	2201      	movs	r2, #1
 80109f8:	4630      	mov	r0, r6
 80109fa:	f7fe ff7b 	bl	800f8f4 <strncmp>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d13f      	bne.n	8010a82 <__gethex+0x106>
 8010a02:	b944      	cbnz	r4, 8010a16 <__gethex+0x9a>
 8010a04:	1c74      	adds	r4, r6, #1
 8010a06:	4622      	mov	r2, r4
 8010a08:	4616      	mov	r6, r2
 8010a0a:	3201      	adds	r2, #1
 8010a0c:	7830      	ldrb	r0, [r6, #0]
 8010a0e:	f7ff ff9f 	bl	8010950 <__hexdig_fun>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d1f8      	bne.n	8010a08 <__gethex+0x8c>
 8010a16:	1ba4      	subs	r4, r4, r6
 8010a18:	00a7      	lsls	r7, r4, #2
 8010a1a:	7833      	ldrb	r3, [r6, #0]
 8010a1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010a20:	2b50      	cmp	r3, #80	@ 0x50
 8010a22:	d13e      	bne.n	8010aa2 <__gethex+0x126>
 8010a24:	7873      	ldrb	r3, [r6, #1]
 8010a26:	2b2b      	cmp	r3, #43	@ 0x2b
 8010a28:	d033      	beq.n	8010a92 <__gethex+0x116>
 8010a2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a2c:	d034      	beq.n	8010a98 <__gethex+0x11c>
 8010a2e:	1c71      	adds	r1, r6, #1
 8010a30:	2400      	movs	r4, #0
 8010a32:	7808      	ldrb	r0, [r1, #0]
 8010a34:	f7ff ff8c 	bl	8010950 <__hexdig_fun>
 8010a38:	1e43      	subs	r3, r0, #1
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b18      	cmp	r3, #24
 8010a3e:	d830      	bhi.n	8010aa2 <__gethex+0x126>
 8010a40:	f1a0 0210 	sub.w	r2, r0, #16
 8010a44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a48:	f7ff ff82 	bl	8010950 <__hexdig_fun>
 8010a4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a50:	fa5f fc8c 	uxtb.w	ip, ip
 8010a54:	f1bc 0f18 	cmp.w	ip, #24
 8010a58:	f04f 030a 	mov.w	r3, #10
 8010a5c:	d91e      	bls.n	8010a9c <__gethex+0x120>
 8010a5e:	b104      	cbz	r4, 8010a62 <__gethex+0xe6>
 8010a60:	4252      	negs	r2, r2
 8010a62:	4417      	add	r7, r2
 8010a64:	f8ca 1000 	str.w	r1, [sl]
 8010a68:	b1ed      	cbz	r5, 8010aa6 <__gethex+0x12a>
 8010a6a:	f1bb 0f00 	cmp.w	fp, #0
 8010a6e:	bf0c      	ite	eq
 8010a70:	2506      	moveq	r5, #6
 8010a72:	2500      	movne	r5, #0
 8010a74:	4628      	mov	r0, r5
 8010a76:	b005      	add	sp, #20
 8010a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7c:	2500      	movs	r5, #0
 8010a7e:	462c      	mov	r4, r5
 8010a80:	e7b0      	b.n	80109e4 <__gethex+0x68>
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	d1c7      	bne.n	8010a16 <__gethex+0x9a>
 8010a86:	4627      	mov	r7, r4
 8010a88:	e7c7      	b.n	8010a1a <__gethex+0x9e>
 8010a8a:	464e      	mov	r6, r9
 8010a8c:	462f      	mov	r7, r5
 8010a8e:	2501      	movs	r5, #1
 8010a90:	e7c3      	b.n	8010a1a <__gethex+0x9e>
 8010a92:	2400      	movs	r4, #0
 8010a94:	1cb1      	adds	r1, r6, #2
 8010a96:	e7cc      	b.n	8010a32 <__gethex+0xb6>
 8010a98:	2401      	movs	r4, #1
 8010a9a:	e7fb      	b.n	8010a94 <__gethex+0x118>
 8010a9c:	fb03 0002 	mla	r0, r3, r2, r0
 8010aa0:	e7ce      	b.n	8010a40 <__gethex+0xc4>
 8010aa2:	4631      	mov	r1, r6
 8010aa4:	e7de      	b.n	8010a64 <__gethex+0xe8>
 8010aa6:	eba6 0309 	sub.w	r3, r6, r9
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	4629      	mov	r1, r5
 8010aae:	2b07      	cmp	r3, #7
 8010ab0:	dc0a      	bgt.n	8010ac8 <__gethex+0x14c>
 8010ab2:	9801      	ldr	r0, [sp, #4]
 8010ab4:	f000 fa46 	bl	8010f44 <_Balloc>
 8010ab8:	4604      	mov	r4, r0
 8010aba:	b940      	cbnz	r0, 8010ace <__gethex+0x152>
 8010abc:	4b5c      	ldr	r3, [pc, #368]	@ (8010c30 <__gethex+0x2b4>)
 8010abe:	4602      	mov	r2, r0
 8010ac0:	21e4      	movs	r1, #228	@ 0xe4
 8010ac2:	485c      	ldr	r0, [pc, #368]	@ (8010c34 <__gethex+0x2b8>)
 8010ac4:	f7ff f83e 	bl	800fb44 <__assert_func>
 8010ac8:	3101      	adds	r1, #1
 8010aca:	105b      	asrs	r3, r3, #1
 8010acc:	e7ef      	b.n	8010aae <__gethex+0x132>
 8010ace:	f100 0a14 	add.w	sl, r0, #20
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	4655      	mov	r5, sl
 8010ad6:	469b      	mov	fp, r3
 8010ad8:	45b1      	cmp	r9, r6
 8010ada:	d337      	bcc.n	8010b4c <__gethex+0x1d0>
 8010adc:	f845 bb04 	str.w	fp, [r5], #4
 8010ae0:	eba5 050a 	sub.w	r5, r5, sl
 8010ae4:	10ad      	asrs	r5, r5, #2
 8010ae6:	6125      	str	r5, [r4, #16]
 8010ae8:	4658      	mov	r0, fp
 8010aea:	f000 fb1d 	bl	8011128 <__hi0bits>
 8010aee:	016d      	lsls	r5, r5, #5
 8010af0:	f8d8 6000 	ldr.w	r6, [r8]
 8010af4:	1a2d      	subs	r5, r5, r0
 8010af6:	42b5      	cmp	r5, r6
 8010af8:	dd54      	ble.n	8010ba4 <__gethex+0x228>
 8010afa:	1bad      	subs	r5, r5, r6
 8010afc:	4629      	mov	r1, r5
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 feb1 	bl	8011866 <__any_on>
 8010b04:	4681      	mov	r9, r0
 8010b06:	b178      	cbz	r0, 8010b28 <__gethex+0x1ac>
 8010b08:	1e6b      	subs	r3, r5, #1
 8010b0a:	1159      	asrs	r1, r3, #5
 8010b0c:	f003 021f 	and.w	r2, r3, #31
 8010b10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010b14:	f04f 0901 	mov.w	r9, #1
 8010b18:	fa09 f202 	lsl.w	r2, r9, r2
 8010b1c:	420a      	tst	r2, r1
 8010b1e:	d003      	beq.n	8010b28 <__gethex+0x1ac>
 8010b20:	454b      	cmp	r3, r9
 8010b22:	dc36      	bgt.n	8010b92 <__gethex+0x216>
 8010b24:	f04f 0902 	mov.w	r9, #2
 8010b28:	4629      	mov	r1, r5
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f7ff febe 	bl	80108ac <rshift>
 8010b30:	442f      	add	r7, r5
 8010b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b36:	42bb      	cmp	r3, r7
 8010b38:	da42      	bge.n	8010bc0 <__gethex+0x244>
 8010b3a:	9801      	ldr	r0, [sp, #4]
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	f000 fa41 	bl	8010fc4 <_Bfree>
 8010b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b44:	2300      	movs	r3, #0
 8010b46:	6013      	str	r3, [r2, #0]
 8010b48:	25a3      	movs	r5, #163	@ 0xa3
 8010b4a:	e793      	b.n	8010a74 <__gethex+0xf8>
 8010b4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010b50:	2a2e      	cmp	r2, #46	@ 0x2e
 8010b52:	d012      	beq.n	8010b7a <__gethex+0x1fe>
 8010b54:	2b20      	cmp	r3, #32
 8010b56:	d104      	bne.n	8010b62 <__gethex+0x1e6>
 8010b58:	f845 bb04 	str.w	fp, [r5], #4
 8010b5c:	f04f 0b00 	mov.w	fp, #0
 8010b60:	465b      	mov	r3, fp
 8010b62:	7830      	ldrb	r0, [r6, #0]
 8010b64:	9303      	str	r3, [sp, #12]
 8010b66:	f7ff fef3 	bl	8010950 <__hexdig_fun>
 8010b6a:	9b03      	ldr	r3, [sp, #12]
 8010b6c:	f000 000f 	and.w	r0, r0, #15
 8010b70:	4098      	lsls	r0, r3
 8010b72:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b76:	3304      	adds	r3, #4
 8010b78:	e7ae      	b.n	8010ad8 <__gethex+0x15c>
 8010b7a:	45b1      	cmp	r9, r6
 8010b7c:	d8ea      	bhi.n	8010b54 <__gethex+0x1d8>
 8010b7e:	492b      	ldr	r1, [pc, #172]	@ (8010c2c <__gethex+0x2b0>)
 8010b80:	9303      	str	r3, [sp, #12]
 8010b82:	2201      	movs	r2, #1
 8010b84:	4630      	mov	r0, r6
 8010b86:	f7fe feb5 	bl	800f8f4 <strncmp>
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d1e1      	bne.n	8010b54 <__gethex+0x1d8>
 8010b90:	e7a2      	b.n	8010ad8 <__gethex+0x15c>
 8010b92:	1ea9      	subs	r1, r5, #2
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 fe66 	bl	8011866 <__any_on>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d0c2      	beq.n	8010b24 <__gethex+0x1a8>
 8010b9e:	f04f 0903 	mov.w	r9, #3
 8010ba2:	e7c1      	b.n	8010b28 <__gethex+0x1ac>
 8010ba4:	da09      	bge.n	8010bba <__gethex+0x23e>
 8010ba6:	1b75      	subs	r5, r6, r5
 8010ba8:	4621      	mov	r1, r4
 8010baa:	9801      	ldr	r0, [sp, #4]
 8010bac:	462a      	mov	r2, r5
 8010bae:	f000 fc21 	bl	80113f4 <__lshift>
 8010bb2:	1b7f      	subs	r7, r7, r5
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	f100 0a14 	add.w	sl, r0, #20
 8010bba:	f04f 0900 	mov.w	r9, #0
 8010bbe:	e7b8      	b.n	8010b32 <__gethex+0x1b6>
 8010bc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010bc4:	42bd      	cmp	r5, r7
 8010bc6:	dd6f      	ble.n	8010ca8 <__gethex+0x32c>
 8010bc8:	1bed      	subs	r5, r5, r7
 8010bca:	42ae      	cmp	r6, r5
 8010bcc:	dc34      	bgt.n	8010c38 <__gethex+0x2bc>
 8010bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d022      	beq.n	8010c1c <__gethex+0x2a0>
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	d024      	beq.n	8010c24 <__gethex+0x2a8>
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d115      	bne.n	8010c0a <__gethex+0x28e>
 8010bde:	42ae      	cmp	r6, r5
 8010be0:	d113      	bne.n	8010c0a <__gethex+0x28e>
 8010be2:	2e01      	cmp	r6, #1
 8010be4:	d10b      	bne.n	8010bfe <__gethex+0x282>
 8010be6:	9a02      	ldr	r2, [sp, #8]
 8010be8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bec:	6013      	str	r3, [r2, #0]
 8010bee:	2301      	movs	r3, #1
 8010bf0:	6123      	str	r3, [r4, #16]
 8010bf2:	f8ca 3000 	str.w	r3, [sl]
 8010bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bf8:	2562      	movs	r5, #98	@ 0x62
 8010bfa:	601c      	str	r4, [r3, #0]
 8010bfc:	e73a      	b.n	8010a74 <__gethex+0xf8>
 8010bfe:	1e71      	subs	r1, r6, #1
 8010c00:	4620      	mov	r0, r4
 8010c02:	f000 fe30 	bl	8011866 <__any_on>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d1ed      	bne.n	8010be6 <__gethex+0x26a>
 8010c0a:	9801      	ldr	r0, [sp, #4]
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	f000 f9d9 	bl	8010fc4 <_Bfree>
 8010c12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c14:	2300      	movs	r3, #0
 8010c16:	6013      	str	r3, [r2, #0]
 8010c18:	2550      	movs	r5, #80	@ 0x50
 8010c1a:	e72b      	b.n	8010a74 <__gethex+0xf8>
 8010c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1f3      	bne.n	8010c0a <__gethex+0x28e>
 8010c22:	e7e0      	b.n	8010be6 <__gethex+0x26a>
 8010c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1dd      	bne.n	8010be6 <__gethex+0x26a>
 8010c2a:	e7ee      	b.n	8010c0a <__gethex+0x28e>
 8010c2c:	08015ae8 	.word	0x08015ae8
 8010c30:	08015d92 	.word	0x08015d92
 8010c34:	08015da3 	.word	0x08015da3
 8010c38:	1e6f      	subs	r7, r5, #1
 8010c3a:	f1b9 0f00 	cmp.w	r9, #0
 8010c3e:	d130      	bne.n	8010ca2 <__gethex+0x326>
 8010c40:	b127      	cbz	r7, 8010c4c <__gethex+0x2d0>
 8010c42:	4639      	mov	r1, r7
 8010c44:	4620      	mov	r0, r4
 8010c46:	f000 fe0e 	bl	8011866 <__any_on>
 8010c4a:	4681      	mov	r9, r0
 8010c4c:	117a      	asrs	r2, r7, #5
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010c54:	f007 071f 	and.w	r7, r7, #31
 8010c58:	40bb      	lsls	r3, r7
 8010c5a:	4213      	tst	r3, r2
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	4620      	mov	r0, r4
 8010c60:	bf18      	it	ne
 8010c62:	f049 0902 	orrne.w	r9, r9, #2
 8010c66:	f7ff fe21 	bl	80108ac <rshift>
 8010c6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c6e:	1b76      	subs	r6, r6, r5
 8010c70:	2502      	movs	r5, #2
 8010c72:	f1b9 0f00 	cmp.w	r9, #0
 8010c76:	d047      	beq.n	8010d08 <__gethex+0x38c>
 8010c78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d015      	beq.n	8010cac <__gethex+0x330>
 8010c80:	2b03      	cmp	r3, #3
 8010c82:	d017      	beq.n	8010cb4 <__gethex+0x338>
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d109      	bne.n	8010c9c <__gethex+0x320>
 8010c88:	f019 0f02 	tst.w	r9, #2
 8010c8c:	d006      	beq.n	8010c9c <__gethex+0x320>
 8010c8e:	f8da 3000 	ldr.w	r3, [sl]
 8010c92:	ea49 0903 	orr.w	r9, r9, r3
 8010c96:	f019 0f01 	tst.w	r9, #1
 8010c9a:	d10e      	bne.n	8010cba <__gethex+0x33e>
 8010c9c:	f045 0510 	orr.w	r5, r5, #16
 8010ca0:	e032      	b.n	8010d08 <__gethex+0x38c>
 8010ca2:	f04f 0901 	mov.w	r9, #1
 8010ca6:	e7d1      	b.n	8010c4c <__gethex+0x2d0>
 8010ca8:	2501      	movs	r5, #1
 8010caa:	e7e2      	b.n	8010c72 <__gethex+0x2f6>
 8010cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cae:	f1c3 0301 	rsb	r3, r3, #1
 8010cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d0f0      	beq.n	8010c9c <__gethex+0x320>
 8010cba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010cbe:	f104 0314 	add.w	r3, r4, #20
 8010cc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010cc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cca:	f04f 0c00 	mov.w	ip, #0
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010cd8:	d01b      	beq.n	8010d12 <__gethex+0x396>
 8010cda:	3201      	adds	r2, #1
 8010cdc:	6002      	str	r2, [r0, #0]
 8010cde:	2d02      	cmp	r5, #2
 8010ce0:	f104 0314 	add.w	r3, r4, #20
 8010ce4:	d13c      	bne.n	8010d60 <__gethex+0x3e4>
 8010ce6:	f8d8 2000 	ldr.w	r2, [r8]
 8010cea:	3a01      	subs	r2, #1
 8010cec:	42b2      	cmp	r2, r6
 8010cee:	d109      	bne.n	8010d04 <__gethex+0x388>
 8010cf0:	1171      	asrs	r1, r6, #5
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010cf8:	f006 061f 	and.w	r6, r6, #31
 8010cfc:	fa02 f606 	lsl.w	r6, r2, r6
 8010d00:	421e      	tst	r6, r3
 8010d02:	d13a      	bne.n	8010d7a <__gethex+0x3fe>
 8010d04:	f045 0520 	orr.w	r5, r5, #32
 8010d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d0a:	601c      	str	r4, [r3, #0]
 8010d0c:	9b02      	ldr	r3, [sp, #8]
 8010d0e:	601f      	str	r7, [r3, #0]
 8010d10:	e6b0      	b.n	8010a74 <__gethex+0xf8>
 8010d12:	4299      	cmp	r1, r3
 8010d14:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d18:	d8d9      	bhi.n	8010cce <__gethex+0x352>
 8010d1a:	68a3      	ldr	r3, [r4, #8]
 8010d1c:	459b      	cmp	fp, r3
 8010d1e:	db17      	blt.n	8010d50 <__gethex+0x3d4>
 8010d20:	6861      	ldr	r1, [r4, #4]
 8010d22:	9801      	ldr	r0, [sp, #4]
 8010d24:	3101      	adds	r1, #1
 8010d26:	f000 f90d 	bl	8010f44 <_Balloc>
 8010d2a:	4681      	mov	r9, r0
 8010d2c:	b918      	cbnz	r0, 8010d36 <__gethex+0x3ba>
 8010d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010d98 <__gethex+0x41c>)
 8010d30:	4602      	mov	r2, r0
 8010d32:	2184      	movs	r1, #132	@ 0x84
 8010d34:	e6c5      	b.n	8010ac2 <__gethex+0x146>
 8010d36:	6922      	ldr	r2, [r4, #16]
 8010d38:	3202      	adds	r2, #2
 8010d3a:	f104 010c 	add.w	r1, r4, #12
 8010d3e:	0092      	lsls	r2, r2, #2
 8010d40:	300c      	adds	r0, #12
 8010d42:	f7fe fee2 	bl	800fb0a <memcpy>
 8010d46:	4621      	mov	r1, r4
 8010d48:	9801      	ldr	r0, [sp, #4]
 8010d4a:	f000 f93b 	bl	8010fc4 <_Bfree>
 8010d4e:	464c      	mov	r4, r9
 8010d50:	6923      	ldr	r3, [r4, #16]
 8010d52:	1c5a      	adds	r2, r3, #1
 8010d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d58:	6122      	str	r2, [r4, #16]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	615a      	str	r2, [r3, #20]
 8010d5e:	e7be      	b.n	8010cde <__gethex+0x362>
 8010d60:	6922      	ldr	r2, [r4, #16]
 8010d62:	455a      	cmp	r2, fp
 8010d64:	dd0b      	ble.n	8010d7e <__gethex+0x402>
 8010d66:	2101      	movs	r1, #1
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7ff fd9f 	bl	80108ac <rshift>
 8010d6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d72:	3701      	adds	r7, #1
 8010d74:	42bb      	cmp	r3, r7
 8010d76:	f6ff aee0 	blt.w	8010b3a <__gethex+0x1be>
 8010d7a:	2501      	movs	r5, #1
 8010d7c:	e7c2      	b.n	8010d04 <__gethex+0x388>
 8010d7e:	f016 061f 	ands.w	r6, r6, #31
 8010d82:	d0fa      	beq.n	8010d7a <__gethex+0x3fe>
 8010d84:	4453      	add	r3, sl
 8010d86:	f1c6 0620 	rsb	r6, r6, #32
 8010d8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d8e:	f000 f9cb 	bl	8011128 <__hi0bits>
 8010d92:	42b0      	cmp	r0, r6
 8010d94:	dbe7      	blt.n	8010d66 <__gethex+0x3ea>
 8010d96:	e7f0      	b.n	8010d7a <__gethex+0x3fe>
 8010d98:	08015d92 	.word	0x08015d92

08010d9c <L_shift>:
 8010d9c:	f1c2 0208 	rsb	r2, r2, #8
 8010da0:	0092      	lsls	r2, r2, #2
 8010da2:	b570      	push	{r4, r5, r6, lr}
 8010da4:	f1c2 0620 	rsb	r6, r2, #32
 8010da8:	6843      	ldr	r3, [r0, #4]
 8010daa:	6804      	ldr	r4, [r0, #0]
 8010dac:	fa03 f506 	lsl.w	r5, r3, r6
 8010db0:	432c      	orrs	r4, r5
 8010db2:	40d3      	lsrs	r3, r2
 8010db4:	6004      	str	r4, [r0, #0]
 8010db6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010dba:	4288      	cmp	r0, r1
 8010dbc:	d3f4      	bcc.n	8010da8 <L_shift+0xc>
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}

08010dc0 <__match>:
 8010dc0:	b530      	push	{r4, r5, lr}
 8010dc2:	6803      	ldr	r3, [r0, #0]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dca:	b914      	cbnz	r4, 8010dd2 <__match+0x12>
 8010dcc:	6003      	str	r3, [r0, #0]
 8010dce:	2001      	movs	r0, #1
 8010dd0:	bd30      	pop	{r4, r5, pc}
 8010dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010dda:	2d19      	cmp	r5, #25
 8010ddc:	bf98      	it	ls
 8010dde:	3220      	addls	r2, #32
 8010de0:	42a2      	cmp	r2, r4
 8010de2:	d0f0      	beq.n	8010dc6 <__match+0x6>
 8010de4:	2000      	movs	r0, #0
 8010de6:	e7f3      	b.n	8010dd0 <__match+0x10>

08010de8 <__hexnan>:
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	680b      	ldr	r3, [r1, #0]
 8010dee:	6801      	ldr	r1, [r0, #0]
 8010df0:	115e      	asrs	r6, r3, #5
 8010df2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010df6:	f013 031f 	ands.w	r3, r3, #31
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	bf18      	it	ne
 8010dfe:	3604      	addne	r6, #4
 8010e00:	2500      	movs	r5, #0
 8010e02:	1f37      	subs	r7, r6, #4
 8010e04:	4682      	mov	sl, r0
 8010e06:	4690      	mov	r8, r2
 8010e08:	9301      	str	r3, [sp, #4]
 8010e0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e0e:	46b9      	mov	r9, r7
 8010e10:	463c      	mov	r4, r7
 8010e12:	9502      	str	r5, [sp, #8]
 8010e14:	46ab      	mov	fp, r5
 8010e16:	784a      	ldrb	r2, [r1, #1]
 8010e18:	1c4b      	adds	r3, r1, #1
 8010e1a:	9303      	str	r3, [sp, #12]
 8010e1c:	b342      	cbz	r2, 8010e70 <__hexnan+0x88>
 8010e1e:	4610      	mov	r0, r2
 8010e20:	9105      	str	r1, [sp, #20]
 8010e22:	9204      	str	r2, [sp, #16]
 8010e24:	f7ff fd94 	bl	8010950 <__hexdig_fun>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d151      	bne.n	8010ed0 <__hexnan+0xe8>
 8010e2c:	9a04      	ldr	r2, [sp, #16]
 8010e2e:	9905      	ldr	r1, [sp, #20]
 8010e30:	2a20      	cmp	r2, #32
 8010e32:	d818      	bhi.n	8010e66 <__hexnan+0x7e>
 8010e34:	9b02      	ldr	r3, [sp, #8]
 8010e36:	459b      	cmp	fp, r3
 8010e38:	dd13      	ble.n	8010e62 <__hexnan+0x7a>
 8010e3a:	454c      	cmp	r4, r9
 8010e3c:	d206      	bcs.n	8010e4c <__hexnan+0x64>
 8010e3e:	2d07      	cmp	r5, #7
 8010e40:	dc04      	bgt.n	8010e4c <__hexnan+0x64>
 8010e42:	462a      	mov	r2, r5
 8010e44:	4649      	mov	r1, r9
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7ff ffa8 	bl	8010d9c <L_shift>
 8010e4c:	4544      	cmp	r4, r8
 8010e4e:	d952      	bls.n	8010ef6 <__hexnan+0x10e>
 8010e50:	2300      	movs	r3, #0
 8010e52:	f1a4 0904 	sub.w	r9, r4, #4
 8010e56:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e5a:	f8cd b008 	str.w	fp, [sp, #8]
 8010e5e:	464c      	mov	r4, r9
 8010e60:	461d      	mov	r5, r3
 8010e62:	9903      	ldr	r1, [sp, #12]
 8010e64:	e7d7      	b.n	8010e16 <__hexnan+0x2e>
 8010e66:	2a29      	cmp	r2, #41	@ 0x29
 8010e68:	d157      	bne.n	8010f1a <__hexnan+0x132>
 8010e6a:	3102      	adds	r1, #2
 8010e6c:	f8ca 1000 	str.w	r1, [sl]
 8010e70:	f1bb 0f00 	cmp.w	fp, #0
 8010e74:	d051      	beq.n	8010f1a <__hexnan+0x132>
 8010e76:	454c      	cmp	r4, r9
 8010e78:	d206      	bcs.n	8010e88 <__hexnan+0xa0>
 8010e7a:	2d07      	cmp	r5, #7
 8010e7c:	dc04      	bgt.n	8010e88 <__hexnan+0xa0>
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4649      	mov	r1, r9
 8010e82:	4620      	mov	r0, r4
 8010e84:	f7ff ff8a 	bl	8010d9c <L_shift>
 8010e88:	4544      	cmp	r4, r8
 8010e8a:	d936      	bls.n	8010efa <__hexnan+0x112>
 8010e8c:	f1a8 0204 	sub.w	r2, r8, #4
 8010e90:	4623      	mov	r3, r4
 8010e92:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e96:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e9a:	429f      	cmp	r7, r3
 8010e9c:	d2f9      	bcs.n	8010e92 <__hexnan+0xaa>
 8010e9e:	1b3b      	subs	r3, r7, r4
 8010ea0:	f023 0303 	bic.w	r3, r3, #3
 8010ea4:	3304      	adds	r3, #4
 8010ea6:	3401      	adds	r4, #1
 8010ea8:	3e03      	subs	r6, #3
 8010eaa:	42b4      	cmp	r4, r6
 8010eac:	bf88      	it	hi
 8010eae:	2304      	movhi	r3, #4
 8010eb0:	4443      	add	r3, r8
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f843 2b04 	str.w	r2, [r3], #4
 8010eb8:	429f      	cmp	r7, r3
 8010eba:	d2fb      	bcs.n	8010eb4 <__hexnan+0xcc>
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	b91b      	cbnz	r3, 8010ec8 <__hexnan+0xe0>
 8010ec0:	4547      	cmp	r7, r8
 8010ec2:	d128      	bne.n	8010f16 <__hexnan+0x12e>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	603b      	str	r3, [r7, #0]
 8010ec8:	2005      	movs	r0, #5
 8010eca:	b007      	add	sp, #28
 8010ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed0:	3501      	adds	r5, #1
 8010ed2:	2d08      	cmp	r5, #8
 8010ed4:	f10b 0b01 	add.w	fp, fp, #1
 8010ed8:	dd06      	ble.n	8010ee8 <__hexnan+0x100>
 8010eda:	4544      	cmp	r4, r8
 8010edc:	d9c1      	bls.n	8010e62 <__hexnan+0x7a>
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ee4:	2501      	movs	r5, #1
 8010ee6:	3c04      	subs	r4, #4
 8010ee8:	6822      	ldr	r2, [r4, #0]
 8010eea:	f000 000f 	and.w	r0, r0, #15
 8010eee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010ef2:	6020      	str	r0, [r4, #0]
 8010ef4:	e7b5      	b.n	8010e62 <__hexnan+0x7a>
 8010ef6:	2508      	movs	r5, #8
 8010ef8:	e7b3      	b.n	8010e62 <__hexnan+0x7a>
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d0dd      	beq.n	8010ebc <__hexnan+0xd4>
 8010f00:	f1c3 0320 	rsb	r3, r3, #32
 8010f04:	f04f 32ff 	mov.w	r2, #4294967295
 8010f08:	40da      	lsrs	r2, r3
 8010f0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f0e:	4013      	ands	r3, r2
 8010f10:	f846 3c04 	str.w	r3, [r6, #-4]
 8010f14:	e7d2      	b.n	8010ebc <__hexnan+0xd4>
 8010f16:	3f04      	subs	r7, #4
 8010f18:	e7d0      	b.n	8010ebc <__hexnan+0xd4>
 8010f1a:	2004      	movs	r0, #4
 8010f1c:	e7d5      	b.n	8010eca <__hexnan+0xe2>

08010f1e <__ascii_mbtowc>:
 8010f1e:	b082      	sub	sp, #8
 8010f20:	b901      	cbnz	r1, 8010f24 <__ascii_mbtowc+0x6>
 8010f22:	a901      	add	r1, sp, #4
 8010f24:	b142      	cbz	r2, 8010f38 <__ascii_mbtowc+0x1a>
 8010f26:	b14b      	cbz	r3, 8010f3c <__ascii_mbtowc+0x1e>
 8010f28:	7813      	ldrb	r3, [r2, #0]
 8010f2a:	600b      	str	r3, [r1, #0]
 8010f2c:	7812      	ldrb	r2, [r2, #0]
 8010f2e:	1e10      	subs	r0, r2, #0
 8010f30:	bf18      	it	ne
 8010f32:	2001      	movne	r0, #1
 8010f34:	b002      	add	sp, #8
 8010f36:	4770      	bx	lr
 8010f38:	4610      	mov	r0, r2
 8010f3a:	e7fb      	b.n	8010f34 <__ascii_mbtowc+0x16>
 8010f3c:	f06f 0001 	mvn.w	r0, #1
 8010f40:	e7f8      	b.n	8010f34 <__ascii_mbtowc+0x16>
	...

08010f44 <_Balloc>:
 8010f44:	b570      	push	{r4, r5, r6, lr}
 8010f46:	69c6      	ldr	r6, [r0, #28]
 8010f48:	4604      	mov	r4, r0
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	b976      	cbnz	r6, 8010f6c <_Balloc+0x28>
 8010f4e:	2010      	movs	r0, #16
 8010f50:	f7fc fcec 	bl	800d92c <malloc>
 8010f54:	4602      	mov	r2, r0
 8010f56:	61e0      	str	r0, [r4, #28]
 8010f58:	b920      	cbnz	r0, 8010f64 <_Balloc+0x20>
 8010f5a:	4b18      	ldr	r3, [pc, #96]	@ (8010fbc <_Balloc+0x78>)
 8010f5c:	4818      	ldr	r0, [pc, #96]	@ (8010fc0 <_Balloc+0x7c>)
 8010f5e:	216b      	movs	r1, #107	@ 0x6b
 8010f60:	f7fe fdf0 	bl	800fb44 <__assert_func>
 8010f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f68:	6006      	str	r6, [r0, #0]
 8010f6a:	60c6      	str	r6, [r0, #12]
 8010f6c:	69e6      	ldr	r6, [r4, #28]
 8010f6e:	68f3      	ldr	r3, [r6, #12]
 8010f70:	b183      	cbz	r3, 8010f94 <_Balloc+0x50>
 8010f72:	69e3      	ldr	r3, [r4, #28]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f7a:	b9b8      	cbnz	r0, 8010fac <_Balloc+0x68>
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8010f82:	1d72      	adds	r2, r6, #5
 8010f84:	0092      	lsls	r2, r2, #2
 8010f86:	4620      	mov	r0, r4
 8010f88:	f001 fc97 	bl	80128ba <_calloc_r>
 8010f8c:	b160      	cbz	r0, 8010fa8 <_Balloc+0x64>
 8010f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f92:	e00e      	b.n	8010fb2 <_Balloc+0x6e>
 8010f94:	2221      	movs	r2, #33	@ 0x21
 8010f96:	2104      	movs	r1, #4
 8010f98:	4620      	mov	r0, r4
 8010f9a:	f001 fc8e 	bl	80128ba <_calloc_r>
 8010f9e:	69e3      	ldr	r3, [r4, #28]
 8010fa0:	60f0      	str	r0, [r6, #12]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1e4      	bne.n	8010f72 <_Balloc+0x2e>
 8010fa8:	2000      	movs	r0, #0
 8010faa:	bd70      	pop	{r4, r5, r6, pc}
 8010fac:	6802      	ldr	r2, [r0, #0]
 8010fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fb8:	e7f7      	b.n	8010faa <_Balloc+0x66>
 8010fba:	bf00      	nop
 8010fbc:	08015c78 	.word	0x08015c78
 8010fc0:	08015e03 	.word	0x08015e03

08010fc4 <_Bfree>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	69c6      	ldr	r6, [r0, #28]
 8010fc8:	4605      	mov	r5, r0
 8010fca:	460c      	mov	r4, r1
 8010fcc:	b976      	cbnz	r6, 8010fec <_Bfree+0x28>
 8010fce:	2010      	movs	r0, #16
 8010fd0:	f7fc fcac 	bl	800d92c <malloc>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	61e8      	str	r0, [r5, #28]
 8010fd8:	b920      	cbnz	r0, 8010fe4 <_Bfree+0x20>
 8010fda:	4b09      	ldr	r3, [pc, #36]	@ (8011000 <_Bfree+0x3c>)
 8010fdc:	4809      	ldr	r0, [pc, #36]	@ (8011004 <_Bfree+0x40>)
 8010fde:	218f      	movs	r1, #143	@ 0x8f
 8010fe0:	f7fe fdb0 	bl	800fb44 <__assert_func>
 8010fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fe8:	6006      	str	r6, [r0, #0]
 8010fea:	60c6      	str	r6, [r0, #12]
 8010fec:	b13c      	cbz	r4, 8010ffe <_Bfree+0x3a>
 8010fee:	69eb      	ldr	r3, [r5, #28]
 8010ff0:	6862      	ldr	r2, [r4, #4]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ff8:	6021      	str	r1, [r4, #0]
 8010ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}
 8011000:	08015c78 	.word	0x08015c78
 8011004:	08015e03 	.word	0x08015e03

08011008 <__multadd>:
 8011008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801100c:	690d      	ldr	r5, [r1, #16]
 801100e:	4607      	mov	r7, r0
 8011010:	460c      	mov	r4, r1
 8011012:	461e      	mov	r6, r3
 8011014:	f101 0c14 	add.w	ip, r1, #20
 8011018:	2000      	movs	r0, #0
 801101a:	f8dc 3000 	ldr.w	r3, [ip]
 801101e:	b299      	uxth	r1, r3
 8011020:	fb02 6101 	mla	r1, r2, r1, r6
 8011024:	0c1e      	lsrs	r6, r3, #16
 8011026:	0c0b      	lsrs	r3, r1, #16
 8011028:	fb02 3306 	mla	r3, r2, r6, r3
 801102c:	b289      	uxth	r1, r1
 801102e:	3001      	adds	r0, #1
 8011030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011034:	4285      	cmp	r5, r0
 8011036:	f84c 1b04 	str.w	r1, [ip], #4
 801103a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801103e:	dcec      	bgt.n	801101a <__multadd+0x12>
 8011040:	b30e      	cbz	r6, 8011086 <__multadd+0x7e>
 8011042:	68a3      	ldr	r3, [r4, #8]
 8011044:	42ab      	cmp	r3, r5
 8011046:	dc19      	bgt.n	801107c <__multadd+0x74>
 8011048:	6861      	ldr	r1, [r4, #4]
 801104a:	4638      	mov	r0, r7
 801104c:	3101      	adds	r1, #1
 801104e:	f7ff ff79 	bl	8010f44 <_Balloc>
 8011052:	4680      	mov	r8, r0
 8011054:	b928      	cbnz	r0, 8011062 <__multadd+0x5a>
 8011056:	4602      	mov	r2, r0
 8011058:	4b0c      	ldr	r3, [pc, #48]	@ (801108c <__multadd+0x84>)
 801105a:	480d      	ldr	r0, [pc, #52]	@ (8011090 <__multadd+0x88>)
 801105c:	21ba      	movs	r1, #186	@ 0xba
 801105e:	f7fe fd71 	bl	800fb44 <__assert_func>
 8011062:	6922      	ldr	r2, [r4, #16]
 8011064:	3202      	adds	r2, #2
 8011066:	f104 010c 	add.w	r1, r4, #12
 801106a:	0092      	lsls	r2, r2, #2
 801106c:	300c      	adds	r0, #12
 801106e:	f7fe fd4c 	bl	800fb0a <memcpy>
 8011072:	4621      	mov	r1, r4
 8011074:	4638      	mov	r0, r7
 8011076:	f7ff ffa5 	bl	8010fc4 <_Bfree>
 801107a:	4644      	mov	r4, r8
 801107c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011080:	3501      	adds	r5, #1
 8011082:	615e      	str	r6, [r3, #20]
 8011084:	6125      	str	r5, [r4, #16]
 8011086:	4620      	mov	r0, r4
 8011088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801108c:	08015d92 	.word	0x08015d92
 8011090:	08015e03 	.word	0x08015e03

08011094 <__s2b>:
 8011094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011098:	460c      	mov	r4, r1
 801109a:	4615      	mov	r5, r2
 801109c:	461f      	mov	r7, r3
 801109e:	2209      	movs	r2, #9
 80110a0:	3308      	adds	r3, #8
 80110a2:	4606      	mov	r6, r0
 80110a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80110a8:	2100      	movs	r1, #0
 80110aa:	2201      	movs	r2, #1
 80110ac:	429a      	cmp	r2, r3
 80110ae:	db09      	blt.n	80110c4 <__s2b+0x30>
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7ff ff47 	bl	8010f44 <_Balloc>
 80110b6:	b940      	cbnz	r0, 80110ca <__s2b+0x36>
 80110b8:	4602      	mov	r2, r0
 80110ba:	4b19      	ldr	r3, [pc, #100]	@ (8011120 <__s2b+0x8c>)
 80110bc:	4819      	ldr	r0, [pc, #100]	@ (8011124 <__s2b+0x90>)
 80110be:	21d3      	movs	r1, #211	@ 0xd3
 80110c0:	f7fe fd40 	bl	800fb44 <__assert_func>
 80110c4:	0052      	lsls	r2, r2, #1
 80110c6:	3101      	adds	r1, #1
 80110c8:	e7f0      	b.n	80110ac <__s2b+0x18>
 80110ca:	9b08      	ldr	r3, [sp, #32]
 80110cc:	6143      	str	r3, [r0, #20]
 80110ce:	2d09      	cmp	r5, #9
 80110d0:	f04f 0301 	mov.w	r3, #1
 80110d4:	6103      	str	r3, [r0, #16]
 80110d6:	dd16      	ble.n	8011106 <__s2b+0x72>
 80110d8:	f104 0909 	add.w	r9, r4, #9
 80110dc:	46c8      	mov	r8, r9
 80110de:	442c      	add	r4, r5
 80110e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80110e4:	4601      	mov	r1, r0
 80110e6:	3b30      	subs	r3, #48	@ 0x30
 80110e8:	220a      	movs	r2, #10
 80110ea:	4630      	mov	r0, r6
 80110ec:	f7ff ff8c 	bl	8011008 <__multadd>
 80110f0:	45a0      	cmp	r8, r4
 80110f2:	d1f5      	bne.n	80110e0 <__s2b+0x4c>
 80110f4:	f1a5 0408 	sub.w	r4, r5, #8
 80110f8:	444c      	add	r4, r9
 80110fa:	1b2d      	subs	r5, r5, r4
 80110fc:	1963      	adds	r3, r4, r5
 80110fe:	42bb      	cmp	r3, r7
 8011100:	db04      	blt.n	801110c <__s2b+0x78>
 8011102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011106:	340a      	adds	r4, #10
 8011108:	2509      	movs	r5, #9
 801110a:	e7f6      	b.n	80110fa <__s2b+0x66>
 801110c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011110:	4601      	mov	r1, r0
 8011112:	3b30      	subs	r3, #48	@ 0x30
 8011114:	220a      	movs	r2, #10
 8011116:	4630      	mov	r0, r6
 8011118:	f7ff ff76 	bl	8011008 <__multadd>
 801111c:	e7ee      	b.n	80110fc <__s2b+0x68>
 801111e:	bf00      	nop
 8011120:	08015d92 	.word	0x08015d92
 8011124:	08015e03 	.word	0x08015e03

08011128 <__hi0bits>:
 8011128:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801112c:	4603      	mov	r3, r0
 801112e:	bf36      	itet	cc
 8011130:	0403      	lslcc	r3, r0, #16
 8011132:	2000      	movcs	r0, #0
 8011134:	2010      	movcc	r0, #16
 8011136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801113a:	bf3c      	itt	cc
 801113c:	021b      	lslcc	r3, r3, #8
 801113e:	3008      	addcc	r0, #8
 8011140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011144:	bf3c      	itt	cc
 8011146:	011b      	lslcc	r3, r3, #4
 8011148:	3004      	addcc	r0, #4
 801114a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801114e:	bf3c      	itt	cc
 8011150:	009b      	lslcc	r3, r3, #2
 8011152:	3002      	addcc	r0, #2
 8011154:	2b00      	cmp	r3, #0
 8011156:	db05      	blt.n	8011164 <__hi0bits+0x3c>
 8011158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801115c:	f100 0001 	add.w	r0, r0, #1
 8011160:	bf08      	it	eq
 8011162:	2020      	moveq	r0, #32
 8011164:	4770      	bx	lr

08011166 <__lo0bits>:
 8011166:	6803      	ldr	r3, [r0, #0]
 8011168:	4602      	mov	r2, r0
 801116a:	f013 0007 	ands.w	r0, r3, #7
 801116e:	d00b      	beq.n	8011188 <__lo0bits+0x22>
 8011170:	07d9      	lsls	r1, r3, #31
 8011172:	d421      	bmi.n	80111b8 <__lo0bits+0x52>
 8011174:	0798      	lsls	r0, r3, #30
 8011176:	bf49      	itett	mi
 8011178:	085b      	lsrmi	r3, r3, #1
 801117a:	089b      	lsrpl	r3, r3, #2
 801117c:	2001      	movmi	r0, #1
 801117e:	6013      	strmi	r3, [r2, #0]
 8011180:	bf5c      	itt	pl
 8011182:	6013      	strpl	r3, [r2, #0]
 8011184:	2002      	movpl	r0, #2
 8011186:	4770      	bx	lr
 8011188:	b299      	uxth	r1, r3
 801118a:	b909      	cbnz	r1, 8011190 <__lo0bits+0x2a>
 801118c:	0c1b      	lsrs	r3, r3, #16
 801118e:	2010      	movs	r0, #16
 8011190:	b2d9      	uxtb	r1, r3
 8011192:	b909      	cbnz	r1, 8011198 <__lo0bits+0x32>
 8011194:	3008      	adds	r0, #8
 8011196:	0a1b      	lsrs	r3, r3, #8
 8011198:	0719      	lsls	r1, r3, #28
 801119a:	bf04      	itt	eq
 801119c:	091b      	lsreq	r3, r3, #4
 801119e:	3004      	addeq	r0, #4
 80111a0:	0799      	lsls	r1, r3, #30
 80111a2:	bf04      	itt	eq
 80111a4:	089b      	lsreq	r3, r3, #2
 80111a6:	3002      	addeq	r0, #2
 80111a8:	07d9      	lsls	r1, r3, #31
 80111aa:	d403      	bmi.n	80111b4 <__lo0bits+0x4e>
 80111ac:	085b      	lsrs	r3, r3, #1
 80111ae:	f100 0001 	add.w	r0, r0, #1
 80111b2:	d003      	beq.n	80111bc <__lo0bits+0x56>
 80111b4:	6013      	str	r3, [r2, #0]
 80111b6:	4770      	bx	lr
 80111b8:	2000      	movs	r0, #0
 80111ba:	4770      	bx	lr
 80111bc:	2020      	movs	r0, #32
 80111be:	4770      	bx	lr

080111c0 <__i2b>:
 80111c0:	b510      	push	{r4, lr}
 80111c2:	460c      	mov	r4, r1
 80111c4:	2101      	movs	r1, #1
 80111c6:	f7ff febd 	bl	8010f44 <_Balloc>
 80111ca:	4602      	mov	r2, r0
 80111cc:	b928      	cbnz	r0, 80111da <__i2b+0x1a>
 80111ce:	4b05      	ldr	r3, [pc, #20]	@ (80111e4 <__i2b+0x24>)
 80111d0:	4805      	ldr	r0, [pc, #20]	@ (80111e8 <__i2b+0x28>)
 80111d2:	f240 1145 	movw	r1, #325	@ 0x145
 80111d6:	f7fe fcb5 	bl	800fb44 <__assert_func>
 80111da:	2301      	movs	r3, #1
 80111dc:	6144      	str	r4, [r0, #20]
 80111de:	6103      	str	r3, [r0, #16]
 80111e0:	bd10      	pop	{r4, pc}
 80111e2:	bf00      	nop
 80111e4:	08015d92 	.word	0x08015d92
 80111e8:	08015e03 	.word	0x08015e03

080111ec <__multiply>:
 80111ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f0:	4614      	mov	r4, r2
 80111f2:	690a      	ldr	r2, [r1, #16]
 80111f4:	6923      	ldr	r3, [r4, #16]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	bfa8      	it	ge
 80111fa:	4623      	movge	r3, r4
 80111fc:	460f      	mov	r7, r1
 80111fe:	bfa4      	itt	ge
 8011200:	460c      	movge	r4, r1
 8011202:	461f      	movge	r7, r3
 8011204:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011208:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801120c:	68a3      	ldr	r3, [r4, #8]
 801120e:	6861      	ldr	r1, [r4, #4]
 8011210:	eb0a 0609 	add.w	r6, sl, r9
 8011214:	42b3      	cmp	r3, r6
 8011216:	b085      	sub	sp, #20
 8011218:	bfb8      	it	lt
 801121a:	3101      	addlt	r1, #1
 801121c:	f7ff fe92 	bl	8010f44 <_Balloc>
 8011220:	b930      	cbnz	r0, 8011230 <__multiply+0x44>
 8011222:	4602      	mov	r2, r0
 8011224:	4b44      	ldr	r3, [pc, #272]	@ (8011338 <__multiply+0x14c>)
 8011226:	4845      	ldr	r0, [pc, #276]	@ (801133c <__multiply+0x150>)
 8011228:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801122c:	f7fe fc8a 	bl	800fb44 <__assert_func>
 8011230:	f100 0514 	add.w	r5, r0, #20
 8011234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011238:	462b      	mov	r3, r5
 801123a:	2200      	movs	r2, #0
 801123c:	4543      	cmp	r3, r8
 801123e:	d321      	bcc.n	8011284 <__multiply+0x98>
 8011240:	f107 0114 	add.w	r1, r7, #20
 8011244:	f104 0214 	add.w	r2, r4, #20
 8011248:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801124c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011250:	9302      	str	r3, [sp, #8]
 8011252:	1b13      	subs	r3, r2, r4
 8011254:	3b15      	subs	r3, #21
 8011256:	f023 0303 	bic.w	r3, r3, #3
 801125a:	3304      	adds	r3, #4
 801125c:	f104 0715 	add.w	r7, r4, #21
 8011260:	42ba      	cmp	r2, r7
 8011262:	bf38      	it	cc
 8011264:	2304      	movcc	r3, #4
 8011266:	9301      	str	r3, [sp, #4]
 8011268:	9b02      	ldr	r3, [sp, #8]
 801126a:	9103      	str	r1, [sp, #12]
 801126c:	428b      	cmp	r3, r1
 801126e:	d80c      	bhi.n	801128a <__multiply+0x9e>
 8011270:	2e00      	cmp	r6, #0
 8011272:	dd03      	ble.n	801127c <__multiply+0x90>
 8011274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011278:	2b00      	cmp	r3, #0
 801127a:	d05b      	beq.n	8011334 <__multiply+0x148>
 801127c:	6106      	str	r6, [r0, #16]
 801127e:	b005      	add	sp, #20
 8011280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011284:	f843 2b04 	str.w	r2, [r3], #4
 8011288:	e7d8      	b.n	801123c <__multiply+0x50>
 801128a:	f8b1 a000 	ldrh.w	sl, [r1]
 801128e:	f1ba 0f00 	cmp.w	sl, #0
 8011292:	d024      	beq.n	80112de <__multiply+0xf2>
 8011294:	f104 0e14 	add.w	lr, r4, #20
 8011298:	46a9      	mov	r9, r5
 801129a:	f04f 0c00 	mov.w	ip, #0
 801129e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80112a2:	f8d9 3000 	ldr.w	r3, [r9]
 80112a6:	fa1f fb87 	uxth.w	fp, r7
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80112b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80112b4:	f8d9 7000 	ldr.w	r7, [r9]
 80112b8:	4463      	add	r3, ip
 80112ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112be:	fb0a c70b 	mla	r7, sl, fp, ip
 80112c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80112cc:	4572      	cmp	r2, lr
 80112ce:	f849 3b04 	str.w	r3, [r9], #4
 80112d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112d6:	d8e2      	bhi.n	801129e <__multiply+0xb2>
 80112d8:	9b01      	ldr	r3, [sp, #4]
 80112da:	f845 c003 	str.w	ip, [r5, r3]
 80112de:	9b03      	ldr	r3, [sp, #12]
 80112e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112e4:	3104      	adds	r1, #4
 80112e6:	f1b9 0f00 	cmp.w	r9, #0
 80112ea:	d021      	beq.n	8011330 <__multiply+0x144>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	f104 0c14 	add.w	ip, r4, #20
 80112f2:	46ae      	mov	lr, r5
 80112f4:	f04f 0a00 	mov.w	sl, #0
 80112f8:	f8bc b000 	ldrh.w	fp, [ip]
 80112fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011300:	fb09 770b 	mla	r7, r9, fp, r7
 8011304:	4457      	add	r7, sl
 8011306:	b29b      	uxth	r3, r3
 8011308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801130c:	f84e 3b04 	str.w	r3, [lr], #4
 8011310:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011318:	f8be 3000 	ldrh.w	r3, [lr]
 801131c:	fb09 330a 	mla	r3, r9, sl, r3
 8011320:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011324:	4562      	cmp	r2, ip
 8011326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801132a:	d8e5      	bhi.n	80112f8 <__multiply+0x10c>
 801132c:	9f01      	ldr	r7, [sp, #4]
 801132e:	51eb      	str	r3, [r5, r7]
 8011330:	3504      	adds	r5, #4
 8011332:	e799      	b.n	8011268 <__multiply+0x7c>
 8011334:	3e01      	subs	r6, #1
 8011336:	e79b      	b.n	8011270 <__multiply+0x84>
 8011338:	08015d92 	.word	0x08015d92
 801133c:	08015e03 	.word	0x08015e03

08011340 <__pow5mult>:
 8011340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011344:	4615      	mov	r5, r2
 8011346:	f012 0203 	ands.w	r2, r2, #3
 801134a:	4607      	mov	r7, r0
 801134c:	460e      	mov	r6, r1
 801134e:	d007      	beq.n	8011360 <__pow5mult+0x20>
 8011350:	4c25      	ldr	r4, [pc, #148]	@ (80113e8 <__pow5mult+0xa8>)
 8011352:	3a01      	subs	r2, #1
 8011354:	2300      	movs	r3, #0
 8011356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801135a:	f7ff fe55 	bl	8011008 <__multadd>
 801135e:	4606      	mov	r6, r0
 8011360:	10ad      	asrs	r5, r5, #2
 8011362:	d03d      	beq.n	80113e0 <__pow5mult+0xa0>
 8011364:	69fc      	ldr	r4, [r7, #28]
 8011366:	b97c      	cbnz	r4, 8011388 <__pow5mult+0x48>
 8011368:	2010      	movs	r0, #16
 801136a:	f7fc fadf 	bl	800d92c <malloc>
 801136e:	4602      	mov	r2, r0
 8011370:	61f8      	str	r0, [r7, #28]
 8011372:	b928      	cbnz	r0, 8011380 <__pow5mult+0x40>
 8011374:	4b1d      	ldr	r3, [pc, #116]	@ (80113ec <__pow5mult+0xac>)
 8011376:	481e      	ldr	r0, [pc, #120]	@ (80113f0 <__pow5mult+0xb0>)
 8011378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801137c:	f7fe fbe2 	bl	800fb44 <__assert_func>
 8011380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011384:	6004      	str	r4, [r0, #0]
 8011386:	60c4      	str	r4, [r0, #12]
 8011388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801138c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011390:	b94c      	cbnz	r4, 80113a6 <__pow5mult+0x66>
 8011392:	f240 2171 	movw	r1, #625	@ 0x271
 8011396:	4638      	mov	r0, r7
 8011398:	f7ff ff12 	bl	80111c0 <__i2b>
 801139c:	2300      	movs	r3, #0
 801139e:	f8c8 0008 	str.w	r0, [r8, #8]
 80113a2:	4604      	mov	r4, r0
 80113a4:	6003      	str	r3, [r0, #0]
 80113a6:	f04f 0900 	mov.w	r9, #0
 80113aa:	07eb      	lsls	r3, r5, #31
 80113ac:	d50a      	bpl.n	80113c4 <__pow5mult+0x84>
 80113ae:	4631      	mov	r1, r6
 80113b0:	4622      	mov	r2, r4
 80113b2:	4638      	mov	r0, r7
 80113b4:	f7ff ff1a 	bl	80111ec <__multiply>
 80113b8:	4631      	mov	r1, r6
 80113ba:	4680      	mov	r8, r0
 80113bc:	4638      	mov	r0, r7
 80113be:	f7ff fe01 	bl	8010fc4 <_Bfree>
 80113c2:	4646      	mov	r6, r8
 80113c4:	106d      	asrs	r5, r5, #1
 80113c6:	d00b      	beq.n	80113e0 <__pow5mult+0xa0>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	b938      	cbnz	r0, 80113dc <__pow5mult+0x9c>
 80113cc:	4622      	mov	r2, r4
 80113ce:	4621      	mov	r1, r4
 80113d0:	4638      	mov	r0, r7
 80113d2:	f7ff ff0b 	bl	80111ec <__multiply>
 80113d6:	6020      	str	r0, [r4, #0]
 80113d8:	f8c0 9000 	str.w	r9, [r0]
 80113dc:	4604      	mov	r4, r0
 80113de:	e7e4      	b.n	80113aa <__pow5mult+0x6a>
 80113e0:	4630      	mov	r0, r6
 80113e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113e6:	bf00      	nop
 80113e8:	08015e5c 	.word	0x08015e5c
 80113ec:	08015c78 	.word	0x08015c78
 80113f0:	08015e03 	.word	0x08015e03

080113f4 <__lshift>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	460c      	mov	r4, r1
 80113fa:	6849      	ldr	r1, [r1, #4]
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011402:	68a3      	ldr	r3, [r4, #8]
 8011404:	4607      	mov	r7, r0
 8011406:	4691      	mov	r9, r2
 8011408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801140c:	f108 0601 	add.w	r6, r8, #1
 8011410:	42b3      	cmp	r3, r6
 8011412:	db0b      	blt.n	801142c <__lshift+0x38>
 8011414:	4638      	mov	r0, r7
 8011416:	f7ff fd95 	bl	8010f44 <_Balloc>
 801141a:	4605      	mov	r5, r0
 801141c:	b948      	cbnz	r0, 8011432 <__lshift+0x3e>
 801141e:	4602      	mov	r2, r0
 8011420:	4b28      	ldr	r3, [pc, #160]	@ (80114c4 <__lshift+0xd0>)
 8011422:	4829      	ldr	r0, [pc, #164]	@ (80114c8 <__lshift+0xd4>)
 8011424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011428:	f7fe fb8c 	bl	800fb44 <__assert_func>
 801142c:	3101      	adds	r1, #1
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	e7ee      	b.n	8011410 <__lshift+0x1c>
 8011432:	2300      	movs	r3, #0
 8011434:	f100 0114 	add.w	r1, r0, #20
 8011438:	f100 0210 	add.w	r2, r0, #16
 801143c:	4618      	mov	r0, r3
 801143e:	4553      	cmp	r3, sl
 8011440:	db33      	blt.n	80114aa <__lshift+0xb6>
 8011442:	6920      	ldr	r0, [r4, #16]
 8011444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011448:	f104 0314 	add.w	r3, r4, #20
 801144c:	f019 091f 	ands.w	r9, r9, #31
 8011450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011458:	d02b      	beq.n	80114b2 <__lshift+0xbe>
 801145a:	f1c9 0e20 	rsb	lr, r9, #32
 801145e:	468a      	mov	sl, r1
 8011460:	2200      	movs	r2, #0
 8011462:	6818      	ldr	r0, [r3, #0]
 8011464:	fa00 f009 	lsl.w	r0, r0, r9
 8011468:	4310      	orrs	r0, r2
 801146a:	f84a 0b04 	str.w	r0, [sl], #4
 801146e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011472:	459c      	cmp	ip, r3
 8011474:	fa22 f20e 	lsr.w	r2, r2, lr
 8011478:	d8f3      	bhi.n	8011462 <__lshift+0x6e>
 801147a:	ebac 0304 	sub.w	r3, ip, r4
 801147e:	3b15      	subs	r3, #21
 8011480:	f023 0303 	bic.w	r3, r3, #3
 8011484:	3304      	adds	r3, #4
 8011486:	f104 0015 	add.w	r0, r4, #21
 801148a:	4584      	cmp	ip, r0
 801148c:	bf38      	it	cc
 801148e:	2304      	movcc	r3, #4
 8011490:	50ca      	str	r2, [r1, r3]
 8011492:	b10a      	cbz	r2, 8011498 <__lshift+0xa4>
 8011494:	f108 0602 	add.w	r6, r8, #2
 8011498:	3e01      	subs	r6, #1
 801149a:	4638      	mov	r0, r7
 801149c:	612e      	str	r6, [r5, #16]
 801149e:	4621      	mov	r1, r4
 80114a0:	f7ff fd90 	bl	8010fc4 <_Bfree>
 80114a4:	4628      	mov	r0, r5
 80114a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80114ae:	3301      	adds	r3, #1
 80114b0:	e7c5      	b.n	801143e <__lshift+0x4a>
 80114b2:	3904      	subs	r1, #4
 80114b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80114bc:	459c      	cmp	ip, r3
 80114be:	d8f9      	bhi.n	80114b4 <__lshift+0xc0>
 80114c0:	e7ea      	b.n	8011498 <__lshift+0xa4>
 80114c2:	bf00      	nop
 80114c4:	08015d92 	.word	0x08015d92
 80114c8:	08015e03 	.word	0x08015e03

080114cc <__mcmp>:
 80114cc:	690a      	ldr	r2, [r1, #16]
 80114ce:	4603      	mov	r3, r0
 80114d0:	6900      	ldr	r0, [r0, #16]
 80114d2:	1a80      	subs	r0, r0, r2
 80114d4:	b530      	push	{r4, r5, lr}
 80114d6:	d10e      	bne.n	80114f6 <__mcmp+0x2a>
 80114d8:	3314      	adds	r3, #20
 80114da:	3114      	adds	r1, #20
 80114dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114ec:	4295      	cmp	r5, r2
 80114ee:	d003      	beq.n	80114f8 <__mcmp+0x2c>
 80114f0:	d205      	bcs.n	80114fe <__mcmp+0x32>
 80114f2:	f04f 30ff 	mov.w	r0, #4294967295
 80114f6:	bd30      	pop	{r4, r5, pc}
 80114f8:	42a3      	cmp	r3, r4
 80114fa:	d3f3      	bcc.n	80114e4 <__mcmp+0x18>
 80114fc:	e7fb      	b.n	80114f6 <__mcmp+0x2a>
 80114fe:	2001      	movs	r0, #1
 8011500:	e7f9      	b.n	80114f6 <__mcmp+0x2a>
	...

08011504 <__mdiff>:
 8011504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	4689      	mov	r9, r1
 801150a:	4606      	mov	r6, r0
 801150c:	4611      	mov	r1, r2
 801150e:	4648      	mov	r0, r9
 8011510:	4614      	mov	r4, r2
 8011512:	f7ff ffdb 	bl	80114cc <__mcmp>
 8011516:	1e05      	subs	r5, r0, #0
 8011518:	d112      	bne.n	8011540 <__mdiff+0x3c>
 801151a:	4629      	mov	r1, r5
 801151c:	4630      	mov	r0, r6
 801151e:	f7ff fd11 	bl	8010f44 <_Balloc>
 8011522:	4602      	mov	r2, r0
 8011524:	b928      	cbnz	r0, 8011532 <__mdiff+0x2e>
 8011526:	4b3f      	ldr	r3, [pc, #252]	@ (8011624 <__mdiff+0x120>)
 8011528:	f240 2137 	movw	r1, #567	@ 0x237
 801152c:	483e      	ldr	r0, [pc, #248]	@ (8011628 <__mdiff+0x124>)
 801152e:	f7fe fb09 	bl	800fb44 <__assert_func>
 8011532:	2301      	movs	r3, #1
 8011534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011538:	4610      	mov	r0, r2
 801153a:	b003      	add	sp, #12
 801153c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011540:	bfbc      	itt	lt
 8011542:	464b      	movlt	r3, r9
 8011544:	46a1      	movlt	r9, r4
 8011546:	4630      	mov	r0, r6
 8011548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801154c:	bfba      	itte	lt
 801154e:	461c      	movlt	r4, r3
 8011550:	2501      	movlt	r5, #1
 8011552:	2500      	movge	r5, #0
 8011554:	f7ff fcf6 	bl	8010f44 <_Balloc>
 8011558:	4602      	mov	r2, r0
 801155a:	b918      	cbnz	r0, 8011564 <__mdiff+0x60>
 801155c:	4b31      	ldr	r3, [pc, #196]	@ (8011624 <__mdiff+0x120>)
 801155e:	f240 2145 	movw	r1, #581	@ 0x245
 8011562:	e7e3      	b.n	801152c <__mdiff+0x28>
 8011564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011568:	6926      	ldr	r6, [r4, #16]
 801156a:	60c5      	str	r5, [r0, #12]
 801156c:	f109 0310 	add.w	r3, r9, #16
 8011570:	f109 0514 	add.w	r5, r9, #20
 8011574:	f104 0e14 	add.w	lr, r4, #20
 8011578:	f100 0b14 	add.w	fp, r0, #20
 801157c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011580:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011584:	9301      	str	r3, [sp, #4]
 8011586:	46d9      	mov	r9, fp
 8011588:	f04f 0c00 	mov.w	ip, #0
 801158c:	9b01      	ldr	r3, [sp, #4]
 801158e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011592:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011596:	9301      	str	r3, [sp, #4]
 8011598:	fa1f f38a 	uxth.w	r3, sl
 801159c:	4619      	mov	r1, r3
 801159e:	b283      	uxth	r3, r0
 80115a0:	1acb      	subs	r3, r1, r3
 80115a2:	0c00      	lsrs	r0, r0, #16
 80115a4:	4463      	add	r3, ip
 80115a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115b4:	4576      	cmp	r6, lr
 80115b6:	f849 3b04 	str.w	r3, [r9], #4
 80115ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115be:	d8e5      	bhi.n	801158c <__mdiff+0x88>
 80115c0:	1b33      	subs	r3, r6, r4
 80115c2:	3b15      	subs	r3, #21
 80115c4:	f023 0303 	bic.w	r3, r3, #3
 80115c8:	3415      	adds	r4, #21
 80115ca:	3304      	adds	r3, #4
 80115cc:	42a6      	cmp	r6, r4
 80115ce:	bf38      	it	cc
 80115d0:	2304      	movcc	r3, #4
 80115d2:	441d      	add	r5, r3
 80115d4:	445b      	add	r3, fp
 80115d6:	461e      	mov	r6, r3
 80115d8:	462c      	mov	r4, r5
 80115da:	4544      	cmp	r4, r8
 80115dc:	d30e      	bcc.n	80115fc <__mdiff+0xf8>
 80115de:	f108 0103 	add.w	r1, r8, #3
 80115e2:	1b49      	subs	r1, r1, r5
 80115e4:	f021 0103 	bic.w	r1, r1, #3
 80115e8:	3d03      	subs	r5, #3
 80115ea:	45a8      	cmp	r8, r5
 80115ec:	bf38      	it	cc
 80115ee:	2100      	movcc	r1, #0
 80115f0:	440b      	add	r3, r1
 80115f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115f6:	b191      	cbz	r1, 801161e <__mdiff+0x11a>
 80115f8:	6117      	str	r7, [r2, #16]
 80115fa:	e79d      	b.n	8011538 <__mdiff+0x34>
 80115fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011600:	46e6      	mov	lr, ip
 8011602:	0c08      	lsrs	r0, r1, #16
 8011604:	fa1c fc81 	uxtah	ip, ip, r1
 8011608:	4471      	add	r1, lr
 801160a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801160e:	b289      	uxth	r1, r1
 8011610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011614:	f846 1b04 	str.w	r1, [r6], #4
 8011618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801161c:	e7dd      	b.n	80115da <__mdiff+0xd6>
 801161e:	3f01      	subs	r7, #1
 8011620:	e7e7      	b.n	80115f2 <__mdiff+0xee>
 8011622:	bf00      	nop
 8011624:	08015d92 	.word	0x08015d92
 8011628:	08015e03 	.word	0x08015e03

0801162c <__ulp>:
 801162c:	b082      	sub	sp, #8
 801162e:	ed8d 0b00 	vstr	d0, [sp]
 8011632:	9a01      	ldr	r2, [sp, #4]
 8011634:	4b0f      	ldr	r3, [pc, #60]	@ (8011674 <__ulp+0x48>)
 8011636:	4013      	ands	r3, r2
 8011638:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801163c:	2b00      	cmp	r3, #0
 801163e:	dc08      	bgt.n	8011652 <__ulp+0x26>
 8011640:	425b      	negs	r3, r3
 8011642:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011646:	ea4f 5223 	mov.w	r2, r3, asr #20
 801164a:	da04      	bge.n	8011656 <__ulp+0x2a>
 801164c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011650:	4113      	asrs	r3, r2
 8011652:	2200      	movs	r2, #0
 8011654:	e008      	b.n	8011668 <__ulp+0x3c>
 8011656:	f1a2 0314 	sub.w	r3, r2, #20
 801165a:	2b1e      	cmp	r3, #30
 801165c:	bfda      	itte	le
 801165e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011662:	40da      	lsrle	r2, r3
 8011664:	2201      	movgt	r2, #1
 8011666:	2300      	movs	r3, #0
 8011668:	4619      	mov	r1, r3
 801166a:	4610      	mov	r0, r2
 801166c:	ec41 0b10 	vmov	d0, r0, r1
 8011670:	b002      	add	sp, #8
 8011672:	4770      	bx	lr
 8011674:	7ff00000 	.word	0x7ff00000

08011678 <__b2d>:
 8011678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801167c:	6906      	ldr	r6, [r0, #16]
 801167e:	f100 0814 	add.w	r8, r0, #20
 8011682:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011686:	1f37      	subs	r7, r6, #4
 8011688:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801168c:	4610      	mov	r0, r2
 801168e:	f7ff fd4b 	bl	8011128 <__hi0bits>
 8011692:	f1c0 0320 	rsb	r3, r0, #32
 8011696:	280a      	cmp	r0, #10
 8011698:	600b      	str	r3, [r1, #0]
 801169a:	491b      	ldr	r1, [pc, #108]	@ (8011708 <__b2d+0x90>)
 801169c:	dc15      	bgt.n	80116ca <__b2d+0x52>
 801169e:	f1c0 0c0b 	rsb	ip, r0, #11
 80116a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80116a6:	45b8      	cmp	r8, r7
 80116a8:	ea43 0501 	orr.w	r5, r3, r1
 80116ac:	bf34      	ite	cc
 80116ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116b2:	2300      	movcs	r3, #0
 80116b4:	3015      	adds	r0, #21
 80116b6:	fa02 f000 	lsl.w	r0, r2, r0
 80116ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80116be:	4303      	orrs	r3, r0
 80116c0:	461c      	mov	r4, r3
 80116c2:	ec45 4b10 	vmov	d0, r4, r5
 80116c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ca:	45b8      	cmp	r8, r7
 80116cc:	bf3a      	itte	cc
 80116ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80116d6:	2300      	movcs	r3, #0
 80116d8:	380b      	subs	r0, #11
 80116da:	d012      	beq.n	8011702 <__b2d+0x8a>
 80116dc:	f1c0 0120 	rsb	r1, r0, #32
 80116e0:	fa23 f401 	lsr.w	r4, r3, r1
 80116e4:	4082      	lsls	r2, r0
 80116e6:	4322      	orrs	r2, r4
 80116e8:	4547      	cmp	r7, r8
 80116ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80116ee:	bf8c      	ite	hi
 80116f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80116f4:	2200      	movls	r2, #0
 80116f6:	4083      	lsls	r3, r0
 80116f8:	40ca      	lsrs	r2, r1
 80116fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80116fe:	4313      	orrs	r3, r2
 8011700:	e7de      	b.n	80116c0 <__b2d+0x48>
 8011702:	ea42 0501 	orr.w	r5, r2, r1
 8011706:	e7db      	b.n	80116c0 <__b2d+0x48>
 8011708:	3ff00000 	.word	0x3ff00000

0801170c <__d2b>:
 801170c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011710:	460f      	mov	r7, r1
 8011712:	2101      	movs	r1, #1
 8011714:	ec59 8b10 	vmov	r8, r9, d0
 8011718:	4616      	mov	r6, r2
 801171a:	f7ff fc13 	bl	8010f44 <_Balloc>
 801171e:	4604      	mov	r4, r0
 8011720:	b930      	cbnz	r0, 8011730 <__d2b+0x24>
 8011722:	4602      	mov	r2, r0
 8011724:	4b23      	ldr	r3, [pc, #140]	@ (80117b4 <__d2b+0xa8>)
 8011726:	4824      	ldr	r0, [pc, #144]	@ (80117b8 <__d2b+0xac>)
 8011728:	f240 310f 	movw	r1, #783	@ 0x30f
 801172c:	f7fe fa0a 	bl	800fb44 <__assert_func>
 8011730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011738:	b10d      	cbz	r5, 801173e <__d2b+0x32>
 801173a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801173e:	9301      	str	r3, [sp, #4]
 8011740:	f1b8 0300 	subs.w	r3, r8, #0
 8011744:	d023      	beq.n	801178e <__d2b+0x82>
 8011746:	4668      	mov	r0, sp
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	f7ff fd0c 	bl	8011166 <__lo0bits>
 801174e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011752:	b1d0      	cbz	r0, 801178a <__d2b+0x7e>
 8011754:	f1c0 0320 	rsb	r3, r0, #32
 8011758:	fa02 f303 	lsl.w	r3, r2, r3
 801175c:	430b      	orrs	r3, r1
 801175e:	40c2      	lsrs	r2, r0
 8011760:	6163      	str	r3, [r4, #20]
 8011762:	9201      	str	r2, [sp, #4]
 8011764:	9b01      	ldr	r3, [sp, #4]
 8011766:	61a3      	str	r3, [r4, #24]
 8011768:	2b00      	cmp	r3, #0
 801176a:	bf0c      	ite	eq
 801176c:	2201      	moveq	r2, #1
 801176e:	2202      	movne	r2, #2
 8011770:	6122      	str	r2, [r4, #16]
 8011772:	b1a5      	cbz	r5, 801179e <__d2b+0x92>
 8011774:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011778:	4405      	add	r5, r0
 801177a:	603d      	str	r5, [r7, #0]
 801177c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011780:	6030      	str	r0, [r6, #0]
 8011782:	4620      	mov	r0, r4
 8011784:	b003      	add	sp, #12
 8011786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801178a:	6161      	str	r1, [r4, #20]
 801178c:	e7ea      	b.n	8011764 <__d2b+0x58>
 801178e:	a801      	add	r0, sp, #4
 8011790:	f7ff fce9 	bl	8011166 <__lo0bits>
 8011794:	9b01      	ldr	r3, [sp, #4]
 8011796:	6163      	str	r3, [r4, #20]
 8011798:	3020      	adds	r0, #32
 801179a:	2201      	movs	r2, #1
 801179c:	e7e8      	b.n	8011770 <__d2b+0x64>
 801179e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117a6:	6038      	str	r0, [r7, #0]
 80117a8:	6918      	ldr	r0, [r3, #16]
 80117aa:	f7ff fcbd 	bl	8011128 <__hi0bits>
 80117ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117b2:	e7e5      	b.n	8011780 <__d2b+0x74>
 80117b4:	08015d92 	.word	0x08015d92
 80117b8:	08015e03 	.word	0x08015e03

080117bc <__ratio>:
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	b085      	sub	sp, #20
 80117c2:	e9cd 1000 	strd	r1, r0, [sp]
 80117c6:	a902      	add	r1, sp, #8
 80117c8:	f7ff ff56 	bl	8011678 <__b2d>
 80117cc:	9800      	ldr	r0, [sp, #0]
 80117ce:	a903      	add	r1, sp, #12
 80117d0:	ec55 4b10 	vmov	r4, r5, d0
 80117d4:	f7ff ff50 	bl	8011678 <__b2d>
 80117d8:	9b01      	ldr	r3, [sp, #4]
 80117da:	6919      	ldr	r1, [r3, #16]
 80117dc:	9b00      	ldr	r3, [sp, #0]
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	1ac9      	subs	r1, r1, r3
 80117e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117e6:	1a9b      	subs	r3, r3, r2
 80117e8:	ec5b ab10 	vmov	sl, fp, d0
 80117ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	bfce      	itee	gt
 80117f4:	462a      	movgt	r2, r5
 80117f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80117fa:	465a      	movle	r2, fp
 80117fc:	462f      	mov	r7, r5
 80117fe:	46d9      	mov	r9, fp
 8011800:	bfcc      	ite	gt
 8011802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011806:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801180a:	464b      	mov	r3, r9
 801180c:	4652      	mov	r2, sl
 801180e:	4620      	mov	r0, r4
 8011810:	4639      	mov	r1, r7
 8011812:	f7ef f82b 	bl	800086c <__aeabi_ddiv>
 8011816:	ec41 0b10 	vmov	d0, r0, r1
 801181a:	b005      	add	sp, #20
 801181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011820 <__copybits>:
 8011820:	3901      	subs	r1, #1
 8011822:	b570      	push	{r4, r5, r6, lr}
 8011824:	1149      	asrs	r1, r1, #5
 8011826:	6914      	ldr	r4, [r2, #16]
 8011828:	3101      	adds	r1, #1
 801182a:	f102 0314 	add.w	r3, r2, #20
 801182e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011832:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011836:	1f05      	subs	r5, r0, #4
 8011838:	42a3      	cmp	r3, r4
 801183a:	d30c      	bcc.n	8011856 <__copybits+0x36>
 801183c:	1aa3      	subs	r3, r4, r2
 801183e:	3b11      	subs	r3, #17
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	3211      	adds	r2, #17
 8011846:	42a2      	cmp	r2, r4
 8011848:	bf88      	it	hi
 801184a:	2300      	movhi	r3, #0
 801184c:	4418      	add	r0, r3
 801184e:	2300      	movs	r3, #0
 8011850:	4288      	cmp	r0, r1
 8011852:	d305      	bcc.n	8011860 <__copybits+0x40>
 8011854:	bd70      	pop	{r4, r5, r6, pc}
 8011856:	f853 6b04 	ldr.w	r6, [r3], #4
 801185a:	f845 6f04 	str.w	r6, [r5, #4]!
 801185e:	e7eb      	b.n	8011838 <__copybits+0x18>
 8011860:	f840 3b04 	str.w	r3, [r0], #4
 8011864:	e7f4      	b.n	8011850 <__copybits+0x30>

08011866 <__any_on>:
 8011866:	f100 0214 	add.w	r2, r0, #20
 801186a:	6900      	ldr	r0, [r0, #16]
 801186c:	114b      	asrs	r3, r1, #5
 801186e:	4298      	cmp	r0, r3
 8011870:	b510      	push	{r4, lr}
 8011872:	db11      	blt.n	8011898 <__any_on+0x32>
 8011874:	dd0a      	ble.n	801188c <__any_on+0x26>
 8011876:	f011 011f 	ands.w	r1, r1, #31
 801187a:	d007      	beq.n	801188c <__any_on+0x26>
 801187c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011880:	fa24 f001 	lsr.w	r0, r4, r1
 8011884:	fa00 f101 	lsl.w	r1, r0, r1
 8011888:	428c      	cmp	r4, r1
 801188a:	d10b      	bne.n	80118a4 <__any_on+0x3e>
 801188c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011890:	4293      	cmp	r3, r2
 8011892:	d803      	bhi.n	801189c <__any_on+0x36>
 8011894:	2000      	movs	r0, #0
 8011896:	bd10      	pop	{r4, pc}
 8011898:	4603      	mov	r3, r0
 801189a:	e7f7      	b.n	801188c <__any_on+0x26>
 801189c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118a0:	2900      	cmp	r1, #0
 80118a2:	d0f5      	beq.n	8011890 <__any_on+0x2a>
 80118a4:	2001      	movs	r0, #1
 80118a6:	e7f6      	b.n	8011896 <__any_on+0x30>

080118a8 <_malloc_usable_size_r>:
 80118a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118ac:	1f18      	subs	r0, r3, #4
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	bfbc      	itt	lt
 80118b2:	580b      	ldrlt	r3, [r1, r0]
 80118b4:	18c0      	addlt	r0, r0, r3
 80118b6:	4770      	bx	lr

080118b8 <_strtol_l.constprop.0>:
 80118b8:	2b24      	cmp	r3, #36	@ 0x24
 80118ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118be:	4686      	mov	lr, r0
 80118c0:	4690      	mov	r8, r2
 80118c2:	d801      	bhi.n	80118c8 <_strtol_l.constprop.0+0x10>
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d106      	bne.n	80118d6 <_strtol_l.constprop.0+0x1e>
 80118c8:	f7fe f8f2 	bl	800fab0 <__errno>
 80118cc:	2316      	movs	r3, #22
 80118ce:	6003      	str	r3, [r0, #0]
 80118d0:	2000      	movs	r0, #0
 80118d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d6:	4834      	ldr	r0, [pc, #208]	@ (80119a8 <_strtol_l.constprop.0+0xf0>)
 80118d8:	460d      	mov	r5, r1
 80118da:	462a      	mov	r2, r5
 80118dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118e0:	5d06      	ldrb	r6, [r0, r4]
 80118e2:	f016 0608 	ands.w	r6, r6, #8
 80118e6:	d1f8      	bne.n	80118da <_strtol_l.constprop.0+0x22>
 80118e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80118ea:	d12d      	bne.n	8011948 <_strtol_l.constprop.0+0x90>
 80118ec:	782c      	ldrb	r4, [r5, #0]
 80118ee:	2601      	movs	r6, #1
 80118f0:	1c95      	adds	r5, r2, #2
 80118f2:	f033 0210 	bics.w	r2, r3, #16
 80118f6:	d109      	bne.n	801190c <_strtol_l.constprop.0+0x54>
 80118f8:	2c30      	cmp	r4, #48	@ 0x30
 80118fa:	d12a      	bne.n	8011952 <_strtol_l.constprop.0+0x9a>
 80118fc:	782a      	ldrb	r2, [r5, #0]
 80118fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011902:	2a58      	cmp	r2, #88	@ 0x58
 8011904:	d125      	bne.n	8011952 <_strtol_l.constprop.0+0x9a>
 8011906:	786c      	ldrb	r4, [r5, #1]
 8011908:	2310      	movs	r3, #16
 801190a:	3502      	adds	r5, #2
 801190c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011910:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011914:	2200      	movs	r2, #0
 8011916:	fbbc f9f3 	udiv	r9, ip, r3
 801191a:	4610      	mov	r0, r2
 801191c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011920:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011924:	2f09      	cmp	r7, #9
 8011926:	d81b      	bhi.n	8011960 <_strtol_l.constprop.0+0xa8>
 8011928:	463c      	mov	r4, r7
 801192a:	42a3      	cmp	r3, r4
 801192c:	dd27      	ble.n	801197e <_strtol_l.constprop.0+0xc6>
 801192e:	1c57      	adds	r7, r2, #1
 8011930:	d007      	beq.n	8011942 <_strtol_l.constprop.0+0x8a>
 8011932:	4581      	cmp	r9, r0
 8011934:	d320      	bcc.n	8011978 <_strtol_l.constprop.0+0xc0>
 8011936:	d101      	bne.n	801193c <_strtol_l.constprop.0+0x84>
 8011938:	45a2      	cmp	sl, r4
 801193a:	db1d      	blt.n	8011978 <_strtol_l.constprop.0+0xc0>
 801193c:	fb00 4003 	mla	r0, r0, r3, r4
 8011940:	2201      	movs	r2, #1
 8011942:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011946:	e7eb      	b.n	8011920 <_strtol_l.constprop.0+0x68>
 8011948:	2c2b      	cmp	r4, #43	@ 0x2b
 801194a:	bf04      	itt	eq
 801194c:	782c      	ldrbeq	r4, [r5, #0]
 801194e:	1c95      	addeq	r5, r2, #2
 8011950:	e7cf      	b.n	80118f2 <_strtol_l.constprop.0+0x3a>
 8011952:	2b00      	cmp	r3, #0
 8011954:	d1da      	bne.n	801190c <_strtol_l.constprop.0+0x54>
 8011956:	2c30      	cmp	r4, #48	@ 0x30
 8011958:	bf0c      	ite	eq
 801195a:	2308      	moveq	r3, #8
 801195c:	230a      	movne	r3, #10
 801195e:	e7d5      	b.n	801190c <_strtol_l.constprop.0+0x54>
 8011960:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011964:	2f19      	cmp	r7, #25
 8011966:	d801      	bhi.n	801196c <_strtol_l.constprop.0+0xb4>
 8011968:	3c37      	subs	r4, #55	@ 0x37
 801196a:	e7de      	b.n	801192a <_strtol_l.constprop.0+0x72>
 801196c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011970:	2f19      	cmp	r7, #25
 8011972:	d804      	bhi.n	801197e <_strtol_l.constprop.0+0xc6>
 8011974:	3c57      	subs	r4, #87	@ 0x57
 8011976:	e7d8      	b.n	801192a <_strtol_l.constprop.0+0x72>
 8011978:	f04f 32ff 	mov.w	r2, #4294967295
 801197c:	e7e1      	b.n	8011942 <_strtol_l.constprop.0+0x8a>
 801197e:	1c53      	adds	r3, r2, #1
 8011980:	d108      	bne.n	8011994 <_strtol_l.constprop.0+0xdc>
 8011982:	2322      	movs	r3, #34	@ 0x22
 8011984:	f8ce 3000 	str.w	r3, [lr]
 8011988:	4660      	mov	r0, ip
 801198a:	f1b8 0f00 	cmp.w	r8, #0
 801198e:	d0a0      	beq.n	80118d2 <_strtol_l.constprop.0+0x1a>
 8011990:	1e69      	subs	r1, r5, #1
 8011992:	e006      	b.n	80119a2 <_strtol_l.constprop.0+0xea>
 8011994:	b106      	cbz	r6, 8011998 <_strtol_l.constprop.0+0xe0>
 8011996:	4240      	negs	r0, r0
 8011998:	f1b8 0f00 	cmp.w	r8, #0
 801199c:	d099      	beq.n	80118d2 <_strtol_l.constprop.0+0x1a>
 801199e:	2a00      	cmp	r2, #0
 80119a0:	d1f6      	bne.n	8011990 <_strtol_l.constprop.0+0xd8>
 80119a2:	f8c8 1000 	str.w	r1, [r8]
 80119a6:	e794      	b.n	80118d2 <_strtol_l.constprop.0+0x1a>
 80119a8:	08015b41 	.word	0x08015b41

080119ac <_strtol_r>:
 80119ac:	f7ff bf84 	b.w	80118b8 <_strtol_l.constprop.0>

080119b0 <__ascii_wctomb>:
 80119b0:	4603      	mov	r3, r0
 80119b2:	4608      	mov	r0, r1
 80119b4:	b141      	cbz	r1, 80119c8 <__ascii_wctomb+0x18>
 80119b6:	2aff      	cmp	r2, #255	@ 0xff
 80119b8:	d904      	bls.n	80119c4 <__ascii_wctomb+0x14>
 80119ba:	228a      	movs	r2, #138	@ 0x8a
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	f04f 30ff 	mov.w	r0, #4294967295
 80119c2:	4770      	bx	lr
 80119c4:	700a      	strb	r2, [r1, #0]
 80119c6:	2001      	movs	r0, #1
 80119c8:	4770      	bx	lr

080119ca <__ssputs_r>:
 80119ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119ce:	688e      	ldr	r6, [r1, #8]
 80119d0:	461f      	mov	r7, r3
 80119d2:	42be      	cmp	r6, r7
 80119d4:	680b      	ldr	r3, [r1, #0]
 80119d6:	4682      	mov	sl, r0
 80119d8:	460c      	mov	r4, r1
 80119da:	4690      	mov	r8, r2
 80119dc:	d82d      	bhi.n	8011a3a <__ssputs_r+0x70>
 80119de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119e2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119e6:	d026      	beq.n	8011a36 <__ssputs_r+0x6c>
 80119e8:	6965      	ldr	r5, [r4, #20]
 80119ea:	6909      	ldr	r1, [r1, #16]
 80119ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119f0:	eba3 0901 	sub.w	r9, r3, r1
 80119f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119f8:	1c7b      	adds	r3, r7, #1
 80119fa:	444b      	add	r3, r9
 80119fc:	106d      	asrs	r5, r5, #1
 80119fe:	429d      	cmp	r5, r3
 8011a00:	bf38      	it	cc
 8011a02:	461d      	movcc	r5, r3
 8011a04:	0553      	lsls	r3, r2, #21
 8011a06:	d527      	bpl.n	8011a58 <__ssputs_r+0x8e>
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7fb ffc1 	bl	800d990 <_malloc_r>
 8011a0e:	4606      	mov	r6, r0
 8011a10:	b360      	cbz	r0, 8011a6c <__ssputs_r+0xa2>
 8011a12:	6921      	ldr	r1, [r4, #16]
 8011a14:	464a      	mov	r2, r9
 8011a16:	f7fe f878 	bl	800fb0a <memcpy>
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a24:	81a3      	strh	r3, [r4, #12]
 8011a26:	6126      	str	r6, [r4, #16]
 8011a28:	6165      	str	r5, [r4, #20]
 8011a2a:	444e      	add	r6, r9
 8011a2c:	eba5 0509 	sub.w	r5, r5, r9
 8011a30:	6026      	str	r6, [r4, #0]
 8011a32:	60a5      	str	r5, [r4, #8]
 8011a34:	463e      	mov	r6, r7
 8011a36:	42be      	cmp	r6, r7
 8011a38:	d900      	bls.n	8011a3c <__ssputs_r+0x72>
 8011a3a:	463e      	mov	r6, r7
 8011a3c:	6820      	ldr	r0, [r4, #0]
 8011a3e:	4632      	mov	r2, r6
 8011a40:	4641      	mov	r1, r8
 8011a42:	f000 fef6 	bl	8012832 <memmove>
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	1b9b      	subs	r3, r3, r6
 8011a4a:	60a3      	str	r3, [r4, #8]
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	4433      	add	r3, r6
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	2000      	movs	r0, #0
 8011a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a58:	462a      	mov	r2, r5
 8011a5a:	f7fc f82d 	bl	800dab8 <_realloc_r>
 8011a5e:	4606      	mov	r6, r0
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d1e0      	bne.n	8011a26 <__ssputs_r+0x5c>
 8011a64:	6921      	ldr	r1, [r4, #16]
 8011a66:	4650      	mov	r0, sl
 8011a68:	f7fe fed6 	bl	8010818 <_free_r>
 8011a6c:	230c      	movs	r3, #12
 8011a6e:	f8ca 3000 	str.w	r3, [sl]
 8011a72:	89a3      	ldrh	r3, [r4, #12]
 8011a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a78:	81a3      	strh	r3, [r4, #12]
 8011a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7e:	e7e9      	b.n	8011a54 <__ssputs_r+0x8a>

08011a80 <_svfiprintf_r>:
 8011a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a84:	4698      	mov	r8, r3
 8011a86:	898b      	ldrh	r3, [r1, #12]
 8011a88:	061b      	lsls	r3, r3, #24
 8011a8a:	b09d      	sub	sp, #116	@ 0x74
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	460d      	mov	r5, r1
 8011a90:	4614      	mov	r4, r2
 8011a92:	d510      	bpl.n	8011ab6 <_svfiprintf_r+0x36>
 8011a94:	690b      	ldr	r3, [r1, #16]
 8011a96:	b973      	cbnz	r3, 8011ab6 <_svfiprintf_r+0x36>
 8011a98:	2140      	movs	r1, #64	@ 0x40
 8011a9a:	f7fb ff79 	bl	800d990 <_malloc_r>
 8011a9e:	6028      	str	r0, [r5, #0]
 8011aa0:	6128      	str	r0, [r5, #16]
 8011aa2:	b930      	cbnz	r0, 8011ab2 <_svfiprintf_r+0x32>
 8011aa4:	230c      	movs	r3, #12
 8011aa6:	603b      	str	r3, [r7, #0]
 8011aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011aac:	b01d      	add	sp, #116	@ 0x74
 8011aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab2:	2340      	movs	r3, #64	@ 0x40
 8011ab4:	616b      	str	r3, [r5, #20]
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011aba:	2320      	movs	r3, #32
 8011abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ac4:	2330      	movs	r3, #48	@ 0x30
 8011ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c64 <_svfiprintf_r+0x1e4>
 8011aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ace:	f04f 0901 	mov.w	r9, #1
 8011ad2:	4623      	mov	r3, r4
 8011ad4:	469a      	mov	sl, r3
 8011ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ada:	b10a      	cbz	r2, 8011ae0 <_svfiprintf_r+0x60>
 8011adc:	2a25      	cmp	r2, #37	@ 0x25
 8011ade:	d1f9      	bne.n	8011ad4 <_svfiprintf_r+0x54>
 8011ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ae4:	d00b      	beq.n	8011afe <_svfiprintf_r+0x7e>
 8011ae6:	465b      	mov	r3, fp
 8011ae8:	4622      	mov	r2, r4
 8011aea:	4629      	mov	r1, r5
 8011aec:	4638      	mov	r0, r7
 8011aee:	f7ff ff6c 	bl	80119ca <__ssputs_r>
 8011af2:	3001      	adds	r0, #1
 8011af4:	f000 80a7 	beq.w	8011c46 <_svfiprintf_r+0x1c6>
 8011af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011afa:	445a      	add	r2, fp
 8011afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011afe:	f89a 3000 	ldrb.w	r3, [sl]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	f000 809f 	beq.w	8011c46 <_svfiprintf_r+0x1c6>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b12:	f10a 0a01 	add.w	sl, sl, #1
 8011b16:	9304      	str	r3, [sp, #16]
 8011b18:	9307      	str	r3, [sp, #28]
 8011b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b20:	4654      	mov	r4, sl
 8011b22:	2205      	movs	r2, #5
 8011b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b28:	484e      	ldr	r0, [pc, #312]	@ (8011c64 <_svfiprintf_r+0x1e4>)
 8011b2a:	f7ee fb61 	bl	80001f0 <memchr>
 8011b2e:	9a04      	ldr	r2, [sp, #16]
 8011b30:	b9d8      	cbnz	r0, 8011b6a <_svfiprintf_r+0xea>
 8011b32:	06d0      	lsls	r0, r2, #27
 8011b34:	bf44      	itt	mi
 8011b36:	2320      	movmi	r3, #32
 8011b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b3c:	0711      	lsls	r1, r2, #28
 8011b3e:	bf44      	itt	mi
 8011b40:	232b      	movmi	r3, #43	@ 0x2b
 8011b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b46:	f89a 3000 	ldrb.w	r3, [sl]
 8011b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b4c:	d015      	beq.n	8011b7a <_svfiprintf_r+0xfa>
 8011b4e:	9a07      	ldr	r2, [sp, #28]
 8011b50:	4654      	mov	r4, sl
 8011b52:	2000      	movs	r0, #0
 8011b54:	f04f 0c0a 	mov.w	ip, #10
 8011b58:	4621      	mov	r1, r4
 8011b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b5e:	3b30      	subs	r3, #48	@ 0x30
 8011b60:	2b09      	cmp	r3, #9
 8011b62:	d94b      	bls.n	8011bfc <_svfiprintf_r+0x17c>
 8011b64:	b1b0      	cbz	r0, 8011b94 <_svfiprintf_r+0x114>
 8011b66:	9207      	str	r2, [sp, #28]
 8011b68:	e014      	b.n	8011b94 <_svfiprintf_r+0x114>
 8011b6a:	eba0 0308 	sub.w	r3, r0, r8
 8011b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8011b72:	4313      	orrs	r3, r2
 8011b74:	9304      	str	r3, [sp, #16]
 8011b76:	46a2      	mov	sl, r4
 8011b78:	e7d2      	b.n	8011b20 <_svfiprintf_r+0xa0>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	1d19      	adds	r1, r3, #4
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	9103      	str	r1, [sp, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bfbb      	ittet	lt
 8011b86:	425b      	neglt	r3, r3
 8011b88:	f042 0202 	orrlt.w	r2, r2, #2
 8011b8c:	9307      	strge	r3, [sp, #28]
 8011b8e:	9307      	strlt	r3, [sp, #28]
 8011b90:	bfb8      	it	lt
 8011b92:	9204      	strlt	r2, [sp, #16]
 8011b94:	7823      	ldrb	r3, [r4, #0]
 8011b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b98:	d10a      	bne.n	8011bb0 <_svfiprintf_r+0x130>
 8011b9a:	7863      	ldrb	r3, [r4, #1]
 8011b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b9e:	d132      	bne.n	8011c06 <_svfiprintf_r+0x186>
 8011ba0:	9b03      	ldr	r3, [sp, #12]
 8011ba2:	1d1a      	adds	r2, r3, #4
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	9203      	str	r2, [sp, #12]
 8011ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bac:	3402      	adds	r4, #2
 8011bae:	9305      	str	r3, [sp, #20]
 8011bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c74 <_svfiprintf_r+0x1f4>
 8011bb4:	7821      	ldrb	r1, [r4, #0]
 8011bb6:	2203      	movs	r2, #3
 8011bb8:	4650      	mov	r0, sl
 8011bba:	f7ee fb19 	bl	80001f0 <memchr>
 8011bbe:	b138      	cbz	r0, 8011bd0 <_svfiprintf_r+0x150>
 8011bc0:	9b04      	ldr	r3, [sp, #16]
 8011bc2:	eba0 000a 	sub.w	r0, r0, sl
 8011bc6:	2240      	movs	r2, #64	@ 0x40
 8011bc8:	4082      	lsls	r2, r0
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	3401      	adds	r4, #1
 8011bce:	9304      	str	r3, [sp, #16]
 8011bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bd4:	4824      	ldr	r0, [pc, #144]	@ (8011c68 <_svfiprintf_r+0x1e8>)
 8011bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bda:	2206      	movs	r2, #6
 8011bdc:	f7ee fb08 	bl	80001f0 <memchr>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d036      	beq.n	8011c52 <_svfiprintf_r+0x1d2>
 8011be4:	4b21      	ldr	r3, [pc, #132]	@ (8011c6c <_svfiprintf_r+0x1ec>)
 8011be6:	bb1b      	cbnz	r3, 8011c30 <_svfiprintf_r+0x1b0>
 8011be8:	9b03      	ldr	r3, [sp, #12]
 8011bea:	3307      	adds	r3, #7
 8011bec:	f023 0307 	bic.w	r3, r3, #7
 8011bf0:	3308      	adds	r3, #8
 8011bf2:	9303      	str	r3, [sp, #12]
 8011bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bf6:	4433      	add	r3, r6
 8011bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bfa:	e76a      	b.n	8011ad2 <_svfiprintf_r+0x52>
 8011bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c00:	460c      	mov	r4, r1
 8011c02:	2001      	movs	r0, #1
 8011c04:	e7a8      	b.n	8011b58 <_svfiprintf_r+0xd8>
 8011c06:	2300      	movs	r3, #0
 8011c08:	3401      	adds	r4, #1
 8011c0a:	9305      	str	r3, [sp, #20]
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	f04f 0c0a 	mov.w	ip, #10
 8011c12:	4620      	mov	r0, r4
 8011c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c18:	3a30      	subs	r2, #48	@ 0x30
 8011c1a:	2a09      	cmp	r2, #9
 8011c1c:	d903      	bls.n	8011c26 <_svfiprintf_r+0x1a6>
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0c6      	beq.n	8011bb0 <_svfiprintf_r+0x130>
 8011c22:	9105      	str	r1, [sp, #20]
 8011c24:	e7c4      	b.n	8011bb0 <_svfiprintf_r+0x130>
 8011c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e7f0      	b.n	8011c12 <_svfiprintf_r+0x192>
 8011c30:	ab03      	add	r3, sp, #12
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	462a      	mov	r2, r5
 8011c36:	4b0e      	ldr	r3, [pc, #56]	@ (8011c70 <_svfiprintf_r+0x1f0>)
 8011c38:	a904      	add	r1, sp, #16
 8011c3a:	4638      	mov	r0, r7
 8011c3c:	f7fc fe1e 	bl	800e87c <_printf_float>
 8011c40:	1c42      	adds	r2, r0, #1
 8011c42:	4606      	mov	r6, r0
 8011c44:	d1d6      	bne.n	8011bf4 <_svfiprintf_r+0x174>
 8011c46:	89ab      	ldrh	r3, [r5, #12]
 8011c48:	065b      	lsls	r3, r3, #25
 8011c4a:	f53f af2d 	bmi.w	8011aa8 <_svfiprintf_r+0x28>
 8011c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c50:	e72c      	b.n	8011aac <_svfiprintf_r+0x2c>
 8011c52:	ab03      	add	r3, sp, #12
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	462a      	mov	r2, r5
 8011c58:	4b05      	ldr	r3, [pc, #20]	@ (8011c70 <_svfiprintf_r+0x1f0>)
 8011c5a:	a904      	add	r1, sp, #16
 8011c5c:	4638      	mov	r0, r7
 8011c5e:	f7fd f8a5 	bl	800edac <_printf_i>
 8011c62:	e7ed      	b.n	8011c40 <_svfiprintf_r+0x1c0>
 8011c64:	08015f58 	.word	0x08015f58
 8011c68:	08015f62 	.word	0x08015f62
 8011c6c:	0800e87d 	.word	0x0800e87d
 8011c70:	080119cb 	.word	0x080119cb
 8011c74:	08015f5e 	.word	0x08015f5e

08011c78 <_sungetc_r>:
 8011c78:	b538      	push	{r3, r4, r5, lr}
 8011c7a:	1c4b      	adds	r3, r1, #1
 8011c7c:	4614      	mov	r4, r2
 8011c7e:	d103      	bne.n	8011c88 <_sungetc_r+0x10>
 8011c80:	f04f 35ff 	mov.w	r5, #4294967295
 8011c84:	4628      	mov	r0, r5
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	8993      	ldrh	r3, [r2, #12]
 8011c8a:	f023 0320 	bic.w	r3, r3, #32
 8011c8e:	8193      	strh	r3, [r2, #12]
 8011c90:	6853      	ldr	r3, [r2, #4]
 8011c92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011c94:	b2cd      	uxtb	r5, r1
 8011c96:	b18a      	cbz	r2, 8011cbc <_sungetc_r+0x44>
 8011c98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	dd08      	ble.n	8011cb0 <_sungetc_r+0x38>
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	1e5a      	subs	r2, r3, #1
 8011ca2:	6022      	str	r2, [r4, #0]
 8011ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011ca8:	6863      	ldr	r3, [r4, #4]
 8011caa:	3301      	adds	r3, #1
 8011cac:	6063      	str	r3, [r4, #4]
 8011cae:	e7e9      	b.n	8011c84 <_sungetc_r+0xc>
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	f000 fd84 	bl	80127be <__submore>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d0f1      	beq.n	8011c9e <_sungetc_r+0x26>
 8011cba:	e7e1      	b.n	8011c80 <_sungetc_r+0x8>
 8011cbc:	6921      	ldr	r1, [r4, #16]
 8011cbe:	6822      	ldr	r2, [r4, #0]
 8011cc0:	b141      	cbz	r1, 8011cd4 <_sungetc_r+0x5c>
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d206      	bcs.n	8011cd4 <_sungetc_r+0x5c>
 8011cc6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011cca:	42a9      	cmp	r1, r5
 8011ccc:	d102      	bne.n	8011cd4 <_sungetc_r+0x5c>
 8011cce:	3a01      	subs	r2, #1
 8011cd0:	6022      	str	r2, [r4, #0]
 8011cd2:	e7ea      	b.n	8011caa <_sungetc_r+0x32>
 8011cd4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cde:	2303      	movs	r3, #3
 8011ce0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011ce8:	6023      	str	r3, [r4, #0]
 8011cea:	2301      	movs	r3, #1
 8011cec:	e7de      	b.n	8011cac <_sungetc_r+0x34>

08011cee <__ssrefill_r>:
 8011cee:	b510      	push	{r4, lr}
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011cf4:	b169      	cbz	r1, 8011d12 <__ssrefill_r+0x24>
 8011cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cfa:	4299      	cmp	r1, r3
 8011cfc:	d001      	beq.n	8011d02 <__ssrefill_r+0x14>
 8011cfe:	f7fe fd8b 	bl	8010818 <_free_r>
 8011d02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d04:	6063      	str	r3, [r4, #4]
 8011d06:	2000      	movs	r0, #0
 8011d08:	6360      	str	r0, [r4, #52]	@ 0x34
 8011d0a:	b113      	cbz	r3, 8011d12 <__ssrefill_r+0x24>
 8011d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	bd10      	pop	{r4, pc}
 8011d12:	6923      	ldr	r3, [r4, #16]
 8011d14:	6023      	str	r3, [r4, #0]
 8011d16:	2300      	movs	r3, #0
 8011d18:	6063      	str	r3, [r4, #4]
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	f043 0320 	orr.w	r3, r3, #32
 8011d20:	81a3      	strh	r3, [r4, #12]
 8011d22:	f04f 30ff 	mov.w	r0, #4294967295
 8011d26:	e7f3      	b.n	8011d10 <__ssrefill_r+0x22>

08011d28 <__ssvfiscanf_r>:
 8011d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011d32:	2100      	movs	r1, #0
 8011d34:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011d38:	49a5      	ldr	r1, [pc, #660]	@ (8011fd0 <__ssvfiscanf_r+0x2a8>)
 8011d3a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011d3c:	f10d 0804 	add.w	r8, sp, #4
 8011d40:	49a4      	ldr	r1, [pc, #656]	@ (8011fd4 <__ssvfiscanf_r+0x2ac>)
 8011d42:	4fa5      	ldr	r7, [pc, #660]	@ (8011fd8 <__ssvfiscanf_r+0x2b0>)
 8011d44:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011d48:	4606      	mov	r6, r0
 8011d4a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	7813      	ldrb	r3, [r2, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f000 8158 	beq.w	8012006 <__ssvfiscanf_r+0x2de>
 8011d56:	5cf9      	ldrb	r1, [r7, r3]
 8011d58:	f011 0108 	ands.w	r1, r1, #8
 8011d5c:	f102 0501 	add.w	r5, r2, #1
 8011d60:	d019      	beq.n	8011d96 <__ssvfiscanf_r+0x6e>
 8011d62:	6863      	ldr	r3, [r4, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dd0f      	ble.n	8011d88 <__ssvfiscanf_r+0x60>
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	5cba      	ldrb	r2, [r7, r2]
 8011d6e:	0712      	lsls	r2, r2, #28
 8011d70:	d401      	bmi.n	8011d76 <__ssvfiscanf_r+0x4e>
 8011d72:	462a      	mov	r2, r5
 8011d74:	e7eb      	b.n	8011d4e <__ssvfiscanf_r+0x26>
 8011d76:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d78:	3201      	adds	r2, #1
 8011d7a:	9245      	str	r2, [sp, #276]	@ 0x114
 8011d7c:	6862      	ldr	r2, [r4, #4]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	3a01      	subs	r2, #1
 8011d82:	6062      	str	r2, [r4, #4]
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	e7ec      	b.n	8011d62 <__ssvfiscanf_r+0x3a>
 8011d88:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	4798      	blx	r3
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d0e9      	beq.n	8011d68 <__ssvfiscanf_r+0x40>
 8011d94:	e7ed      	b.n	8011d72 <__ssvfiscanf_r+0x4a>
 8011d96:	2b25      	cmp	r3, #37	@ 0x25
 8011d98:	d012      	beq.n	8011dc0 <__ssvfiscanf_r+0x98>
 8011d9a:	4699      	mov	r9, r3
 8011d9c:	6863      	ldr	r3, [r4, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f340 8093 	ble.w	8011eca <__ssvfiscanf_r+0x1a2>
 8011da4:	6822      	ldr	r2, [r4, #0]
 8011da6:	7813      	ldrb	r3, [r2, #0]
 8011da8:	454b      	cmp	r3, r9
 8011daa:	f040 812c 	bne.w	8012006 <__ssvfiscanf_r+0x2de>
 8011dae:	6863      	ldr	r3, [r4, #4]
 8011db0:	3b01      	subs	r3, #1
 8011db2:	6063      	str	r3, [r4, #4]
 8011db4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011db6:	3201      	adds	r2, #1
 8011db8:	3301      	adds	r3, #1
 8011dba:	6022      	str	r2, [r4, #0]
 8011dbc:	9345      	str	r3, [sp, #276]	@ 0x114
 8011dbe:	e7d8      	b.n	8011d72 <__ssvfiscanf_r+0x4a>
 8011dc0:	9141      	str	r1, [sp, #260]	@ 0x104
 8011dc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011dc4:	7853      	ldrb	r3, [r2, #1]
 8011dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dc8:	bf02      	ittt	eq
 8011dca:	2310      	moveq	r3, #16
 8011dcc:	1c95      	addeq	r5, r2, #2
 8011dce:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011dd0:	220a      	movs	r2, #10
 8011dd2:	46a9      	mov	r9, r5
 8011dd4:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011dd8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011ddc:	2b09      	cmp	r3, #9
 8011dde:	d91e      	bls.n	8011e1e <__ssvfiscanf_r+0xf6>
 8011de0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011fdc <__ssvfiscanf_r+0x2b4>
 8011de4:	2203      	movs	r2, #3
 8011de6:	4650      	mov	r0, sl
 8011de8:	f7ee fa02 	bl	80001f0 <memchr>
 8011dec:	b138      	cbz	r0, 8011dfe <__ssvfiscanf_r+0xd6>
 8011dee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011df0:	eba0 000a 	sub.w	r0, r0, sl
 8011df4:	2301      	movs	r3, #1
 8011df6:	4083      	lsls	r3, r0
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	9341      	str	r3, [sp, #260]	@ 0x104
 8011dfc:	464d      	mov	r5, r9
 8011dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e02:	2b78      	cmp	r3, #120	@ 0x78
 8011e04:	d806      	bhi.n	8011e14 <__ssvfiscanf_r+0xec>
 8011e06:	2b57      	cmp	r3, #87	@ 0x57
 8011e08:	d810      	bhi.n	8011e2c <__ssvfiscanf_r+0x104>
 8011e0a:	2b25      	cmp	r3, #37	@ 0x25
 8011e0c:	d0c5      	beq.n	8011d9a <__ssvfiscanf_r+0x72>
 8011e0e:	d857      	bhi.n	8011ec0 <__ssvfiscanf_r+0x198>
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d065      	beq.n	8011ee0 <__ssvfiscanf_r+0x1b8>
 8011e14:	2303      	movs	r3, #3
 8011e16:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011e18:	230a      	movs	r3, #10
 8011e1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e1c:	e078      	b.n	8011f10 <__ssvfiscanf_r+0x1e8>
 8011e1e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011e20:	fb02 1103 	mla	r1, r2, r3, r1
 8011e24:	3930      	subs	r1, #48	@ 0x30
 8011e26:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011e28:	464d      	mov	r5, r9
 8011e2a:	e7d2      	b.n	8011dd2 <__ssvfiscanf_r+0xaa>
 8011e2c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011e30:	2a20      	cmp	r2, #32
 8011e32:	d8ef      	bhi.n	8011e14 <__ssvfiscanf_r+0xec>
 8011e34:	a101      	add	r1, pc, #4	@ (adr r1, 8011e3c <__ssvfiscanf_r+0x114>)
 8011e36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011e3a:	bf00      	nop
 8011e3c:	08011eef 	.word	0x08011eef
 8011e40:	08011e15 	.word	0x08011e15
 8011e44:	08011e15 	.word	0x08011e15
 8011e48:	08011f49 	.word	0x08011f49
 8011e4c:	08011e15 	.word	0x08011e15
 8011e50:	08011e15 	.word	0x08011e15
 8011e54:	08011e15 	.word	0x08011e15
 8011e58:	08011e15 	.word	0x08011e15
 8011e5c:	08011e15 	.word	0x08011e15
 8011e60:	08011e15 	.word	0x08011e15
 8011e64:	08011e15 	.word	0x08011e15
 8011e68:	08011f5f 	.word	0x08011f5f
 8011e6c:	08011f45 	.word	0x08011f45
 8011e70:	08011ec7 	.word	0x08011ec7
 8011e74:	08011ec7 	.word	0x08011ec7
 8011e78:	08011ec7 	.word	0x08011ec7
 8011e7c:	08011e15 	.word	0x08011e15
 8011e80:	08011f01 	.word	0x08011f01
 8011e84:	08011e15 	.word	0x08011e15
 8011e88:	08011e15 	.word	0x08011e15
 8011e8c:	08011e15 	.word	0x08011e15
 8011e90:	08011e15 	.word	0x08011e15
 8011e94:	08011f6f 	.word	0x08011f6f
 8011e98:	08011f09 	.word	0x08011f09
 8011e9c:	08011ee7 	.word	0x08011ee7
 8011ea0:	08011e15 	.word	0x08011e15
 8011ea4:	08011e15 	.word	0x08011e15
 8011ea8:	08011f6b 	.word	0x08011f6b
 8011eac:	08011e15 	.word	0x08011e15
 8011eb0:	08011f45 	.word	0x08011f45
 8011eb4:	08011e15 	.word	0x08011e15
 8011eb8:	08011e15 	.word	0x08011e15
 8011ebc:	08011eef 	.word	0x08011eef
 8011ec0:	3b45      	subs	r3, #69	@ 0x45
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d8a6      	bhi.n	8011e14 <__ssvfiscanf_r+0xec>
 8011ec6:	2305      	movs	r3, #5
 8011ec8:	e021      	b.n	8011f0e <__ssvfiscanf_r+0x1e6>
 8011eca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4630      	mov	r0, r6
 8011ed0:	4798      	blx	r3
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	f43f af66 	beq.w	8011da4 <__ssvfiscanf_r+0x7c>
 8011ed8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011eda:	2800      	cmp	r0, #0
 8011edc:	f040 808b 	bne.w	8011ff6 <__ssvfiscanf_r+0x2ce>
 8011ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee4:	e08b      	b.n	8011ffe <__ssvfiscanf_r+0x2d6>
 8011ee6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011ee8:	f042 0220 	orr.w	r2, r2, #32
 8011eec:	9241      	str	r2, [sp, #260]	@ 0x104
 8011eee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ef4:	9241      	str	r2, [sp, #260]	@ 0x104
 8011ef6:	2210      	movs	r2, #16
 8011ef8:	2b6e      	cmp	r3, #110	@ 0x6e
 8011efa:	9242      	str	r2, [sp, #264]	@ 0x108
 8011efc:	d902      	bls.n	8011f04 <__ssvfiscanf_r+0x1dc>
 8011efe:	e005      	b.n	8011f0c <__ssvfiscanf_r+0x1e4>
 8011f00:	2300      	movs	r3, #0
 8011f02:	9342      	str	r3, [sp, #264]	@ 0x108
 8011f04:	2303      	movs	r3, #3
 8011f06:	e002      	b.n	8011f0e <__ssvfiscanf_r+0x1e6>
 8011f08:	2308      	movs	r3, #8
 8011f0a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011f0c:	2304      	movs	r3, #4
 8011f0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011f10:	6863      	ldr	r3, [r4, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	dd39      	ble.n	8011f8a <__ssvfiscanf_r+0x262>
 8011f16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011f18:	0659      	lsls	r1, r3, #25
 8011f1a:	d404      	bmi.n	8011f26 <__ssvfiscanf_r+0x1fe>
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	781a      	ldrb	r2, [r3, #0]
 8011f20:	5cba      	ldrb	r2, [r7, r2]
 8011f22:	0712      	lsls	r2, r2, #28
 8011f24:	d438      	bmi.n	8011f98 <__ssvfiscanf_r+0x270>
 8011f26:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011f28:	2b02      	cmp	r3, #2
 8011f2a:	dc47      	bgt.n	8011fbc <__ssvfiscanf_r+0x294>
 8011f2c:	466b      	mov	r3, sp
 8011f2e:	4622      	mov	r2, r4
 8011f30:	a941      	add	r1, sp, #260	@ 0x104
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 f9ae 	bl	8012294 <_scanf_chars>
 8011f38:	2801      	cmp	r0, #1
 8011f3a:	d064      	beq.n	8012006 <__ssvfiscanf_r+0x2de>
 8011f3c:	2802      	cmp	r0, #2
 8011f3e:	f47f af18 	bne.w	8011d72 <__ssvfiscanf_r+0x4a>
 8011f42:	e7c9      	b.n	8011ed8 <__ssvfiscanf_r+0x1b0>
 8011f44:	220a      	movs	r2, #10
 8011f46:	e7d7      	b.n	8011ef8 <__ssvfiscanf_r+0x1d0>
 8011f48:	4629      	mov	r1, r5
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	f000 fbfe 	bl	801274c <__sccl>
 8011f50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f56:	9341      	str	r3, [sp, #260]	@ 0x104
 8011f58:	4605      	mov	r5, r0
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e7d7      	b.n	8011f0e <__ssvfiscanf_r+0x1e6>
 8011f5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f64:	9341      	str	r3, [sp, #260]	@ 0x104
 8011f66:	2300      	movs	r3, #0
 8011f68:	e7d1      	b.n	8011f0e <__ssvfiscanf_r+0x1e6>
 8011f6a:	2302      	movs	r3, #2
 8011f6c:	e7cf      	b.n	8011f0e <__ssvfiscanf_r+0x1e6>
 8011f6e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011f70:	06c3      	lsls	r3, r0, #27
 8011f72:	f53f aefe 	bmi.w	8011d72 <__ssvfiscanf_r+0x4a>
 8011f76:	9b00      	ldr	r3, [sp, #0]
 8011f78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011f7a:	1d19      	adds	r1, r3, #4
 8011f7c:	9100      	str	r1, [sp, #0]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	07c0      	lsls	r0, r0, #31
 8011f82:	bf4c      	ite	mi
 8011f84:	801a      	strhmi	r2, [r3, #0]
 8011f86:	601a      	strpl	r2, [r3, #0]
 8011f88:	e6f3      	b.n	8011d72 <__ssvfiscanf_r+0x4a>
 8011f8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	4630      	mov	r0, r6
 8011f90:	4798      	blx	r3
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d0bf      	beq.n	8011f16 <__ssvfiscanf_r+0x1ee>
 8011f96:	e79f      	b.n	8011ed8 <__ssvfiscanf_r+0x1b0>
 8011f98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011f9a:	3201      	adds	r2, #1
 8011f9c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011f9e:	6862      	ldr	r2, [r4, #4]
 8011fa0:	3a01      	subs	r2, #1
 8011fa2:	2a00      	cmp	r2, #0
 8011fa4:	6062      	str	r2, [r4, #4]
 8011fa6:	dd02      	ble.n	8011fae <__ssvfiscanf_r+0x286>
 8011fa8:	3301      	adds	r3, #1
 8011faa:	6023      	str	r3, [r4, #0]
 8011fac:	e7b6      	b.n	8011f1c <__ssvfiscanf_r+0x1f4>
 8011fae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011fb0:	4621      	mov	r1, r4
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	4798      	blx	r3
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d0b0      	beq.n	8011f1c <__ssvfiscanf_r+0x1f4>
 8011fba:	e78d      	b.n	8011ed8 <__ssvfiscanf_r+0x1b0>
 8011fbc:	2b04      	cmp	r3, #4
 8011fbe:	dc0f      	bgt.n	8011fe0 <__ssvfiscanf_r+0x2b8>
 8011fc0:	466b      	mov	r3, sp
 8011fc2:	4622      	mov	r2, r4
 8011fc4:	a941      	add	r1, sp, #260	@ 0x104
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f000 f9be 	bl	8012348 <_scanf_i>
 8011fcc:	e7b4      	b.n	8011f38 <__ssvfiscanf_r+0x210>
 8011fce:	bf00      	nop
 8011fd0:	08011c79 	.word	0x08011c79
 8011fd4:	08011cef 	.word	0x08011cef
 8011fd8:	08015b41 	.word	0x08015b41
 8011fdc:	08015f5e 	.word	0x08015f5e
 8011fe0:	4b0a      	ldr	r3, [pc, #40]	@ (801200c <__ssvfiscanf_r+0x2e4>)
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	f43f aec5 	beq.w	8011d72 <__ssvfiscanf_r+0x4a>
 8011fe8:	466b      	mov	r3, sp
 8011fea:	4622      	mov	r2, r4
 8011fec:	a941      	add	r1, sp, #260	@ 0x104
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7fc fffc 	bl	800efec <_scanf_float>
 8011ff4:	e7a0      	b.n	8011f38 <__ssvfiscanf_r+0x210>
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	065b      	lsls	r3, r3, #25
 8011ffa:	f53f af71 	bmi.w	8011ee0 <__ssvfiscanf_r+0x1b8>
 8011ffe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012006:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012008:	e7f9      	b.n	8011ffe <__ssvfiscanf_r+0x2d6>
 801200a:	bf00      	nop
 801200c:	0800efed 	.word	0x0800efed

08012010 <__sfputc_r>:
 8012010:	6893      	ldr	r3, [r2, #8]
 8012012:	3b01      	subs	r3, #1
 8012014:	2b00      	cmp	r3, #0
 8012016:	b410      	push	{r4}
 8012018:	6093      	str	r3, [r2, #8]
 801201a:	da08      	bge.n	801202e <__sfputc_r+0x1e>
 801201c:	6994      	ldr	r4, [r2, #24]
 801201e:	42a3      	cmp	r3, r4
 8012020:	db01      	blt.n	8012026 <__sfputc_r+0x16>
 8012022:	290a      	cmp	r1, #10
 8012024:	d103      	bne.n	801202e <__sfputc_r+0x1e>
 8012026:	f85d 4b04 	ldr.w	r4, [sp], #4
 801202a:	f7fd bbc6 	b.w	800f7ba <__swbuf_r>
 801202e:	6813      	ldr	r3, [r2, #0]
 8012030:	1c58      	adds	r0, r3, #1
 8012032:	6010      	str	r0, [r2, #0]
 8012034:	7019      	strb	r1, [r3, #0]
 8012036:	4608      	mov	r0, r1
 8012038:	f85d 4b04 	ldr.w	r4, [sp], #4
 801203c:	4770      	bx	lr

0801203e <__sfputs_r>:
 801203e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012040:	4606      	mov	r6, r0
 8012042:	460f      	mov	r7, r1
 8012044:	4614      	mov	r4, r2
 8012046:	18d5      	adds	r5, r2, r3
 8012048:	42ac      	cmp	r4, r5
 801204a:	d101      	bne.n	8012050 <__sfputs_r+0x12>
 801204c:	2000      	movs	r0, #0
 801204e:	e007      	b.n	8012060 <__sfputs_r+0x22>
 8012050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012054:	463a      	mov	r2, r7
 8012056:	4630      	mov	r0, r6
 8012058:	f7ff ffda 	bl	8012010 <__sfputc_r>
 801205c:	1c43      	adds	r3, r0, #1
 801205e:	d1f3      	bne.n	8012048 <__sfputs_r+0xa>
 8012060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012064 <_vfiprintf_r>:
 8012064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012068:	460d      	mov	r5, r1
 801206a:	b09d      	sub	sp, #116	@ 0x74
 801206c:	4614      	mov	r4, r2
 801206e:	4698      	mov	r8, r3
 8012070:	4606      	mov	r6, r0
 8012072:	b118      	cbz	r0, 801207c <_vfiprintf_r+0x18>
 8012074:	6a03      	ldr	r3, [r0, #32]
 8012076:	b90b      	cbnz	r3, 801207c <_vfiprintf_r+0x18>
 8012078:	f7fd fa58 	bl	800f52c <__sinit>
 801207c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801207e:	07d9      	lsls	r1, r3, #31
 8012080:	d405      	bmi.n	801208e <_vfiprintf_r+0x2a>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	059a      	lsls	r2, r3, #22
 8012086:	d402      	bmi.n	801208e <_vfiprintf_r+0x2a>
 8012088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801208a:	f7fd fd3c 	bl	800fb06 <__retarget_lock_acquire_recursive>
 801208e:	89ab      	ldrh	r3, [r5, #12]
 8012090:	071b      	lsls	r3, r3, #28
 8012092:	d501      	bpl.n	8012098 <_vfiprintf_r+0x34>
 8012094:	692b      	ldr	r3, [r5, #16]
 8012096:	b99b      	cbnz	r3, 80120c0 <_vfiprintf_r+0x5c>
 8012098:	4629      	mov	r1, r5
 801209a:	4630      	mov	r0, r6
 801209c:	f7fd fbcc 	bl	800f838 <__swsetup_r>
 80120a0:	b170      	cbz	r0, 80120c0 <_vfiprintf_r+0x5c>
 80120a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120a4:	07dc      	lsls	r4, r3, #31
 80120a6:	d504      	bpl.n	80120b2 <_vfiprintf_r+0x4e>
 80120a8:	f04f 30ff 	mov.w	r0, #4294967295
 80120ac:	b01d      	add	sp, #116	@ 0x74
 80120ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b2:	89ab      	ldrh	r3, [r5, #12]
 80120b4:	0598      	lsls	r0, r3, #22
 80120b6:	d4f7      	bmi.n	80120a8 <_vfiprintf_r+0x44>
 80120b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120ba:	f7fd fd25 	bl	800fb08 <__retarget_lock_release_recursive>
 80120be:	e7f3      	b.n	80120a8 <_vfiprintf_r+0x44>
 80120c0:	2300      	movs	r3, #0
 80120c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80120c4:	2320      	movs	r3, #32
 80120c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80120ce:	2330      	movs	r3, #48	@ 0x30
 80120d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012280 <_vfiprintf_r+0x21c>
 80120d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120d8:	f04f 0901 	mov.w	r9, #1
 80120dc:	4623      	mov	r3, r4
 80120de:	469a      	mov	sl, r3
 80120e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120e4:	b10a      	cbz	r2, 80120ea <_vfiprintf_r+0x86>
 80120e6:	2a25      	cmp	r2, #37	@ 0x25
 80120e8:	d1f9      	bne.n	80120de <_vfiprintf_r+0x7a>
 80120ea:	ebba 0b04 	subs.w	fp, sl, r4
 80120ee:	d00b      	beq.n	8012108 <_vfiprintf_r+0xa4>
 80120f0:	465b      	mov	r3, fp
 80120f2:	4622      	mov	r2, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	4630      	mov	r0, r6
 80120f8:	f7ff ffa1 	bl	801203e <__sfputs_r>
 80120fc:	3001      	adds	r0, #1
 80120fe:	f000 80a7 	beq.w	8012250 <_vfiprintf_r+0x1ec>
 8012102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012104:	445a      	add	r2, fp
 8012106:	9209      	str	r2, [sp, #36]	@ 0x24
 8012108:	f89a 3000 	ldrb.w	r3, [sl]
 801210c:	2b00      	cmp	r3, #0
 801210e:	f000 809f 	beq.w	8012250 <_vfiprintf_r+0x1ec>
 8012112:	2300      	movs	r3, #0
 8012114:	f04f 32ff 	mov.w	r2, #4294967295
 8012118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801211c:	f10a 0a01 	add.w	sl, sl, #1
 8012120:	9304      	str	r3, [sp, #16]
 8012122:	9307      	str	r3, [sp, #28]
 8012124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012128:	931a      	str	r3, [sp, #104]	@ 0x68
 801212a:	4654      	mov	r4, sl
 801212c:	2205      	movs	r2, #5
 801212e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012132:	4853      	ldr	r0, [pc, #332]	@ (8012280 <_vfiprintf_r+0x21c>)
 8012134:	f7ee f85c 	bl	80001f0 <memchr>
 8012138:	9a04      	ldr	r2, [sp, #16]
 801213a:	b9d8      	cbnz	r0, 8012174 <_vfiprintf_r+0x110>
 801213c:	06d1      	lsls	r1, r2, #27
 801213e:	bf44      	itt	mi
 8012140:	2320      	movmi	r3, #32
 8012142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012146:	0713      	lsls	r3, r2, #28
 8012148:	bf44      	itt	mi
 801214a:	232b      	movmi	r3, #43	@ 0x2b
 801214c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012150:	f89a 3000 	ldrb.w	r3, [sl]
 8012154:	2b2a      	cmp	r3, #42	@ 0x2a
 8012156:	d015      	beq.n	8012184 <_vfiprintf_r+0x120>
 8012158:	9a07      	ldr	r2, [sp, #28]
 801215a:	4654      	mov	r4, sl
 801215c:	2000      	movs	r0, #0
 801215e:	f04f 0c0a 	mov.w	ip, #10
 8012162:	4621      	mov	r1, r4
 8012164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012168:	3b30      	subs	r3, #48	@ 0x30
 801216a:	2b09      	cmp	r3, #9
 801216c:	d94b      	bls.n	8012206 <_vfiprintf_r+0x1a2>
 801216e:	b1b0      	cbz	r0, 801219e <_vfiprintf_r+0x13a>
 8012170:	9207      	str	r2, [sp, #28]
 8012172:	e014      	b.n	801219e <_vfiprintf_r+0x13a>
 8012174:	eba0 0308 	sub.w	r3, r0, r8
 8012178:	fa09 f303 	lsl.w	r3, r9, r3
 801217c:	4313      	orrs	r3, r2
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	46a2      	mov	sl, r4
 8012182:	e7d2      	b.n	801212a <_vfiprintf_r+0xc6>
 8012184:	9b03      	ldr	r3, [sp, #12]
 8012186:	1d19      	adds	r1, r3, #4
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	9103      	str	r1, [sp, #12]
 801218c:	2b00      	cmp	r3, #0
 801218e:	bfbb      	ittet	lt
 8012190:	425b      	neglt	r3, r3
 8012192:	f042 0202 	orrlt.w	r2, r2, #2
 8012196:	9307      	strge	r3, [sp, #28]
 8012198:	9307      	strlt	r3, [sp, #28]
 801219a:	bfb8      	it	lt
 801219c:	9204      	strlt	r2, [sp, #16]
 801219e:	7823      	ldrb	r3, [r4, #0]
 80121a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80121a2:	d10a      	bne.n	80121ba <_vfiprintf_r+0x156>
 80121a4:	7863      	ldrb	r3, [r4, #1]
 80121a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80121a8:	d132      	bne.n	8012210 <_vfiprintf_r+0x1ac>
 80121aa:	9b03      	ldr	r3, [sp, #12]
 80121ac:	1d1a      	adds	r2, r3, #4
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	9203      	str	r2, [sp, #12]
 80121b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121b6:	3402      	adds	r4, #2
 80121b8:	9305      	str	r3, [sp, #20]
 80121ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012290 <_vfiprintf_r+0x22c>
 80121be:	7821      	ldrb	r1, [r4, #0]
 80121c0:	2203      	movs	r2, #3
 80121c2:	4650      	mov	r0, sl
 80121c4:	f7ee f814 	bl	80001f0 <memchr>
 80121c8:	b138      	cbz	r0, 80121da <_vfiprintf_r+0x176>
 80121ca:	9b04      	ldr	r3, [sp, #16]
 80121cc:	eba0 000a 	sub.w	r0, r0, sl
 80121d0:	2240      	movs	r2, #64	@ 0x40
 80121d2:	4082      	lsls	r2, r0
 80121d4:	4313      	orrs	r3, r2
 80121d6:	3401      	adds	r4, #1
 80121d8:	9304      	str	r3, [sp, #16]
 80121da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121de:	4829      	ldr	r0, [pc, #164]	@ (8012284 <_vfiprintf_r+0x220>)
 80121e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121e4:	2206      	movs	r2, #6
 80121e6:	f7ee f803 	bl	80001f0 <memchr>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d03f      	beq.n	801226e <_vfiprintf_r+0x20a>
 80121ee:	4b26      	ldr	r3, [pc, #152]	@ (8012288 <_vfiprintf_r+0x224>)
 80121f0:	bb1b      	cbnz	r3, 801223a <_vfiprintf_r+0x1d6>
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	3307      	adds	r3, #7
 80121f6:	f023 0307 	bic.w	r3, r3, #7
 80121fa:	3308      	adds	r3, #8
 80121fc:	9303      	str	r3, [sp, #12]
 80121fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012200:	443b      	add	r3, r7
 8012202:	9309      	str	r3, [sp, #36]	@ 0x24
 8012204:	e76a      	b.n	80120dc <_vfiprintf_r+0x78>
 8012206:	fb0c 3202 	mla	r2, ip, r2, r3
 801220a:	460c      	mov	r4, r1
 801220c:	2001      	movs	r0, #1
 801220e:	e7a8      	b.n	8012162 <_vfiprintf_r+0xfe>
 8012210:	2300      	movs	r3, #0
 8012212:	3401      	adds	r4, #1
 8012214:	9305      	str	r3, [sp, #20]
 8012216:	4619      	mov	r1, r3
 8012218:	f04f 0c0a 	mov.w	ip, #10
 801221c:	4620      	mov	r0, r4
 801221e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012222:	3a30      	subs	r2, #48	@ 0x30
 8012224:	2a09      	cmp	r2, #9
 8012226:	d903      	bls.n	8012230 <_vfiprintf_r+0x1cc>
 8012228:	2b00      	cmp	r3, #0
 801222a:	d0c6      	beq.n	80121ba <_vfiprintf_r+0x156>
 801222c:	9105      	str	r1, [sp, #20]
 801222e:	e7c4      	b.n	80121ba <_vfiprintf_r+0x156>
 8012230:	fb0c 2101 	mla	r1, ip, r1, r2
 8012234:	4604      	mov	r4, r0
 8012236:	2301      	movs	r3, #1
 8012238:	e7f0      	b.n	801221c <_vfiprintf_r+0x1b8>
 801223a:	ab03      	add	r3, sp, #12
 801223c:	9300      	str	r3, [sp, #0]
 801223e:	462a      	mov	r2, r5
 8012240:	4b12      	ldr	r3, [pc, #72]	@ (801228c <_vfiprintf_r+0x228>)
 8012242:	a904      	add	r1, sp, #16
 8012244:	4630      	mov	r0, r6
 8012246:	f7fc fb19 	bl	800e87c <_printf_float>
 801224a:	4607      	mov	r7, r0
 801224c:	1c78      	adds	r0, r7, #1
 801224e:	d1d6      	bne.n	80121fe <_vfiprintf_r+0x19a>
 8012250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012252:	07d9      	lsls	r1, r3, #31
 8012254:	d405      	bmi.n	8012262 <_vfiprintf_r+0x1fe>
 8012256:	89ab      	ldrh	r3, [r5, #12]
 8012258:	059a      	lsls	r2, r3, #22
 801225a:	d402      	bmi.n	8012262 <_vfiprintf_r+0x1fe>
 801225c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801225e:	f7fd fc53 	bl	800fb08 <__retarget_lock_release_recursive>
 8012262:	89ab      	ldrh	r3, [r5, #12]
 8012264:	065b      	lsls	r3, r3, #25
 8012266:	f53f af1f 	bmi.w	80120a8 <_vfiprintf_r+0x44>
 801226a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801226c:	e71e      	b.n	80120ac <_vfiprintf_r+0x48>
 801226e:	ab03      	add	r3, sp, #12
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	462a      	mov	r2, r5
 8012274:	4b05      	ldr	r3, [pc, #20]	@ (801228c <_vfiprintf_r+0x228>)
 8012276:	a904      	add	r1, sp, #16
 8012278:	4630      	mov	r0, r6
 801227a:	f7fc fd97 	bl	800edac <_printf_i>
 801227e:	e7e4      	b.n	801224a <_vfiprintf_r+0x1e6>
 8012280:	08015f58 	.word	0x08015f58
 8012284:	08015f62 	.word	0x08015f62
 8012288:	0800e87d 	.word	0x0800e87d
 801228c:	0801203f 	.word	0x0801203f
 8012290:	08015f5e 	.word	0x08015f5e

08012294 <_scanf_chars>:
 8012294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012298:	4615      	mov	r5, r2
 801229a:	688a      	ldr	r2, [r1, #8]
 801229c:	4680      	mov	r8, r0
 801229e:	460c      	mov	r4, r1
 80122a0:	b932      	cbnz	r2, 80122b0 <_scanf_chars+0x1c>
 80122a2:	698a      	ldr	r2, [r1, #24]
 80122a4:	2a00      	cmp	r2, #0
 80122a6:	bf14      	ite	ne
 80122a8:	f04f 32ff 	movne.w	r2, #4294967295
 80122ac:	2201      	moveq	r2, #1
 80122ae:	608a      	str	r2, [r1, #8]
 80122b0:	6822      	ldr	r2, [r4, #0]
 80122b2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012344 <_scanf_chars+0xb0>
 80122b6:	06d1      	lsls	r1, r2, #27
 80122b8:	bf5f      	itttt	pl
 80122ba:	681a      	ldrpl	r2, [r3, #0]
 80122bc:	1d11      	addpl	r1, r2, #4
 80122be:	6019      	strpl	r1, [r3, #0]
 80122c0:	6816      	ldrpl	r6, [r2, #0]
 80122c2:	2700      	movs	r7, #0
 80122c4:	69a0      	ldr	r0, [r4, #24]
 80122c6:	b188      	cbz	r0, 80122ec <_scanf_chars+0x58>
 80122c8:	2801      	cmp	r0, #1
 80122ca:	d107      	bne.n	80122dc <_scanf_chars+0x48>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	781a      	ldrb	r2, [r3, #0]
 80122d0:	6963      	ldr	r3, [r4, #20]
 80122d2:	5c9b      	ldrb	r3, [r3, r2]
 80122d4:	b953      	cbnz	r3, 80122ec <_scanf_chars+0x58>
 80122d6:	2f00      	cmp	r7, #0
 80122d8:	d031      	beq.n	801233e <_scanf_chars+0xaa>
 80122da:	e022      	b.n	8012322 <_scanf_chars+0x8e>
 80122dc:	2802      	cmp	r0, #2
 80122de:	d120      	bne.n	8012322 <_scanf_chars+0x8e>
 80122e0:	682b      	ldr	r3, [r5, #0]
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80122e8:	071b      	lsls	r3, r3, #28
 80122ea:	d41a      	bmi.n	8012322 <_scanf_chars+0x8e>
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	06da      	lsls	r2, r3, #27
 80122f0:	bf5e      	ittt	pl
 80122f2:	682b      	ldrpl	r3, [r5, #0]
 80122f4:	781b      	ldrbpl	r3, [r3, #0]
 80122f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80122fa:	682a      	ldr	r2, [r5, #0]
 80122fc:	686b      	ldr	r3, [r5, #4]
 80122fe:	3201      	adds	r2, #1
 8012300:	602a      	str	r2, [r5, #0]
 8012302:	68a2      	ldr	r2, [r4, #8]
 8012304:	3b01      	subs	r3, #1
 8012306:	3a01      	subs	r2, #1
 8012308:	606b      	str	r3, [r5, #4]
 801230a:	3701      	adds	r7, #1
 801230c:	60a2      	str	r2, [r4, #8]
 801230e:	b142      	cbz	r2, 8012322 <_scanf_chars+0x8e>
 8012310:	2b00      	cmp	r3, #0
 8012312:	dcd7      	bgt.n	80122c4 <_scanf_chars+0x30>
 8012314:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012318:	4629      	mov	r1, r5
 801231a:	4640      	mov	r0, r8
 801231c:	4798      	blx	r3
 801231e:	2800      	cmp	r0, #0
 8012320:	d0d0      	beq.n	80122c4 <_scanf_chars+0x30>
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	f013 0310 	ands.w	r3, r3, #16
 8012328:	d105      	bne.n	8012336 <_scanf_chars+0xa2>
 801232a:	68e2      	ldr	r2, [r4, #12]
 801232c:	3201      	adds	r2, #1
 801232e:	60e2      	str	r2, [r4, #12]
 8012330:	69a2      	ldr	r2, [r4, #24]
 8012332:	b102      	cbz	r2, 8012336 <_scanf_chars+0xa2>
 8012334:	7033      	strb	r3, [r6, #0]
 8012336:	6923      	ldr	r3, [r4, #16]
 8012338:	443b      	add	r3, r7
 801233a:	6123      	str	r3, [r4, #16]
 801233c:	2000      	movs	r0, #0
 801233e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012342:	bf00      	nop
 8012344:	08015b41 	.word	0x08015b41

08012348 <_scanf_i>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	4698      	mov	r8, r3
 801234e:	4b74      	ldr	r3, [pc, #464]	@ (8012520 <_scanf_i+0x1d8>)
 8012350:	460c      	mov	r4, r1
 8012352:	4682      	mov	sl, r0
 8012354:	4616      	mov	r6, r2
 8012356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801235a:	b087      	sub	sp, #28
 801235c:	ab03      	add	r3, sp, #12
 801235e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012362:	4b70      	ldr	r3, [pc, #448]	@ (8012524 <_scanf_i+0x1dc>)
 8012364:	69a1      	ldr	r1, [r4, #24]
 8012366:	4a70      	ldr	r2, [pc, #448]	@ (8012528 <_scanf_i+0x1e0>)
 8012368:	2903      	cmp	r1, #3
 801236a:	bf08      	it	eq
 801236c:	461a      	moveq	r2, r3
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	9201      	str	r2, [sp, #4]
 8012372:	1e5a      	subs	r2, r3, #1
 8012374:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012378:	bf88      	it	hi
 801237a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801237e:	4627      	mov	r7, r4
 8012380:	bf82      	ittt	hi
 8012382:	eb03 0905 	addhi.w	r9, r3, r5
 8012386:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801238a:	60a3      	strhi	r3, [r4, #8]
 801238c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012390:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012394:	bf98      	it	ls
 8012396:	f04f 0900 	movls.w	r9, #0
 801239a:	6023      	str	r3, [r4, #0]
 801239c:	463d      	mov	r5, r7
 801239e:	f04f 0b00 	mov.w	fp, #0
 80123a2:	6831      	ldr	r1, [r6, #0]
 80123a4:	ab03      	add	r3, sp, #12
 80123a6:	7809      	ldrb	r1, [r1, #0]
 80123a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80123ac:	2202      	movs	r2, #2
 80123ae:	f7ed ff1f 	bl	80001f0 <memchr>
 80123b2:	b328      	cbz	r0, 8012400 <_scanf_i+0xb8>
 80123b4:	f1bb 0f01 	cmp.w	fp, #1
 80123b8:	d159      	bne.n	801246e <_scanf_i+0x126>
 80123ba:	6862      	ldr	r2, [r4, #4]
 80123bc:	b92a      	cbnz	r2, 80123ca <_scanf_i+0x82>
 80123be:	6822      	ldr	r2, [r4, #0]
 80123c0:	2108      	movs	r1, #8
 80123c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80123c6:	6061      	str	r1, [r4, #4]
 80123c8:	6022      	str	r2, [r4, #0]
 80123ca:	6822      	ldr	r2, [r4, #0]
 80123cc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80123d0:	6022      	str	r2, [r4, #0]
 80123d2:	68a2      	ldr	r2, [r4, #8]
 80123d4:	1e51      	subs	r1, r2, #1
 80123d6:	60a1      	str	r1, [r4, #8]
 80123d8:	b192      	cbz	r2, 8012400 <_scanf_i+0xb8>
 80123da:	6832      	ldr	r2, [r6, #0]
 80123dc:	1c51      	adds	r1, r2, #1
 80123de:	6031      	str	r1, [r6, #0]
 80123e0:	7812      	ldrb	r2, [r2, #0]
 80123e2:	f805 2b01 	strb.w	r2, [r5], #1
 80123e6:	6872      	ldr	r2, [r6, #4]
 80123e8:	3a01      	subs	r2, #1
 80123ea:	2a00      	cmp	r2, #0
 80123ec:	6072      	str	r2, [r6, #4]
 80123ee:	dc07      	bgt.n	8012400 <_scanf_i+0xb8>
 80123f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80123f4:	4631      	mov	r1, r6
 80123f6:	4650      	mov	r0, sl
 80123f8:	4790      	blx	r2
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f040 8085 	bne.w	801250a <_scanf_i+0x1c2>
 8012400:	f10b 0b01 	add.w	fp, fp, #1
 8012404:	f1bb 0f03 	cmp.w	fp, #3
 8012408:	d1cb      	bne.n	80123a2 <_scanf_i+0x5a>
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	b90b      	cbnz	r3, 8012412 <_scanf_i+0xca>
 801240e:	230a      	movs	r3, #10
 8012410:	6063      	str	r3, [r4, #4]
 8012412:	6863      	ldr	r3, [r4, #4]
 8012414:	4945      	ldr	r1, [pc, #276]	@ (801252c <_scanf_i+0x1e4>)
 8012416:	6960      	ldr	r0, [r4, #20]
 8012418:	1ac9      	subs	r1, r1, r3
 801241a:	f000 f997 	bl	801274c <__sccl>
 801241e:	f04f 0b00 	mov.w	fp, #0
 8012422:	68a3      	ldr	r3, [r4, #8]
 8012424:	6822      	ldr	r2, [r4, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d03d      	beq.n	80124a6 <_scanf_i+0x15e>
 801242a:	6831      	ldr	r1, [r6, #0]
 801242c:	6960      	ldr	r0, [r4, #20]
 801242e:	f891 c000 	ldrb.w	ip, [r1]
 8012432:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012436:	2800      	cmp	r0, #0
 8012438:	d035      	beq.n	80124a6 <_scanf_i+0x15e>
 801243a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801243e:	d124      	bne.n	801248a <_scanf_i+0x142>
 8012440:	0510      	lsls	r0, r2, #20
 8012442:	d522      	bpl.n	801248a <_scanf_i+0x142>
 8012444:	f10b 0b01 	add.w	fp, fp, #1
 8012448:	f1b9 0f00 	cmp.w	r9, #0
 801244c:	d003      	beq.n	8012456 <_scanf_i+0x10e>
 801244e:	3301      	adds	r3, #1
 8012450:	f109 39ff 	add.w	r9, r9, #4294967295
 8012454:	60a3      	str	r3, [r4, #8]
 8012456:	6873      	ldr	r3, [r6, #4]
 8012458:	3b01      	subs	r3, #1
 801245a:	2b00      	cmp	r3, #0
 801245c:	6073      	str	r3, [r6, #4]
 801245e:	dd1b      	ble.n	8012498 <_scanf_i+0x150>
 8012460:	6833      	ldr	r3, [r6, #0]
 8012462:	3301      	adds	r3, #1
 8012464:	6033      	str	r3, [r6, #0]
 8012466:	68a3      	ldr	r3, [r4, #8]
 8012468:	3b01      	subs	r3, #1
 801246a:	60a3      	str	r3, [r4, #8]
 801246c:	e7d9      	b.n	8012422 <_scanf_i+0xda>
 801246e:	f1bb 0f02 	cmp.w	fp, #2
 8012472:	d1ae      	bne.n	80123d2 <_scanf_i+0x8a>
 8012474:	6822      	ldr	r2, [r4, #0]
 8012476:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801247a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801247e:	d1bf      	bne.n	8012400 <_scanf_i+0xb8>
 8012480:	2110      	movs	r1, #16
 8012482:	6061      	str	r1, [r4, #4]
 8012484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012488:	e7a2      	b.n	80123d0 <_scanf_i+0x88>
 801248a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801248e:	6022      	str	r2, [r4, #0]
 8012490:	780b      	ldrb	r3, [r1, #0]
 8012492:	f805 3b01 	strb.w	r3, [r5], #1
 8012496:	e7de      	b.n	8012456 <_scanf_i+0x10e>
 8012498:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801249c:	4631      	mov	r1, r6
 801249e:	4650      	mov	r0, sl
 80124a0:	4798      	blx	r3
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d0df      	beq.n	8012466 <_scanf_i+0x11e>
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	05d9      	lsls	r1, r3, #23
 80124aa:	d50d      	bpl.n	80124c8 <_scanf_i+0x180>
 80124ac:	42bd      	cmp	r5, r7
 80124ae:	d909      	bls.n	80124c4 <_scanf_i+0x17c>
 80124b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80124b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80124b8:	4632      	mov	r2, r6
 80124ba:	4650      	mov	r0, sl
 80124bc:	4798      	blx	r3
 80124be:	f105 39ff 	add.w	r9, r5, #4294967295
 80124c2:	464d      	mov	r5, r9
 80124c4:	42bd      	cmp	r5, r7
 80124c6:	d028      	beq.n	801251a <_scanf_i+0x1d2>
 80124c8:	6822      	ldr	r2, [r4, #0]
 80124ca:	f012 0210 	ands.w	r2, r2, #16
 80124ce:	d113      	bne.n	80124f8 <_scanf_i+0x1b0>
 80124d0:	702a      	strb	r2, [r5, #0]
 80124d2:	6863      	ldr	r3, [r4, #4]
 80124d4:	9e01      	ldr	r6, [sp, #4]
 80124d6:	4639      	mov	r1, r7
 80124d8:	4650      	mov	r0, sl
 80124da:	47b0      	blx	r6
 80124dc:	f8d8 3000 	ldr.w	r3, [r8]
 80124e0:	6821      	ldr	r1, [r4, #0]
 80124e2:	1d1a      	adds	r2, r3, #4
 80124e4:	f8c8 2000 	str.w	r2, [r8]
 80124e8:	f011 0f20 	tst.w	r1, #32
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	d00f      	beq.n	8012510 <_scanf_i+0x1c8>
 80124f0:	6018      	str	r0, [r3, #0]
 80124f2:	68e3      	ldr	r3, [r4, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	60e3      	str	r3, [r4, #12]
 80124f8:	6923      	ldr	r3, [r4, #16]
 80124fa:	1bed      	subs	r5, r5, r7
 80124fc:	445d      	add	r5, fp
 80124fe:	442b      	add	r3, r5
 8012500:	6123      	str	r3, [r4, #16]
 8012502:	2000      	movs	r0, #0
 8012504:	b007      	add	sp, #28
 8012506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250a:	f04f 0b00 	mov.w	fp, #0
 801250e:	e7ca      	b.n	80124a6 <_scanf_i+0x15e>
 8012510:	07ca      	lsls	r2, r1, #31
 8012512:	bf4c      	ite	mi
 8012514:	8018      	strhmi	r0, [r3, #0]
 8012516:	6018      	strpl	r0, [r3, #0]
 8012518:	e7eb      	b.n	80124f2 <_scanf_i+0x1aa>
 801251a:	2001      	movs	r0, #1
 801251c:	e7f2      	b.n	8012504 <_scanf_i+0x1bc>
 801251e:	bf00      	nop
 8012520:	08015abc 	.word	0x08015abc
 8012524:	080119ad 	.word	0x080119ad
 8012528:	080129c1 	.word	0x080129c1
 801252c:	08015f79 	.word	0x08015f79

08012530 <__sflush_r>:
 8012530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012538:	0716      	lsls	r6, r2, #28
 801253a:	4605      	mov	r5, r0
 801253c:	460c      	mov	r4, r1
 801253e:	d454      	bmi.n	80125ea <__sflush_r+0xba>
 8012540:	684b      	ldr	r3, [r1, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	dc02      	bgt.n	801254c <__sflush_r+0x1c>
 8012546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012548:	2b00      	cmp	r3, #0
 801254a:	dd48      	ble.n	80125de <__sflush_r+0xae>
 801254c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801254e:	2e00      	cmp	r6, #0
 8012550:	d045      	beq.n	80125de <__sflush_r+0xae>
 8012552:	2300      	movs	r3, #0
 8012554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012558:	682f      	ldr	r7, [r5, #0]
 801255a:	6a21      	ldr	r1, [r4, #32]
 801255c:	602b      	str	r3, [r5, #0]
 801255e:	d030      	beq.n	80125c2 <__sflush_r+0x92>
 8012560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012562:	89a3      	ldrh	r3, [r4, #12]
 8012564:	0759      	lsls	r1, r3, #29
 8012566:	d505      	bpl.n	8012574 <__sflush_r+0x44>
 8012568:	6863      	ldr	r3, [r4, #4]
 801256a:	1ad2      	subs	r2, r2, r3
 801256c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801256e:	b10b      	cbz	r3, 8012574 <__sflush_r+0x44>
 8012570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012572:	1ad2      	subs	r2, r2, r3
 8012574:	2300      	movs	r3, #0
 8012576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012578:	6a21      	ldr	r1, [r4, #32]
 801257a:	4628      	mov	r0, r5
 801257c:	47b0      	blx	r6
 801257e:	1c43      	adds	r3, r0, #1
 8012580:	89a3      	ldrh	r3, [r4, #12]
 8012582:	d106      	bne.n	8012592 <__sflush_r+0x62>
 8012584:	6829      	ldr	r1, [r5, #0]
 8012586:	291d      	cmp	r1, #29
 8012588:	d82b      	bhi.n	80125e2 <__sflush_r+0xb2>
 801258a:	4a2a      	ldr	r2, [pc, #168]	@ (8012634 <__sflush_r+0x104>)
 801258c:	410a      	asrs	r2, r1
 801258e:	07d6      	lsls	r6, r2, #31
 8012590:	d427      	bmi.n	80125e2 <__sflush_r+0xb2>
 8012592:	2200      	movs	r2, #0
 8012594:	6062      	str	r2, [r4, #4]
 8012596:	04d9      	lsls	r1, r3, #19
 8012598:	6922      	ldr	r2, [r4, #16]
 801259a:	6022      	str	r2, [r4, #0]
 801259c:	d504      	bpl.n	80125a8 <__sflush_r+0x78>
 801259e:	1c42      	adds	r2, r0, #1
 80125a0:	d101      	bne.n	80125a6 <__sflush_r+0x76>
 80125a2:	682b      	ldr	r3, [r5, #0]
 80125a4:	b903      	cbnz	r3, 80125a8 <__sflush_r+0x78>
 80125a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80125a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125aa:	602f      	str	r7, [r5, #0]
 80125ac:	b1b9      	cbz	r1, 80125de <__sflush_r+0xae>
 80125ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125b2:	4299      	cmp	r1, r3
 80125b4:	d002      	beq.n	80125bc <__sflush_r+0x8c>
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7fe f92e 	bl	8010818 <_free_r>
 80125bc:	2300      	movs	r3, #0
 80125be:	6363      	str	r3, [r4, #52]	@ 0x34
 80125c0:	e00d      	b.n	80125de <__sflush_r+0xae>
 80125c2:	2301      	movs	r3, #1
 80125c4:	4628      	mov	r0, r5
 80125c6:	47b0      	blx	r6
 80125c8:	4602      	mov	r2, r0
 80125ca:	1c50      	adds	r0, r2, #1
 80125cc:	d1c9      	bne.n	8012562 <__sflush_r+0x32>
 80125ce:	682b      	ldr	r3, [r5, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d0c6      	beq.n	8012562 <__sflush_r+0x32>
 80125d4:	2b1d      	cmp	r3, #29
 80125d6:	d001      	beq.n	80125dc <__sflush_r+0xac>
 80125d8:	2b16      	cmp	r3, #22
 80125da:	d11e      	bne.n	801261a <__sflush_r+0xea>
 80125dc:	602f      	str	r7, [r5, #0]
 80125de:	2000      	movs	r0, #0
 80125e0:	e022      	b.n	8012628 <__sflush_r+0xf8>
 80125e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125e6:	b21b      	sxth	r3, r3
 80125e8:	e01b      	b.n	8012622 <__sflush_r+0xf2>
 80125ea:	690f      	ldr	r7, [r1, #16]
 80125ec:	2f00      	cmp	r7, #0
 80125ee:	d0f6      	beq.n	80125de <__sflush_r+0xae>
 80125f0:	0793      	lsls	r3, r2, #30
 80125f2:	680e      	ldr	r6, [r1, #0]
 80125f4:	bf08      	it	eq
 80125f6:	694b      	ldreq	r3, [r1, #20]
 80125f8:	600f      	str	r7, [r1, #0]
 80125fa:	bf18      	it	ne
 80125fc:	2300      	movne	r3, #0
 80125fe:	eba6 0807 	sub.w	r8, r6, r7
 8012602:	608b      	str	r3, [r1, #8]
 8012604:	f1b8 0f00 	cmp.w	r8, #0
 8012608:	dde9      	ble.n	80125de <__sflush_r+0xae>
 801260a:	6a21      	ldr	r1, [r4, #32]
 801260c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801260e:	4643      	mov	r3, r8
 8012610:	463a      	mov	r2, r7
 8012612:	4628      	mov	r0, r5
 8012614:	47b0      	blx	r6
 8012616:	2800      	cmp	r0, #0
 8012618:	dc08      	bgt.n	801262c <__sflush_r+0xfc>
 801261a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801261e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012622:	81a3      	strh	r3, [r4, #12]
 8012624:	f04f 30ff 	mov.w	r0, #4294967295
 8012628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801262c:	4407      	add	r7, r0
 801262e:	eba8 0800 	sub.w	r8, r8, r0
 8012632:	e7e7      	b.n	8012604 <__sflush_r+0xd4>
 8012634:	dfbffffe 	.word	0xdfbffffe

08012638 <_fflush_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	690b      	ldr	r3, [r1, #16]
 801263c:	4605      	mov	r5, r0
 801263e:	460c      	mov	r4, r1
 8012640:	b913      	cbnz	r3, 8012648 <_fflush_r+0x10>
 8012642:	2500      	movs	r5, #0
 8012644:	4628      	mov	r0, r5
 8012646:	bd38      	pop	{r3, r4, r5, pc}
 8012648:	b118      	cbz	r0, 8012652 <_fflush_r+0x1a>
 801264a:	6a03      	ldr	r3, [r0, #32]
 801264c:	b90b      	cbnz	r3, 8012652 <_fflush_r+0x1a>
 801264e:	f7fc ff6d 	bl	800f52c <__sinit>
 8012652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d0f3      	beq.n	8012642 <_fflush_r+0xa>
 801265a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801265c:	07d0      	lsls	r0, r2, #31
 801265e:	d404      	bmi.n	801266a <_fflush_r+0x32>
 8012660:	0599      	lsls	r1, r3, #22
 8012662:	d402      	bmi.n	801266a <_fflush_r+0x32>
 8012664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012666:	f7fd fa4e 	bl	800fb06 <__retarget_lock_acquire_recursive>
 801266a:	4628      	mov	r0, r5
 801266c:	4621      	mov	r1, r4
 801266e:	f7ff ff5f 	bl	8012530 <__sflush_r>
 8012672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012674:	07da      	lsls	r2, r3, #31
 8012676:	4605      	mov	r5, r0
 8012678:	d4e4      	bmi.n	8012644 <_fflush_r+0xc>
 801267a:	89a3      	ldrh	r3, [r4, #12]
 801267c:	059b      	lsls	r3, r3, #22
 801267e:	d4e1      	bmi.n	8012644 <_fflush_r+0xc>
 8012680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012682:	f7fd fa41 	bl	800fb08 <__retarget_lock_release_recursive>
 8012686:	e7dd      	b.n	8012644 <_fflush_r+0xc>

08012688 <__swhatbuf_r>:
 8012688:	b570      	push	{r4, r5, r6, lr}
 801268a:	460c      	mov	r4, r1
 801268c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012690:	2900      	cmp	r1, #0
 8012692:	b096      	sub	sp, #88	@ 0x58
 8012694:	4615      	mov	r5, r2
 8012696:	461e      	mov	r6, r3
 8012698:	da0d      	bge.n	80126b6 <__swhatbuf_r+0x2e>
 801269a:	89a3      	ldrh	r3, [r4, #12]
 801269c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80126a0:	f04f 0100 	mov.w	r1, #0
 80126a4:	bf14      	ite	ne
 80126a6:	2340      	movne	r3, #64	@ 0x40
 80126a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80126ac:	2000      	movs	r0, #0
 80126ae:	6031      	str	r1, [r6, #0]
 80126b0:	602b      	str	r3, [r5, #0]
 80126b2:	b016      	add	sp, #88	@ 0x58
 80126b4:	bd70      	pop	{r4, r5, r6, pc}
 80126b6:	466a      	mov	r2, sp
 80126b8:	f000 f8d6 	bl	8012868 <_fstat_r>
 80126bc:	2800      	cmp	r0, #0
 80126be:	dbec      	blt.n	801269a <__swhatbuf_r+0x12>
 80126c0:	9901      	ldr	r1, [sp, #4]
 80126c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80126c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80126ca:	4259      	negs	r1, r3
 80126cc:	4159      	adcs	r1, r3
 80126ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126d2:	e7eb      	b.n	80126ac <__swhatbuf_r+0x24>

080126d4 <__smakebuf_r>:
 80126d4:	898b      	ldrh	r3, [r1, #12]
 80126d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126d8:	079d      	lsls	r5, r3, #30
 80126da:	4606      	mov	r6, r0
 80126dc:	460c      	mov	r4, r1
 80126de:	d507      	bpl.n	80126f0 <__smakebuf_r+0x1c>
 80126e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	6123      	str	r3, [r4, #16]
 80126e8:	2301      	movs	r3, #1
 80126ea:	6163      	str	r3, [r4, #20]
 80126ec:	b003      	add	sp, #12
 80126ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f0:	ab01      	add	r3, sp, #4
 80126f2:	466a      	mov	r2, sp
 80126f4:	f7ff ffc8 	bl	8012688 <__swhatbuf_r>
 80126f8:	9f00      	ldr	r7, [sp, #0]
 80126fa:	4605      	mov	r5, r0
 80126fc:	4639      	mov	r1, r7
 80126fe:	4630      	mov	r0, r6
 8012700:	f7fb f946 	bl	800d990 <_malloc_r>
 8012704:	b948      	cbnz	r0, 801271a <__smakebuf_r+0x46>
 8012706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801270a:	059a      	lsls	r2, r3, #22
 801270c:	d4ee      	bmi.n	80126ec <__smakebuf_r+0x18>
 801270e:	f023 0303 	bic.w	r3, r3, #3
 8012712:	f043 0302 	orr.w	r3, r3, #2
 8012716:	81a3      	strh	r3, [r4, #12]
 8012718:	e7e2      	b.n	80126e0 <__smakebuf_r+0xc>
 801271a:	89a3      	ldrh	r3, [r4, #12]
 801271c:	6020      	str	r0, [r4, #0]
 801271e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012722:	81a3      	strh	r3, [r4, #12]
 8012724:	9b01      	ldr	r3, [sp, #4]
 8012726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801272a:	b15b      	cbz	r3, 8012744 <__smakebuf_r+0x70>
 801272c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012730:	4630      	mov	r0, r6
 8012732:	f000 f8ab 	bl	801288c <_isatty_r>
 8012736:	b128      	cbz	r0, 8012744 <__smakebuf_r+0x70>
 8012738:	89a3      	ldrh	r3, [r4, #12]
 801273a:	f023 0303 	bic.w	r3, r3, #3
 801273e:	f043 0301 	orr.w	r3, r3, #1
 8012742:	81a3      	strh	r3, [r4, #12]
 8012744:	89a3      	ldrh	r3, [r4, #12]
 8012746:	431d      	orrs	r5, r3
 8012748:	81a5      	strh	r5, [r4, #12]
 801274a:	e7cf      	b.n	80126ec <__smakebuf_r+0x18>

0801274c <__sccl>:
 801274c:	b570      	push	{r4, r5, r6, lr}
 801274e:	780b      	ldrb	r3, [r1, #0]
 8012750:	4604      	mov	r4, r0
 8012752:	2b5e      	cmp	r3, #94	@ 0x5e
 8012754:	bf0b      	itete	eq
 8012756:	784b      	ldrbeq	r3, [r1, #1]
 8012758:	1c4a      	addne	r2, r1, #1
 801275a:	1c8a      	addeq	r2, r1, #2
 801275c:	2100      	movne	r1, #0
 801275e:	bf08      	it	eq
 8012760:	2101      	moveq	r1, #1
 8012762:	3801      	subs	r0, #1
 8012764:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012768:	f800 1f01 	strb.w	r1, [r0, #1]!
 801276c:	42a8      	cmp	r0, r5
 801276e:	d1fb      	bne.n	8012768 <__sccl+0x1c>
 8012770:	b90b      	cbnz	r3, 8012776 <__sccl+0x2a>
 8012772:	1e50      	subs	r0, r2, #1
 8012774:	bd70      	pop	{r4, r5, r6, pc}
 8012776:	f081 0101 	eor.w	r1, r1, #1
 801277a:	54e1      	strb	r1, [r4, r3]
 801277c:	4610      	mov	r0, r2
 801277e:	4602      	mov	r2, r0
 8012780:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012784:	2d2d      	cmp	r5, #45	@ 0x2d
 8012786:	d005      	beq.n	8012794 <__sccl+0x48>
 8012788:	2d5d      	cmp	r5, #93	@ 0x5d
 801278a:	d016      	beq.n	80127ba <__sccl+0x6e>
 801278c:	2d00      	cmp	r5, #0
 801278e:	d0f1      	beq.n	8012774 <__sccl+0x28>
 8012790:	462b      	mov	r3, r5
 8012792:	e7f2      	b.n	801277a <__sccl+0x2e>
 8012794:	7846      	ldrb	r6, [r0, #1]
 8012796:	2e5d      	cmp	r6, #93	@ 0x5d
 8012798:	d0fa      	beq.n	8012790 <__sccl+0x44>
 801279a:	42b3      	cmp	r3, r6
 801279c:	dcf8      	bgt.n	8012790 <__sccl+0x44>
 801279e:	3002      	adds	r0, #2
 80127a0:	461a      	mov	r2, r3
 80127a2:	3201      	adds	r2, #1
 80127a4:	4296      	cmp	r6, r2
 80127a6:	54a1      	strb	r1, [r4, r2]
 80127a8:	dcfb      	bgt.n	80127a2 <__sccl+0x56>
 80127aa:	1af2      	subs	r2, r6, r3
 80127ac:	3a01      	subs	r2, #1
 80127ae:	1c5d      	adds	r5, r3, #1
 80127b0:	42b3      	cmp	r3, r6
 80127b2:	bfa8      	it	ge
 80127b4:	2200      	movge	r2, #0
 80127b6:	18ab      	adds	r3, r5, r2
 80127b8:	e7e1      	b.n	801277e <__sccl+0x32>
 80127ba:	4610      	mov	r0, r2
 80127bc:	e7da      	b.n	8012774 <__sccl+0x28>

080127be <__submore>:
 80127be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c2:	460c      	mov	r4, r1
 80127c4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80127c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127ca:	4299      	cmp	r1, r3
 80127cc:	d11d      	bne.n	801280a <__submore+0x4c>
 80127ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80127d2:	f7fb f8dd 	bl	800d990 <_malloc_r>
 80127d6:	b918      	cbnz	r0, 80127e0 <__submore+0x22>
 80127d8:	f04f 30ff 	mov.w	r0, #4294967295
 80127dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80127e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80127e6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80127ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80127ec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80127f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80127f4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80127f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80127fc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012800:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012804:	6020      	str	r0, [r4, #0]
 8012806:	2000      	movs	r0, #0
 8012808:	e7e8      	b.n	80127dc <__submore+0x1e>
 801280a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801280c:	0077      	lsls	r7, r6, #1
 801280e:	463a      	mov	r2, r7
 8012810:	f7fb f952 	bl	800dab8 <_realloc_r>
 8012814:	4605      	mov	r5, r0
 8012816:	2800      	cmp	r0, #0
 8012818:	d0de      	beq.n	80127d8 <__submore+0x1a>
 801281a:	eb00 0806 	add.w	r8, r0, r6
 801281e:	4601      	mov	r1, r0
 8012820:	4632      	mov	r2, r6
 8012822:	4640      	mov	r0, r8
 8012824:	f7fd f971 	bl	800fb0a <memcpy>
 8012828:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801282c:	f8c4 8000 	str.w	r8, [r4]
 8012830:	e7e9      	b.n	8012806 <__submore+0x48>

08012832 <memmove>:
 8012832:	4288      	cmp	r0, r1
 8012834:	b510      	push	{r4, lr}
 8012836:	eb01 0402 	add.w	r4, r1, r2
 801283a:	d902      	bls.n	8012842 <memmove+0x10>
 801283c:	4284      	cmp	r4, r0
 801283e:	4623      	mov	r3, r4
 8012840:	d807      	bhi.n	8012852 <memmove+0x20>
 8012842:	1e43      	subs	r3, r0, #1
 8012844:	42a1      	cmp	r1, r4
 8012846:	d008      	beq.n	801285a <memmove+0x28>
 8012848:	f811 2b01 	ldrb.w	r2, [r1], #1
 801284c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012850:	e7f8      	b.n	8012844 <memmove+0x12>
 8012852:	4402      	add	r2, r0
 8012854:	4601      	mov	r1, r0
 8012856:	428a      	cmp	r2, r1
 8012858:	d100      	bne.n	801285c <memmove+0x2a>
 801285a:	bd10      	pop	{r4, pc}
 801285c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012860:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012864:	e7f7      	b.n	8012856 <memmove+0x24>
	...

08012868 <_fstat_r>:
 8012868:	b538      	push	{r3, r4, r5, lr}
 801286a:	4d07      	ldr	r5, [pc, #28]	@ (8012888 <_fstat_r+0x20>)
 801286c:	2300      	movs	r3, #0
 801286e:	4604      	mov	r4, r0
 8012870:	4608      	mov	r0, r1
 8012872:	4611      	mov	r1, r2
 8012874:	602b      	str	r3, [r5, #0]
 8012876:	f7f4 fef5 	bl	8007664 <_fstat>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	d102      	bne.n	8012884 <_fstat_r+0x1c>
 801287e:	682b      	ldr	r3, [r5, #0]
 8012880:	b103      	cbz	r3, 8012884 <_fstat_r+0x1c>
 8012882:	6023      	str	r3, [r4, #0]
 8012884:	bd38      	pop	{r3, r4, r5, pc}
 8012886:	bf00      	nop
 8012888:	20000fe0 	.word	0x20000fe0

0801288c <_isatty_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d06      	ldr	r5, [pc, #24]	@ (80128a8 <_isatty_r+0x1c>)
 8012890:	2300      	movs	r3, #0
 8012892:	4604      	mov	r4, r0
 8012894:	4608      	mov	r0, r1
 8012896:	602b      	str	r3, [r5, #0]
 8012898:	f7f4 fef4 	bl	8007684 <_isatty>
 801289c:	1c43      	adds	r3, r0, #1
 801289e:	d102      	bne.n	80128a6 <_isatty_r+0x1a>
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	b103      	cbz	r3, 80128a6 <_isatty_r+0x1a>
 80128a4:	6023      	str	r3, [r4, #0]
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	20000fe0 	.word	0x20000fe0

080128ac <abort>:
 80128ac:	b508      	push	{r3, lr}
 80128ae:	2006      	movs	r0, #6
 80128b0:	f000 f8b0 	bl	8012a14 <raise>
 80128b4:	2001      	movs	r0, #1
 80128b6:	f7f4 fe85 	bl	80075c4 <_exit>

080128ba <_calloc_r>:
 80128ba:	b570      	push	{r4, r5, r6, lr}
 80128bc:	fba1 5402 	umull	r5, r4, r1, r2
 80128c0:	b93c      	cbnz	r4, 80128d2 <_calloc_r+0x18>
 80128c2:	4629      	mov	r1, r5
 80128c4:	f7fb f864 	bl	800d990 <_malloc_r>
 80128c8:	4606      	mov	r6, r0
 80128ca:	b928      	cbnz	r0, 80128d8 <_calloc_r+0x1e>
 80128cc:	2600      	movs	r6, #0
 80128ce:	4630      	mov	r0, r6
 80128d0:	bd70      	pop	{r4, r5, r6, pc}
 80128d2:	220c      	movs	r2, #12
 80128d4:	6002      	str	r2, [r0, #0]
 80128d6:	e7f9      	b.n	80128cc <_calloc_r+0x12>
 80128d8:	462a      	mov	r2, r5
 80128da:	4621      	mov	r1, r4
 80128dc:	f7fd f802 	bl	800f8e4 <memset>
 80128e0:	e7f5      	b.n	80128ce <_calloc_r+0x14>
	...

080128e4 <_strtoul_l.constprop.0>:
 80128e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128e8:	4e34      	ldr	r6, [pc, #208]	@ (80129bc <_strtoul_l.constprop.0+0xd8>)
 80128ea:	4686      	mov	lr, r0
 80128ec:	460d      	mov	r5, r1
 80128ee:	4628      	mov	r0, r5
 80128f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128f4:	5d37      	ldrb	r7, [r6, r4]
 80128f6:	f017 0708 	ands.w	r7, r7, #8
 80128fa:	d1f8      	bne.n	80128ee <_strtoul_l.constprop.0+0xa>
 80128fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80128fe:	d12f      	bne.n	8012960 <_strtoul_l.constprop.0+0x7c>
 8012900:	782c      	ldrb	r4, [r5, #0]
 8012902:	2701      	movs	r7, #1
 8012904:	1c85      	adds	r5, r0, #2
 8012906:	f033 0010 	bics.w	r0, r3, #16
 801290a:	d109      	bne.n	8012920 <_strtoul_l.constprop.0+0x3c>
 801290c:	2c30      	cmp	r4, #48	@ 0x30
 801290e:	d12c      	bne.n	801296a <_strtoul_l.constprop.0+0x86>
 8012910:	7828      	ldrb	r0, [r5, #0]
 8012912:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012916:	2858      	cmp	r0, #88	@ 0x58
 8012918:	d127      	bne.n	801296a <_strtoul_l.constprop.0+0x86>
 801291a:	786c      	ldrb	r4, [r5, #1]
 801291c:	2310      	movs	r3, #16
 801291e:	3502      	adds	r5, #2
 8012920:	f04f 38ff 	mov.w	r8, #4294967295
 8012924:	2600      	movs	r6, #0
 8012926:	fbb8 f8f3 	udiv	r8, r8, r3
 801292a:	fb03 f908 	mul.w	r9, r3, r8
 801292e:	ea6f 0909 	mvn.w	r9, r9
 8012932:	4630      	mov	r0, r6
 8012934:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012938:	f1bc 0f09 	cmp.w	ip, #9
 801293c:	d81c      	bhi.n	8012978 <_strtoul_l.constprop.0+0x94>
 801293e:	4664      	mov	r4, ip
 8012940:	42a3      	cmp	r3, r4
 8012942:	dd2a      	ble.n	801299a <_strtoul_l.constprop.0+0xb6>
 8012944:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012948:	d007      	beq.n	801295a <_strtoul_l.constprop.0+0x76>
 801294a:	4580      	cmp	r8, r0
 801294c:	d322      	bcc.n	8012994 <_strtoul_l.constprop.0+0xb0>
 801294e:	d101      	bne.n	8012954 <_strtoul_l.constprop.0+0x70>
 8012950:	45a1      	cmp	r9, r4
 8012952:	db1f      	blt.n	8012994 <_strtoul_l.constprop.0+0xb0>
 8012954:	fb00 4003 	mla	r0, r0, r3, r4
 8012958:	2601      	movs	r6, #1
 801295a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801295e:	e7e9      	b.n	8012934 <_strtoul_l.constprop.0+0x50>
 8012960:	2c2b      	cmp	r4, #43	@ 0x2b
 8012962:	bf04      	itt	eq
 8012964:	782c      	ldrbeq	r4, [r5, #0]
 8012966:	1c85      	addeq	r5, r0, #2
 8012968:	e7cd      	b.n	8012906 <_strtoul_l.constprop.0+0x22>
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1d8      	bne.n	8012920 <_strtoul_l.constprop.0+0x3c>
 801296e:	2c30      	cmp	r4, #48	@ 0x30
 8012970:	bf0c      	ite	eq
 8012972:	2308      	moveq	r3, #8
 8012974:	230a      	movne	r3, #10
 8012976:	e7d3      	b.n	8012920 <_strtoul_l.constprop.0+0x3c>
 8012978:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801297c:	f1bc 0f19 	cmp.w	ip, #25
 8012980:	d801      	bhi.n	8012986 <_strtoul_l.constprop.0+0xa2>
 8012982:	3c37      	subs	r4, #55	@ 0x37
 8012984:	e7dc      	b.n	8012940 <_strtoul_l.constprop.0+0x5c>
 8012986:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801298a:	f1bc 0f19 	cmp.w	ip, #25
 801298e:	d804      	bhi.n	801299a <_strtoul_l.constprop.0+0xb6>
 8012990:	3c57      	subs	r4, #87	@ 0x57
 8012992:	e7d5      	b.n	8012940 <_strtoul_l.constprop.0+0x5c>
 8012994:	f04f 36ff 	mov.w	r6, #4294967295
 8012998:	e7df      	b.n	801295a <_strtoul_l.constprop.0+0x76>
 801299a:	1c73      	adds	r3, r6, #1
 801299c:	d106      	bne.n	80129ac <_strtoul_l.constprop.0+0xc8>
 801299e:	2322      	movs	r3, #34	@ 0x22
 80129a0:	f8ce 3000 	str.w	r3, [lr]
 80129a4:	4630      	mov	r0, r6
 80129a6:	b932      	cbnz	r2, 80129b6 <_strtoul_l.constprop.0+0xd2>
 80129a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129ac:	b107      	cbz	r7, 80129b0 <_strtoul_l.constprop.0+0xcc>
 80129ae:	4240      	negs	r0, r0
 80129b0:	2a00      	cmp	r2, #0
 80129b2:	d0f9      	beq.n	80129a8 <_strtoul_l.constprop.0+0xc4>
 80129b4:	b106      	cbz	r6, 80129b8 <_strtoul_l.constprop.0+0xd4>
 80129b6:	1e69      	subs	r1, r5, #1
 80129b8:	6011      	str	r1, [r2, #0]
 80129ba:	e7f5      	b.n	80129a8 <_strtoul_l.constprop.0+0xc4>
 80129bc:	08015b41 	.word	0x08015b41

080129c0 <_strtoul_r>:
 80129c0:	f7ff bf90 	b.w	80128e4 <_strtoul_l.constprop.0>

080129c4 <_raise_r>:
 80129c4:	291f      	cmp	r1, #31
 80129c6:	b538      	push	{r3, r4, r5, lr}
 80129c8:	4605      	mov	r5, r0
 80129ca:	460c      	mov	r4, r1
 80129cc:	d904      	bls.n	80129d8 <_raise_r+0x14>
 80129ce:	2316      	movs	r3, #22
 80129d0:	6003      	str	r3, [r0, #0]
 80129d2:	f04f 30ff 	mov.w	r0, #4294967295
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129da:	b112      	cbz	r2, 80129e2 <_raise_r+0x1e>
 80129dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129e0:	b94b      	cbnz	r3, 80129f6 <_raise_r+0x32>
 80129e2:	4628      	mov	r0, r5
 80129e4:	f000 f830 	bl	8012a48 <_getpid_r>
 80129e8:	4622      	mov	r2, r4
 80129ea:	4601      	mov	r1, r0
 80129ec:	4628      	mov	r0, r5
 80129ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f2:	f000 b817 	b.w	8012a24 <_kill_r>
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d00a      	beq.n	8012a10 <_raise_r+0x4c>
 80129fa:	1c59      	adds	r1, r3, #1
 80129fc:	d103      	bne.n	8012a06 <_raise_r+0x42>
 80129fe:	2316      	movs	r3, #22
 8012a00:	6003      	str	r3, [r0, #0]
 8012a02:	2001      	movs	r0, #1
 8012a04:	e7e7      	b.n	80129d6 <_raise_r+0x12>
 8012a06:	2100      	movs	r1, #0
 8012a08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4798      	blx	r3
 8012a10:	2000      	movs	r0, #0
 8012a12:	e7e0      	b.n	80129d6 <_raise_r+0x12>

08012a14 <raise>:
 8012a14:	4b02      	ldr	r3, [pc, #8]	@ (8012a20 <raise+0xc>)
 8012a16:	4601      	mov	r1, r0
 8012a18:	6818      	ldr	r0, [r3, #0]
 8012a1a:	f7ff bfd3 	b.w	80129c4 <_raise_r>
 8012a1e:	bf00      	nop
 8012a20:	20000194 	.word	0x20000194

08012a24 <_kill_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	4d07      	ldr	r5, [pc, #28]	@ (8012a44 <_kill_r+0x20>)
 8012a28:	2300      	movs	r3, #0
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	4608      	mov	r0, r1
 8012a2e:	4611      	mov	r1, r2
 8012a30:	602b      	str	r3, [r5, #0]
 8012a32:	f7f4 fdb7 	bl	80075a4 <_kill>
 8012a36:	1c43      	adds	r3, r0, #1
 8012a38:	d102      	bne.n	8012a40 <_kill_r+0x1c>
 8012a3a:	682b      	ldr	r3, [r5, #0]
 8012a3c:	b103      	cbz	r3, 8012a40 <_kill_r+0x1c>
 8012a3e:	6023      	str	r3, [r4, #0]
 8012a40:	bd38      	pop	{r3, r4, r5, pc}
 8012a42:	bf00      	nop
 8012a44:	20000fe0 	.word	0x20000fe0

08012a48 <_getpid_r>:
 8012a48:	f7f4 bda4 	b.w	8007594 <_getpid>

08012a4c <asin>:
 8012a4c:	b538      	push	{r3, r4, r5, lr}
 8012a4e:	ed2d 8b02 	vpush	{d8}
 8012a52:	ec55 4b10 	vmov	r4, r5, d0
 8012a56:	f000 fc5b 	bl	8013310 <__ieee754_asin>
 8012a5a:	4622      	mov	r2, r4
 8012a5c:	462b      	mov	r3, r5
 8012a5e:	4620      	mov	r0, r4
 8012a60:	4629      	mov	r1, r5
 8012a62:	eeb0 8a40 	vmov.f32	s16, s0
 8012a66:	eef0 8a60 	vmov.f32	s17, s1
 8012a6a:	f7ee f86f 	bl	8000b4c <__aeabi_dcmpun>
 8012a6e:	b9a8      	cbnz	r0, 8012a9c <asin+0x50>
 8012a70:	ec45 4b10 	vmov	d0, r4, r5
 8012a74:	f000 f940 	bl	8012cf8 <fabs>
 8012a78:	4b0c      	ldr	r3, [pc, #48]	@ (8012aac <asin+0x60>)
 8012a7a:	ec51 0b10 	vmov	r0, r1, d0
 8012a7e:	2200      	movs	r2, #0
 8012a80:	f7ee f85a 	bl	8000b38 <__aeabi_dcmpgt>
 8012a84:	b150      	cbz	r0, 8012a9c <asin+0x50>
 8012a86:	f7fd f813 	bl	800fab0 <__errno>
 8012a8a:	ecbd 8b02 	vpop	{d8}
 8012a8e:	2321      	movs	r3, #33	@ 0x21
 8012a90:	6003      	str	r3, [r0, #0]
 8012a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a96:	4806      	ldr	r0, [pc, #24]	@ (8012ab0 <asin+0x64>)
 8012a98:	f7fd b846 	b.w	800fb28 <nan>
 8012a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012aa0:	eef0 0a68 	vmov.f32	s1, s17
 8012aa4:	ecbd 8b02 	vpop	{d8}
 8012aa8:	bd38      	pop	{r3, r4, r5, pc}
 8012aaa:	bf00      	nop
 8012aac:	3ff00000 	.word	0x3ff00000
 8012ab0:	08015d2c 	.word	0x08015d2c

08012ab4 <atan2>:
 8012ab4:	f000 be30 	b.w	8013718 <__ieee754_atan2>

08012ab8 <fmod>:
 8012ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aba:	ed2d 8b02 	vpush	{d8}
 8012abe:	ec57 6b10 	vmov	r6, r7, d0
 8012ac2:	ec55 4b11 	vmov	r4, r5, d1
 8012ac6:	f000 feed 	bl	80138a4 <__ieee754_fmod>
 8012aca:	4622      	mov	r2, r4
 8012acc:	462b      	mov	r3, r5
 8012ace:	4630      	mov	r0, r6
 8012ad0:	4639      	mov	r1, r7
 8012ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8012ad6:	eef0 8a60 	vmov.f32	s17, s1
 8012ada:	f7ee f837 	bl	8000b4c <__aeabi_dcmpun>
 8012ade:	b990      	cbnz	r0, 8012b06 <fmod+0x4e>
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	f7ed fffe 	bl	8000ae8 <__aeabi_dcmpeq>
 8012aec:	b158      	cbz	r0, 8012b06 <fmod+0x4e>
 8012aee:	f7fc ffdf 	bl	800fab0 <__errno>
 8012af2:	2321      	movs	r3, #33	@ 0x21
 8012af4:	6003      	str	r3, [r0, #0]
 8012af6:	2200      	movs	r2, #0
 8012af8:	2300      	movs	r3, #0
 8012afa:	4610      	mov	r0, r2
 8012afc:	4619      	mov	r1, r3
 8012afe:	f7ed feb5 	bl	800086c <__aeabi_ddiv>
 8012b02:	ec41 0b18 	vmov	d8, r0, r1
 8012b06:	eeb0 0a48 	vmov.f32	s0, s16
 8012b0a:	eef0 0a68 	vmov.f32	s1, s17
 8012b0e:	ecbd 8b02 	vpop	{d8}
 8012b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b14 <pow>:
 8012b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b16:	ed2d 8b02 	vpush	{d8}
 8012b1a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b1e:	eef0 8a60 	vmov.f32	s17, s1
 8012b22:	ec55 4b11 	vmov	r4, r5, d1
 8012b26:	f000 ffc7 	bl	8013ab8 <__ieee754_pow>
 8012b2a:	4622      	mov	r2, r4
 8012b2c:	462b      	mov	r3, r5
 8012b2e:	4620      	mov	r0, r4
 8012b30:	4629      	mov	r1, r5
 8012b32:	ec57 6b10 	vmov	r6, r7, d0
 8012b36:	f7ee f809 	bl	8000b4c <__aeabi_dcmpun>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	d13b      	bne.n	8012bb6 <pow+0xa2>
 8012b3e:	ec51 0b18 	vmov	r0, r1, d8
 8012b42:	2200      	movs	r2, #0
 8012b44:	2300      	movs	r3, #0
 8012b46:	f7ed ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b4a:	b1b8      	cbz	r0, 8012b7c <pow+0x68>
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	2300      	movs	r3, #0
 8012b50:	4620      	mov	r0, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	f7ed ffc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d146      	bne.n	8012bea <pow+0xd6>
 8012b5c:	ec45 4b10 	vmov	d0, r4, r5
 8012b60:	f000 f926 	bl	8012db0 <finite>
 8012b64:	b338      	cbz	r0, 8012bb6 <pow+0xa2>
 8012b66:	2200      	movs	r2, #0
 8012b68:	2300      	movs	r3, #0
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	f7ed ffc5 	bl	8000afc <__aeabi_dcmplt>
 8012b72:	b300      	cbz	r0, 8012bb6 <pow+0xa2>
 8012b74:	f7fc ff9c 	bl	800fab0 <__errno>
 8012b78:	2322      	movs	r3, #34	@ 0x22
 8012b7a:	e01b      	b.n	8012bb4 <pow+0xa0>
 8012b7c:	ec47 6b10 	vmov	d0, r6, r7
 8012b80:	f000 f916 	bl	8012db0 <finite>
 8012b84:	b9e0      	cbnz	r0, 8012bc0 <pow+0xac>
 8012b86:	eeb0 0a48 	vmov.f32	s0, s16
 8012b8a:	eef0 0a68 	vmov.f32	s1, s17
 8012b8e:	f000 f90f 	bl	8012db0 <finite>
 8012b92:	b1a8      	cbz	r0, 8012bc0 <pow+0xac>
 8012b94:	ec45 4b10 	vmov	d0, r4, r5
 8012b98:	f000 f90a 	bl	8012db0 <finite>
 8012b9c:	b180      	cbz	r0, 8012bc0 <pow+0xac>
 8012b9e:	4632      	mov	r2, r6
 8012ba0:	463b      	mov	r3, r7
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	4639      	mov	r1, r7
 8012ba6:	f7ed ffd1 	bl	8000b4c <__aeabi_dcmpun>
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d0e2      	beq.n	8012b74 <pow+0x60>
 8012bae:	f7fc ff7f 	bl	800fab0 <__errno>
 8012bb2:	2321      	movs	r3, #33	@ 0x21
 8012bb4:	6003      	str	r3, [r0, #0]
 8012bb6:	ecbd 8b02 	vpop	{d8}
 8012bba:	ec47 6b10 	vmov	d0, r6, r7
 8012bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	4639      	mov	r1, r7
 8012bc8:	f7ed ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d0f2      	beq.n	8012bb6 <pow+0xa2>
 8012bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8012bd4:	eef0 0a68 	vmov.f32	s1, s17
 8012bd8:	f000 f8ea 	bl	8012db0 <finite>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d0ea      	beq.n	8012bb6 <pow+0xa2>
 8012be0:	ec45 4b10 	vmov	d0, r4, r5
 8012be4:	f000 f8e4 	bl	8012db0 <finite>
 8012be8:	e7c3      	b.n	8012b72 <pow+0x5e>
 8012bea:	4f01      	ldr	r7, [pc, #4]	@ (8012bf0 <pow+0xdc>)
 8012bec:	2600      	movs	r6, #0
 8012bee:	e7e2      	b.n	8012bb6 <pow+0xa2>
 8012bf0:	3ff00000 	.word	0x3ff00000

08012bf4 <sqrt>:
 8012bf4:	b538      	push	{r3, r4, r5, lr}
 8012bf6:	ed2d 8b02 	vpush	{d8}
 8012bfa:	ec55 4b10 	vmov	r4, r5, d0
 8012bfe:	f000 f8e3 	bl	8012dc8 <__ieee754_sqrt>
 8012c02:	4622      	mov	r2, r4
 8012c04:	462b      	mov	r3, r5
 8012c06:	4620      	mov	r0, r4
 8012c08:	4629      	mov	r1, r5
 8012c0a:	eeb0 8a40 	vmov.f32	s16, s0
 8012c0e:	eef0 8a60 	vmov.f32	s17, s1
 8012c12:	f7ed ff9b 	bl	8000b4c <__aeabi_dcmpun>
 8012c16:	b990      	cbnz	r0, 8012c3e <sqrt+0x4a>
 8012c18:	2200      	movs	r2, #0
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f7ed ff6c 	bl	8000afc <__aeabi_dcmplt>
 8012c24:	b158      	cbz	r0, 8012c3e <sqrt+0x4a>
 8012c26:	f7fc ff43 	bl	800fab0 <__errno>
 8012c2a:	2321      	movs	r3, #33	@ 0x21
 8012c2c:	6003      	str	r3, [r0, #0]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	2300      	movs	r3, #0
 8012c32:	4610      	mov	r0, r2
 8012c34:	4619      	mov	r1, r3
 8012c36:	f7ed fe19 	bl	800086c <__aeabi_ddiv>
 8012c3a:	ec41 0b18 	vmov	d8, r0, r1
 8012c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8012c42:	eef0 0a68 	vmov.f32	s1, s17
 8012c46:	ecbd 8b02 	vpop	{d8}
 8012c4a:	bd38      	pop	{r3, r4, r5, pc}
 8012c4c:	0000      	movs	r0, r0
	...

08012c50 <cos>:
 8012c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c52:	ec53 2b10 	vmov	r2, r3, d0
 8012c56:	4826      	ldr	r0, [pc, #152]	@ (8012cf0 <cos+0xa0>)
 8012c58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012c5c:	4281      	cmp	r1, r0
 8012c5e:	d806      	bhi.n	8012c6e <cos+0x1e>
 8012c60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012ce8 <cos+0x98>
 8012c64:	b005      	add	sp, #20
 8012c66:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c6a:	f000 b9cd 	b.w	8013008 <__kernel_cos>
 8012c6e:	4821      	ldr	r0, [pc, #132]	@ (8012cf4 <cos+0xa4>)
 8012c70:	4281      	cmp	r1, r0
 8012c72:	d908      	bls.n	8012c86 <cos+0x36>
 8012c74:	4610      	mov	r0, r2
 8012c76:	4619      	mov	r1, r3
 8012c78:	f7ed fb16 	bl	80002a8 <__aeabi_dsub>
 8012c7c:	ec41 0b10 	vmov	d0, r0, r1
 8012c80:	b005      	add	sp, #20
 8012c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c86:	4668      	mov	r0, sp
 8012c88:	f001 fc5a 	bl	8014540 <__ieee754_rem_pio2>
 8012c8c:	f000 0003 	and.w	r0, r0, #3
 8012c90:	2801      	cmp	r0, #1
 8012c92:	d00b      	beq.n	8012cac <cos+0x5c>
 8012c94:	2802      	cmp	r0, #2
 8012c96:	d015      	beq.n	8012cc4 <cos+0x74>
 8012c98:	b9d8      	cbnz	r0, 8012cd2 <cos+0x82>
 8012c9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c9e:	ed9d 0b00 	vldr	d0, [sp]
 8012ca2:	f000 f9b1 	bl	8013008 <__kernel_cos>
 8012ca6:	ec51 0b10 	vmov	r0, r1, d0
 8012caa:	e7e7      	b.n	8012c7c <cos+0x2c>
 8012cac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cb0:	ed9d 0b00 	vldr	d0, [sp]
 8012cb4:	f000 fa70 	bl	8013198 <__kernel_sin>
 8012cb8:	ec53 2b10 	vmov	r2, r3, d0
 8012cbc:	4610      	mov	r0, r2
 8012cbe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012cc2:	e7db      	b.n	8012c7c <cos+0x2c>
 8012cc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cc8:	ed9d 0b00 	vldr	d0, [sp]
 8012ccc:	f000 f99c 	bl	8013008 <__kernel_cos>
 8012cd0:	e7f2      	b.n	8012cb8 <cos+0x68>
 8012cd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cd6:	ed9d 0b00 	vldr	d0, [sp]
 8012cda:	2001      	movs	r0, #1
 8012cdc:	f000 fa5c 	bl	8013198 <__kernel_sin>
 8012ce0:	e7e1      	b.n	8012ca6 <cos+0x56>
 8012ce2:	bf00      	nop
 8012ce4:	f3af 8000 	nop.w
	...
 8012cf0:	3fe921fb 	.word	0x3fe921fb
 8012cf4:	7fefffff 	.word	0x7fefffff

08012cf8 <fabs>:
 8012cf8:	ec51 0b10 	vmov	r0, r1, d0
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012d02:	ec43 2b10 	vmov	d0, r2, r3
 8012d06:	4770      	bx	lr

08012d08 <sin>:
 8012d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d0a:	ec53 2b10 	vmov	r2, r3, d0
 8012d0e:	4826      	ldr	r0, [pc, #152]	@ (8012da8 <sin+0xa0>)
 8012d10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012d14:	4281      	cmp	r1, r0
 8012d16:	d807      	bhi.n	8012d28 <sin+0x20>
 8012d18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012da0 <sin+0x98>
 8012d1c:	2000      	movs	r0, #0
 8012d1e:	b005      	add	sp, #20
 8012d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d24:	f000 ba38 	b.w	8013198 <__kernel_sin>
 8012d28:	4820      	ldr	r0, [pc, #128]	@ (8012dac <sin+0xa4>)
 8012d2a:	4281      	cmp	r1, r0
 8012d2c:	d908      	bls.n	8012d40 <sin+0x38>
 8012d2e:	4610      	mov	r0, r2
 8012d30:	4619      	mov	r1, r3
 8012d32:	f7ed fab9 	bl	80002a8 <__aeabi_dsub>
 8012d36:	ec41 0b10 	vmov	d0, r0, r1
 8012d3a:	b005      	add	sp, #20
 8012d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d40:	4668      	mov	r0, sp
 8012d42:	f001 fbfd 	bl	8014540 <__ieee754_rem_pio2>
 8012d46:	f000 0003 	and.w	r0, r0, #3
 8012d4a:	2801      	cmp	r0, #1
 8012d4c:	d00c      	beq.n	8012d68 <sin+0x60>
 8012d4e:	2802      	cmp	r0, #2
 8012d50:	d011      	beq.n	8012d76 <sin+0x6e>
 8012d52:	b9e8      	cbnz	r0, 8012d90 <sin+0x88>
 8012d54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d58:	ed9d 0b00 	vldr	d0, [sp]
 8012d5c:	2001      	movs	r0, #1
 8012d5e:	f000 fa1b 	bl	8013198 <__kernel_sin>
 8012d62:	ec51 0b10 	vmov	r0, r1, d0
 8012d66:	e7e6      	b.n	8012d36 <sin+0x2e>
 8012d68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d6c:	ed9d 0b00 	vldr	d0, [sp]
 8012d70:	f000 f94a 	bl	8013008 <__kernel_cos>
 8012d74:	e7f5      	b.n	8012d62 <sin+0x5a>
 8012d76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d7a:	ed9d 0b00 	vldr	d0, [sp]
 8012d7e:	2001      	movs	r0, #1
 8012d80:	f000 fa0a 	bl	8013198 <__kernel_sin>
 8012d84:	ec53 2b10 	vmov	r2, r3, d0
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012d8e:	e7d2      	b.n	8012d36 <sin+0x2e>
 8012d90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d94:	ed9d 0b00 	vldr	d0, [sp]
 8012d98:	f000 f936 	bl	8013008 <__kernel_cos>
 8012d9c:	e7f2      	b.n	8012d84 <sin+0x7c>
 8012d9e:	bf00      	nop
	...
 8012da8:	3fe921fb 	.word	0x3fe921fb
 8012dac:	7fefffff 	.word	0x7fefffff

08012db0 <finite>:
 8012db0:	b082      	sub	sp, #8
 8012db2:	ed8d 0b00 	vstr	d0, [sp]
 8012db6:	9801      	ldr	r0, [sp, #4]
 8012db8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012dbc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012dc0:	0fc0      	lsrs	r0, r0, #31
 8012dc2:	b002      	add	sp, #8
 8012dc4:	4770      	bx	lr
	...

08012dc8 <__ieee754_sqrt>:
 8012dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dcc:	4a68      	ldr	r2, [pc, #416]	@ (8012f70 <__ieee754_sqrt+0x1a8>)
 8012dce:	ec55 4b10 	vmov	r4, r5, d0
 8012dd2:	43aa      	bics	r2, r5
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	d110      	bne.n	8012dfc <__ieee754_sqrt+0x34>
 8012dda:	4622      	mov	r2, r4
 8012ddc:	4620      	mov	r0, r4
 8012dde:	4629      	mov	r1, r5
 8012de0:	f7ed fc1a 	bl	8000618 <__aeabi_dmul>
 8012de4:	4602      	mov	r2, r0
 8012de6:	460b      	mov	r3, r1
 8012de8:	4620      	mov	r0, r4
 8012dea:	4629      	mov	r1, r5
 8012dec:	f7ed fa5e 	bl	80002ac <__adddf3>
 8012df0:	4604      	mov	r4, r0
 8012df2:	460d      	mov	r5, r1
 8012df4:	ec45 4b10 	vmov	d0, r4, r5
 8012df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfc:	2d00      	cmp	r5, #0
 8012dfe:	dc0e      	bgt.n	8012e1e <__ieee754_sqrt+0x56>
 8012e00:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012e04:	4322      	orrs	r2, r4
 8012e06:	d0f5      	beq.n	8012df4 <__ieee754_sqrt+0x2c>
 8012e08:	b19d      	cbz	r5, 8012e32 <__ieee754_sqrt+0x6a>
 8012e0a:	4622      	mov	r2, r4
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	4629      	mov	r1, r5
 8012e10:	f7ed fa4a 	bl	80002a8 <__aeabi_dsub>
 8012e14:	4602      	mov	r2, r0
 8012e16:	460b      	mov	r3, r1
 8012e18:	f7ed fd28 	bl	800086c <__aeabi_ddiv>
 8012e1c:	e7e8      	b.n	8012df0 <__ieee754_sqrt+0x28>
 8012e1e:	152a      	asrs	r2, r5, #20
 8012e20:	d115      	bne.n	8012e4e <__ieee754_sqrt+0x86>
 8012e22:	2000      	movs	r0, #0
 8012e24:	e009      	b.n	8012e3a <__ieee754_sqrt+0x72>
 8012e26:	0acb      	lsrs	r3, r1, #11
 8012e28:	3a15      	subs	r2, #21
 8012e2a:	0549      	lsls	r1, r1, #21
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d0fa      	beq.n	8012e26 <__ieee754_sqrt+0x5e>
 8012e30:	e7f7      	b.n	8012e22 <__ieee754_sqrt+0x5a>
 8012e32:	462a      	mov	r2, r5
 8012e34:	e7fa      	b.n	8012e2c <__ieee754_sqrt+0x64>
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	3001      	adds	r0, #1
 8012e3a:	02dc      	lsls	r4, r3, #11
 8012e3c:	d5fb      	bpl.n	8012e36 <__ieee754_sqrt+0x6e>
 8012e3e:	1e44      	subs	r4, r0, #1
 8012e40:	1b12      	subs	r2, r2, r4
 8012e42:	f1c0 0420 	rsb	r4, r0, #32
 8012e46:	fa21 f404 	lsr.w	r4, r1, r4
 8012e4a:	4323      	orrs	r3, r4
 8012e4c:	4081      	lsls	r1, r0
 8012e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e52:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e5a:	07d2      	lsls	r2, r2, #31
 8012e5c:	bf5c      	itt	pl
 8012e5e:	005b      	lslpl	r3, r3, #1
 8012e60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012e64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012e68:	bf58      	it	pl
 8012e6a:	0049      	lslpl	r1, r1, #1
 8012e6c:	2600      	movs	r6, #0
 8012e6e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012e72:	106d      	asrs	r5, r5, #1
 8012e74:	0049      	lsls	r1, r1, #1
 8012e76:	2016      	movs	r0, #22
 8012e78:	4632      	mov	r2, r6
 8012e7a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012e7e:	1917      	adds	r7, r2, r4
 8012e80:	429f      	cmp	r7, r3
 8012e82:	bfde      	ittt	le
 8012e84:	193a      	addle	r2, r7, r4
 8012e86:	1bdb      	suble	r3, r3, r7
 8012e88:	1936      	addle	r6, r6, r4
 8012e8a:	0fcf      	lsrs	r7, r1, #31
 8012e8c:	3801      	subs	r0, #1
 8012e8e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012e92:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012e9a:	d1f0      	bne.n	8012e7e <__ieee754_sqrt+0xb6>
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	2720      	movs	r7, #32
 8012ea0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	eb00 0e0c 	add.w	lr, r0, ip
 8012eaa:	db02      	blt.n	8012eb2 <__ieee754_sqrt+0xea>
 8012eac:	d113      	bne.n	8012ed6 <__ieee754_sqrt+0x10e>
 8012eae:	458e      	cmp	lr, r1
 8012eb0:	d811      	bhi.n	8012ed6 <__ieee754_sqrt+0x10e>
 8012eb2:	f1be 0f00 	cmp.w	lr, #0
 8012eb6:	eb0e 000c 	add.w	r0, lr, ip
 8012eba:	da42      	bge.n	8012f42 <__ieee754_sqrt+0x17a>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	db40      	blt.n	8012f42 <__ieee754_sqrt+0x17a>
 8012ec0:	f102 0801 	add.w	r8, r2, #1
 8012ec4:	1a9b      	subs	r3, r3, r2
 8012ec6:	458e      	cmp	lr, r1
 8012ec8:	bf88      	it	hi
 8012eca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012ece:	eba1 010e 	sub.w	r1, r1, lr
 8012ed2:	4464      	add	r4, ip
 8012ed4:	4642      	mov	r2, r8
 8012ed6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012eda:	3f01      	subs	r7, #1
 8012edc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012ee0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ee4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012ee8:	d1dc      	bne.n	8012ea4 <__ieee754_sqrt+0xdc>
 8012eea:	4319      	orrs	r1, r3
 8012eec:	d01b      	beq.n	8012f26 <__ieee754_sqrt+0x15e>
 8012eee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012f74 <__ieee754_sqrt+0x1ac>
 8012ef2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012f78 <__ieee754_sqrt+0x1b0>
 8012ef6:	e9da 0100 	ldrd	r0, r1, [sl]
 8012efa:	e9db 2300 	ldrd	r2, r3, [fp]
 8012efe:	f7ed f9d3 	bl	80002a8 <__aeabi_dsub>
 8012f02:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f06:	4602      	mov	r2, r0
 8012f08:	460b      	mov	r3, r1
 8012f0a:	4640      	mov	r0, r8
 8012f0c:	4649      	mov	r1, r9
 8012f0e:	f7ed fdff 	bl	8000b10 <__aeabi_dcmple>
 8012f12:	b140      	cbz	r0, 8012f26 <__ieee754_sqrt+0x15e>
 8012f14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012f18:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f20:	d111      	bne.n	8012f46 <__ieee754_sqrt+0x17e>
 8012f22:	3601      	adds	r6, #1
 8012f24:	463c      	mov	r4, r7
 8012f26:	1072      	asrs	r2, r6, #1
 8012f28:	0863      	lsrs	r3, r4, #1
 8012f2a:	07f1      	lsls	r1, r6, #31
 8012f2c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012f30:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012f34:	bf48      	it	mi
 8012f36:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012f3a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012f3e:	4618      	mov	r0, r3
 8012f40:	e756      	b.n	8012df0 <__ieee754_sqrt+0x28>
 8012f42:	4690      	mov	r8, r2
 8012f44:	e7be      	b.n	8012ec4 <__ieee754_sqrt+0xfc>
 8012f46:	f7ed f9b1 	bl	80002ac <__adddf3>
 8012f4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f4e:	4602      	mov	r2, r0
 8012f50:	460b      	mov	r3, r1
 8012f52:	4640      	mov	r0, r8
 8012f54:	4649      	mov	r1, r9
 8012f56:	f7ed fdd1 	bl	8000afc <__aeabi_dcmplt>
 8012f5a:	b120      	cbz	r0, 8012f66 <__ieee754_sqrt+0x19e>
 8012f5c:	1ca0      	adds	r0, r4, #2
 8012f5e:	bf08      	it	eq
 8012f60:	3601      	addeq	r6, #1
 8012f62:	3402      	adds	r4, #2
 8012f64:	e7df      	b.n	8012f26 <__ieee754_sqrt+0x15e>
 8012f66:	1c63      	adds	r3, r4, #1
 8012f68:	f023 0401 	bic.w	r4, r3, #1
 8012f6c:	e7db      	b.n	8012f26 <__ieee754_sqrt+0x15e>
 8012f6e:	bf00      	nop
 8012f70:	7ff00000 	.word	0x7ff00000
 8012f74:	200001f0 	.word	0x200001f0
 8012f78:	200001e8 	.word	0x200001e8

08012f7c <round>:
 8012f7c:	ec51 0b10 	vmov	r0, r1, d0
 8012f80:	b570      	push	{r4, r5, r6, lr}
 8012f82:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012f86:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8012f8a:	2a13      	cmp	r2, #19
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	4605      	mov	r5, r0
 8012f90:	dc1b      	bgt.n	8012fca <round+0x4e>
 8012f92:	2a00      	cmp	r2, #0
 8012f94:	da0b      	bge.n	8012fae <round+0x32>
 8012f96:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012f9a:	3201      	adds	r2, #1
 8012f9c:	bf04      	itt	eq
 8012f9e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8012fa2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4610      	mov	r0, r2
 8012fac:	e015      	b.n	8012fda <round+0x5e>
 8012fae:	4c15      	ldr	r4, [pc, #84]	@ (8013004 <round+0x88>)
 8012fb0:	4114      	asrs	r4, r2
 8012fb2:	ea04 0601 	and.w	r6, r4, r1
 8012fb6:	4306      	orrs	r6, r0
 8012fb8:	d00f      	beq.n	8012fda <round+0x5e>
 8012fba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8012fbe:	fa41 f202 	asr.w	r2, r1, r2
 8012fc2:	4413      	add	r3, r2
 8012fc4:	ea23 0304 	bic.w	r3, r3, r4
 8012fc8:	e7ed      	b.n	8012fa6 <round+0x2a>
 8012fca:	2a33      	cmp	r2, #51	@ 0x33
 8012fcc:	dd08      	ble.n	8012fe0 <round+0x64>
 8012fce:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8012fd2:	d102      	bne.n	8012fda <round+0x5e>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	f7ed f969 	bl	80002ac <__adddf3>
 8012fda:	ec41 0b10 	vmov	d0, r0, r1
 8012fde:	bd70      	pop	{r4, r5, r6, pc}
 8012fe0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8012fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8012fe8:	40f4      	lsrs	r4, r6
 8012fea:	4204      	tst	r4, r0
 8012fec:	d0f5      	beq.n	8012fda <round+0x5e>
 8012fee:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	408a      	lsls	r2, r1
 8012ff6:	1952      	adds	r2, r2, r5
 8012ff8:	bf28      	it	cs
 8012ffa:	3301      	addcs	r3, #1
 8012ffc:	ea22 0204 	bic.w	r2, r2, r4
 8013000:	e7d2      	b.n	8012fa8 <round+0x2c>
 8013002:	bf00      	nop
 8013004:	000fffff 	.word	0x000fffff

08013008 <__kernel_cos>:
 8013008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	ec57 6b10 	vmov	r6, r7, d0
 8013010:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013014:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013018:	ed8d 1b00 	vstr	d1, [sp]
 801301c:	d206      	bcs.n	801302c <__kernel_cos+0x24>
 801301e:	4630      	mov	r0, r6
 8013020:	4639      	mov	r1, r7
 8013022:	f7ed fda9 	bl	8000b78 <__aeabi_d2iz>
 8013026:	2800      	cmp	r0, #0
 8013028:	f000 8088 	beq.w	801313c <__kernel_cos+0x134>
 801302c:	4632      	mov	r2, r6
 801302e:	463b      	mov	r3, r7
 8013030:	4630      	mov	r0, r6
 8013032:	4639      	mov	r1, r7
 8013034:	f7ed faf0 	bl	8000618 <__aeabi_dmul>
 8013038:	4b51      	ldr	r3, [pc, #324]	@ (8013180 <__kernel_cos+0x178>)
 801303a:	2200      	movs	r2, #0
 801303c:	4604      	mov	r4, r0
 801303e:	460d      	mov	r5, r1
 8013040:	f7ed faea 	bl	8000618 <__aeabi_dmul>
 8013044:	a340      	add	r3, pc, #256	@ (adr r3, 8013148 <__kernel_cos+0x140>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	4682      	mov	sl, r0
 801304c:	468b      	mov	fp, r1
 801304e:	4620      	mov	r0, r4
 8013050:	4629      	mov	r1, r5
 8013052:	f7ed fae1 	bl	8000618 <__aeabi_dmul>
 8013056:	a33e      	add	r3, pc, #248	@ (adr r3, 8013150 <__kernel_cos+0x148>)
 8013058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305c:	f7ed f926 	bl	80002ac <__adddf3>
 8013060:	4622      	mov	r2, r4
 8013062:	462b      	mov	r3, r5
 8013064:	f7ed fad8 	bl	8000618 <__aeabi_dmul>
 8013068:	a33b      	add	r3, pc, #236	@ (adr r3, 8013158 <__kernel_cos+0x150>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	f7ed f91b 	bl	80002a8 <__aeabi_dsub>
 8013072:	4622      	mov	r2, r4
 8013074:	462b      	mov	r3, r5
 8013076:	f7ed facf 	bl	8000618 <__aeabi_dmul>
 801307a:	a339      	add	r3, pc, #228	@ (adr r3, 8013160 <__kernel_cos+0x158>)
 801307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013080:	f7ed f914 	bl	80002ac <__adddf3>
 8013084:	4622      	mov	r2, r4
 8013086:	462b      	mov	r3, r5
 8013088:	f7ed fac6 	bl	8000618 <__aeabi_dmul>
 801308c:	a336      	add	r3, pc, #216	@ (adr r3, 8013168 <__kernel_cos+0x160>)
 801308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013092:	f7ed f909 	bl	80002a8 <__aeabi_dsub>
 8013096:	4622      	mov	r2, r4
 8013098:	462b      	mov	r3, r5
 801309a:	f7ed fabd 	bl	8000618 <__aeabi_dmul>
 801309e:	a334      	add	r3, pc, #208	@ (adr r3, 8013170 <__kernel_cos+0x168>)
 80130a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a4:	f7ed f902 	bl	80002ac <__adddf3>
 80130a8:	4622      	mov	r2, r4
 80130aa:	462b      	mov	r3, r5
 80130ac:	f7ed fab4 	bl	8000618 <__aeabi_dmul>
 80130b0:	4622      	mov	r2, r4
 80130b2:	462b      	mov	r3, r5
 80130b4:	f7ed fab0 	bl	8000618 <__aeabi_dmul>
 80130b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130bc:	4604      	mov	r4, r0
 80130be:	460d      	mov	r5, r1
 80130c0:	4630      	mov	r0, r6
 80130c2:	4639      	mov	r1, r7
 80130c4:	f7ed faa8 	bl	8000618 <__aeabi_dmul>
 80130c8:	460b      	mov	r3, r1
 80130ca:	4602      	mov	r2, r0
 80130cc:	4629      	mov	r1, r5
 80130ce:	4620      	mov	r0, r4
 80130d0:	f7ed f8ea 	bl	80002a8 <__aeabi_dsub>
 80130d4:	4b2b      	ldr	r3, [pc, #172]	@ (8013184 <__kernel_cos+0x17c>)
 80130d6:	4598      	cmp	r8, r3
 80130d8:	4606      	mov	r6, r0
 80130da:	460f      	mov	r7, r1
 80130dc:	d810      	bhi.n	8013100 <__kernel_cos+0xf8>
 80130de:	4602      	mov	r2, r0
 80130e0:	460b      	mov	r3, r1
 80130e2:	4650      	mov	r0, sl
 80130e4:	4659      	mov	r1, fp
 80130e6:	f7ed f8df 	bl	80002a8 <__aeabi_dsub>
 80130ea:	460b      	mov	r3, r1
 80130ec:	4926      	ldr	r1, [pc, #152]	@ (8013188 <__kernel_cos+0x180>)
 80130ee:	4602      	mov	r2, r0
 80130f0:	2000      	movs	r0, #0
 80130f2:	f7ed f8d9 	bl	80002a8 <__aeabi_dsub>
 80130f6:	ec41 0b10 	vmov	d0, r0, r1
 80130fa:	b003      	add	sp, #12
 80130fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013100:	4b22      	ldr	r3, [pc, #136]	@ (801318c <__kernel_cos+0x184>)
 8013102:	4921      	ldr	r1, [pc, #132]	@ (8013188 <__kernel_cos+0x180>)
 8013104:	4598      	cmp	r8, r3
 8013106:	bf8c      	ite	hi
 8013108:	4d21      	ldrhi	r5, [pc, #132]	@ (8013190 <__kernel_cos+0x188>)
 801310a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801310e:	2400      	movs	r4, #0
 8013110:	4622      	mov	r2, r4
 8013112:	462b      	mov	r3, r5
 8013114:	2000      	movs	r0, #0
 8013116:	f7ed f8c7 	bl	80002a8 <__aeabi_dsub>
 801311a:	4622      	mov	r2, r4
 801311c:	4680      	mov	r8, r0
 801311e:	4689      	mov	r9, r1
 8013120:	462b      	mov	r3, r5
 8013122:	4650      	mov	r0, sl
 8013124:	4659      	mov	r1, fp
 8013126:	f7ed f8bf 	bl	80002a8 <__aeabi_dsub>
 801312a:	4632      	mov	r2, r6
 801312c:	463b      	mov	r3, r7
 801312e:	f7ed f8bb 	bl	80002a8 <__aeabi_dsub>
 8013132:	4602      	mov	r2, r0
 8013134:	460b      	mov	r3, r1
 8013136:	4640      	mov	r0, r8
 8013138:	4649      	mov	r1, r9
 801313a:	e7da      	b.n	80130f2 <__kernel_cos+0xea>
 801313c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013178 <__kernel_cos+0x170>
 8013140:	e7db      	b.n	80130fa <__kernel_cos+0xf2>
 8013142:	bf00      	nop
 8013144:	f3af 8000 	nop.w
 8013148:	be8838d4 	.word	0xbe8838d4
 801314c:	bda8fae9 	.word	0xbda8fae9
 8013150:	bdb4b1c4 	.word	0xbdb4b1c4
 8013154:	3e21ee9e 	.word	0x3e21ee9e
 8013158:	809c52ad 	.word	0x809c52ad
 801315c:	3e927e4f 	.word	0x3e927e4f
 8013160:	19cb1590 	.word	0x19cb1590
 8013164:	3efa01a0 	.word	0x3efa01a0
 8013168:	16c15177 	.word	0x16c15177
 801316c:	3f56c16c 	.word	0x3f56c16c
 8013170:	5555554c 	.word	0x5555554c
 8013174:	3fa55555 	.word	0x3fa55555
 8013178:	00000000 	.word	0x00000000
 801317c:	3ff00000 	.word	0x3ff00000
 8013180:	3fe00000 	.word	0x3fe00000
 8013184:	3fd33332 	.word	0x3fd33332
 8013188:	3ff00000 	.word	0x3ff00000
 801318c:	3fe90000 	.word	0x3fe90000
 8013190:	3fd20000 	.word	0x3fd20000
 8013194:	00000000 	.word	0x00000000

08013198 <__kernel_sin>:
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	ec55 4b10 	vmov	r4, r5, d0
 80131a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80131a4:	b085      	sub	sp, #20
 80131a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80131aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80131ae:	4680      	mov	r8, r0
 80131b0:	d205      	bcs.n	80131be <__kernel_sin+0x26>
 80131b2:	4620      	mov	r0, r4
 80131b4:	4629      	mov	r1, r5
 80131b6:	f7ed fcdf 	bl	8000b78 <__aeabi_d2iz>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d052      	beq.n	8013264 <__kernel_sin+0xcc>
 80131be:	4622      	mov	r2, r4
 80131c0:	462b      	mov	r3, r5
 80131c2:	4620      	mov	r0, r4
 80131c4:	4629      	mov	r1, r5
 80131c6:	f7ed fa27 	bl	8000618 <__aeabi_dmul>
 80131ca:	4682      	mov	sl, r0
 80131cc:	468b      	mov	fp, r1
 80131ce:	4602      	mov	r2, r0
 80131d0:	460b      	mov	r3, r1
 80131d2:	4620      	mov	r0, r4
 80131d4:	4629      	mov	r1, r5
 80131d6:	f7ed fa1f 	bl	8000618 <__aeabi_dmul>
 80131da:	a342      	add	r3, pc, #264	@ (adr r3, 80132e4 <__kernel_sin+0x14c>)
 80131dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e0:	e9cd 0100 	strd	r0, r1, [sp]
 80131e4:	4650      	mov	r0, sl
 80131e6:	4659      	mov	r1, fp
 80131e8:	f7ed fa16 	bl	8000618 <__aeabi_dmul>
 80131ec:	a33f      	add	r3, pc, #252	@ (adr r3, 80132ec <__kernel_sin+0x154>)
 80131ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f2:	f7ed f859 	bl	80002a8 <__aeabi_dsub>
 80131f6:	4652      	mov	r2, sl
 80131f8:	465b      	mov	r3, fp
 80131fa:	f7ed fa0d 	bl	8000618 <__aeabi_dmul>
 80131fe:	a33d      	add	r3, pc, #244	@ (adr r3, 80132f4 <__kernel_sin+0x15c>)
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	f7ed f852 	bl	80002ac <__adddf3>
 8013208:	4652      	mov	r2, sl
 801320a:	465b      	mov	r3, fp
 801320c:	f7ed fa04 	bl	8000618 <__aeabi_dmul>
 8013210:	a33a      	add	r3, pc, #232	@ (adr r3, 80132fc <__kernel_sin+0x164>)
 8013212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013216:	f7ed f847 	bl	80002a8 <__aeabi_dsub>
 801321a:	4652      	mov	r2, sl
 801321c:	465b      	mov	r3, fp
 801321e:	f7ed f9fb 	bl	8000618 <__aeabi_dmul>
 8013222:	a338      	add	r3, pc, #224	@ (adr r3, 8013304 <__kernel_sin+0x16c>)
 8013224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013228:	f7ed f840 	bl	80002ac <__adddf3>
 801322c:	4606      	mov	r6, r0
 801322e:	460f      	mov	r7, r1
 8013230:	f1b8 0f00 	cmp.w	r8, #0
 8013234:	d11b      	bne.n	801326e <__kernel_sin+0xd6>
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	4650      	mov	r0, sl
 801323c:	4659      	mov	r1, fp
 801323e:	f7ed f9eb 	bl	8000618 <__aeabi_dmul>
 8013242:	a325      	add	r3, pc, #148	@ (adr r3, 80132d8 <__kernel_sin+0x140>)
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	f7ed f82e 	bl	80002a8 <__aeabi_dsub>
 801324c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013250:	f7ed f9e2 	bl	8000618 <__aeabi_dmul>
 8013254:	4602      	mov	r2, r0
 8013256:	460b      	mov	r3, r1
 8013258:	4620      	mov	r0, r4
 801325a:	4629      	mov	r1, r5
 801325c:	f7ed f826 	bl	80002ac <__adddf3>
 8013260:	4604      	mov	r4, r0
 8013262:	460d      	mov	r5, r1
 8013264:	ec45 4b10 	vmov	d0, r4, r5
 8013268:	b005      	add	sp, #20
 801326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013272:	4b1b      	ldr	r3, [pc, #108]	@ (80132e0 <__kernel_sin+0x148>)
 8013274:	2200      	movs	r2, #0
 8013276:	f7ed f9cf 	bl	8000618 <__aeabi_dmul>
 801327a:	4632      	mov	r2, r6
 801327c:	4680      	mov	r8, r0
 801327e:	4689      	mov	r9, r1
 8013280:	463b      	mov	r3, r7
 8013282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013286:	f7ed f9c7 	bl	8000618 <__aeabi_dmul>
 801328a:	4602      	mov	r2, r0
 801328c:	460b      	mov	r3, r1
 801328e:	4640      	mov	r0, r8
 8013290:	4649      	mov	r1, r9
 8013292:	f7ed f809 	bl	80002a8 <__aeabi_dsub>
 8013296:	4652      	mov	r2, sl
 8013298:	465b      	mov	r3, fp
 801329a:	f7ed f9bd 	bl	8000618 <__aeabi_dmul>
 801329e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132a2:	f7ed f801 	bl	80002a8 <__aeabi_dsub>
 80132a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80132d8 <__kernel_sin+0x140>)
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	4606      	mov	r6, r0
 80132ae:	460f      	mov	r7, r1
 80132b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132b4:	f7ed f9b0 	bl	8000618 <__aeabi_dmul>
 80132b8:	4602      	mov	r2, r0
 80132ba:	460b      	mov	r3, r1
 80132bc:	4630      	mov	r0, r6
 80132be:	4639      	mov	r1, r7
 80132c0:	f7ec fff4 	bl	80002ac <__adddf3>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	4620      	mov	r0, r4
 80132ca:	4629      	mov	r1, r5
 80132cc:	f7ec ffec 	bl	80002a8 <__aeabi_dsub>
 80132d0:	e7c6      	b.n	8013260 <__kernel_sin+0xc8>
 80132d2:	bf00      	nop
 80132d4:	f3af 8000 	nop.w
 80132d8:	55555549 	.word	0x55555549
 80132dc:	3fc55555 	.word	0x3fc55555
 80132e0:	3fe00000 	.word	0x3fe00000
 80132e4:	5acfd57c 	.word	0x5acfd57c
 80132e8:	3de5d93a 	.word	0x3de5d93a
 80132ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80132f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80132f4:	57b1fe7d 	.word	0x57b1fe7d
 80132f8:	3ec71de3 	.word	0x3ec71de3
 80132fc:	19c161d5 	.word	0x19c161d5
 8013300:	3f2a01a0 	.word	0x3f2a01a0
 8013304:	1110f8a6 	.word	0x1110f8a6
 8013308:	3f811111 	.word	0x3f811111
 801330c:	00000000 	.word	0x00000000

08013310 <__ieee754_asin>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	ec55 4b10 	vmov	r4, r5, d0
 8013318:	4bc7      	ldr	r3, [pc, #796]	@ (8013638 <__ieee754_asin+0x328>)
 801331a:	b087      	sub	sp, #28
 801331c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013320:	429e      	cmp	r6, r3
 8013322:	9501      	str	r5, [sp, #4]
 8013324:	d92d      	bls.n	8013382 <__ieee754_asin+0x72>
 8013326:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801332a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801332e:	4326      	orrs	r6, r4
 8013330:	d116      	bne.n	8013360 <__ieee754_asin+0x50>
 8013332:	a3a7      	add	r3, pc, #668	@ (adr r3, 80135d0 <__ieee754_asin+0x2c0>)
 8013334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013338:	4620      	mov	r0, r4
 801333a:	4629      	mov	r1, r5
 801333c:	f7ed f96c 	bl	8000618 <__aeabi_dmul>
 8013340:	a3a5      	add	r3, pc, #660	@ (adr r3, 80135d8 <__ieee754_asin+0x2c8>)
 8013342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013346:	4606      	mov	r6, r0
 8013348:	460f      	mov	r7, r1
 801334a:	4620      	mov	r0, r4
 801334c:	4629      	mov	r1, r5
 801334e:	f7ed f963 	bl	8000618 <__aeabi_dmul>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	4630      	mov	r0, r6
 8013358:	4639      	mov	r1, r7
 801335a:	f7ec ffa7 	bl	80002ac <__adddf3>
 801335e:	e009      	b.n	8013374 <__ieee754_asin+0x64>
 8013360:	4622      	mov	r2, r4
 8013362:	462b      	mov	r3, r5
 8013364:	4620      	mov	r0, r4
 8013366:	4629      	mov	r1, r5
 8013368:	f7ec ff9e 	bl	80002a8 <__aeabi_dsub>
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	f7ed fa7c 	bl	800086c <__aeabi_ddiv>
 8013374:	4604      	mov	r4, r0
 8013376:	460d      	mov	r5, r1
 8013378:	ec45 4b10 	vmov	d0, r4, r5
 801337c:	b007      	add	sp, #28
 801337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013382:	4bae      	ldr	r3, [pc, #696]	@ (801363c <__ieee754_asin+0x32c>)
 8013384:	429e      	cmp	r6, r3
 8013386:	d810      	bhi.n	80133aa <__ieee754_asin+0x9a>
 8013388:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801338c:	f080 80ad 	bcs.w	80134ea <__ieee754_asin+0x1da>
 8013390:	a393      	add	r3, pc, #588	@ (adr r3, 80135e0 <__ieee754_asin+0x2d0>)
 8013392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f7ec ff87 	bl	80002ac <__adddf3>
 801339e:	4ba8      	ldr	r3, [pc, #672]	@ (8013640 <__ieee754_asin+0x330>)
 80133a0:	2200      	movs	r2, #0
 80133a2:	f7ed fbc9 	bl	8000b38 <__aeabi_dcmpgt>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d1e6      	bne.n	8013378 <__ieee754_asin+0x68>
 80133aa:	ec45 4b10 	vmov	d0, r4, r5
 80133ae:	f7ff fca3 	bl	8012cf8 <fabs>
 80133b2:	49a3      	ldr	r1, [pc, #652]	@ (8013640 <__ieee754_asin+0x330>)
 80133b4:	ec53 2b10 	vmov	r2, r3, d0
 80133b8:	2000      	movs	r0, #0
 80133ba:	f7ec ff75 	bl	80002a8 <__aeabi_dsub>
 80133be:	4ba1      	ldr	r3, [pc, #644]	@ (8013644 <__ieee754_asin+0x334>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	f7ed f929 	bl	8000618 <__aeabi_dmul>
 80133c6:	a388      	add	r3, pc, #544	@ (adr r3, 80135e8 <__ieee754_asin+0x2d8>)
 80133c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133cc:	4604      	mov	r4, r0
 80133ce:	460d      	mov	r5, r1
 80133d0:	f7ed f922 	bl	8000618 <__aeabi_dmul>
 80133d4:	a386      	add	r3, pc, #536	@ (adr r3, 80135f0 <__ieee754_asin+0x2e0>)
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	f7ec ff67 	bl	80002ac <__adddf3>
 80133de:	4622      	mov	r2, r4
 80133e0:	462b      	mov	r3, r5
 80133e2:	f7ed f919 	bl	8000618 <__aeabi_dmul>
 80133e6:	a384      	add	r3, pc, #528	@ (adr r3, 80135f8 <__ieee754_asin+0x2e8>)
 80133e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ec:	f7ec ff5c 	bl	80002a8 <__aeabi_dsub>
 80133f0:	4622      	mov	r2, r4
 80133f2:	462b      	mov	r3, r5
 80133f4:	f7ed f910 	bl	8000618 <__aeabi_dmul>
 80133f8:	a381      	add	r3, pc, #516	@ (adr r3, 8013600 <__ieee754_asin+0x2f0>)
 80133fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fe:	f7ec ff55 	bl	80002ac <__adddf3>
 8013402:	4622      	mov	r2, r4
 8013404:	462b      	mov	r3, r5
 8013406:	f7ed f907 	bl	8000618 <__aeabi_dmul>
 801340a:	a37f      	add	r3, pc, #508	@ (adr r3, 8013608 <__ieee754_asin+0x2f8>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ec ff4a 	bl	80002a8 <__aeabi_dsub>
 8013414:	4622      	mov	r2, r4
 8013416:	462b      	mov	r3, r5
 8013418:	f7ed f8fe 	bl	8000618 <__aeabi_dmul>
 801341c:	a37c      	add	r3, pc, #496	@ (adr r3, 8013610 <__ieee754_asin+0x300>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	f7ec ff43 	bl	80002ac <__adddf3>
 8013426:	4622      	mov	r2, r4
 8013428:	462b      	mov	r3, r5
 801342a:	f7ed f8f5 	bl	8000618 <__aeabi_dmul>
 801342e:	a37a      	add	r3, pc, #488	@ (adr r3, 8013618 <__ieee754_asin+0x308>)
 8013430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013438:	4620      	mov	r0, r4
 801343a:	4629      	mov	r1, r5
 801343c:	f7ed f8ec 	bl	8000618 <__aeabi_dmul>
 8013440:	a377      	add	r3, pc, #476	@ (adr r3, 8013620 <__ieee754_asin+0x310>)
 8013442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013446:	f7ec ff2f 	bl	80002a8 <__aeabi_dsub>
 801344a:	4622      	mov	r2, r4
 801344c:	462b      	mov	r3, r5
 801344e:	f7ed f8e3 	bl	8000618 <__aeabi_dmul>
 8013452:	a375      	add	r3, pc, #468	@ (adr r3, 8013628 <__ieee754_asin+0x318>)
 8013454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013458:	f7ec ff28 	bl	80002ac <__adddf3>
 801345c:	4622      	mov	r2, r4
 801345e:	462b      	mov	r3, r5
 8013460:	f7ed f8da 	bl	8000618 <__aeabi_dmul>
 8013464:	a372      	add	r3, pc, #456	@ (adr r3, 8013630 <__ieee754_asin+0x320>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	f7ec ff1d 	bl	80002a8 <__aeabi_dsub>
 801346e:	4622      	mov	r2, r4
 8013470:	462b      	mov	r3, r5
 8013472:	f7ed f8d1 	bl	8000618 <__aeabi_dmul>
 8013476:	4b72      	ldr	r3, [pc, #456]	@ (8013640 <__ieee754_asin+0x330>)
 8013478:	2200      	movs	r2, #0
 801347a:	f7ec ff17 	bl	80002ac <__adddf3>
 801347e:	ec45 4b10 	vmov	d0, r4, r5
 8013482:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013486:	f7ff fc9f 	bl	8012dc8 <__ieee754_sqrt>
 801348a:	4b6f      	ldr	r3, [pc, #444]	@ (8013648 <__ieee754_asin+0x338>)
 801348c:	429e      	cmp	r6, r3
 801348e:	ec5b ab10 	vmov	sl, fp, d0
 8013492:	f240 80db 	bls.w	801364c <__ieee754_asin+0x33c>
 8013496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801349a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801349e:	f7ed f9e5 	bl	800086c <__aeabi_ddiv>
 80134a2:	4652      	mov	r2, sl
 80134a4:	465b      	mov	r3, fp
 80134a6:	f7ed f8b7 	bl	8000618 <__aeabi_dmul>
 80134aa:	4652      	mov	r2, sl
 80134ac:	465b      	mov	r3, fp
 80134ae:	f7ec fefd 	bl	80002ac <__adddf3>
 80134b2:	4602      	mov	r2, r0
 80134b4:	460b      	mov	r3, r1
 80134b6:	f7ec fef9 	bl	80002ac <__adddf3>
 80134ba:	a347      	add	r3, pc, #284	@ (adr r3, 80135d8 <__ieee754_asin+0x2c8>)
 80134bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c0:	f7ec fef2 	bl	80002a8 <__aeabi_dsub>
 80134c4:	4602      	mov	r2, r0
 80134c6:	460b      	mov	r3, r1
 80134c8:	a141      	add	r1, pc, #260	@ (adr r1, 80135d0 <__ieee754_asin+0x2c0>)
 80134ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134ce:	f7ec feeb 	bl	80002a8 <__aeabi_dsub>
 80134d2:	9b01      	ldr	r3, [sp, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	bfdc      	itt	le
 80134d8:	4602      	movle	r2, r0
 80134da:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80134de:	4604      	mov	r4, r0
 80134e0:	460d      	mov	r5, r1
 80134e2:	bfdc      	itt	le
 80134e4:	4614      	movle	r4, r2
 80134e6:	461d      	movle	r5, r3
 80134e8:	e746      	b.n	8013378 <__ieee754_asin+0x68>
 80134ea:	4622      	mov	r2, r4
 80134ec:	462b      	mov	r3, r5
 80134ee:	4620      	mov	r0, r4
 80134f0:	4629      	mov	r1, r5
 80134f2:	f7ed f891 	bl	8000618 <__aeabi_dmul>
 80134f6:	a33c      	add	r3, pc, #240	@ (adr r3, 80135e8 <__ieee754_asin+0x2d8>)
 80134f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fc:	4606      	mov	r6, r0
 80134fe:	460f      	mov	r7, r1
 8013500:	f7ed f88a 	bl	8000618 <__aeabi_dmul>
 8013504:	a33a      	add	r3, pc, #232	@ (adr r3, 80135f0 <__ieee754_asin+0x2e0>)
 8013506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350a:	f7ec fecf 	bl	80002ac <__adddf3>
 801350e:	4632      	mov	r2, r6
 8013510:	463b      	mov	r3, r7
 8013512:	f7ed f881 	bl	8000618 <__aeabi_dmul>
 8013516:	a338      	add	r3, pc, #224	@ (adr r3, 80135f8 <__ieee754_asin+0x2e8>)
 8013518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351c:	f7ec fec4 	bl	80002a8 <__aeabi_dsub>
 8013520:	4632      	mov	r2, r6
 8013522:	463b      	mov	r3, r7
 8013524:	f7ed f878 	bl	8000618 <__aeabi_dmul>
 8013528:	a335      	add	r3, pc, #212	@ (adr r3, 8013600 <__ieee754_asin+0x2f0>)
 801352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352e:	f7ec febd 	bl	80002ac <__adddf3>
 8013532:	4632      	mov	r2, r6
 8013534:	463b      	mov	r3, r7
 8013536:	f7ed f86f 	bl	8000618 <__aeabi_dmul>
 801353a:	a333      	add	r3, pc, #204	@ (adr r3, 8013608 <__ieee754_asin+0x2f8>)
 801353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013540:	f7ec feb2 	bl	80002a8 <__aeabi_dsub>
 8013544:	4632      	mov	r2, r6
 8013546:	463b      	mov	r3, r7
 8013548:	f7ed f866 	bl	8000618 <__aeabi_dmul>
 801354c:	a330      	add	r3, pc, #192	@ (adr r3, 8013610 <__ieee754_asin+0x300>)
 801354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013552:	f7ec feab 	bl	80002ac <__adddf3>
 8013556:	4632      	mov	r2, r6
 8013558:	463b      	mov	r3, r7
 801355a:	f7ed f85d 	bl	8000618 <__aeabi_dmul>
 801355e:	a32e      	add	r3, pc, #184	@ (adr r3, 8013618 <__ieee754_asin+0x308>)
 8013560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013564:	4680      	mov	r8, r0
 8013566:	4689      	mov	r9, r1
 8013568:	4630      	mov	r0, r6
 801356a:	4639      	mov	r1, r7
 801356c:	f7ed f854 	bl	8000618 <__aeabi_dmul>
 8013570:	a32b      	add	r3, pc, #172	@ (adr r3, 8013620 <__ieee754_asin+0x310>)
 8013572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013576:	f7ec fe97 	bl	80002a8 <__aeabi_dsub>
 801357a:	4632      	mov	r2, r6
 801357c:	463b      	mov	r3, r7
 801357e:	f7ed f84b 	bl	8000618 <__aeabi_dmul>
 8013582:	a329      	add	r3, pc, #164	@ (adr r3, 8013628 <__ieee754_asin+0x318>)
 8013584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013588:	f7ec fe90 	bl	80002ac <__adddf3>
 801358c:	4632      	mov	r2, r6
 801358e:	463b      	mov	r3, r7
 8013590:	f7ed f842 	bl	8000618 <__aeabi_dmul>
 8013594:	a326      	add	r3, pc, #152	@ (adr r3, 8013630 <__ieee754_asin+0x320>)
 8013596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359a:	f7ec fe85 	bl	80002a8 <__aeabi_dsub>
 801359e:	4632      	mov	r2, r6
 80135a0:	463b      	mov	r3, r7
 80135a2:	f7ed f839 	bl	8000618 <__aeabi_dmul>
 80135a6:	4b26      	ldr	r3, [pc, #152]	@ (8013640 <__ieee754_asin+0x330>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	f7ec fe7f 	bl	80002ac <__adddf3>
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	4640      	mov	r0, r8
 80135b4:	4649      	mov	r1, r9
 80135b6:	f7ed f959 	bl	800086c <__aeabi_ddiv>
 80135ba:	4622      	mov	r2, r4
 80135bc:	462b      	mov	r3, r5
 80135be:	f7ed f82b 	bl	8000618 <__aeabi_dmul>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	4620      	mov	r0, r4
 80135c8:	4629      	mov	r1, r5
 80135ca:	e6c6      	b.n	801335a <__ieee754_asin+0x4a>
 80135cc:	f3af 8000 	nop.w
 80135d0:	54442d18 	.word	0x54442d18
 80135d4:	3ff921fb 	.word	0x3ff921fb
 80135d8:	33145c07 	.word	0x33145c07
 80135dc:	3c91a626 	.word	0x3c91a626
 80135e0:	8800759c 	.word	0x8800759c
 80135e4:	7e37e43c 	.word	0x7e37e43c
 80135e8:	0dfdf709 	.word	0x0dfdf709
 80135ec:	3f023de1 	.word	0x3f023de1
 80135f0:	7501b288 	.word	0x7501b288
 80135f4:	3f49efe0 	.word	0x3f49efe0
 80135f8:	b5688f3b 	.word	0xb5688f3b
 80135fc:	3fa48228 	.word	0x3fa48228
 8013600:	0e884455 	.word	0x0e884455
 8013604:	3fc9c155 	.word	0x3fc9c155
 8013608:	03eb6f7d 	.word	0x03eb6f7d
 801360c:	3fd4d612 	.word	0x3fd4d612
 8013610:	55555555 	.word	0x55555555
 8013614:	3fc55555 	.word	0x3fc55555
 8013618:	b12e9282 	.word	0xb12e9282
 801361c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013620:	1b8d0159 	.word	0x1b8d0159
 8013624:	3fe6066c 	.word	0x3fe6066c
 8013628:	9c598ac8 	.word	0x9c598ac8
 801362c:	40002ae5 	.word	0x40002ae5
 8013630:	1c8a2d4b 	.word	0x1c8a2d4b
 8013634:	40033a27 	.word	0x40033a27
 8013638:	3fefffff 	.word	0x3fefffff
 801363c:	3fdfffff 	.word	0x3fdfffff
 8013640:	3ff00000 	.word	0x3ff00000
 8013644:	3fe00000 	.word	0x3fe00000
 8013648:	3fef3332 	.word	0x3fef3332
 801364c:	4652      	mov	r2, sl
 801364e:	465b      	mov	r3, fp
 8013650:	4650      	mov	r0, sl
 8013652:	4659      	mov	r1, fp
 8013654:	f7ec fe2a 	bl	80002ac <__adddf3>
 8013658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801365c:	4606      	mov	r6, r0
 801365e:	460f      	mov	r7, r1
 8013660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013664:	f7ed f902 	bl	800086c <__aeabi_ddiv>
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	4630      	mov	r0, r6
 801366e:	4639      	mov	r1, r7
 8013670:	f7ec ffd2 	bl	8000618 <__aeabi_dmul>
 8013674:	f04f 0800 	mov.w	r8, #0
 8013678:	4606      	mov	r6, r0
 801367a:	460f      	mov	r7, r1
 801367c:	4642      	mov	r2, r8
 801367e:	465b      	mov	r3, fp
 8013680:	4640      	mov	r0, r8
 8013682:	4659      	mov	r1, fp
 8013684:	f7ec ffc8 	bl	8000618 <__aeabi_dmul>
 8013688:	4602      	mov	r2, r0
 801368a:	460b      	mov	r3, r1
 801368c:	4620      	mov	r0, r4
 801368e:	4629      	mov	r1, r5
 8013690:	f7ec fe0a 	bl	80002a8 <__aeabi_dsub>
 8013694:	4642      	mov	r2, r8
 8013696:	4604      	mov	r4, r0
 8013698:	460d      	mov	r5, r1
 801369a:	465b      	mov	r3, fp
 801369c:	4650      	mov	r0, sl
 801369e:	4659      	mov	r1, fp
 80136a0:	f7ec fe04 	bl	80002ac <__adddf3>
 80136a4:	4602      	mov	r2, r0
 80136a6:	460b      	mov	r3, r1
 80136a8:	4620      	mov	r0, r4
 80136aa:	4629      	mov	r1, r5
 80136ac:	f7ed f8de 	bl	800086c <__aeabi_ddiv>
 80136b0:	4602      	mov	r2, r0
 80136b2:	460b      	mov	r3, r1
 80136b4:	f7ec fdfa 	bl	80002ac <__adddf3>
 80136b8:	4602      	mov	r2, r0
 80136ba:	460b      	mov	r3, r1
 80136bc:	a112      	add	r1, pc, #72	@ (adr r1, 8013708 <__ieee754_asin+0x3f8>)
 80136be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136c2:	f7ec fdf1 	bl	80002a8 <__aeabi_dsub>
 80136c6:	4602      	mov	r2, r0
 80136c8:	460b      	mov	r3, r1
 80136ca:	4630      	mov	r0, r6
 80136cc:	4639      	mov	r1, r7
 80136ce:	f7ec fdeb 	bl	80002a8 <__aeabi_dsub>
 80136d2:	4642      	mov	r2, r8
 80136d4:	4604      	mov	r4, r0
 80136d6:	460d      	mov	r5, r1
 80136d8:	465b      	mov	r3, fp
 80136da:	4640      	mov	r0, r8
 80136dc:	4659      	mov	r1, fp
 80136de:	f7ec fde5 	bl	80002ac <__adddf3>
 80136e2:	4602      	mov	r2, r0
 80136e4:	460b      	mov	r3, r1
 80136e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8013710 <__ieee754_asin+0x400>)
 80136e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ec:	f7ec fddc 	bl	80002a8 <__aeabi_dsub>
 80136f0:	4602      	mov	r2, r0
 80136f2:	460b      	mov	r3, r1
 80136f4:	4620      	mov	r0, r4
 80136f6:	4629      	mov	r1, r5
 80136f8:	f7ec fdd6 	bl	80002a8 <__aeabi_dsub>
 80136fc:	4602      	mov	r2, r0
 80136fe:	460b      	mov	r3, r1
 8013700:	a103      	add	r1, pc, #12	@ (adr r1, 8013710 <__ieee754_asin+0x400>)
 8013702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013706:	e6e2      	b.n	80134ce <__ieee754_asin+0x1be>
 8013708:	33145c07 	.word	0x33145c07
 801370c:	3c91a626 	.word	0x3c91a626
 8013710:	54442d18 	.word	0x54442d18
 8013714:	3fe921fb 	.word	0x3fe921fb

08013718 <__ieee754_atan2>:
 8013718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801371c:	ec57 6b11 	vmov	r6, r7, d1
 8013720:	4273      	negs	r3, r6
 8013722:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80138a0 <__ieee754_atan2+0x188>
 8013726:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801372a:	4333      	orrs	r3, r6
 801372c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013730:	4543      	cmp	r3, r8
 8013732:	ec51 0b10 	vmov	r0, r1, d0
 8013736:	4635      	mov	r5, r6
 8013738:	d809      	bhi.n	801374e <__ieee754_atan2+0x36>
 801373a:	4244      	negs	r4, r0
 801373c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013740:	4304      	orrs	r4, r0
 8013742:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013746:	4544      	cmp	r4, r8
 8013748:	468e      	mov	lr, r1
 801374a:	4681      	mov	r9, r0
 801374c:	d907      	bls.n	801375e <__ieee754_atan2+0x46>
 801374e:	4632      	mov	r2, r6
 8013750:	463b      	mov	r3, r7
 8013752:	f7ec fdab 	bl	80002ac <__adddf3>
 8013756:	ec41 0b10 	vmov	d0, r0, r1
 801375a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801375e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8013762:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8013766:	4334      	orrs	r4, r6
 8013768:	d103      	bne.n	8013772 <__ieee754_atan2+0x5a>
 801376a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801376e:	f001 b8e3 	b.w	8014938 <atan>
 8013772:	17bc      	asrs	r4, r7, #30
 8013774:	f004 0402 	and.w	r4, r4, #2
 8013778:	ea53 0909 	orrs.w	r9, r3, r9
 801377c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013780:	d107      	bne.n	8013792 <__ieee754_atan2+0x7a>
 8013782:	2c02      	cmp	r4, #2
 8013784:	d05f      	beq.n	8013846 <__ieee754_atan2+0x12e>
 8013786:	2c03      	cmp	r4, #3
 8013788:	d1e5      	bne.n	8013756 <__ieee754_atan2+0x3e>
 801378a:	a141      	add	r1, pc, #260	@ (adr r1, 8013890 <__ieee754_atan2+0x178>)
 801378c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013790:	e7e1      	b.n	8013756 <__ieee754_atan2+0x3e>
 8013792:	4315      	orrs	r5, r2
 8013794:	d106      	bne.n	80137a4 <__ieee754_atan2+0x8c>
 8013796:	f1be 0f00 	cmp.w	lr, #0
 801379a:	da5f      	bge.n	801385c <__ieee754_atan2+0x144>
 801379c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013898 <__ieee754_atan2+0x180>)
 801379e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137a2:	e7d8      	b.n	8013756 <__ieee754_atan2+0x3e>
 80137a4:	4542      	cmp	r2, r8
 80137a6:	d10f      	bne.n	80137c8 <__ieee754_atan2+0xb0>
 80137a8:	4293      	cmp	r3, r2
 80137aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80137ae:	d107      	bne.n	80137c0 <__ieee754_atan2+0xa8>
 80137b0:	2c02      	cmp	r4, #2
 80137b2:	d84c      	bhi.n	801384e <__ieee754_atan2+0x136>
 80137b4:	4b34      	ldr	r3, [pc, #208]	@ (8013888 <__ieee754_atan2+0x170>)
 80137b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80137ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137be:	e7ca      	b.n	8013756 <__ieee754_atan2+0x3e>
 80137c0:	2c02      	cmp	r4, #2
 80137c2:	d848      	bhi.n	8013856 <__ieee754_atan2+0x13e>
 80137c4:	4b31      	ldr	r3, [pc, #196]	@ (801388c <__ieee754_atan2+0x174>)
 80137c6:	e7f6      	b.n	80137b6 <__ieee754_atan2+0x9e>
 80137c8:	4543      	cmp	r3, r8
 80137ca:	d0e4      	beq.n	8013796 <__ieee754_atan2+0x7e>
 80137cc:	1a9b      	subs	r3, r3, r2
 80137ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80137d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80137d6:	da1e      	bge.n	8013816 <__ieee754_atan2+0xfe>
 80137d8:	2f00      	cmp	r7, #0
 80137da:	da01      	bge.n	80137e0 <__ieee754_atan2+0xc8>
 80137dc:	323c      	adds	r2, #60	@ 0x3c
 80137de:	db1e      	blt.n	801381e <__ieee754_atan2+0x106>
 80137e0:	4632      	mov	r2, r6
 80137e2:	463b      	mov	r3, r7
 80137e4:	f7ed f842 	bl	800086c <__aeabi_ddiv>
 80137e8:	ec41 0b10 	vmov	d0, r0, r1
 80137ec:	f7ff fa84 	bl	8012cf8 <fabs>
 80137f0:	f001 f8a2 	bl	8014938 <atan>
 80137f4:	ec51 0b10 	vmov	r0, r1, d0
 80137f8:	2c01      	cmp	r4, #1
 80137fa:	d013      	beq.n	8013824 <__ieee754_atan2+0x10c>
 80137fc:	2c02      	cmp	r4, #2
 80137fe:	d015      	beq.n	801382c <__ieee754_atan2+0x114>
 8013800:	2c00      	cmp	r4, #0
 8013802:	d0a8      	beq.n	8013756 <__ieee754_atan2+0x3e>
 8013804:	a318      	add	r3, pc, #96	@ (adr r3, 8013868 <__ieee754_atan2+0x150>)
 8013806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380a:	f7ec fd4d 	bl	80002a8 <__aeabi_dsub>
 801380e:	a318      	add	r3, pc, #96	@ (adr r3, 8013870 <__ieee754_atan2+0x158>)
 8013810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013814:	e014      	b.n	8013840 <__ieee754_atan2+0x128>
 8013816:	a118      	add	r1, pc, #96	@ (adr r1, 8013878 <__ieee754_atan2+0x160>)
 8013818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801381c:	e7ec      	b.n	80137f8 <__ieee754_atan2+0xe0>
 801381e:	2000      	movs	r0, #0
 8013820:	2100      	movs	r1, #0
 8013822:	e7e9      	b.n	80137f8 <__ieee754_atan2+0xe0>
 8013824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013828:	4619      	mov	r1, r3
 801382a:	e794      	b.n	8013756 <__ieee754_atan2+0x3e>
 801382c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013868 <__ieee754_atan2+0x150>)
 801382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013832:	f7ec fd39 	bl	80002a8 <__aeabi_dsub>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	a10d      	add	r1, pc, #52	@ (adr r1, 8013870 <__ieee754_atan2+0x158>)
 801383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013840:	f7ec fd32 	bl	80002a8 <__aeabi_dsub>
 8013844:	e787      	b.n	8013756 <__ieee754_atan2+0x3e>
 8013846:	a10a      	add	r1, pc, #40	@ (adr r1, 8013870 <__ieee754_atan2+0x158>)
 8013848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801384c:	e783      	b.n	8013756 <__ieee754_atan2+0x3e>
 801384e:	a10c      	add	r1, pc, #48	@ (adr r1, 8013880 <__ieee754_atan2+0x168>)
 8013850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013854:	e77f      	b.n	8013756 <__ieee754_atan2+0x3e>
 8013856:	2000      	movs	r0, #0
 8013858:	2100      	movs	r1, #0
 801385a:	e77c      	b.n	8013756 <__ieee754_atan2+0x3e>
 801385c:	a106      	add	r1, pc, #24	@ (adr r1, 8013878 <__ieee754_atan2+0x160>)
 801385e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013862:	e778      	b.n	8013756 <__ieee754_atan2+0x3e>
 8013864:	f3af 8000 	nop.w
 8013868:	33145c07 	.word	0x33145c07
 801386c:	3ca1a626 	.word	0x3ca1a626
 8013870:	54442d18 	.word	0x54442d18
 8013874:	400921fb 	.word	0x400921fb
 8013878:	54442d18 	.word	0x54442d18
 801387c:	3ff921fb 	.word	0x3ff921fb
 8013880:	54442d18 	.word	0x54442d18
 8013884:	3fe921fb 	.word	0x3fe921fb
 8013888:	08015fa0 	.word	0x08015fa0
 801388c:	08015f88 	.word	0x08015f88
 8013890:	54442d18 	.word	0x54442d18
 8013894:	c00921fb 	.word	0xc00921fb
 8013898:	54442d18 	.word	0x54442d18
 801389c:	bff921fb 	.word	0xbff921fb
 80138a0:	7ff00000 	.word	0x7ff00000

080138a4 <__ieee754_fmod>:
 80138a4:	ec53 2b11 	vmov	r2, r3, d1
 80138a8:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 80138ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b0:	ea52 040c 	orrs.w	r4, r2, ip
 80138b4:	ec51 0b10 	vmov	r0, r1, d0
 80138b8:	461e      	mov	r6, r3
 80138ba:	4617      	mov	r7, r2
 80138bc:	4696      	mov	lr, r2
 80138be:	d00c      	beq.n	80138da <__ieee754_fmod+0x36>
 80138c0:	4c77      	ldr	r4, [pc, #476]	@ (8013aa0 <__ieee754_fmod+0x1fc>)
 80138c2:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80138c6:	45a0      	cmp	r8, r4
 80138c8:	4689      	mov	r9, r1
 80138ca:	d806      	bhi.n	80138da <__ieee754_fmod+0x36>
 80138cc:	4254      	negs	r4, r2
 80138ce:	4d75      	ldr	r5, [pc, #468]	@ (8013aa4 <__ieee754_fmod+0x200>)
 80138d0:	4314      	orrs	r4, r2
 80138d2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80138d6:	42ac      	cmp	r4, r5
 80138d8:	d909      	bls.n	80138ee <__ieee754_fmod+0x4a>
 80138da:	f7ec fe9d 	bl	8000618 <__aeabi_dmul>
 80138de:	4602      	mov	r2, r0
 80138e0:	460b      	mov	r3, r1
 80138e2:	f7ec ffc3 	bl	800086c <__aeabi_ddiv>
 80138e6:	ec41 0b10 	vmov	d0, r0, r1
 80138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ee:	45e0      	cmp	r8, ip
 80138f0:	4682      	mov	sl, r0
 80138f2:	4604      	mov	r4, r0
 80138f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80138f8:	dc09      	bgt.n	801390e <__ieee754_fmod+0x6a>
 80138fa:	dbf4      	blt.n	80138e6 <__ieee754_fmod+0x42>
 80138fc:	4282      	cmp	r2, r0
 80138fe:	d8f2      	bhi.n	80138e6 <__ieee754_fmod+0x42>
 8013900:	d105      	bne.n	801390e <__ieee754_fmod+0x6a>
 8013902:	4b69      	ldr	r3, [pc, #420]	@ (8013aa8 <__ieee754_fmod+0x204>)
 8013904:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8013908:	e9d3 0100 	ldrd	r0, r1, [r3]
 801390c:	e7eb      	b.n	80138e6 <__ieee754_fmod+0x42>
 801390e:	4a65      	ldr	r2, [pc, #404]	@ (8013aa4 <__ieee754_fmod+0x200>)
 8013910:	ea19 0f02 	tst.w	r9, r2
 8013914:	d148      	bne.n	80139a8 <__ieee754_fmod+0x104>
 8013916:	f1b8 0f00 	cmp.w	r8, #0
 801391a:	d13d      	bne.n	8013998 <__ieee754_fmod+0xf4>
 801391c:	4963      	ldr	r1, [pc, #396]	@ (8013aac <__ieee754_fmod+0x208>)
 801391e:	4653      	mov	r3, sl
 8013920:	2b00      	cmp	r3, #0
 8013922:	dc36      	bgt.n	8013992 <__ieee754_fmod+0xee>
 8013924:	4216      	tst	r6, r2
 8013926:	d14f      	bne.n	80139c8 <__ieee754_fmod+0x124>
 8013928:	f1bc 0f00 	cmp.w	ip, #0
 801392c:	d144      	bne.n	80139b8 <__ieee754_fmod+0x114>
 801392e:	4a5f      	ldr	r2, [pc, #380]	@ (8013aac <__ieee754_fmod+0x208>)
 8013930:	463b      	mov	r3, r7
 8013932:	2b00      	cmp	r3, #0
 8013934:	dc3d      	bgt.n	80139b2 <__ieee754_fmod+0x10e>
 8013936:	485e      	ldr	r0, [pc, #376]	@ (8013ab0 <__ieee754_fmod+0x20c>)
 8013938:	4281      	cmp	r1, r0
 801393a:	db4a      	blt.n	80139d2 <__ieee754_fmod+0x12e>
 801393c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013944:	485a      	ldr	r0, [pc, #360]	@ (8013ab0 <__ieee754_fmod+0x20c>)
 8013946:	4282      	cmp	r2, r0
 8013948:	db57      	blt.n	80139fa <__ieee754_fmod+0x156>
 801394a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801394e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8013952:	1a89      	subs	r1, r1, r2
 8013954:	1b98      	subs	r0, r3, r6
 8013956:	eba4 070e 	sub.w	r7, r4, lr
 801395a:	2900      	cmp	r1, #0
 801395c:	d162      	bne.n	8013a24 <__ieee754_fmod+0x180>
 801395e:	4574      	cmp	r4, lr
 8013960:	bf38      	it	cc
 8013962:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013966:	2800      	cmp	r0, #0
 8013968:	bfa4      	itt	ge
 801396a:	463c      	movge	r4, r7
 801396c:	4603      	movge	r3, r0
 801396e:	ea53 0104 	orrs.w	r1, r3, r4
 8013972:	d0c6      	beq.n	8013902 <__ieee754_fmod+0x5e>
 8013974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013978:	db69      	blt.n	8013a4e <__ieee754_fmod+0x1aa>
 801397a:	494d      	ldr	r1, [pc, #308]	@ (8013ab0 <__ieee754_fmod+0x20c>)
 801397c:	428a      	cmp	r2, r1
 801397e:	db6c      	blt.n	8013a5a <__ieee754_fmod+0x1b6>
 8013980:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013984:	432b      	orrs	r3, r5
 8013986:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801398a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801398e:	4620      	mov	r0, r4
 8013990:	e7a9      	b.n	80138e6 <__ieee754_fmod+0x42>
 8013992:	3901      	subs	r1, #1
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	e7c3      	b.n	8013920 <__ieee754_fmod+0x7c>
 8013998:	4945      	ldr	r1, [pc, #276]	@ (8013ab0 <__ieee754_fmod+0x20c>)
 801399a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801399e:	2b00      	cmp	r3, #0
 80139a0:	ddc0      	ble.n	8013924 <__ieee754_fmod+0x80>
 80139a2:	3901      	subs	r1, #1
 80139a4:	005b      	lsls	r3, r3, #1
 80139a6:	e7fa      	b.n	801399e <__ieee754_fmod+0xfa>
 80139a8:	ea4f 5128 	mov.w	r1, r8, asr #20
 80139ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80139b0:	e7b8      	b.n	8013924 <__ieee754_fmod+0x80>
 80139b2:	3a01      	subs	r2, #1
 80139b4:	005b      	lsls	r3, r3, #1
 80139b6:	e7bc      	b.n	8013932 <__ieee754_fmod+0x8e>
 80139b8:	4a3d      	ldr	r2, [pc, #244]	@ (8013ab0 <__ieee754_fmod+0x20c>)
 80139ba:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80139be:	2b00      	cmp	r3, #0
 80139c0:	ddb9      	ble.n	8013936 <__ieee754_fmod+0x92>
 80139c2:	3a01      	subs	r2, #1
 80139c4:	005b      	lsls	r3, r3, #1
 80139c6:	e7fa      	b.n	80139be <__ieee754_fmod+0x11a>
 80139c8:	ea4f 522c 	mov.w	r2, ip, asr #20
 80139cc:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80139d0:	e7b1      	b.n	8013936 <__ieee754_fmod+0x92>
 80139d2:	1a40      	subs	r0, r0, r1
 80139d4:	281f      	cmp	r0, #31
 80139d6:	dc0a      	bgt.n	80139ee <__ieee754_fmod+0x14a>
 80139d8:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80139dc:	fa08 f800 	lsl.w	r8, r8, r0
 80139e0:	fa2a f303 	lsr.w	r3, sl, r3
 80139e4:	ea43 0308 	orr.w	r3, r3, r8
 80139e8:	fa0a f400 	lsl.w	r4, sl, r0
 80139ec:	e7aa      	b.n	8013944 <__ieee754_fmod+0xa0>
 80139ee:	4b31      	ldr	r3, [pc, #196]	@ (8013ab4 <__ieee754_fmod+0x210>)
 80139f0:	1a5b      	subs	r3, r3, r1
 80139f2:	fa0a f303 	lsl.w	r3, sl, r3
 80139f6:	2400      	movs	r4, #0
 80139f8:	e7a4      	b.n	8013944 <__ieee754_fmod+0xa0>
 80139fa:	1a80      	subs	r0, r0, r2
 80139fc:	281f      	cmp	r0, #31
 80139fe:	dc0a      	bgt.n	8013a16 <__ieee754_fmod+0x172>
 8013a00:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8013a04:	fa0c fc00 	lsl.w	ip, ip, r0
 8013a08:	fa27 f606 	lsr.w	r6, r7, r6
 8013a0c:	ea46 060c 	orr.w	r6, r6, ip
 8013a10:	fa07 fe00 	lsl.w	lr, r7, r0
 8013a14:	e79d      	b.n	8013952 <__ieee754_fmod+0xae>
 8013a16:	4e27      	ldr	r6, [pc, #156]	@ (8013ab4 <__ieee754_fmod+0x210>)
 8013a18:	1ab6      	subs	r6, r6, r2
 8013a1a:	fa07 f606 	lsl.w	r6, r7, r6
 8013a1e:	f04f 0e00 	mov.w	lr, #0
 8013a22:	e796      	b.n	8013952 <__ieee754_fmod+0xae>
 8013a24:	4574      	cmp	r4, lr
 8013a26:	bf38      	it	cc
 8013a28:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	da05      	bge.n	8013a3c <__ieee754_fmod+0x198>
 8013a30:	0fe0      	lsrs	r0, r4, #31
 8013a32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013a36:	0064      	lsls	r4, r4, #1
 8013a38:	3901      	subs	r1, #1
 8013a3a:	e78b      	b.n	8013954 <__ieee754_fmod+0xb0>
 8013a3c:	ea50 0307 	orrs.w	r3, r0, r7
 8013a40:	f43f af5f 	beq.w	8013902 <__ieee754_fmod+0x5e>
 8013a44:	0ffb      	lsrs	r3, r7, #31
 8013a46:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8013a4a:	007c      	lsls	r4, r7, #1
 8013a4c:	e7f4      	b.n	8013a38 <__ieee754_fmod+0x194>
 8013a4e:	0fe1      	lsrs	r1, r4, #31
 8013a50:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013a54:	0064      	lsls	r4, r4, #1
 8013a56:	3a01      	subs	r2, #1
 8013a58:	e78c      	b.n	8013974 <__ieee754_fmod+0xd0>
 8013a5a:	1a89      	subs	r1, r1, r2
 8013a5c:	2914      	cmp	r1, #20
 8013a5e:	dc0a      	bgt.n	8013a76 <__ieee754_fmod+0x1d2>
 8013a60:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013a64:	fa03 f202 	lsl.w	r2, r3, r2
 8013a68:	40cc      	lsrs	r4, r1
 8013a6a:	4322      	orrs	r2, r4
 8013a6c:	410b      	asrs	r3, r1
 8013a6e:	ea43 0105 	orr.w	r1, r3, r5
 8013a72:	4610      	mov	r0, r2
 8013a74:	e737      	b.n	80138e6 <__ieee754_fmod+0x42>
 8013a76:	291f      	cmp	r1, #31
 8013a78:	dc07      	bgt.n	8013a8a <__ieee754_fmod+0x1e6>
 8013a7a:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8013a7e:	40cc      	lsrs	r4, r1
 8013a80:	fa03 f202 	lsl.w	r2, r3, r2
 8013a84:	4322      	orrs	r2, r4
 8013a86:	462b      	mov	r3, r5
 8013a88:	e7f1      	b.n	8013a6e <__ieee754_fmod+0x1ca>
 8013a8a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8013a8e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013a92:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8013a96:	32e2      	adds	r2, #226	@ 0xe2
 8013a98:	fa43 f202 	asr.w	r2, r3, r2
 8013a9c:	e7f3      	b.n	8013a86 <__ieee754_fmod+0x1e2>
 8013a9e:	bf00      	nop
 8013aa0:	7fefffff 	.word	0x7fefffff
 8013aa4:	7ff00000 	.word	0x7ff00000
 8013aa8:	08015fb8 	.word	0x08015fb8
 8013aac:	fffffbed 	.word	0xfffffbed
 8013ab0:	fffffc02 	.word	0xfffffc02
 8013ab4:	fffffbe2 	.word	0xfffffbe2

08013ab8 <__ieee754_pow>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	b091      	sub	sp, #68	@ 0x44
 8013abe:	ed8d 1b00 	vstr	d1, [sp]
 8013ac2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8013ac6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013aca:	ea5a 0001 	orrs.w	r0, sl, r1
 8013ace:	ec57 6b10 	vmov	r6, r7, d0
 8013ad2:	d113      	bne.n	8013afc <__ieee754_pow+0x44>
 8013ad4:	19b3      	adds	r3, r6, r6
 8013ad6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013ada:	4152      	adcs	r2, r2
 8013adc:	4298      	cmp	r0, r3
 8013ade:	4b98      	ldr	r3, [pc, #608]	@ (8013d40 <__ieee754_pow+0x288>)
 8013ae0:	4193      	sbcs	r3, r2
 8013ae2:	f080 84ea 	bcs.w	80144ba <__ieee754_pow+0xa02>
 8013ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013aea:	4630      	mov	r0, r6
 8013aec:	4639      	mov	r1, r7
 8013aee:	f7ec fbdd 	bl	80002ac <__adddf3>
 8013af2:	ec41 0b10 	vmov	d0, r0, r1
 8013af6:	b011      	add	sp, #68	@ 0x44
 8013af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afc:	4a91      	ldr	r2, [pc, #580]	@ (8013d44 <__ieee754_pow+0x28c>)
 8013afe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013b02:	4590      	cmp	r8, r2
 8013b04:	463d      	mov	r5, r7
 8013b06:	4633      	mov	r3, r6
 8013b08:	d806      	bhi.n	8013b18 <__ieee754_pow+0x60>
 8013b0a:	d101      	bne.n	8013b10 <__ieee754_pow+0x58>
 8013b0c:	2e00      	cmp	r6, #0
 8013b0e:	d1ea      	bne.n	8013ae6 <__ieee754_pow+0x2e>
 8013b10:	4592      	cmp	sl, r2
 8013b12:	d801      	bhi.n	8013b18 <__ieee754_pow+0x60>
 8013b14:	d10e      	bne.n	8013b34 <__ieee754_pow+0x7c>
 8013b16:	b169      	cbz	r1, 8013b34 <__ieee754_pow+0x7c>
 8013b18:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013b1c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013b20:	431d      	orrs	r5, r3
 8013b22:	d1e0      	bne.n	8013ae6 <__ieee754_pow+0x2e>
 8013b24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b28:	18db      	adds	r3, r3, r3
 8013b2a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013b2e:	4152      	adcs	r2, r2
 8013b30:	429d      	cmp	r5, r3
 8013b32:	e7d4      	b.n	8013ade <__ieee754_pow+0x26>
 8013b34:	2d00      	cmp	r5, #0
 8013b36:	46c3      	mov	fp, r8
 8013b38:	da3a      	bge.n	8013bb0 <__ieee754_pow+0xf8>
 8013b3a:	4a83      	ldr	r2, [pc, #524]	@ (8013d48 <__ieee754_pow+0x290>)
 8013b3c:	4592      	cmp	sl, r2
 8013b3e:	d84d      	bhi.n	8013bdc <__ieee754_pow+0x124>
 8013b40:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013b44:	4592      	cmp	sl, r2
 8013b46:	f240 84c7 	bls.w	80144d8 <__ieee754_pow+0xa20>
 8013b4a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013b4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013b52:	2a14      	cmp	r2, #20
 8013b54:	dd0f      	ble.n	8013b76 <__ieee754_pow+0xbe>
 8013b56:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013b5a:	fa21 f402 	lsr.w	r4, r1, r2
 8013b5e:	fa04 f202 	lsl.w	r2, r4, r2
 8013b62:	428a      	cmp	r2, r1
 8013b64:	f040 84b8 	bne.w	80144d8 <__ieee754_pow+0xa20>
 8013b68:	f004 0401 	and.w	r4, r4, #1
 8013b6c:	f1c4 0402 	rsb	r4, r4, #2
 8013b70:	2900      	cmp	r1, #0
 8013b72:	d158      	bne.n	8013c26 <__ieee754_pow+0x16e>
 8013b74:	e00e      	b.n	8013b94 <__ieee754_pow+0xdc>
 8013b76:	2900      	cmp	r1, #0
 8013b78:	d154      	bne.n	8013c24 <__ieee754_pow+0x16c>
 8013b7a:	f1c2 0214 	rsb	r2, r2, #20
 8013b7e:	fa4a f402 	asr.w	r4, sl, r2
 8013b82:	fa04 f202 	lsl.w	r2, r4, r2
 8013b86:	4552      	cmp	r2, sl
 8013b88:	f040 84a3 	bne.w	80144d2 <__ieee754_pow+0xa1a>
 8013b8c:	f004 0401 	and.w	r4, r4, #1
 8013b90:	f1c4 0402 	rsb	r4, r4, #2
 8013b94:	4a6d      	ldr	r2, [pc, #436]	@ (8013d4c <__ieee754_pow+0x294>)
 8013b96:	4592      	cmp	sl, r2
 8013b98:	d12e      	bne.n	8013bf8 <__ieee754_pow+0x140>
 8013b9a:	f1b9 0f00 	cmp.w	r9, #0
 8013b9e:	f280 8494 	bge.w	80144ca <__ieee754_pow+0xa12>
 8013ba2:	496a      	ldr	r1, [pc, #424]	@ (8013d4c <__ieee754_pow+0x294>)
 8013ba4:	4632      	mov	r2, r6
 8013ba6:	463b      	mov	r3, r7
 8013ba8:	2000      	movs	r0, #0
 8013baa:	f7ec fe5f 	bl	800086c <__aeabi_ddiv>
 8013bae:	e7a0      	b.n	8013af2 <__ieee754_pow+0x3a>
 8013bb0:	2400      	movs	r4, #0
 8013bb2:	bbc1      	cbnz	r1, 8013c26 <__ieee754_pow+0x16e>
 8013bb4:	4a63      	ldr	r2, [pc, #396]	@ (8013d44 <__ieee754_pow+0x28c>)
 8013bb6:	4592      	cmp	sl, r2
 8013bb8:	d1ec      	bne.n	8013b94 <__ieee754_pow+0xdc>
 8013bba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013bbe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013bc2:	431a      	orrs	r2, r3
 8013bc4:	f000 8479 	beq.w	80144ba <__ieee754_pow+0xa02>
 8013bc8:	4b61      	ldr	r3, [pc, #388]	@ (8013d50 <__ieee754_pow+0x298>)
 8013bca:	4598      	cmp	r8, r3
 8013bcc:	d908      	bls.n	8013be0 <__ieee754_pow+0x128>
 8013bce:	f1b9 0f00 	cmp.w	r9, #0
 8013bd2:	f2c0 8476 	blt.w	80144c2 <__ieee754_pow+0xa0a>
 8013bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bda:	e78a      	b.n	8013af2 <__ieee754_pow+0x3a>
 8013bdc:	2402      	movs	r4, #2
 8013bde:	e7e8      	b.n	8013bb2 <__ieee754_pow+0xfa>
 8013be0:	f1b9 0f00 	cmp.w	r9, #0
 8013be4:	f04f 0000 	mov.w	r0, #0
 8013be8:	f04f 0100 	mov.w	r1, #0
 8013bec:	da81      	bge.n	8013af2 <__ieee754_pow+0x3a>
 8013bee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013bf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013bf6:	e77c      	b.n	8013af2 <__ieee754_pow+0x3a>
 8013bf8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013bfc:	d106      	bne.n	8013c0c <__ieee754_pow+0x154>
 8013bfe:	4632      	mov	r2, r6
 8013c00:	463b      	mov	r3, r7
 8013c02:	4630      	mov	r0, r6
 8013c04:	4639      	mov	r1, r7
 8013c06:	f7ec fd07 	bl	8000618 <__aeabi_dmul>
 8013c0a:	e772      	b.n	8013af2 <__ieee754_pow+0x3a>
 8013c0c:	4a51      	ldr	r2, [pc, #324]	@ (8013d54 <__ieee754_pow+0x29c>)
 8013c0e:	4591      	cmp	r9, r2
 8013c10:	d109      	bne.n	8013c26 <__ieee754_pow+0x16e>
 8013c12:	2d00      	cmp	r5, #0
 8013c14:	db07      	blt.n	8013c26 <__ieee754_pow+0x16e>
 8013c16:	ec47 6b10 	vmov	d0, r6, r7
 8013c1a:	b011      	add	sp, #68	@ 0x44
 8013c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c20:	f7ff b8d2 	b.w	8012dc8 <__ieee754_sqrt>
 8013c24:	2400      	movs	r4, #0
 8013c26:	ec47 6b10 	vmov	d0, r6, r7
 8013c2a:	9302      	str	r3, [sp, #8]
 8013c2c:	f7ff f864 	bl	8012cf8 <fabs>
 8013c30:	9b02      	ldr	r3, [sp, #8]
 8013c32:	ec51 0b10 	vmov	r0, r1, d0
 8013c36:	bb53      	cbnz	r3, 8013c8e <__ieee754_pow+0x1d6>
 8013c38:	4b44      	ldr	r3, [pc, #272]	@ (8013d4c <__ieee754_pow+0x294>)
 8013c3a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d002      	beq.n	8013c48 <__ieee754_pow+0x190>
 8013c42:	f1b8 0f00 	cmp.w	r8, #0
 8013c46:	d122      	bne.n	8013c8e <__ieee754_pow+0x1d6>
 8013c48:	f1b9 0f00 	cmp.w	r9, #0
 8013c4c:	da05      	bge.n	8013c5a <__ieee754_pow+0x1a2>
 8013c4e:	4602      	mov	r2, r0
 8013c50:	460b      	mov	r3, r1
 8013c52:	2000      	movs	r0, #0
 8013c54:	493d      	ldr	r1, [pc, #244]	@ (8013d4c <__ieee754_pow+0x294>)
 8013c56:	f7ec fe09 	bl	800086c <__aeabi_ddiv>
 8013c5a:	2d00      	cmp	r5, #0
 8013c5c:	f6bf af49 	bge.w	8013af2 <__ieee754_pow+0x3a>
 8013c60:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013c64:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013c68:	ea58 0804 	orrs.w	r8, r8, r4
 8013c6c:	d108      	bne.n	8013c80 <__ieee754_pow+0x1c8>
 8013c6e:	4602      	mov	r2, r0
 8013c70:	460b      	mov	r3, r1
 8013c72:	4610      	mov	r0, r2
 8013c74:	4619      	mov	r1, r3
 8013c76:	f7ec fb17 	bl	80002a8 <__aeabi_dsub>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	e794      	b.n	8013baa <__ieee754_pow+0xf2>
 8013c80:	2c01      	cmp	r4, #1
 8013c82:	f47f af36 	bne.w	8013af2 <__ieee754_pow+0x3a>
 8013c86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	e731      	b.n	8013af2 <__ieee754_pow+0x3a>
 8013c8e:	0feb      	lsrs	r3, r5, #31
 8013c90:	3b01      	subs	r3, #1
 8013c92:	ea53 0204 	orrs.w	r2, r3, r4
 8013c96:	d102      	bne.n	8013c9e <__ieee754_pow+0x1e6>
 8013c98:	4632      	mov	r2, r6
 8013c9a:	463b      	mov	r3, r7
 8013c9c:	e7e9      	b.n	8013c72 <__ieee754_pow+0x1ba>
 8013c9e:	3c01      	subs	r4, #1
 8013ca0:	431c      	orrs	r4, r3
 8013ca2:	d016      	beq.n	8013cd2 <__ieee754_pow+0x21a>
 8013ca4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013d30 <__ieee754_pow+0x278>
 8013ca8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013cb0:	f240 8112 	bls.w	8013ed8 <__ieee754_pow+0x420>
 8013cb4:	4b28      	ldr	r3, [pc, #160]	@ (8013d58 <__ieee754_pow+0x2a0>)
 8013cb6:	459a      	cmp	sl, r3
 8013cb8:	4b25      	ldr	r3, [pc, #148]	@ (8013d50 <__ieee754_pow+0x298>)
 8013cba:	d916      	bls.n	8013cea <__ieee754_pow+0x232>
 8013cbc:	4598      	cmp	r8, r3
 8013cbe:	d80b      	bhi.n	8013cd8 <__ieee754_pow+0x220>
 8013cc0:	f1b9 0f00 	cmp.w	r9, #0
 8013cc4:	da0b      	bge.n	8013cde <__ieee754_pow+0x226>
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	b011      	add	sp, #68	@ 0x44
 8013cca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cce:	f001 b87f 	b.w	8014dd0 <__math_oflow>
 8013cd2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013d38 <__ieee754_pow+0x280>
 8013cd6:	e7e7      	b.n	8013ca8 <__ieee754_pow+0x1f0>
 8013cd8:	f1b9 0f00 	cmp.w	r9, #0
 8013cdc:	dcf3      	bgt.n	8013cc6 <__ieee754_pow+0x20e>
 8013cde:	2000      	movs	r0, #0
 8013ce0:	b011      	add	sp, #68	@ 0x44
 8013ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce6:	f001 b86b 	b.w	8014dc0 <__math_uflow>
 8013cea:	4598      	cmp	r8, r3
 8013cec:	d20c      	bcs.n	8013d08 <__ieee754_pow+0x250>
 8013cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	f7ec ff01 	bl	8000afc <__aeabi_dcmplt>
 8013cfa:	3800      	subs	r0, #0
 8013cfc:	bf18      	it	ne
 8013cfe:	2001      	movne	r0, #1
 8013d00:	f1b9 0f00 	cmp.w	r9, #0
 8013d04:	daec      	bge.n	8013ce0 <__ieee754_pow+0x228>
 8013d06:	e7df      	b.n	8013cc8 <__ieee754_pow+0x210>
 8013d08:	4b10      	ldr	r3, [pc, #64]	@ (8013d4c <__ieee754_pow+0x294>)
 8013d0a:	4598      	cmp	r8, r3
 8013d0c:	f04f 0200 	mov.w	r2, #0
 8013d10:	d924      	bls.n	8013d5c <__ieee754_pow+0x2a4>
 8013d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d16:	2300      	movs	r3, #0
 8013d18:	f7ec fef0 	bl	8000afc <__aeabi_dcmplt>
 8013d1c:	3800      	subs	r0, #0
 8013d1e:	bf18      	it	ne
 8013d20:	2001      	movne	r0, #1
 8013d22:	f1b9 0f00 	cmp.w	r9, #0
 8013d26:	dccf      	bgt.n	8013cc8 <__ieee754_pow+0x210>
 8013d28:	e7da      	b.n	8013ce0 <__ieee754_pow+0x228>
 8013d2a:	bf00      	nop
 8013d2c:	f3af 8000 	nop.w
 8013d30:	00000000 	.word	0x00000000
 8013d34:	3ff00000 	.word	0x3ff00000
 8013d38:	00000000 	.word	0x00000000
 8013d3c:	bff00000 	.word	0xbff00000
 8013d40:	fff00000 	.word	0xfff00000
 8013d44:	7ff00000 	.word	0x7ff00000
 8013d48:	433fffff 	.word	0x433fffff
 8013d4c:	3ff00000 	.word	0x3ff00000
 8013d50:	3fefffff 	.word	0x3fefffff
 8013d54:	3fe00000 	.word	0x3fe00000
 8013d58:	43f00000 	.word	0x43f00000
 8013d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8013ec8 <__ieee754_pow+0x410>)
 8013d5e:	f7ec faa3 	bl	80002a8 <__aeabi_dsub>
 8013d62:	a351      	add	r3, pc, #324	@ (adr r3, 8013ea8 <__ieee754_pow+0x3f0>)
 8013d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d68:	4604      	mov	r4, r0
 8013d6a:	460d      	mov	r5, r1
 8013d6c:	f7ec fc54 	bl	8000618 <__aeabi_dmul>
 8013d70:	a34f      	add	r3, pc, #316	@ (adr r3, 8013eb0 <__ieee754_pow+0x3f8>)
 8013d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d76:	4606      	mov	r6, r0
 8013d78:	460f      	mov	r7, r1
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	f7ec fc4b 	bl	8000618 <__aeabi_dmul>
 8013d82:	4b52      	ldr	r3, [pc, #328]	@ (8013ecc <__ieee754_pow+0x414>)
 8013d84:	4682      	mov	sl, r0
 8013d86:	468b      	mov	fp, r1
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	f7ec fc43 	bl	8000618 <__aeabi_dmul>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
 8013d96:	a148      	add	r1, pc, #288	@ (adr r1, 8013eb8 <__ieee754_pow+0x400>)
 8013d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d9c:	f7ec fa84 	bl	80002a8 <__aeabi_dsub>
 8013da0:	4622      	mov	r2, r4
 8013da2:	462b      	mov	r3, r5
 8013da4:	f7ec fc38 	bl	8000618 <__aeabi_dmul>
 8013da8:	4602      	mov	r2, r0
 8013daa:	460b      	mov	r3, r1
 8013dac:	2000      	movs	r0, #0
 8013dae:	4948      	ldr	r1, [pc, #288]	@ (8013ed0 <__ieee754_pow+0x418>)
 8013db0:	f7ec fa7a 	bl	80002a8 <__aeabi_dsub>
 8013db4:	4622      	mov	r2, r4
 8013db6:	4680      	mov	r8, r0
 8013db8:	4689      	mov	r9, r1
 8013dba:	462b      	mov	r3, r5
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	f7ec fc2a 	bl	8000618 <__aeabi_dmul>
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	4640      	mov	r0, r8
 8013dca:	4649      	mov	r1, r9
 8013dcc:	f7ec fc24 	bl	8000618 <__aeabi_dmul>
 8013dd0:	a33b      	add	r3, pc, #236	@ (adr r3, 8013ec0 <__ieee754_pow+0x408>)
 8013dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd6:	f7ec fc1f 	bl	8000618 <__aeabi_dmul>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	460b      	mov	r3, r1
 8013dde:	4650      	mov	r0, sl
 8013de0:	4659      	mov	r1, fp
 8013de2:	f7ec fa61 	bl	80002a8 <__aeabi_dsub>
 8013de6:	4602      	mov	r2, r0
 8013de8:	460b      	mov	r3, r1
 8013dea:	4680      	mov	r8, r0
 8013dec:	4689      	mov	r9, r1
 8013dee:	4630      	mov	r0, r6
 8013df0:	4639      	mov	r1, r7
 8013df2:	f7ec fa5b 	bl	80002ac <__adddf3>
 8013df6:	2400      	movs	r4, #0
 8013df8:	4632      	mov	r2, r6
 8013dfa:	463b      	mov	r3, r7
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	460d      	mov	r5, r1
 8013e00:	f7ec fa52 	bl	80002a8 <__aeabi_dsub>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	4640      	mov	r0, r8
 8013e0a:	4649      	mov	r1, r9
 8013e0c:	f7ec fa4c 	bl	80002a8 <__aeabi_dsub>
 8013e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9304      	str	r3, [sp, #16]
 8013e1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013e20:	4606      	mov	r6, r0
 8013e22:	460f      	mov	r7, r1
 8013e24:	4652      	mov	r2, sl
 8013e26:	465b      	mov	r3, fp
 8013e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e2c:	f7ec fa3c 	bl	80002a8 <__aeabi_dsub>
 8013e30:	4622      	mov	r2, r4
 8013e32:	462b      	mov	r3, r5
 8013e34:	f7ec fbf0 	bl	8000618 <__aeabi_dmul>
 8013e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	4689      	mov	r9, r1
 8013e40:	4630      	mov	r0, r6
 8013e42:	4639      	mov	r1, r7
 8013e44:	f7ec fbe8 	bl	8000618 <__aeabi_dmul>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	460b      	mov	r3, r1
 8013e4c:	4640      	mov	r0, r8
 8013e4e:	4649      	mov	r1, r9
 8013e50:	f7ec fa2c 	bl	80002ac <__adddf3>
 8013e54:	4652      	mov	r2, sl
 8013e56:	465b      	mov	r3, fp
 8013e58:	4606      	mov	r6, r0
 8013e5a:	460f      	mov	r7, r1
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	4629      	mov	r1, r5
 8013e60:	f7ec fbda 	bl	8000618 <__aeabi_dmul>
 8013e64:	460b      	mov	r3, r1
 8013e66:	4602      	mov	r2, r0
 8013e68:	4680      	mov	r8, r0
 8013e6a:	4689      	mov	r9, r1
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	4639      	mov	r1, r7
 8013e70:	f7ec fa1c 	bl	80002ac <__adddf3>
 8013e74:	4b17      	ldr	r3, [pc, #92]	@ (8013ed4 <__ieee754_pow+0x41c>)
 8013e76:	4299      	cmp	r1, r3
 8013e78:	4604      	mov	r4, r0
 8013e7a:	460d      	mov	r5, r1
 8013e7c:	468a      	mov	sl, r1
 8013e7e:	468b      	mov	fp, r1
 8013e80:	f340 82ef 	ble.w	8014462 <__ieee754_pow+0x9aa>
 8013e84:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013e88:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013e8c:	4303      	orrs	r3, r0
 8013e8e:	f000 81e8 	beq.w	8014262 <__ieee754_pow+0x7aa>
 8013e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e96:	2200      	movs	r2, #0
 8013e98:	2300      	movs	r3, #0
 8013e9a:	f7ec fe2f 	bl	8000afc <__aeabi_dcmplt>
 8013e9e:	3800      	subs	r0, #0
 8013ea0:	bf18      	it	ne
 8013ea2:	2001      	movne	r0, #1
 8013ea4:	e710      	b.n	8013cc8 <__ieee754_pow+0x210>
 8013ea6:	bf00      	nop
 8013ea8:	60000000 	.word	0x60000000
 8013eac:	3ff71547 	.word	0x3ff71547
 8013eb0:	f85ddf44 	.word	0xf85ddf44
 8013eb4:	3e54ae0b 	.word	0x3e54ae0b
 8013eb8:	55555555 	.word	0x55555555
 8013ebc:	3fd55555 	.word	0x3fd55555
 8013ec0:	652b82fe 	.word	0x652b82fe
 8013ec4:	3ff71547 	.word	0x3ff71547
 8013ec8:	3ff00000 	.word	0x3ff00000
 8013ecc:	3fd00000 	.word	0x3fd00000
 8013ed0:	3fe00000 	.word	0x3fe00000
 8013ed4:	408fffff 	.word	0x408fffff
 8013ed8:	4bd5      	ldr	r3, [pc, #852]	@ (8014230 <__ieee754_pow+0x778>)
 8013eda:	402b      	ands	r3, r5
 8013edc:	2200      	movs	r2, #0
 8013ede:	b92b      	cbnz	r3, 8013eec <__ieee754_pow+0x434>
 8013ee0:	4bd4      	ldr	r3, [pc, #848]	@ (8014234 <__ieee754_pow+0x77c>)
 8013ee2:	f7ec fb99 	bl	8000618 <__aeabi_dmul>
 8013ee6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013eea:	468b      	mov	fp, r1
 8013eec:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013ef0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013ef4:	4413      	add	r3, r2
 8013ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ef8:	4bcf      	ldr	r3, [pc, #828]	@ (8014238 <__ieee754_pow+0x780>)
 8013efa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013efe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013f02:	459b      	cmp	fp, r3
 8013f04:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013f08:	dd08      	ble.n	8013f1c <__ieee754_pow+0x464>
 8013f0a:	4bcc      	ldr	r3, [pc, #816]	@ (801423c <__ieee754_pow+0x784>)
 8013f0c:	459b      	cmp	fp, r3
 8013f0e:	f340 81a5 	ble.w	801425c <__ieee754_pow+0x7a4>
 8013f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f14:	3301      	adds	r3, #1
 8013f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f18:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013f1c:	f04f 0a00 	mov.w	sl, #0
 8013f20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f26:	4bc6      	ldr	r3, [pc, #792]	@ (8014240 <__ieee754_pow+0x788>)
 8013f28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f2c:	ed93 7b00 	vldr	d7, [r3]
 8013f30:	4629      	mov	r1, r5
 8013f32:	ec53 2b17 	vmov	r2, r3, d7
 8013f36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013f3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013f3e:	f7ec f9b3 	bl	80002a8 <__aeabi_dsub>
 8013f42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f46:	4606      	mov	r6, r0
 8013f48:	460f      	mov	r7, r1
 8013f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f4e:	f7ec f9ad 	bl	80002ac <__adddf3>
 8013f52:	4602      	mov	r2, r0
 8013f54:	460b      	mov	r3, r1
 8013f56:	2000      	movs	r0, #0
 8013f58:	49ba      	ldr	r1, [pc, #744]	@ (8014244 <__ieee754_pow+0x78c>)
 8013f5a:	f7ec fc87 	bl	800086c <__aeabi_ddiv>
 8013f5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013f62:	4602      	mov	r2, r0
 8013f64:	460b      	mov	r3, r1
 8013f66:	4630      	mov	r0, r6
 8013f68:	4639      	mov	r1, r7
 8013f6a:	f7ec fb55 	bl	8000618 <__aeabi_dmul>
 8013f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f72:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013f76:	106d      	asrs	r5, r5, #1
 8013f78:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013f7c:	f04f 0b00 	mov.w	fp, #0
 8013f80:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013f84:	4661      	mov	r1, ip
 8013f86:	2200      	movs	r2, #0
 8013f88:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013f8c:	4658      	mov	r0, fp
 8013f8e:	46e1      	mov	r9, ip
 8013f90:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013f94:	4614      	mov	r4, r2
 8013f96:	461d      	mov	r5, r3
 8013f98:	f7ec fb3e 	bl	8000618 <__aeabi_dmul>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	4639      	mov	r1, r7
 8013fa4:	f7ec f980 	bl	80002a8 <__aeabi_dsub>
 8013fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fac:	4606      	mov	r6, r0
 8013fae:	460f      	mov	r7, r1
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	f7ec f978 	bl	80002a8 <__aeabi_dsub>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013fc0:	f7ec f972 	bl	80002a8 <__aeabi_dsub>
 8013fc4:	465a      	mov	r2, fp
 8013fc6:	464b      	mov	r3, r9
 8013fc8:	f7ec fb26 	bl	8000618 <__aeabi_dmul>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	f7ec f968 	bl	80002a8 <__aeabi_dsub>
 8013fd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013fdc:	f7ec fb1c 	bl	8000618 <__aeabi_dmul>
 8013fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fe4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013fe8:	4610      	mov	r0, r2
 8013fea:	4619      	mov	r1, r3
 8013fec:	f7ec fb14 	bl	8000618 <__aeabi_dmul>
 8013ff0:	a37d      	add	r3, pc, #500	@ (adr r3, 80141e8 <__ieee754_pow+0x730>)
 8013ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	460d      	mov	r5, r1
 8013ffa:	f7ec fb0d 	bl	8000618 <__aeabi_dmul>
 8013ffe:	a37c      	add	r3, pc, #496	@ (adr r3, 80141f0 <__ieee754_pow+0x738>)
 8014000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014004:	f7ec f952 	bl	80002ac <__adddf3>
 8014008:	4622      	mov	r2, r4
 801400a:	462b      	mov	r3, r5
 801400c:	f7ec fb04 	bl	8000618 <__aeabi_dmul>
 8014010:	a379      	add	r3, pc, #484	@ (adr r3, 80141f8 <__ieee754_pow+0x740>)
 8014012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014016:	f7ec f949 	bl	80002ac <__adddf3>
 801401a:	4622      	mov	r2, r4
 801401c:	462b      	mov	r3, r5
 801401e:	f7ec fafb 	bl	8000618 <__aeabi_dmul>
 8014022:	a377      	add	r3, pc, #476	@ (adr r3, 8014200 <__ieee754_pow+0x748>)
 8014024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014028:	f7ec f940 	bl	80002ac <__adddf3>
 801402c:	4622      	mov	r2, r4
 801402e:	462b      	mov	r3, r5
 8014030:	f7ec faf2 	bl	8000618 <__aeabi_dmul>
 8014034:	a374      	add	r3, pc, #464	@ (adr r3, 8014208 <__ieee754_pow+0x750>)
 8014036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403a:	f7ec f937 	bl	80002ac <__adddf3>
 801403e:	4622      	mov	r2, r4
 8014040:	462b      	mov	r3, r5
 8014042:	f7ec fae9 	bl	8000618 <__aeabi_dmul>
 8014046:	a372      	add	r3, pc, #456	@ (adr r3, 8014210 <__ieee754_pow+0x758>)
 8014048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404c:	f7ec f92e 	bl	80002ac <__adddf3>
 8014050:	4622      	mov	r2, r4
 8014052:	4606      	mov	r6, r0
 8014054:	460f      	mov	r7, r1
 8014056:	462b      	mov	r3, r5
 8014058:	4620      	mov	r0, r4
 801405a:	4629      	mov	r1, r5
 801405c:	f7ec fadc 	bl	8000618 <__aeabi_dmul>
 8014060:	4602      	mov	r2, r0
 8014062:	460b      	mov	r3, r1
 8014064:	4630      	mov	r0, r6
 8014066:	4639      	mov	r1, r7
 8014068:	f7ec fad6 	bl	8000618 <__aeabi_dmul>
 801406c:	465a      	mov	r2, fp
 801406e:	4604      	mov	r4, r0
 8014070:	460d      	mov	r5, r1
 8014072:	464b      	mov	r3, r9
 8014074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014078:	f7ec f918 	bl	80002ac <__adddf3>
 801407c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014080:	f7ec faca 	bl	8000618 <__aeabi_dmul>
 8014084:	4622      	mov	r2, r4
 8014086:	462b      	mov	r3, r5
 8014088:	f7ec f910 	bl	80002ac <__adddf3>
 801408c:	465a      	mov	r2, fp
 801408e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014092:	464b      	mov	r3, r9
 8014094:	4658      	mov	r0, fp
 8014096:	4649      	mov	r1, r9
 8014098:	f7ec fabe 	bl	8000618 <__aeabi_dmul>
 801409c:	4b6a      	ldr	r3, [pc, #424]	@ (8014248 <__ieee754_pow+0x790>)
 801409e:	2200      	movs	r2, #0
 80140a0:	4606      	mov	r6, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	f7ec f902 	bl	80002ac <__adddf3>
 80140a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80140ac:	f7ec f8fe 	bl	80002ac <__adddf3>
 80140b0:	46d8      	mov	r8, fp
 80140b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80140b6:	460d      	mov	r5, r1
 80140b8:	465a      	mov	r2, fp
 80140ba:	460b      	mov	r3, r1
 80140bc:	4640      	mov	r0, r8
 80140be:	4649      	mov	r1, r9
 80140c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80140c4:	f7ec faa8 	bl	8000618 <__aeabi_dmul>
 80140c8:	465c      	mov	r4, fp
 80140ca:	4680      	mov	r8, r0
 80140cc:	4689      	mov	r9, r1
 80140ce:	4b5e      	ldr	r3, [pc, #376]	@ (8014248 <__ieee754_pow+0x790>)
 80140d0:	2200      	movs	r2, #0
 80140d2:	4620      	mov	r0, r4
 80140d4:	4629      	mov	r1, r5
 80140d6:	f7ec f8e7 	bl	80002a8 <__aeabi_dsub>
 80140da:	4632      	mov	r2, r6
 80140dc:	463b      	mov	r3, r7
 80140de:	f7ec f8e3 	bl	80002a8 <__aeabi_dsub>
 80140e2:	4602      	mov	r2, r0
 80140e4:	460b      	mov	r3, r1
 80140e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80140ea:	f7ec f8dd 	bl	80002a8 <__aeabi_dsub>
 80140ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140f2:	f7ec fa91 	bl	8000618 <__aeabi_dmul>
 80140f6:	4622      	mov	r2, r4
 80140f8:	4606      	mov	r6, r0
 80140fa:	460f      	mov	r7, r1
 80140fc:	462b      	mov	r3, r5
 80140fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014102:	f7ec fa89 	bl	8000618 <__aeabi_dmul>
 8014106:	4602      	mov	r2, r0
 8014108:	460b      	mov	r3, r1
 801410a:	4630      	mov	r0, r6
 801410c:	4639      	mov	r1, r7
 801410e:	f7ec f8cd 	bl	80002ac <__adddf3>
 8014112:	4606      	mov	r6, r0
 8014114:	460f      	mov	r7, r1
 8014116:	4602      	mov	r2, r0
 8014118:	460b      	mov	r3, r1
 801411a:	4640      	mov	r0, r8
 801411c:	4649      	mov	r1, r9
 801411e:	f7ec f8c5 	bl	80002ac <__adddf3>
 8014122:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014126:	a33c      	add	r3, pc, #240	@ (adr r3, 8014218 <__ieee754_pow+0x760>)
 8014128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412c:	4658      	mov	r0, fp
 801412e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8014132:	460d      	mov	r5, r1
 8014134:	f7ec fa70 	bl	8000618 <__aeabi_dmul>
 8014138:	465c      	mov	r4, fp
 801413a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801413e:	4642      	mov	r2, r8
 8014140:	464b      	mov	r3, r9
 8014142:	4620      	mov	r0, r4
 8014144:	4629      	mov	r1, r5
 8014146:	f7ec f8af 	bl	80002a8 <__aeabi_dsub>
 801414a:	4602      	mov	r2, r0
 801414c:	460b      	mov	r3, r1
 801414e:	4630      	mov	r0, r6
 8014150:	4639      	mov	r1, r7
 8014152:	f7ec f8a9 	bl	80002a8 <__aeabi_dsub>
 8014156:	a332      	add	r3, pc, #200	@ (adr r3, 8014220 <__ieee754_pow+0x768>)
 8014158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415c:	f7ec fa5c 	bl	8000618 <__aeabi_dmul>
 8014160:	a331      	add	r3, pc, #196	@ (adr r3, 8014228 <__ieee754_pow+0x770>)
 8014162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014166:	4606      	mov	r6, r0
 8014168:	460f      	mov	r7, r1
 801416a:	4620      	mov	r0, r4
 801416c:	4629      	mov	r1, r5
 801416e:	f7ec fa53 	bl	8000618 <__aeabi_dmul>
 8014172:	4602      	mov	r2, r0
 8014174:	460b      	mov	r3, r1
 8014176:	4630      	mov	r0, r6
 8014178:	4639      	mov	r1, r7
 801417a:	f7ec f897 	bl	80002ac <__adddf3>
 801417e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014180:	4b32      	ldr	r3, [pc, #200]	@ (801424c <__ieee754_pow+0x794>)
 8014182:	4413      	add	r3, r2
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	f7ec f890 	bl	80002ac <__adddf3>
 801418c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014190:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014192:	f7ec f9d7 	bl	8000544 <__aeabi_i2d>
 8014196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014198:	4b2d      	ldr	r3, [pc, #180]	@ (8014250 <__ieee754_pow+0x798>)
 801419a:	4413      	add	r3, r2
 801419c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141a0:	4606      	mov	r6, r0
 80141a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80141a6:	460f      	mov	r7, r1
 80141a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141ac:	f7ec f87e 	bl	80002ac <__adddf3>
 80141b0:	4642      	mov	r2, r8
 80141b2:	464b      	mov	r3, r9
 80141b4:	f7ec f87a 	bl	80002ac <__adddf3>
 80141b8:	4632      	mov	r2, r6
 80141ba:	463b      	mov	r3, r7
 80141bc:	f7ec f876 	bl	80002ac <__adddf3>
 80141c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80141c4:	4632      	mov	r2, r6
 80141c6:	463b      	mov	r3, r7
 80141c8:	4658      	mov	r0, fp
 80141ca:	460d      	mov	r5, r1
 80141cc:	f7ec f86c 	bl	80002a8 <__aeabi_dsub>
 80141d0:	4642      	mov	r2, r8
 80141d2:	464b      	mov	r3, r9
 80141d4:	f7ec f868 	bl	80002a8 <__aeabi_dsub>
 80141d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141dc:	f7ec f864 	bl	80002a8 <__aeabi_dsub>
 80141e0:	465c      	mov	r4, fp
 80141e2:	4602      	mov	r2, r0
 80141e4:	e036      	b.n	8014254 <__ieee754_pow+0x79c>
 80141e6:	bf00      	nop
 80141e8:	4a454eef 	.word	0x4a454eef
 80141ec:	3fca7e28 	.word	0x3fca7e28
 80141f0:	93c9db65 	.word	0x93c9db65
 80141f4:	3fcd864a 	.word	0x3fcd864a
 80141f8:	a91d4101 	.word	0xa91d4101
 80141fc:	3fd17460 	.word	0x3fd17460
 8014200:	518f264d 	.word	0x518f264d
 8014204:	3fd55555 	.word	0x3fd55555
 8014208:	db6fabff 	.word	0xdb6fabff
 801420c:	3fdb6db6 	.word	0x3fdb6db6
 8014210:	33333303 	.word	0x33333303
 8014214:	3fe33333 	.word	0x3fe33333
 8014218:	e0000000 	.word	0xe0000000
 801421c:	3feec709 	.word	0x3feec709
 8014220:	dc3a03fd 	.word	0xdc3a03fd
 8014224:	3feec709 	.word	0x3feec709
 8014228:	145b01f5 	.word	0x145b01f5
 801422c:	be3e2fe0 	.word	0xbe3e2fe0
 8014230:	7ff00000 	.word	0x7ff00000
 8014234:	43400000 	.word	0x43400000
 8014238:	0003988e 	.word	0x0003988e
 801423c:	000bb679 	.word	0x000bb679
 8014240:	08015fe8 	.word	0x08015fe8
 8014244:	3ff00000 	.word	0x3ff00000
 8014248:	40080000 	.word	0x40080000
 801424c:	08015fc8 	.word	0x08015fc8
 8014250:	08015fd8 	.word	0x08015fd8
 8014254:	460b      	mov	r3, r1
 8014256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801425a:	e5d7      	b.n	8013e0c <__ieee754_pow+0x354>
 801425c:	f04f 0a01 	mov.w	sl, #1
 8014260:	e65e      	b.n	8013f20 <__ieee754_pow+0x468>
 8014262:	a3b4      	add	r3, pc, #720	@ (adr r3, 8014534 <__ieee754_pow+0xa7c>)
 8014264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014268:	4630      	mov	r0, r6
 801426a:	4639      	mov	r1, r7
 801426c:	f7ec f81e 	bl	80002ac <__adddf3>
 8014270:	4642      	mov	r2, r8
 8014272:	e9cd 0100 	strd	r0, r1, [sp]
 8014276:	464b      	mov	r3, r9
 8014278:	4620      	mov	r0, r4
 801427a:	4629      	mov	r1, r5
 801427c:	f7ec f814 	bl	80002a8 <__aeabi_dsub>
 8014280:	4602      	mov	r2, r0
 8014282:	460b      	mov	r3, r1
 8014284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014288:	f7ec fc56 	bl	8000b38 <__aeabi_dcmpgt>
 801428c:	2800      	cmp	r0, #0
 801428e:	f47f ae00 	bne.w	8013e92 <__ieee754_pow+0x3da>
 8014292:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8014296:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801429a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801429e:	fa43 fa0a 	asr.w	sl, r3, sl
 80142a2:	44da      	add	sl, fp
 80142a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80142a8:	489d      	ldr	r0, [pc, #628]	@ (8014520 <__ieee754_pow+0xa68>)
 80142aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80142ae:	4108      	asrs	r0, r1
 80142b0:	ea00 030a 	and.w	r3, r0, sl
 80142b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80142b8:	f1c1 0114 	rsb	r1, r1, #20
 80142bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80142c0:	fa4a fa01 	asr.w	sl, sl, r1
 80142c4:	f1bb 0f00 	cmp.w	fp, #0
 80142c8:	4640      	mov	r0, r8
 80142ca:	4649      	mov	r1, r9
 80142cc:	f04f 0200 	mov.w	r2, #0
 80142d0:	bfb8      	it	lt
 80142d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80142d6:	f7eb ffe7 	bl	80002a8 <__aeabi_dsub>
 80142da:	4680      	mov	r8, r0
 80142dc:	4689      	mov	r9, r1
 80142de:	4632      	mov	r2, r6
 80142e0:	463b      	mov	r3, r7
 80142e2:	4640      	mov	r0, r8
 80142e4:	4649      	mov	r1, r9
 80142e6:	f7eb ffe1 	bl	80002ac <__adddf3>
 80142ea:	2400      	movs	r4, #0
 80142ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80144e0 <__ieee754_pow+0xa28>)
 80142ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f2:	4620      	mov	r0, r4
 80142f4:	460d      	mov	r5, r1
 80142f6:	f7ec f98f 	bl	8000618 <__aeabi_dmul>
 80142fa:	4642      	mov	r2, r8
 80142fc:	e9cd 0100 	strd	r0, r1, [sp]
 8014300:	464b      	mov	r3, r9
 8014302:	4620      	mov	r0, r4
 8014304:	4629      	mov	r1, r5
 8014306:	f7eb ffcf 	bl	80002a8 <__aeabi_dsub>
 801430a:	4602      	mov	r2, r0
 801430c:	460b      	mov	r3, r1
 801430e:	4630      	mov	r0, r6
 8014310:	4639      	mov	r1, r7
 8014312:	f7eb ffc9 	bl	80002a8 <__aeabi_dsub>
 8014316:	a374      	add	r3, pc, #464	@ (adr r3, 80144e8 <__ieee754_pow+0xa30>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	f7ec f97c 	bl	8000618 <__aeabi_dmul>
 8014320:	a373      	add	r3, pc, #460	@ (adr r3, 80144f0 <__ieee754_pow+0xa38>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	4680      	mov	r8, r0
 8014328:	4689      	mov	r9, r1
 801432a:	4620      	mov	r0, r4
 801432c:	4629      	mov	r1, r5
 801432e:	f7ec f973 	bl	8000618 <__aeabi_dmul>
 8014332:	4602      	mov	r2, r0
 8014334:	460b      	mov	r3, r1
 8014336:	4640      	mov	r0, r8
 8014338:	4649      	mov	r1, r9
 801433a:	f7eb ffb7 	bl	80002ac <__adddf3>
 801433e:	4604      	mov	r4, r0
 8014340:	460d      	mov	r5, r1
 8014342:	4602      	mov	r2, r0
 8014344:	460b      	mov	r3, r1
 8014346:	e9dd 0100 	ldrd	r0, r1, [sp]
 801434a:	f7eb ffaf 	bl	80002ac <__adddf3>
 801434e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014352:	4680      	mov	r8, r0
 8014354:	4689      	mov	r9, r1
 8014356:	f7eb ffa7 	bl	80002a8 <__aeabi_dsub>
 801435a:	4602      	mov	r2, r0
 801435c:	460b      	mov	r3, r1
 801435e:	4620      	mov	r0, r4
 8014360:	4629      	mov	r1, r5
 8014362:	f7eb ffa1 	bl	80002a8 <__aeabi_dsub>
 8014366:	4642      	mov	r2, r8
 8014368:	4606      	mov	r6, r0
 801436a:	460f      	mov	r7, r1
 801436c:	464b      	mov	r3, r9
 801436e:	4640      	mov	r0, r8
 8014370:	4649      	mov	r1, r9
 8014372:	f7ec f951 	bl	8000618 <__aeabi_dmul>
 8014376:	a360      	add	r3, pc, #384	@ (adr r3, 80144f8 <__ieee754_pow+0xa40>)
 8014378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437c:	4604      	mov	r4, r0
 801437e:	460d      	mov	r5, r1
 8014380:	f7ec f94a 	bl	8000618 <__aeabi_dmul>
 8014384:	a35e      	add	r3, pc, #376	@ (adr r3, 8014500 <__ieee754_pow+0xa48>)
 8014386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438a:	f7eb ff8d 	bl	80002a8 <__aeabi_dsub>
 801438e:	4622      	mov	r2, r4
 8014390:	462b      	mov	r3, r5
 8014392:	f7ec f941 	bl	8000618 <__aeabi_dmul>
 8014396:	a35c      	add	r3, pc, #368	@ (adr r3, 8014508 <__ieee754_pow+0xa50>)
 8014398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439c:	f7eb ff86 	bl	80002ac <__adddf3>
 80143a0:	4622      	mov	r2, r4
 80143a2:	462b      	mov	r3, r5
 80143a4:	f7ec f938 	bl	8000618 <__aeabi_dmul>
 80143a8:	a359      	add	r3, pc, #356	@ (adr r3, 8014510 <__ieee754_pow+0xa58>)
 80143aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ae:	f7eb ff7b 	bl	80002a8 <__aeabi_dsub>
 80143b2:	4622      	mov	r2, r4
 80143b4:	462b      	mov	r3, r5
 80143b6:	f7ec f92f 	bl	8000618 <__aeabi_dmul>
 80143ba:	a357      	add	r3, pc, #348	@ (adr r3, 8014518 <__ieee754_pow+0xa60>)
 80143bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c0:	f7eb ff74 	bl	80002ac <__adddf3>
 80143c4:	4622      	mov	r2, r4
 80143c6:	462b      	mov	r3, r5
 80143c8:	f7ec f926 	bl	8000618 <__aeabi_dmul>
 80143cc:	4602      	mov	r2, r0
 80143ce:	460b      	mov	r3, r1
 80143d0:	4640      	mov	r0, r8
 80143d2:	4649      	mov	r1, r9
 80143d4:	f7eb ff68 	bl	80002a8 <__aeabi_dsub>
 80143d8:	4604      	mov	r4, r0
 80143da:	460d      	mov	r5, r1
 80143dc:	4602      	mov	r2, r0
 80143de:	460b      	mov	r3, r1
 80143e0:	4640      	mov	r0, r8
 80143e2:	4649      	mov	r1, r9
 80143e4:	f7ec f918 	bl	8000618 <__aeabi_dmul>
 80143e8:	2200      	movs	r2, #0
 80143ea:	e9cd 0100 	strd	r0, r1, [sp]
 80143ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80143f2:	4620      	mov	r0, r4
 80143f4:	4629      	mov	r1, r5
 80143f6:	f7eb ff57 	bl	80002a8 <__aeabi_dsub>
 80143fa:	4602      	mov	r2, r0
 80143fc:	460b      	mov	r3, r1
 80143fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014402:	f7ec fa33 	bl	800086c <__aeabi_ddiv>
 8014406:	4632      	mov	r2, r6
 8014408:	4604      	mov	r4, r0
 801440a:	460d      	mov	r5, r1
 801440c:	463b      	mov	r3, r7
 801440e:	4640      	mov	r0, r8
 8014410:	4649      	mov	r1, r9
 8014412:	f7ec f901 	bl	8000618 <__aeabi_dmul>
 8014416:	4632      	mov	r2, r6
 8014418:	463b      	mov	r3, r7
 801441a:	f7eb ff47 	bl	80002ac <__adddf3>
 801441e:	4602      	mov	r2, r0
 8014420:	460b      	mov	r3, r1
 8014422:	4620      	mov	r0, r4
 8014424:	4629      	mov	r1, r5
 8014426:	f7eb ff3f 	bl	80002a8 <__aeabi_dsub>
 801442a:	4642      	mov	r2, r8
 801442c:	464b      	mov	r3, r9
 801442e:	f7eb ff3b 	bl	80002a8 <__aeabi_dsub>
 8014432:	460b      	mov	r3, r1
 8014434:	4602      	mov	r2, r0
 8014436:	493b      	ldr	r1, [pc, #236]	@ (8014524 <__ieee754_pow+0xa6c>)
 8014438:	2000      	movs	r0, #0
 801443a:	f7eb ff35 	bl	80002a8 <__aeabi_dsub>
 801443e:	ec41 0b10 	vmov	d0, r0, r1
 8014442:	ee10 3a90 	vmov	r3, s1
 8014446:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801444a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801444e:	da30      	bge.n	80144b2 <__ieee754_pow+0x9fa>
 8014450:	4650      	mov	r0, sl
 8014452:	f000 fc09 	bl	8014c68 <scalbn>
 8014456:	ec51 0b10 	vmov	r0, r1, d0
 801445a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801445e:	f7ff bbd2 	b.w	8013c06 <__ieee754_pow+0x14e>
 8014462:	4c31      	ldr	r4, [pc, #196]	@ (8014528 <__ieee754_pow+0xa70>)
 8014464:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014468:	42a3      	cmp	r3, r4
 801446a:	d91a      	bls.n	80144a2 <__ieee754_pow+0x9ea>
 801446c:	4b2f      	ldr	r3, [pc, #188]	@ (801452c <__ieee754_pow+0xa74>)
 801446e:	440b      	add	r3, r1
 8014470:	4303      	orrs	r3, r0
 8014472:	d009      	beq.n	8014488 <__ieee754_pow+0x9d0>
 8014474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014478:	2200      	movs	r2, #0
 801447a:	2300      	movs	r3, #0
 801447c:	f7ec fb3e 	bl	8000afc <__aeabi_dcmplt>
 8014480:	3800      	subs	r0, #0
 8014482:	bf18      	it	ne
 8014484:	2001      	movne	r0, #1
 8014486:	e42b      	b.n	8013ce0 <__ieee754_pow+0x228>
 8014488:	4642      	mov	r2, r8
 801448a:	464b      	mov	r3, r9
 801448c:	f7eb ff0c 	bl	80002a8 <__aeabi_dsub>
 8014490:	4632      	mov	r2, r6
 8014492:	463b      	mov	r3, r7
 8014494:	f7ec fb46 	bl	8000b24 <__aeabi_dcmpge>
 8014498:	2800      	cmp	r0, #0
 801449a:	d1eb      	bne.n	8014474 <__ieee754_pow+0x9bc>
 801449c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801453c <__ieee754_pow+0xa84>
 80144a0:	e6f7      	b.n	8014292 <__ieee754_pow+0x7da>
 80144a2:	469a      	mov	sl, r3
 80144a4:	4b22      	ldr	r3, [pc, #136]	@ (8014530 <__ieee754_pow+0xa78>)
 80144a6:	459a      	cmp	sl, r3
 80144a8:	f63f aef3 	bhi.w	8014292 <__ieee754_pow+0x7da>
 80144ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80144b0:	e715      	b.n	80142de <__ieee754_pow+0x826>
 80144b2:	ec51 0b10 	vmov	r0, r1, d0
 80144b6:	4619      	mov	r1, r3
 80144b8:	e7cf      	b.n	801445a <__ieee754_pow+0x9a2>
 80144ba:	491a      	ldr	r1, [pc, #104]	@ (8014524 <__ieee754_pow+0xa6c>)
 80144bc:	2000      	movs	r0, #0
 80144be:	f7ff bb18 	b.w	8013af2 <__ieee754_pow+0x3a>
 80144c2:	2000      	movs	r0, #0
 80144c4:	2100      	movs	r1, #0
 80144c6:	f7ff bb14 	b.w	8013af2 <__ieee754_pow+0x3a>
 80144ca:	4630      	mov	r0, r6
 80144cc:	4639      	mov	r1, r7
 80144ce:	f7ff bb10 	b.w	8013af2 <__ieee754_pow+0x3a>
 80144d2:	460c      	mov	r4, r1
 80144d4:	f7ff bb5e 	b.w	8013b94 <__ieee754_pow+0xdc>
 80144d8:	2400      	movs	r4, #0
 80144da:	f7ff bb49 	b.w	8013b70 <__ieee754_pow+0xb8>
 80144de:	bf00      	nop
 80144e0:	00000000 	.word	0x00000000
 80144e4:	3fe62e43 	.word	0x3fe62e43
 80144e8:	fefa39ef 	.word	0xfefa39ef
 80144ec:	3fe62e42 	.word	0x3fe62e42
 80144f0:	0ca86c39 	.word	0x0ca86c39
 80144f4:	be205c61 	.word	0xbe205c61
 80144f8:	72bea4d0 	.word	0x72bea4d0
 80144fc:	3e663769 	.word	0x3e663769
 8014500:	c5d26bf1 	.word	0xc5d26bf1
 8014504:	3ebbbd41 	.word	0x3ebbbd41
 8014508:	af25de2c 	.word	0xaf25de2c
 801450c:	3f11566a 	.word	0x3f11566a
 8014510:	16bebd93 	.word	0x16bebd93
 8014514:	3f66c16c 	.word	0x3f66c16c
 8014518:	5555553e 	.word	0x5555553e
 801451c:	3fc55555 	.word	0x3fc55555
 8014520:	fff00000 	.word	0xfff00000
 8014524:	3ff00000 	.word	0x3ff00000
 8014528:	4090cbff 	.word	0x4090cbff
 801452c:	3f6f3400 	.word	0x3f6f3400
 8014530:	3fe00000 	.word	0x3fe00000
 8014534:	652b82fe 	.word	0x652b82fe
 8014538:	3c971547 	.word	0x3c971547
 801453c:	4090cc00 	.word	0x4090cc00

08014540 <__ieee754_rem_pio2>:
 8014540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	ec57 6b10 	vmov	r6, r7, d0
 8014548:	4bc5      	ldr	r3, [pc, #788]	@ (8014860 <__ieee754_rem_pio2+0x320>)
 801454a:	b08d      	sub	sp, #52	@ 0x34
 801454c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014550:	4598      	cmp	r8, r3
 8014552:	4604      	mov	r4, r0
 8014554:	9704      	str	r7, [sp, #16]
 8014556:	d807      	bhi.n	8014568 <__ieee754_rem_pio2+0x28>
 8014558:	2200      	movs	r2, #0
 801455a:	2300      	movs	r3, #0
 801455c:	ed80 0b00 	vstr	d0, [r0]
 8014560:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014564:	2500      	movs	r5, #0
 8014566:	e028      	b.n	80145ba <__ieee754_rem_pio2+0x7a>
 8014568:	4bbe      	ldr	r3, [pc, #760]	@ (8014864 <__ieee754_rem_pio2+0x324>)
 801456a:	4598      	cmp	r8, r3
 801456c:	d878      	bhi.n	8014660 <__ieee754_rem_pio2+0x120>
 801456e:	9b04      	ldr	r3, [sp, #16]
 8014570:	4dbd      	ldr	r5, [pc, #756]	@ (8014868 <__ieee754_rem_pio2+0x328>)
 8014572:	2b00      	cmp	r3, #0
 8014574:	4630      	mov	r0, r6
 8014576:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014828 <__ieee754_rem_pio2+0x2e8>)
 8014578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457c:	4639      	mov	r1, r7
 801457e:	dd38      	ble.n	80145f2 <__ieee754_rem_pio2+0xb2>
 8014580:	f7eb fe92 	bl	80002a8 <__aeabi_dsub>
 8014584:	45a8      	cmp	r8, r5
 8014586:	4606      	mov	r6, r0
 8014588:	460f      	mov	r7, r1
 801458a:	d01a      	beq.n	80145c2 <__ieee754_rem_pio2+0x82>
 801458c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014830 <__ieee754_rem_pio2+0x2f0>)
 801458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014592:	f7eb fe89 	bl	80002a8 <__aeabi_dsub>
 8014596:	4602      	mov	r2, r0
 8014598:	460b      	mov	r3, r1
 801459a:	4680      	mov	r8, r0
 801459c:	4689      	mov	r9, r1
 801459e:	4630      	mov	r0, r6
 80145a0:	4639      	mov	r1, r7
 80145a2:	f7eb fe81 	bl	80002a8 <__aeabi_dsub>
 80145a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014830 <__ieee754_rem_pio2+0x2f0>)
 80145a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ac:	f7eb fe7c 	bl	80002a8 <__aeabi_dsub>
 80145b0:	e9c4 8900 	strd	r8, r9, [r4]
 80145b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145b8:	2501      	movs	r5, #1
 80145ba:	4628      	mov	r0, r5
 80145bc:	b00d      	add	sp, #52	@ 0x34
 80145be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8014838 <__ieee754_rem_pio2+0x2f8>)
 80145c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c8:	f7eb fe6e 	bl	80002a8 <__aeabi_dsub>
 80145cc:	a39c      	add	r3, pc, #624	@ (adr r3, 8014840 <__ieee754_rem_pio2+0x300>)
 80145ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d2:	4606      	mov	r6, r0
 80145d4:	460f      	mov	r7, r1
 80145d6:	f7eb fe67 	bl	80002a8 <__aeabi_dsub>
 80145da:	4602      	mov	r2, r0
 80145dc:	460b      	mov	r3, r1
 80145de:	4680      	mov	r8, r0
 80145e0:	4689      	mov	r9, r1
 80145e2:	4630      	mov	r0, r6
 80145e4:	4639      	mov	r1, r7
 80145e6:	f7eb fe5f 	bl	80002a8 <__aeabi_dsub>
 80145ea:	a395      	add	r3, pc, #596	@ (adr r3, 8014840 <__ieee754_rem_pio2+0x300>)
 80145ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f0:	e7dc      	b.n	80145ac <__ieee754_rem_pio2+0x6c>
 80145f2:	f7eb fe5b 	bl	80002ac <__adddf3>
 80145f6:	45a8      	cmp	r8, r5
 80145f8:	4606      	mov	r6, r0
 80145fa:	460f      	mov	r7, r1
 80145fc:	d018      	beq.n	8014630 <__ieee754_rem_pio2+0xf0>
 80145fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8014830 <__ieee754_rem_pio2+0x2f0>)
 8014600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014604:	f7eb fe52 	bl	80002ac <__adddf3>
 8014608:	4602      	mov	r2, r0
 801460a:	460b      	mov	r3, r1
 801460c:	4680      	mov	r8, r0
 801460e:	4689      	mov	r9, r1
 8014610:	4630      	mov	r0, r6
 8014612:	4639      	mov	r1, r7
 8014614:	f7eb fe48 	bl	80002a8 <__aeabi_dsub>
 8014618:	a385      	add	r3, pc, #532	@ (adr r3, 8014830 <__ieee754_rem_pio2+0x2f0>)
 801461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461e:	f7eb fe45 	bl	80002ac <__adddf3>
 8014622:	f04f 35ff 	mov.w	r5, #4294967295
 8014626:	e9c4 8900 	strd	r8, r9, [r4]
 801462a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801462e:	e7c4      	b.n	80145ba <__ieee754_rem_pio2+0x7a>
 8014630:	a381      	add	r3, pc, #516	@ (adr r3, 8014838 <__ieee754_rem_pio2+0x2f8>)
 8014632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014636:	f7eb fe39 	bl	80002ac <__adddf3>
 801463a:	a381      	add	r3, pc, #516	@ (adr r3, 8014840 <__ieee754_rem_pio2+0x300>)
 801463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014640:	4606      	mov	r6, r0
 8014642:	460f      	mov	r7, r1
 8014644:	f7eb fe32 	bl	80002ac <__adddf3>
 8014648:	4602      	mov	r2, r0
 801464a:	460b      	mov	r3, r1
 801464c:	4680      	mov	r8, r0
 801464e:	4689      	mov	r9, r1
 8014650:	4630      	mov	r0, r6
 8014652:	4639      	mov	r1, r7
 8014654:	f7eb fe28 	bl	80002a8 <__aeabi_dsub>
 8014658:	a379      	add	r3, pc, #484	@ (adr r3, 8014840 <__ieee754_rem_pio2+0x300>)
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	e7de      	b.n	801461e <__ieee754_rem_pio2+0xde>
 8014660:	4b82      	ldr	r3, [pc, #520]	@ (801486c <__ieee754_rem_pio2+0x32c>)
 8014662:	4598      	cmp	r8, r3
 8014664:	f200 80d1 	bhi.w	801480a <__ieee754_rem_pio2+0x2ca>
 8014668:	f7fe fb46 	bl	8012cf8 <fabs>
 801466c:	ec57 6b10 	vmov	r6, r7, d0
 8014670:	a375      	add	r3, pc, #468	@ (adr r3, 8014848 <__ieee754_rem_pio2+0x308>)
 8014672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014676:	4630      	mov	r0, r6
 8014678:	4639      	mov	r1, r7
 801467a:	f7eb ffcd 	bl	8000618 <__aeabi_dmul>
 801467e:	4b7c      	ldr	r3, [pc, #496]	@ (8014870 <__ieee754_rem_pio2+0x330>)
 8014680:	2200      	movs	r2, #0
 8014682:	f7eb fe13 	bl	80002ac <__adddf3>
 8014686:	f7ec fa77 	bl	8000b78 <__aeabi_d2iz>
 801468a:	4605      	mov	r5, r0
 801468c:	f7eb ff5a 	bl	8000544 <__aeabi_i2d>
 8014690:	4602      	mov	r2, r0
 8014692:	460b      	mov	r3, r1
 8014694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014698:	a363      	add	r3, pc, #396	@ (adr r3, 8014828 <__ieee754_rem_pio2+0x2e8>)
 801469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469e:	f7eb ffbb 	bl	8000618 <__aeabi_dmul>
 80146a2:	4602      	mov	r2, r0
 80146a4:	460b      	mov	r3, r1
 80146a6:	4630      	mov	r0, r6
 80146a8:	4639      	mov	r1, r7
 80146aa:	f7eb fdfd 	bl	80002a8 <__aeabi_dsub>
 80146ae:	a360      	add	r3, pc, #384	@ (adr r3, 8014830 <__ieee754_rem_pio2+0x2f0>)
 80146b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b4:	4682      	mov	sl, r0
 80146b6:	468b      	mov	fp, r1
 80146b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146bc:	f7eb ffac 	bl	8000618 <__aeabi_dmul>
 80146c0:	2d1f      	cmp	r5, #31
 80146c2:	4606      	mov	r6, r0
 80146c4:	460f      	mov	r7, r1
 80146c6:	dc0c      	bgt.n	80146e2 <__ieee754_rem_pio2+0x1a2>
 80146c8:	4b6a      	ldr	r3, [pc, #424]	@ (8014874 <__ieee754_rem_pio2+0x334>)
 80146ca:	1e6a      	subs	r2, r5, #1
 80146cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d0:	4543      	cmp	r3, r8
 80146d2:	d006      	beq.n	80146e2 <__ieee754_rem_pio2+0x1a2>
 80146d4:	4632      	mov	r2, r6
 80146d6:	463b      	mov	r3, r7
 80146d8:	4650      	mov	r0, sl
 80146da:	4659      	mov	r1, fp
 80146dc:	f7eb fde4 	bl	80002a8 <__aeabi_dsub>
 80146e0:	e00e      	b.n	8014700 <__ieee754_rem_pio2+0x1c0>
 80146e2:	463b      	mov	r3, r7
 80146e4:	4632      	mov	r2, r6
 80146e6:	4650      	mov	r0, sl
 80146e8:	4659      	mov	r1, fp
 80146ea:	f7eb fddd 	bl	80002a8 <__aeabi_dsub>
 80146ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146f2:	9305      	str	r3, [sp, #20]
 80146f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80146fc:	2b10      	cmp	r3, #16
 80146fe:	dc02      	bgt.n	8014706 <__ieee754_rem_pio2+0x1c6>
 8014700:	e9c4 0100 	strd	r0, r1, [r4]
 8014704:	e039      	b.n	801477a <__ieee754_rem_pio2+0x23a>
 8014706:	a34c      	add	r3, pc, #304	@ (adr r3, 8014838 <__ieee754_rem_pio2+0x2f8>)
 8014708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014710:	f7eb ff82 	bl	8000618 <__aeabi_dmul>
 8014714:	4606      	mov	r6, r0
 8014716:	460f      	mov	r7, r1
 8014718:	4602      	mov	r2, r0
 801471a:	460b      	mov	r3, r1
 801471c:	4650      	mov	r0, sl
 801471e:	4659      	mov	r1, fp
 8014720:	f7eb fdc2 	bl	80002a8 <__aeabi_dsub>
 8014724:	4602      	mov	r2, r0
 8014726:	460b      	mov	r3, r1
 8014728:	4680      	mov	r8, r0
 801472a:	4689      	mov	r9, r1
 801472c:	4650      	mov	r0, sl
 801472e:	4659      	mov	r1, fp
 8014730:	f7eb fdba 	bl	80002a8 <__aeabi_dsub>
 8014734:	4632      	mov	r2, r6
 8014736:	463b      	mov	r3, r7
 8014738:	f7eb fdb6 	bl	80002a8 <__aeabi_dsub>
 801473c:	a340      	add	r3, pc, #256	@ (adr r3, 8014840 <__ieee754_rem_pio2+0x300>)
 801473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014742:	4606      	mov	r6, r0
 8014744:	460f      	mov	r7, r1
 8014746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801474a:	f7eb ff65 	bl	8000618 <__aeabi_dmul>
 801474e:	4632      	mov	r2, r6
 8014750:	463b      	mov	r3, r7
 8014752:	f7eb fda9 	bl	80002a8 <__aeabi_dsub>
 8014756:	4602      	mov	r2, r0
 8014758:	460b      	mov	r3, r1
 801475a:	4606      	mov	r6, r0
 801475c:	460f      	mov	r7, r1
 801475e:	4640      	mov	r0, r8
 8014760:	4649      	mov	r1, r9
 8014762:	f7eb fda1 	bl	80002a8 <__aeabi_dsub>
 8014766:	9a05      	ldr	r2, [sp, #20]
 8014768:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	2b31      	cmp	r3, #49	@ 0x31
 8014770:	dc20      	bgt.n	80147b4 <__ieee754_rem_pio2+0x274>
 8014772:	e9c4 0100 	strd	r0, r1, [r4]
 8014776:	46c2      	mov	sl, r8
 8014778:	46cb      	mov	fp, r9
 801477a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801477e:	4650      	mov	r0, sl
 8014780:	4642      	mov	r2, r8
 8014782:	464b      	mov	r3, r9
 8014784:	4659      	mov	r1, fp
 8014786:	f7eb fd8f 	bl	80002a8 <__aeabi_dsub>
 801478a:	463b      	mov	r3, r7
 801478c:	4632      	mov	r2, r6
 801478e:	f7eb fd8b 	bl	80002a8 <__aeabi_dsub>
 8014792:	9b04      	ldr	r3, [sp, #16]
 8014794:	2b00      	cmp	r3, #0
 8014796:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801479a:	f6bf af0e 	bge.w	80145ba <__ieee754_rem_pio2+0x7a>
 801479e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80147a2:	6063      	str	r3, [r4, #4]
 80147a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147a8:	f8c4 8000 	str.w	r8, [r4]
 80147ac:	60a0      	str	r0, [r4, #8]
 80147ae:	60e3      	str	r3, [r4, #12]
 80147b0:	426d      	negs	r5, r5
 80147b2:	e702      	b.n	80145ba <__ieee754_rem_pio2+0x7a>
 80147b4:	a326      	add	r3, pc, #152	@ (adr r3, 8014850 <__ieee754_rem_pio2+0x310>)
 80147b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147be:	f7eb ff2b 	bl	8000618 <__aeabi_dmul>
 80147c2:	4606      	mov	r6, r0
 80147c4:	460f      	mov	r7, r1
 80147c6:	4602      	mov	r2, r0
 80147c8:	460b      	mov	r3, r1
 80147ca:	4640      	mov	r0, r8
 80147cc:	4649      	mov	r1, r9
 80147ce:	f7eb fd6b 	bl	80002a8 <__aeabi_dsub>
 80147d2:	4602      	mov	r2, r0
 80147d4:	460b      	mov	r3, r1
 80147d6:	4682      	mov	sl, r0
 80147d8:	468b      	mov	fp, r1
 80147da:	4640      	mov	r0, r8
 80147dc:	4649      	mov	r1, r9
 80147de:	f7eb fd63 	bl	80002a8 <__aeabi_dsub>
 80147e2:	4632      	mov	r2, r6
 80147e4:	463b      	mov	r3, r7
 80147e6:	f7eb fd5f 	bl	80002a8 <__aeabi_dsub>
 80147ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8014858 <__ieee754_rem_pio2+0x318>)
 80147ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f0:	4606      	mov	r6, r0
 80147f2:	460f      	mov	r7, r1
 80147f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147f8:	f7eb ff0e 	bl	8000618 <__aeabi_dmul>
 80147fc:	4632      	mov	r2, r6
 80147fe:	463b      	mov	r3, r7
 8014800:	f7eb fd52 	bl	80002a8 <__aeabi_dsub>
 8014804:	4606      	mov	r6, r0
 8014806:	460f      	mov	r7, r1
 8014808:	e764      	b.n	80146d4 <__ieee754_rem_pio2+0x194>
 801480a:	4b1b      	ldr	r3, [pc, #108]	@ (8014878 <__ieee754_rem_pio2+0x338>)
 801480c:	4598      	cmp	r8, r3
 801480e:	d935      	bls.n	801487c <__ieee754_rem_pio2+0x33c>
 8014810:	4632      	mov	r2, r6
 8014812:	463b      	mov	r3, r7
 8014814:	4630      	mov	r0, r6
 8014816:	4639      	mov	r1, r7
 8014818:	f7eb fd46 	bl	80002a8 <__aeabi_dsub>
 801481c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014820:	e9c4 0100 	strd	r0, r1, [r4]
 8014824:	e69e      	b.n	8014564 <__ieee754_rem_pio2+0x24>
 8014826:	bf00      	nop
 8014828:	54400000 	.word	0x54400000
 801482c:	3ff921fb 	.word	0x3ff921fb
 8014830:	1a626331 	.word	0x1a626331
 8014834:	3dd0b461 	.word	0x3dd0b461
 8014838:	1a600000 	.word	0x1a600000
 801483c:	3dd0b461 	.word	0x3dd0b461
 8014840:	2e037073 	.word	0x2e037073
 8014844:	3ba3198a 	.word	0x3ba3198a
 8014848:	6dc9c883 	.word	0x6dc9c883
 801484c:	3fe45f30 	.word	0x3fe45f30
 8014850:	2e000000 	.word	0x2e000000
 8014854:	3ba3198a 	.word	0x3ba3198a
 8014858:	252049c1 	.word	0x252049c1
 801485c:	397b839a 	.word	0x397b839a
 8014860:	3fe921fb 	.word	0x3fe921fb
 8014864:	4002d97b 	.word	0x4002d97b
 8014868:	3ff921fb 	.word	0x3ff921fb
 801486c:	413921fb 	.word	0x413921fb
 8014870:	3fe00000 	.word	0x3fe00000
 8014874:	08015ff8 	.word	0x08015ff8
 8014878:	7fefffff 	.word	0x7fefffff
 801487c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014880:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8014884:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014888:	4630      	mov	r0, r6
 801488a:	460f      	mov	r7, r1
 801488c:	f7ec f974 	bl	8000b78 <__aeabi_d2iz>
 8014890:	f7eb fe58 	bl	8000544 <__aeabi_i2d>
 8014894:	4602      	mov	r2, r0
 8014896:	460b      	mov	r3, r1
 8014898:	4630      	mov	r0, r6
 801489a:	4639      	mov	r1, r7
 801489c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80148a0:	f7eb fd02 	bl	80002a8 <__aeabi_dsub>
 80148a4:	4b22      	ldr	r3, [pc, #136]	@ (8014930 <__ieee754_rem_pio2+0x3f0>)
 80148a6:	2200      	movs	r2, #0
 80148a8:	f7eb feb6 	bl	8000618 <__aeabi_dmul>
 80148ac:	460f      	mov	r7, r1
 80148ae:	4606      	mov	r6, r0
 80148b0:	f7ec f962 	bl	8000b78 <__aeabi_d2iz>
 80148b4:	f7eb fe46 	bl	8000544 <__aeabi_i2d>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4630      	mov	r0, r6
 80148be:	4639      	mov	r1, r7
 80148c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80148c4:	f7eb fcf0 	bl	80002a8 <__aeabi_dsub>
 80148c8:	4b19      	ldr	r3, [pc, #100]	@ (8014930 <__ieee754_rem_pio2+0x3f0>)
 80148ca:	2200      	movs	r2, #0
 80148cc:	f7eb fea4 	bl	8000618 <__aeabi_dmul>
 80148d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80148d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80148d8:	f04f 0803 	mov.w	r8, #3
 80148dc:	2600      	movs	r6, #0
 80148de:	2700      	movs	r7, #0
 80148e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80148e4:	4632      	mov	r2, r6
 80148e6:	463b      	mov	r3, r7
 80148e8:	46c2      	mov	sl, r8
 80148ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80148ee:	f7ec f8fb 	bl	8000ae8 <__aeabi_dcmpeq>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d1f4      	bne.n	80148e0 <__ieee754_rem_pio2+0x3a0>
 80148f6:	4b0f      	ldr	r3, [pc, #60]	@ (8014934 <__ieee754_rem_pio2+0x3f4>)
 80148f8:	9301      	str	r3, [sp, #4]
 80148fa:	2302      	movs	r3, #2
 80148fc:	9300      	str	r3, [sp, #0]
 80148fe:	462a      	mov	r2, r5
 8014900:	4653      	mov	r3, sl
 8014902:	4621      	mov	r1, r4
 8014904:	a806      	add	r0, sp, #24
 8014906:	f000 fa6b 	bl	8014de0 <__kernel_rem_pio2>
 801490a:	9b04      	ldr	r3, [sp, #16]
 801490c:	2b00      	cmp	r3, #0
 801490e:	4605      	mov	r5, r0
 8014910:	f6bf ae53 	bge.w	80145ba <__ieee754_rem_pio2+0x7a>
 8014914:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801491c:	e9c4 2300 	strd	r2, r3, [r4]
 8014920:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014924:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014928:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801492c:	e740      	b.n	80147b0 <__ieee754_rem_pio2+0x270>
 801492e:	bf00      	nop
 8014930:	41700000 	.word	0x41700000
 8014934:	08016078 	.word	0x08016078

08014938 <atan>:
 8014938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	ec55 4b10 	vmov	r4, r5, d0
 8014940:	4bbf      	ldr	r3, [pc, #764]	@ (8014c40 <atan+0x308>)
 8014942:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014946:	429e      	cmp	r6, r3
 8014948:	46ab      	mov	fp, r5
 801494a:	d918      	bls.n	801497e <atan+0x46>
 801494c:	4bbd      	ldr	r3, [pc, #756]	@ (8014c44 <atan+0x30c>)
 801494e:	429e      	cmp	r6, r3
 8014950:	d801      	bhi.n	8014956 <atan+0x1e>
 8014952:	d109      	bne.n	8014968 <atan+0x30>
 8014954:	b144      	cbz	r4, 8014968 <atan+0x30>
 8014956:	4622      	mov	r2, r4
 8014958:	462b      	mov	r3, r5
 801495a:	4620      	mov	r0, r4
 801495c:	4629      	mov	r1, r5
 801495e:	f7eb fca5 	bl	80002ac <__adddf3>
 8014962:	4604      	mov	r4, r0
 8014964:	460d      	mov	r5, r1
 8014966:	e006      	b.n	8014976 <atan+0x3e>
 8014968:	f1bb 0f00 	cmp.w	fp, #0
 801496c:	f340 812b 	ble.w	8014bc6 <atan+0x28e>
 8014970:	a597      	add	r5, pc, #604	@ (adr r5, 8014bd0 <atan+0x298>)
 8014972:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014976:	ec45 4b10 	vmov	d0, r4, r5
 801497a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497e:	4bb2      	ldr	r3, [pc, #712]	@ (8014c48 <atan+0x310>)
 8014980:	429e      	cmp	r6, r3
 8014982:	d813      	bhi.n	80149ac <atan+0x74>
 8014984:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014988:	429e      	cmp	r6, r3
 801498a:	d80c      	bhi.n	80149a6 <atan+0x6e>
 801498c:	a392      	add	r3, pc, #584	@ (adr r3, 8014bd8 <atan+0x2a0>)
 801498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014992:	4620      	mov	r0, r4
 8014994:	4629      	mov	r1, r5
 8014996:	f7eb fc89 	bl	80002ac <__adddf3>
 801499a:	4bac      	ldr	r3, [pc, #688]	@ (8014c4c <atan+0x314>)
 801499c:	2200      	movs	r2, #0
 801499e:	f7ec f8cb 	bl	8000b38 <__aeabi_dcmpgt>
 80149a2:	2800      	cmp	r0, #0
 80149a4:	d1e7      	bne.n	8014976 <atan+0x3e>
 80149a6:	f04f 3aff 	mov.w	sl, #4294967295
 80149aa:	e029      	b.n	8014a00 <atan+0xc8>
 80149ac:	f7fe f9a4 	bl	8012cf8 <fabs>
 80149b0:	4ba7      	ldr	r3, [pc, #668]	@ (8014c50 <atan+0x318>)
 80149b2:	429e      	cmp	r6, r3
 80149b4:	ec55 4b10 	vmov	r4, r5, d0
 80149b8:	f200 80bc 	bhi.w	8014b34 <atan+0x1fc>
 80149bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80149c0:	429e      	cmp	r6, r3
 80149c2:	f200 809e 	bhi.w	8014b02 <atan+0x1ca>
 80149c6:	4622      	mov	r2, r4
 80149c8:	462b      	mov	r3, r5
 80149ca:	4620      	mov	r0, r4
 80149cc:	4629      	mov	r1, r5
 80149ce:	f7eb fc6d 	bl	80002ac <__adddf3>
 80149d2:	4b9e      	ldr	r3, [pc, #632]	@ (8014c4c <atan+0x314>)
 80149d4:	2200      	movs	r2, #0
 80149d6:	f7eb fc67 	bl	80002a8 <__aeabi_dsub>
 80149da:	2200      	movs	r2, #0
 80149dc:	4606      	mov	r6, r0
 80149de:	460f      	mov	r7, r1
 80149e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80149e4:	4620      	mov	r0, r4
 80149e6:	4629      	mov	r1, r5
 80149e8:	f7eb fc60 	bl	80002ac <__adddf3>
 80149ec:	4602      	mov	r2, r0
 80149ee:	460b      	mov	r3, r1
 80149f0:	4630      	mov	r0, r6
 80149f2:	4639      	mov	r1, r7
 80149f4:	f7eb ff3a 	bl	800086c <__aeabi_ddiv>
 80149f8:	f04f 0a00 	mov.w	sl, #0
 80149fc:	4604      	mov	r4, r0
 80149fe:	460d      	mov	r5, r1
 8014a00:	4622      	mov	r2, r4
 8014a02:	462b      	mov	r3, r5
 8014a04:	4620      	mov	r0, r4
 8014a06:	4629      	mov	r1, r5
 8014a08:	f7eb fe06 	bl	8000618 <__aeabi_dmul>
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	460b      	mov	r3, r1
 8014a10:	4680      	mov	r8, r0
 8014a12:	4689      	mov	r9, r1
 8014a14:	f7eb fe00 	bl	8000618 <__aeabi_dmul>
 8014a18:	a371      	add	r3, pc, #452	@ (adr r3, 8014be0 <atan+0x2a8>)
 8014a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1e:	4606      	mov	r6, r0
 8014a20:	460f      	mov	r7, r1
 8014a22:	f7eb fdf9 	bl	8000618 <__aeabi_dmul>
 8014a26:	a370      	add	r3, pc, #448	@ (adr r3, 8014be8 <atan+0x2b0>)
 8014a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2c:	f7eb fc3e 	bl	80002ac <__adddf3>
 8014a30:	4632      	mov	r2, r6
 8014a32:	463b      	mov	r3, r7
 8014a34:	f7eb fdf0 	bl	8000618 <__aeabi_dmul>
 8014a38:	a36d      	add	r3, pc, #436	@ (adr r3, 8014bf0 <atan+0x2b8>)
 8014a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3e:	f7eb fc35 	bl	80002ac <__adddf3>
 8014a42:	4632      	mov	r2, r6
 8014a44:	463b      	mov	r3, r7
 8014a46:	f7eb fde7 	bl	8000618 <__aeabi_dmul>
 8014a4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014bf8 <atan+0x2c0>)
 8014a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a50:	f7eb fc2c 	bl	80002ac <__adddf3>
 8014a54:	4632      	mov	r2, r6
 8014a56:	463b      	mov	r3, r7
 8014a58:	f7eb fdde 	bl	8000618 <__aeabi_dmul>
 8014a5c:	a368      	add	r3, pc, #416	@ (adr r3, 8014c00 <atan+0x2c8>)
 8014a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a62:	f7eb fc23 	bl	80002ac <__adddf3>
 8014a66:	4632      	mov	r2, r6
 8014a68:	463b      	mov	r3, r7
 8014a6a:	f7eb fdd5 	bl	8000618 <__aeabi_dmul>
 8014a6e:	a366      	add	r3, pc, #408	@ (adr r3, 8014c08 <atan+0x2d0>)
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	f7eb fc1a 	bl	80002ac <__adddf3>
 8014a78:	4642      	mov	r2, r8
 8014a7a:	464b      	mov	r3, r9
 8014a7c:	f7eb fdcc 	bl	8000618 <__aeabi_dmul>
 8014a80:	a363      	add	r3, pc, #396	@ (adr r3, 8014c10 <atan+0x2d8>)
 8014a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a86:	4680      	mov	r8, r0
 8014a88:	4689      	mov	r9, r1
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	4639      	mov	r1, r7
 8014a8e:	f7eb fdc3 	bl	8000618 <__aeabi_dmul>
 8014a92:	a361      	add	r3, pc, #388	@ (adr r3, 8014c18 <atan+0x2e0>)
 8014a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a98:	f7eb fc06 	bl	80002a8 <__aeabi_dsub>
 8014a9c:	4632      	mov	r2, r6
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	f7eb fdba 	bl	8000618 <__aeabi_dmul>
 8014aa4:	a35e      	add	r3, pc, #376	@ (adr r3, 8014c20 <atan+0x2e8>)
 8014aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aaa:	f7eb fbfd 	bl	80002a8 <__aeabi_dsub>
 8014aae:	4632      	mov	r2, r6
 8014ab0:	463b      	mov	r3, r7
 8014ab2:	f7eb fdb1 	bl	8000618 <__aeabi_dmul>
 8014ab6:	a35c      	add	r3, pc, #368	@ (adr r3, 8014c28 <atan+0x2f0>)
 8014ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abc:	f7eb fbf4 	bl	80002a8 <__aeabi_dsub>
 8014ac0:	4632      	mov	r2, r6
 8014ac2:	463b      	mov	r3, r7
 8014ac4:	f7eb fda8 	bl	8000618 <__aeabi_dmul>
 8014ac8:	a359      	add	r3, pc, #356	@ (adr r3, 8014c30 <atan+0x2f8>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	f7eb fbeb 	bl	80002a8 <__aeabi_dsub>
 8014ad2:	4632      	mov	r2, r6
 8014ad4:	463b      	mov	r3, r7
 8014ad6:	f7eb fd9f 	bl	8000618 <__aeabi_dmul>
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	4640      	mov	r0, r8
 8014ae0:	4649      	mov	r1, r9
 8014ae2:	f7eb fbe3 	bl	80002ac <__adddf3>
 8014ae6:	4622      	mov	r2, r4
 8014ae8:	462b      	mov	r3, r5
 8014aea:	f7eb fd95 	bl	8000618 <__aeabi_dmul>
 8014aee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014af2:	4602      	mov	r2, r0
 8014af4:	460b      	mov	r3, r1
 8014af6:	d148      	bne.n	8014b8a <atan+0x252>
 8014af8:	4620      	mov	r0, r4
 8014afa:	4629      	mov	r1, r5
 8014afc:	f7eb fbd4 	bl	80002a8 <__aeabi_dsub>
 8014b00:	e72f      	b.n	8014962 <atan+0x2a>
 8014b02:	4b52      	ldr	r3, [pc, #328]	@ (8014c4c <atan+0x314>)
 8014b04:	2200      	movs	r2, #0
 8014b06:	4620      	mov	r0, r4
 8014b08:	4629      	mov	r1, r5
 8014b0a:	f7eb fbcd 	bl	80002a8 <__aeabi_dsub>
 8014b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8014c4c <atan+0x314>)
 8014b10:	4606      	mov	r6, r0
 8014b12:	460f      	mov	r7, r1
 8014b14:	2200      	movs	r2, #0
 8014b16:	4620      	mov	r0, r4
 8014b18:	4629      	mov	r1, r5
 8014b1a:	f7eb fbc7 	bl	80002ac <__adddf3>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	4630      	mov	r0, r6
 8014b24:	4639      	mov	r1, r7
 8014b26:	f7eb fea1 	bl	800086c <__aeabi_ddiv>
 8014b2a:	f04f 0a01 	mov.w	sl, #1
 8014b2e:	4604      	mov	r4, r0
 8014b30:	460d      	mov	r5, r1
 8014b32:	e765      	b.n	8014a00 <atan+0xc8>
 8014b34:	4b47      	ldr	r3, [pc, #284]	@ (8014c54 <atan+0x31c>)
 8014b36:	429e      	cmp	r6, r3
 8014b38:	d21c      	bcs.n	8014b74 <atan+0x23c>
 8014b3a:	4b47      	ldr	r3, [pc, #284]	@ (8014c58 <atan+0x320>)
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	4620      	mov	r0, r4
 8014b40:	4629      	mov	r1, r5
 8014b42:	f7eb fbb1 	bl	80002a8 <__aeabi_dsub>
 8014b46:	4b44      	ldr	r3, [pc, #272]	@ (8014c58 <atan+0x320>)
 8014b48:	4606      	mov	r6, r0
 8014b4a:	460f      	mov	r7, r1
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4620      	mov	r0, r4
 8014b50:	4629      	mov	r1, r5
 8014b52:	f7eb fd61 	bl	8000618 <__aeabi_dmul>
 8014b56:	4b3d      	ldr	r3, [pc, #244]	@ (8014c4c <atan+0x314>)
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f7eb fba7 	bl	80002ac <__adddf3>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	460b      	mov	r3, r1
 8014b62:	4630      	mov	r0, r6
 8014b64:	4639      	mov	r1, r7
 8014b66:	f7eb fe81 	bl	800086c <__aeabi_ddiv>
 8014b6a:	f04f 0a02 	mov.w	sl, #2
 8014b6e:	4604      	mov	r4, r0
 8014b70:	460d      	mov	r5, r1
 8014b72:	e745      	b.n	8014a00 <atan+0xc8>
 8014b74:	4622      	mov	r2, r4
 8014b76:	462b      	mov	r3, r5
 8014b78:	4938      	ldr	r1, [pc, #224]	@ (8014c5c <atan+0x324>)
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	f7eb fe76 	bl	800086c <__aeabi_ddiv>
 8014b80:	f04f 0a03 	mov.w	sl, #3
 8014b84:	4604      	mov	r4, r0
 8014b86:	460d      	mov	r5, r1
 8014b88:	e73a      	b.n	8014a00 <atan+0xc8>
 8014b8a:	4b35      	ldr	r3, [pc, #212]	@ (8014c60 <atan+0x328>)
 8014b8c:	4e35      	ldr	r6, [pc, #212]	@ (8014c64 <atan+0x32c>)
 8014b8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b96:	f7eb fb87 	bl	80002a8 <__aeabi_dsub>
 8014b9a:	4622      	mov	r2, r4
 8014b9c:	462b      	mov	r3, r5
 8014b9e:	f7eb fb83 	bl	80002a8 <__aeabi_dsub>
 8014ba2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	460b      	mov	r3, r1
 8014baa:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014bae:	f7eb fb7b 	bl	80002a8 <__aeabi_dsub>
 8014bb2:	f1bb 0f00 	cmp.w	fp, #0
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	460d      	mov	r5, r1
 8014bba:	f6bf aedc 	bge.w	8014976 <atan+0x3e>
 8014bbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014bc2:	461d      	mov	r5, r3
 8014bc4:	e6d7      	b.n	8014976 <atan+0x3e>
 8014bc6:	a51c      	add	r5, pc, #112	@ (adr r5, 8014c38 <atan+0x300>)
 8014bc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014bcc:	e6d3      	b.n	8014976 <atan+0x3e>
 8014bce:	bf00      	nop
 8014bd0:	54442d18 	.word	0x54442d18
 8014bd4:	3ff921fb 	.word	0x3ff921fb
 8014bd8:	8800759c 	.word	0x8800759c
 8014bdc:	7e37e43c 	.word	0x7e37e43c
 8014be0:	e322da11 	.word	0xe322da11
 8014be4:	3f90ad3a 	.word	0x3f90ad3a
 8014be8:	24760deb 	.word	0x24760deb
 8014bec:	3fa97b4b 	.word	0x3fa97b4b
 8014bf0:	a0d03d51 	.word	0xa0d03d51
 8014bf4:	3fb10d66 	.word	0x3fb10d66
 8014bf8:	c54c206e 	.word	0xc54c206e
 8014bfc:	3fb745cd 	.word	0x3fb745cd
 8014c00:	920083ff 	.word	0x920083ff
 8014c04:	3fc24924 	.word	0x3fc24924
 8014c08:	5555550d 	.word	0x5555550d
 8014c0c:	3fd55555 	.word	0x3fd55555
 8014c10:	2c6a6c2f 	.word	0x2c6a6c2f
 8014c14:	bfa2b444 	.word	0xbfa2b444
 8014c18:	52defd9a 	.word	0x52defd9a
 8014c1c:	3fadde2d 	.word	0x3fadde2d
 8014c20:	af749a6d 	.word	0xaf749a6d
 8014c24:	3fb3b0f2 	.word	0x3fb3b0f2
 8014c28:	fe231671 	.word	0xfe231671
 8014c2c:	3fbc71c6 	.word	0x3fbc71c6
 8014c30:	9998ebc4 	.word	0x9998ebc4
 8014c34:	3fc99999 	.word	0x3fc99999
 8014c38:	54442d18 	.word	0x54442d18
 8014c3c:	bff921fb 	.word	0xbff921fb
 8014c40:	440fffff 	.word	0x440fffff
 8014c44:	7ff00000 	.word	0x7ff00000
 8014c48:	3fdbffff 	.word	0x3fdbffff
 8014c4c:	3ff00000 	.word	0x3ff00000
 8014c50:	3ff2ffff 	.word	0x3ff2ffff
 8014c54:	40038000 	.word	0x40038000
 8014c58:	3ff80000 	.word	0x3ff80000
 8014c5c:	bff00000 	.word	0xbff00000
 8014c60:	08016180 	.word	0x08016180
 8014c64:	080161a0 	.word	0x080161a0

08014c68 <scalbn>:
 8014c68:	b570      	push	{r4, r5, r6, lr}
 8014c6a:	ec55 4b10 	vmov	r4, r5, d0
 8014c6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014c72:	4606      	mov	r6, r0
 8014c74:	462b      	mov	r3, r5
 8014c76:	b991      	cbnz	r1, 8014c9e <scalbn+0x36>
 8014c78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014c7c:	4323      	orrs	r3, r4
 8014c7e:	d03d      	beq.n	8014cfc <scalbn+0x94>
 8014c80:	4b35      	ldr	r3, [pc, #212]	@ (8014d58 <scalbn+0xf0>)
 8014c82:	4620      	mov	r0, r4
 8014c84:	4629      	mov	r1, r5
 8014c86:	2200      	movs	r2, #0
 8014c88:	f7eb fcc6 	bl	8000618 <__aeabi_dmul>
 8014c8c:	4b33      	ldr	r3, [pc, #204]	@ (8014d5c <scalbn+0xf4>)
 8014c8e:	429e      	cmp	r6, r3
 8014c90:	4604      	mov	r4, r0
 8014c92:	460d      	mov	r5, r1
 8014c94:	da0f      	bge.n	8014cb6 <scalbn+0x4e>
 8014c96:	a328      	add	r3, pc, #160	@ (adr r3, 8014d38 <scalbn+0xd0>)
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	e01e      	b.n	8014cdc <scalbn+0x74>
 8014c9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014ca2:	4291      	cmp	r1, r2
 8014ca4:	d10b      	bne.n	8014cbe <scalbn+0x56>
 8014ca6:	4622      	mov	r2, r4
 8014ca8:	4620      	mov	r0, r4
 8014caa:	4629      	mov	r1, r5
 8014cac:	f7eb fafe 	bl	80002ac <__adddf3>
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	460d      	mov	r5, r1
 8014cb4:	e022      	b.n	8014cfc <scalbn+0x94>
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014cbc:	3936      	subs	r1, #54	@ 0x36
 8014cbe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014cc2:	4296      	cmp	r6, r2
 8014cc4:	dd0d      	ble.n	8014ce2 <scalbn+0x7a>
 8014cc6:	2d00      	cmp	r5, #0
 8014cc8:	a11d      	add	r1, pc, #116	@ (adr r1, 8014d40 <scalbn+0xd8>)
 8014cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cce:	da02      	bge.n	8014cd6 <scalbn+0x6e>
 8014cd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8014d48 <scalbn+0xe0>)
 8014cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cd6:	a31a      	add	r3, pc, #104	@ (adr r3, 8014d40 <scalbn+0xd8>)
 8014cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cdc:	f7eb fc9c 	bl	8000618 <__aeabi_dmul>
 8014ce0:	e7e6      	b.n	8014cb0 <scalbn+0x48>
 8014ce2:	1872      	adds	r2, r6, r1
 8014ce4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014ce8:	428a      	cmp	r2, r1
 8014cea:	dcec      	bgt.n	8014cc6 <scalbn+0x5e>
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	dd08      	ble.n	8014d02 <scalbn+0x9a>
 8014cf0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014cf4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014cf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014cfc:	ec45 4b10 	vmov	d0, r4, r5
 8014d00:	bd70      	pop	{r4, r5, r6, pc}
 8014d02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014d06:	da08      	bge.n	8014d1a <scalbn+0xb2>
 8014d08:	2d00      	cmp	r5, #0
 8014d0a:	a10b      	add	r1, pc, #44	@ (adr r1, 8014d38 <scalbn+0xd0>)
 8014d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d10:	dac1      	bge.n	8014c96 <scalbn+0x2e>
 8014d12:	a10f      	add	r1, pc, #60	@ (adr r1, 8014d50 <scalbn+0xe8>)
 8014d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d18:	e7bd      	b.n	8014c96 <scalbn+0x2e>
 8014d1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014d1e:	3236      	adds	r2, #54	@ 0x36
 8014d20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014d24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014d28:	4620      	mov	r0, r4
 8014d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014d60 <scalbn+0xf8>)
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	2200      	movs	r2, #0
 8014d30:	e7d4      	b.n	8014cdc <scalbn+0x74>
 8014d32:	bf00      	nop
 8014d34:	f3af 8000 	nop.w
 8014d38:	c2f8f359 	.word	0xc2f8f359
 8014d3c:	01a56e1f 	.word	0x01a56e1f
 8014d40:	8800759c 	.word	0x8800759c
 8014d44:	7e37e43c 	.word	0x7e37e43c
 8014d48:	8800759c 	.word	0x8800759c
 8014d4c:	fe37e43c 	.word	0xfe37e43c
 8014d50:	c2f8f359 	.word	0xc2f8f359
 8014d54:	81a56e1f 	.word	0x81a56e1f
 8014d58:	43500000 	.word	0x43500000
 8014d5c:	ffff3cb0 	.word	0xffff3cb0
 8014d60:	3c900000 	.word	0x3c900000

08014d64 <with_errno>:
 8014d64:	b510      	push	{r4, lr}
 8014d66:	ed2d 8b02 	vpush	{d8}
 8014d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8014d6e:	eef0 8a60 	vmov.f32	s17, s1
 8014d72:	4604      	mov	r4, r0
 8014d74:	f7fa fe9c 	bl	800fab0 <__errno>
 8014d78:	eeb0 0a48 	vmov.f32	s0, s16
 8014d7c:	eef0 0a68 	vmov.f32	s1, s17
 8014d80:	ecbd 8b02 	vpop	{d8}
 8014d84:	6004      	str	r4, [r0, #0]
 8014d86:	bd10      	pop	{r4, pc}

08014d88 <xflow>:
 8014d88:	4603      	mov	r3, r0
 8014d8a:	b507      	push	{r0, r1, r2, lr}
 8014d8c:	ec51 0b10 	vmov	r0, r1, d0
 8014d90:	b183      	cbz	r3, 8014db4 <xflow+0x2c>
 8014d92:	4602      	mov	r2, r0
 8014d94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014d98:	e9cd 2300 	strd	r2, r3, [sp]
 8014d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014da0:	f7eb fc3a 	bl	8000618 <__aeabi_dmul>
 8014da4:	ec41 0b10 	vmov	d0, r0, r1
 8014da8:	2022      	movs	r0, #34	@ 0x22
 8014daa:	b003      	add	sp, #12
 8014dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8014db0:	f7ff bfd8 	b.w	8014d64 <with_errno>
 8014db4:	4602      	mov	r2, r0
 8014db6:	460b      	mov	r3, r1
 8014db8:	e7ee      	b.n	8014d98 <xflow+0x10>
 8014dba:	0000      	movs	r0, r0
 8014dbc:	0000      	movs	r0, r0
	...

08014dc0 <__math_uflow>:
 8014dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014dc8 <__math_uflow+0x8>
 8014dc4:	f7ff bfe0 	b.w	8014d88 <xflow>
 8014dc8:	00000000 	.word	0x00000000
 8014dcc:	10000000 	.word	0x10000000

08014dd0 <__math_oflow>:
 8014dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014dd8 <__math_oflow+0x8>
 8014dd4:	f7ff bfd8 	b.w	8014d88 <xflow>
 8014dd8:	00000000 	.word	0x00000000
 8014ddc:	70000000 	.word	0x70000000

08014de0 <__kernel_rem_pio2>:
 8014de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de4:	ed2d 8b02 	vpush	{d8}
 8014de8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014dec:	f112 0f14 	cmn.w	r2, #20
 8014df0:	9306      	str	r3, [sp, #24]
 8014df2:	9104      	str	r1, [sp, #16]
 8014df4:	4bbe      	ldr	r3, [pc, #760]	@ (80150f0 <__kernel_rem_pio2+0x310>)
 8014df6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014df8:	9008      	str	r0, [sp, #32]
 8014dfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dfe:	9300      	str	r3, [sp, #0]
 8014e00:	9b06      	ldr	r3, [sp, #24]
 8014e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e06:	bfa8      	it	ge
 8014e08:	1ed4      	subge	r4, r2, #3
 8014e0a:	9305      	str	r3, [sp, #20]
 8014e0c:	bfb2      	itee	lt
 8014e0e:	2400      	movlt	r4, #0
 8014e10:	2318      	movge	r3, #24
 8014e12:	fb94 f4f3 	sdivge	r4, r4, r3
 8014e16:	f06f 0317 	mvn.w	r3, #23
 8014e1a:	fb04 3303 	mla	r3, r4, r3, r3
 8014e1e:	eb03 0b02 	add.w	fp, r3, r2
 8014e22:	9b00      	ldr	r3, [sp, #0]
 8014e24:	9a05      	ldr	r2, [sp, #20]
 8014e26:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80150e0 <__kernel_rem_pio2+0x300>
 8014e2a:	eb03 0802 	add.w	r8, r3, r2
 8014e2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014e30:	1aa7      	subs	r7, r4, r2
 8014e32:	ae20      	add	r6, sp, #128	@ 0x80
 8014e34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014e38:	2500      	movs	r5, #0
 8014e3a:	4545      	cmp	r5, r8
 8014e3c:	dd13      	ble.n	8014e66 <__kernel_rem_pio2+0x86>
 8014e3e:	9b06      	ldr	r3, [sp, #24]
 8014e40:	aa20      	add	r2, sp, #128	@ 0x80
 8014e42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014e46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014e4a:	f04f 0800 	mov.w	r8, #0
 8014e4e:	9b00      	ldr	r3, [sp, #0]
 8014e50:	4598      	cmp	r8, r3
 8014e52:	dc31      	bgt.n	8014eb8 <__kernel_rem_pio2+0xd8>
 8014e54:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80150e0 <__kernel_rem_pio2+0x300>
 8014e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e60:	462f      	mov	r7, r5
 8014e62:	2600      	movs	r6, #0
 8014e64:	e01b      	b.n	8014e9e <__kernel_rem_pio2+0xbe>
 8014e66:	42ef      	cmn	r7, r5
 8014e68:	d407      	bmi.n	8014e7a <__kernel_rem_pio2+0x9a>
 8014e6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e6e:	f7eb fb69 	bl	8000544 <__aeabi_i2d>
 8014e72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e76:	3501      	adds	r5, #1
 8014e78:	e7df      	b.n	8014e3a <__kernel_rem_pio2+0x5a>
 8014e7a:	ec51 0b18 	vmov	r0, r1, d8
 8014e7e:	e7f8      	b.n	8014e72 <__kernel_rem_pio2+0x92>
 8014e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014e88:	f7eb fbc6 	bl	8000618 <__aeabi_dmul>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	460b      	mov	r3, r1
 8014e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e94:	f7eb fa0a 	bl	80002ac <__adddf3>
 8014e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e9c:	3601      	adds	r6, #1
 8014e9e:	9b05      	ldr	r3, [sp, #20]
 8014ea0:	429e      	cmp	r6, r3
 8014ea2:	f1a7 0708 	sub.w	r7, r7, #8
 8014ea6:	ddeb      	ble.n	8014e80 <__kernel_rem_pio2+0xa0>
 8014ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014eac:	f108 0801 	add.w	r8, r8, #1
 8014eb0:	ecaa 7b02 	vstmia	sl!, {d7}
 8014eb4:	3508      	adds	r5, #8
 8014eb6:	e7ca      	b.n	8014e4e <__kernel_rem_pio2+0x6e>
 8014eb8:	9b00      	ldr	r3, [sp, #0]
 8014eba:	f8dd 8000 	ldr.w	r8, [sp]
 8014ebe:	aa0c      	add	r2, sp, #48	@ 0x30
 8014ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014ec4:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ec6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014ec8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ece:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ed4:	ab98      	add	r3, sp, #608	@ 0x260
 8014ed6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014eda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014ede:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ee2:	ac0c      	add	r4, sp, #48	@ 0x30
 8014ee4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014ee6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014eea:	46a1      	mov	r9, r4
 8014eec:	46c2      	mov	sl, r8
 8014eee:	f1ba 0f00 	cmp.w	sl, #0
 8014ef2:	f1a5 0508 	sub.w	r5, r5, #8
 8014ef6:	dc77      	bgt.n	8014fe8 <__kernel_rem_pio2+0x208>
 8014ef8:	4658      	mov	r0, fp
 8014efa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014efe:	f7ff feb3 	bl	8014c68 <scalbn>
 8014f02:	ec57 6b10 	vmov	r6, r7, d0
 8014f06:	2200      	movs	r2, #0
 8014f08:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	4639      	mov	r1, r7
 8014f10:	f7eb fb82 	bl	8000618 <__aeabi_dmul>
 8014f14:	ec41 0b10 	vmov	d0, r0, r1
 8014f18:	f000 faba 	bl	8015490 <floor>
 8014f1c:	4b75      	ldr	r3, [pc, #468]	@ (80150f4 <__kernel_rem_pio2+0x314>)
 8014f1e:	ec51 0b10 	vmov	r0, r1, d0
 8014f22:	2200      	movs	r2, #0
 8014f24:	f7eb fb78 	bl	8000618 <__aeabi_dmul>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	4639      	mov	r1, r7
 8014f30:	f7eb f9ba 	bl	80002a8 <__aeabi_dsub>
 8014f34:	460f      	mov	r7, r1
 8014f36:	4606      	mov	r6, r0
 8014f38:	f7eb fe1e 	bl	8000b78 <__aeabi_d2iz>
 8014f3c:	9002      	str	r0, [sp, #8]
 8014f3e:	f7eb fb01 	bl	8000544 <__aeabi_i2d>
 8014f42:	4602      	mov	r2, r0
 8014f44:	460b      	mov	r3, r1
 8014f46:	4630      	mov	r0, r6
 8014f48:	4639      	mov	r1, r7
 8014f4a:	f7eb f9ad 	bl	80002a8 <__aeabi_dsub>
 8014f4e:	f1bb 0f00 	cmp.w	fp, #0
 8014f52:	4606      	mov	r6, r0
 8014f54:	460f      	mov	r7, r1
 8014f56:	dd6c      	ble.n	8015032 <__kernel_rem_pio2+0x252>
 8014f58:	f108 31ff 	add.w	r1, r8, #4294967295
 8014f5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f5e:	9d02      	ldr	r5, [sp, #8]
 8014f60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f64:	f1cb 0018 	rsb	r0, fp, #24
 8014f68:	fa43 f200 	asr.w	r2, r3, r0
 8014f6c:	4415      	add	r5, r2
 8014f6e:	4082      	lsls	r2, r0
 8014f70:	1a9b      	subs	r3, r3, r2
 8014f72:	aa0c      	add	r2, sp, #48	@ 0x30
 8014f74:	9502      	str	r5, [sp, #8]
 8014f76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014f7a:	f1cb 0217 	rsb	r2, fp, #23
 8014f7e:	fa43 f902 	asr.w	r9, r3, r2
 8014f82:	f1b9 0f00 	cmp.w	r9, #0
 8014f86:	dd64      	ble.n	8015052 <__kernel_rem_pio2+0x272>
 8014f88:	9b02      	ldr	r3, [sp, #8]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	9302      	str	r3, [sp, #8]
 8014f90:	4615      	mov	r5, r2
 8014f92:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014f96:	4590      	cmp	r8, r2
 8014f98:	f300 80b8 	bgt.w	801510c <__kernel_rem_pio2+0x32c>
 8014f9c:	f1bb 0f00 	cmp.w	fp, #0
 8014fa0:	dd07      	ble.n	8014fb2 <__kernel_rem_pio2+0x1d2>
 8014fa2:	f1bb 0f01 	cmp.w	fp, #1
 8014fa6:	f000 80bf 	beq.w	8015128 <__kernel_rem_pio2+0x348>
 8014faa:	f1bb 0f02 	cmp.w	fp, #2
 8014fae:	f000 80c6 	beq.w	801513e <__kernel_rem_pio2+0x35e>
 8014fb2:	f1b9 0f02 	cmp.w	r9, #2
 8014fb6:	d14c      	bne.n	8015052 <__kernel_rem_pio2+0x272>
 8014fb8:	4632      	mov	r2, r6
 8014fba:	463b      	mov	r3, r7
 8014fbc:	494e      	ldr	r1, [pc, #312]	@ (80150f8 <__kernel_rem_pio2+0x318>)
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f7eb f972 	bl	80002a8 <__aeabi_dsub>
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	460f      	mov	r7, r1
 8014fc8:	2d00      	cmp	r5, #0
 8014fca:	d042      	beq.n	8015052 <__kernel_rem_pio2+0x272>
 8014fcc:	4658      	mov	r0, fp
 8014fce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80150e8 <__kernel_rem_pio2+0x308>
 8014fd2:	f7ff fe49 	bl	8014c68 <scalbn>
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	4639      	mov	r1, r7
 8014fda:	ec53 2b10 	vmov	r2, r3, d0
 8014fde:	f7eb f963 	bl	80002a8 <__aeabi_dsub>
 8014fe2:	4606      	mov	r6, r0
 8014fe4:	460f      	mov	r7, r1
 8014fe6:	e034      	b.n	8015052 <__kernel_rem_pio2+0x272>
 8014fe8:	4b44      	ldr	r3, [pc, #272]	@ (80150fc <__kernel_rem_pio2+0x31c>)
 8014fea:	2200      	movs	r2, #0
 8014fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ff0:	f7eb fb12 	bl	8000618 <__aeabi_dmul>
 8014ff4:	f7eb fdc0 	bl	8000b78 <__aeabi_d2iz>
 8014ff8:	f7eb faa4 	bl	8000544 <__aeabi_i2d>
 8014ffc:	4b40      	ldr	r3, [pc, #256]	@ (8015100 <__kernel_rem_pio2+0x320>)
 8014ffe:	2200      	movs	r2, #0
 8015000:	4606      	mov	r6, r0
 8015002:	460f      	mov	r7, r1
 8015004:	f7eb fb08 	bl	8000618 <__aeabi_dmul>
 8015008:	4602      	mov	r2, r0
 801500a:	460b      	mov	r3, r1
 801500c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015010:	f7eb f94a 	bl	80002a8 <__aeabi_dsub>
 8015014:	f7eb fdb0 	bl	8000b78 <__aeabi_d2iz>
 8015018:	e9d5 2300 	ldrd	r2, r3, [r5]
 801501c:	f849 0b04 	str.w	r0, [r9], #4
 8015020:	4639      	mov	r1, r7
 8015022:	4630      	mov	r0, r6
 8015024:	f7eb f942 	bl	80002ac <__adddf3>
 8015028:	f10a 3aff 	add.w	sl, sl, #4294967295
 801502c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015030:	e75d      	b.n	8014eee <__kernel_rem_pio2+0x10e>
 8015032:	d107      	bne.n	8015044 <__kernel_rem_pio2+0x264>
 8015034:	f108 33ff 	add.w	r3, r8, #4294967295
 8015038:	aa0c      	add	r2, sp, #48	@ 0x30
 801503a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801503e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8015042:	e79e      	b.n	8014f82 <__kernel_rem_pio2+0x1a2>
 8015044:	4b2f      	ldr	r3, [pc, #188]	@ (8015104 <__kernel_rem_pio2+0x324>)
 8015046:	2200      	movs	r2, #0
 8015048:	f7eb fd6c 	bl	8000b24 <__aeabi_dcmpge>
 801504c:	2800      	cmp	r0, #0
 801504e:	d143      	bne.n	80150d8 <__kernel_rem_pio2+0x2f8>
 8015050:	4681      	mov	r9, r0
 8015052:	2200      	movs	r2, #0
 8015054:	2300      	movs	r3, #0
 8015056:	4630      	mov	r0, r6
 8015058:	4639      	mov	r1, r7
 801505a:	f7eb fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 801505e:	2800      	cmp	r0, #0
 8015060:	f000 80bf 	beq.w	80151e2 <__kernel_rem_pio2+0x402>
 8015064:	f108 33ff 	add.w	r3, r8, #4294967295
 8015068:	2200      	movs	r2, #0
 801506a:	9900      	ldr	r1, [sp, #0]
 801506c:	428b      	cmp	r3, r1
 801506e:	da6e      	bge.n	801514e <__kernel_rem_pio2+0x36e>
 8015070:	2a00      	cmp	r2, #0
 8015072:	f000 8089 	beq.w	8015188 <__kernel_rem_pio2+0x3a8>
 8015076:	f108 38ff 	add.w	r8, r8, #4294967295
 801507a:	ab0c      	add	r3, sp, #48	@ 0x30
 801507c:	f1ab 0b18 	sub.w	fp, fp, #24
 8015080:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d0f6      	beq.n	8015076 <__kernel_rem_pio2+0x296>
 8015088:	4658      	mov	r0, fp
 801508a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80150e8 <__kernel_rem_pio2+0x308>
 801508e:	f7ff fdeb 	bl	8014c68 <scalbn>
 8015092:	f108 0301 	add.w	r3, r8, #1
 8015096:	00da      	lsls	r2, r3, #3
 8015098:	9205      	str	r2, [sp, #20]
 801509a:	ec55 4b10 	vmov	r4, r5, d0
 801509e:	aa70      	add	r2, sp, #448	@ 0x1c0
 80150a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80150fc <__kernel_rem_pio2+0x31c>
 80150a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80150a8:	4646      	mov	r6, r8
 80150aa:	f04f 0a00 	mov.w	sl, #0
 80150ae:	2e00      	cmp	r6, #0
 80150b0:	f280 80cf 	bge.w	8015252 <__kernel_rem_pio2+0x472>
 80150b4:	4644      	mov	r4, r8
 80150b6:	2c00      	cmp	r4, #0
 80150b8:	f2c0 80fd 	blt.w	80152b6 <__kernel_rem_pio2+0x4d6>
 80150bc:	4b12      	ldr	r3, [pc, #72]	@ (8015108 <__kernel_rem_pio2+0x328>)
 80150be:	461f      	mov	r7, r3
 80150c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80150c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80150c6:	9306      	str	r3, [sp, #24]
 80150c8:	f04f 0a00 	mov.w	sl, #0
 80150cc:	f04f 0b00 	mov.w	fp, #0
 80150d0:	2600      	movs	r6, #0
 80150d2:	eba8 0504 	sub.w	r5, r8, r4
 80150d6:	e0e2      	b.n	801529e <__kernel_rem_pio2+0x4be>
 80150d8:	f04f 0902 	mov.w	r9, #2
 80150dc:	e754      	b.n	8014f88 <__kernel_rem_pio2+0x1a8>
 80150de:	bf00      	nop
	...
 80150ec:	3ff00000 	.word	0x3ff00000
 80150f0:	08016200 	.word	0x08016200
 80150f4:	40200000 	.word	0x40200000
 80150f8:	3ff00000 	.word	0x3ff00000
 80150fc:	3e700000 	.word	0x3e700000
 8015100:	41700000 	.word	0x41700000
 8015104:	3fe00000 	.word	0x3fe00000
 8015108:	080161c0 	.word	0x080161c0
 801510c:	f854 3b04 	ldr.w	r3, [r4], #4
 8015110:	b945      	cbnz	r5, 8015124 <__kernel_rem_pio2+0x344>
 8015112:	b123      	cbz	r3, 801511e <__kernel_rem_pio2+0x33e>
 8015114:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015118:	f844 3c04 	str.w	r3, [r4, #-4]
 801511c:	2301      	movs	r3, #1
 801511e:	3201      	adds	r2, #1
 8015120:	461d      	mov	r5, r3
 8015122:	e738      	b.n	8014f96 <__kernel_rem_pio2+0x1b6>
 8015124:	1acb      	subs	r3, r1, r3
 8015126:	e7f7      	b.n	8015118 <__kernel_rem_pio2+0x338>
 8015128:	f108 32ff 	add.w	r2, r8, #4294967295
 801512c:	ab0c      	add	r3, sp, #48	@ 0x30
 801512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015132:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015136:	a90c      	add	r1, sp, #48	@ 0x30
 8015138:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801513c:	e739      	b.n	8014fb2 <__kernel_rem_pio2+0x1d2>
 801513e:	f108 32ff 	add.w	r2, r8, #4294967295
 8015142:	ab0c      	add	r3, sp, #48	@ 0x30
 8015144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015148:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801514c:	e7f3      	b.n	8015136 <__kernel_rem_pio2+0x356>
 801514e:	a90c      	add	r1, sp, #48	@ 0x30
 8015150:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015154:	3b01      	subs	r3, #1
 8015156:	430a      	orrs	r2, r1
 8015158:	e787      	b.n	801506a <__kernel_rem_pio2+0x28a>
 801515a:	3401      	adds	r4, #1
 801515c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015160:	2a00      	cmp	r2, #0
 8015162:	d0fa      	beq.n	801515a <__kernel_rem_pio2+0x37a>
 8015164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015166:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801516a:	eb0d 0503 	add.w	r5, sp, r3
 801516e:	9b06      	ldr	r3, [sp, #24]
 8015170:	aa20      	add	r2, sp, #128	@ 0x80
 8015172:	4443      	add	r3, r8
 8015174:	f108 0701 	add.w	r7, r8, #1
 8015178:	3d98      	subs	r5, #152	@ 0x98
 801517a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801517e:	4444      	add	r4, r8
 8015180:	42bc      	cmp	r4, r7
 8015182:	da04      	bge.n	801518e <__kernel_rem_pio2+0x3ae>
 8015184:	46a0      	mov	r8, r4
 8015186:	e6a2      	b.n	8014ece <__kernel_rem_pio2+0xee>
 8015188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801518a:	2401      	movs	r4, #1
 801518c:	e7e6      	b.n	801515c <__kernel_rem_pio2+0x37c>
 801518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015190:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015194:	f7eb f9d6 	bl	8000544 <__aeabi_i2d>
 8015198:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015460 <__kernel_rem_pio2+0x680>
 801519c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80151a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80151a8:	46b2      	mov	sl, r6
 80151aa:	f04f 0800 	mov.w	r8, #0
 80151ae:	9b05      	ldr	r3, [sp, #20]
 80151b0:	4598      	cmp	r8, r3
 80151b2:	dd05      	ble.n	80151c0 <__kernel_rem_pio2+0x3e0>
 80151b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151b8:	3701      	adds	r7, #1
 80151ba:	eca5 7b02 	vstmia	r5!, {d7}
 80151be:	e7df      	b.n	8015180 <__kernel_rem_pio2+0x3a0>
 80151c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80151c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80151c8:	f7eb fa26 	bl	8000618 <__aeabi_dmul>
 80151cc:	4602      	mov	r2, r0
 80151ce:	460b      	mov	r3, r1
 80151d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151d4:	f7eb f86a 	bl	80002ac <__adddf3>
 80151d8:	f108 0801 	add.w	r8, r8, #1
 80151dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151e0:	e7e5      	b.n	80151ae <__kernel_rem_pio2+0x3ce>
 80151e2:	f1cb 0000 	rsb	r0, fp, #0
 80151e6:	ec47 6b10 	vmov	d0, r6, r7
 80151ea:	f7ff fd3d 	bl	8014c68 <scalbn>
 80151ee:	ec55 4b10 	vmov	r4, r5, d0
 80151f2:	4b9d      	ldr	r3, [pc, #628]	@ (8015468 <__kernel_rem_pio2+0x688>)
 80151f4:	2200      	movs	r2, #0
 80151f6:	4620      	mov	r0, r4
 80151f8:	4629      	mov	r1, r5
 80151fa:	f7eb fc93 	bl	8000b24 <__aeabi_dcmpge>
 80151fe:	b300      	cbz	r0, 8015242 <__kernel_rem_pio2+0x462>
 8015200:	4b9a      	ldr	r3, [pc, #616]	@ (801546c <__kernel_rem_pio2+0x68c>)
 8015202:	2200      	movs	r2, #0
 8015204:	4620      	mov	r0, r4
 8015206:	4629      	mov	r1, r5
 8015208:	f7eb fa06 	bl	8000618 <__aeabi_dmul>
 801520c:	f7eb fcb4 	bl	8000b78 <__aeabi_d2iz>
 8015210:	4606      	mov	r6, r0
 8015212:	f7eb f997 	bl	8000544 <__aeabi_i2d>
 8015216:	4b94      	ldr	r3, [pc, #592]	@ (8015468 <__kernel_rem_pio2+0x688>)
 8015218:	2200      	movs	r2, #0
 801521a:	f7eb f9fd 	bl	8000618 <__aeabi_dmul>
 801521e:	460b      	mov	r3, r1
 8015220:	4602      	mov	r2, r0
 8015222:	4629      	mov	r1, r5
 8015224:	4620      	mov	r0, r4
 8015226:	f7eb f83f 	bl	80002a8 <__aeabi_dsub>
 801522a:	f7eb fca5 	bl	8000b78 <__aeabi_d2iz>
 801522e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015230:	f10b 0b18 	add.w	fp, fp, #24
 8015234:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015238:	f108 0801 	add.w	r8, r8, #1
 801523c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015240:	e722      	b.n	8015088 <__kernel_rem_pio2+0x2a8>
 8015242:	4620      	mov	r0, r4
 8015244:	4629      	mov	r1, r5
 8015246:	f7eb fc97 	bl	8000b78 <__aeabi_d2iz>
 801524a:	ab0c      	add	r3, sp, #48	@ 0x30
 801524c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015250:	e71a      	b.n	8015088 <__kernel_rem_pio2+0x2a8>
 8015252:	ab0c      	add	r3, sp, #48	@ 0x30
 8015254:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015258:	f7eb f974 	bl	8000544 <__aeabi_i2d>
 801525c:	4622      	mov	r2, r4
 801525e:	462b      	mov	r3, r5
 8015260:	f7eb f9da 	bl	8000618 <__aeabi_dmul>
 8015264:	4652      	mov	r2, sl
 8015266:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801526a:	465b      	mov	r3, fp
 801526c:	4620      	mov	r0, r4
 801526e:	4629      	mov	r1, r5
 8015270:	f7eb f9d2 	bl	8000618 <__aeabi_dmul>
 8015274:	3e01      	subs	r6, #1
 8015276:	4604      	mov	r4, r0
 8015278:	460d      	mov	r5, r1
 801527a:	e718      	b.n	80150ae <__kernel_rem_pio2+0x2ce>
 801527c:	9906      	ldr	r1, [sp, #24]
 801527e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8015282:	9106      	str	r1, [sp, #24]
 8015284:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015288:	f7eb f9c6 	bl	8000618 <__aeabi_dmul>
 801528c:	4602      	mov	r2, r0
 801528e:	460b      	mov	r3, r1
 8015290:	4650      	mov	r0, sl
 8015292:	4659      	mov	r1, fp
 8015294:	f7eb f80a 	bl	80002ac <__adddf3>
 8015298:	3601      	adds	r6, #1
 801529a:	4682      	mov	sl, r0
 801529c:	468b      	mov	fp, r1
 801529e:	9b00      	ldr	r3, [sp, #0]
 80152a0:	429e      	cmp	r6, r3
 80152a2:	dc01      	bgt.n	80152a8 <__kernel_rem_pio2+0x4c8>
 80152a4:	42b5      	cmp	r5, r6
 80152a6:	dae9      	bge.n	801527c <__kernel_rem_pio2+0x49c>
 80152a8:	ab48      	add	r3, sp, #288	@ 0x120
 80152aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80152ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80152b2:	3c01      	subs	r4, #1
 80152b4:	e6ff      	b.n	80150b6 <__kernel_rem_pio2+0x2d6>
 80152b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80152b8:	2b02      	cmp	r3, #2
 80152ba:	dc0b      	bgt.n	80152d4 <__kernel_rem_pio2+0x4f4>
 80152bc:	2b00      	cmp	r3, #0
 80152be:	dc39      	bgt.n	8015334 <__kernel_rem_pio2+0x554>
 80152c0:	d05d      	beq.n	801537e <__kernel_rem_pio2+0x59e>
 80152c2:	9b02      	ldr	r3, [sp, #8]
 80152c4:	f003 0007 	and.w	r0, r3, #7
 80152c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80152cc:	ecbd 8b02 	vpop	{d8}
 80152d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80152d6:	2b03      	cmp	r3, #3
 80152d8:	d1f3      	bne.n	80152c2 <__kernel_rem_pio2+0x4e2>
 80152da:	9b05      	ldr	r3, [sp, #20]
 80152dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80152e0:	eb0d 0403 	add.w	r4, sp, r3
 80152e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80152e8:	4625      	mov	r5, r4
 80152ea:	46c2      	mov	sl, r8
 80152ec:	f1ba 0f00 	cmp.w	sl, #0
 80152f0:	f1a5 0508 	sub.w	r5, r5, #8
 80152f4:	dc6b      	bgt.n	80153ce <__kernel_rem_pio2+0x5ee>
 80152f6:	4645      	mov	r5, r8
 80152f8:	2d01      	cmp	r5, #1
 80152fa:	f1a4 0408 	sub.w	r4, r4, #8
 80152fe:	f300 8087 	bgt.w	8015410 <__kernel_rem_pio2+0x630>
 8015302:	9c05      	ldr	r4, [sp, #20]
 8015304:	ab48      	add	r3, sp, #288	@ 0x120
 8015306:	441c      	add	r4, r3
 8015308:	2000      	movs	r0, #0
 801530a:	2100      	movs	r1, #0
 801530c:	f1b8 0f01 	cmp.w	r8, #1
 8015310:	f300 809c 	bgt.w	801544c <__kernel_rem_pio2+0x66c>
 8015314:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015318:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801531c:	f1b9 0f00 	cmp.w	r9, #0
 8015320:	f040 80a6 	bne.w	8015470 <__kernel_rem_pio2+0x690>
 8015324:	9b04      	ldr	r3, [sp, #16]
 8015326:	e9c3 7800 	strd	r7, r8, [r3]
 801532a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801532e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015332:	e7c6      	b.n	80152c2 <__kernel_rem_pio2+0x4e2>
 8015334:	9d05      	ldr	r5, [sp, #20]
 8015336:	ab48      	add	r3, sp, #288	@ 0x120
 8015338:	441d      	add	r5, r3
 801533a:	4644      	mov	r4, r8
 801533c:	2000      	movs	r0, #0
 801533e:	2100      	movs	r1, #0
 8015340:	2c00      	cmp	r4, #0
 8015342:	da35      	bge.n	80153b0 <__kernel_rem_pio2+0x5d0>
 8015344:	f1b9 0f00 	cmp.w	r9, #0
 8015348:	d038      	beq.n	80153bc <__kernel_rem_pio2+0x5dc>
 801534a:	4602      	mov	r2, r0
 801534c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015350:	9c04      	ldr	r4, [sp, #16]
 8015352:	e9c4 2300 	strd	r2, r3, [r4]
 8015356:	4602      	mov	r2, r0
 8015358:	460b      	mov	r3, r1
 801535a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801535e:	f7ea ffa3 	bl	80002a8 <__aeabi_dsub>
 8015362:	ad4a      	add	r5, sp, #296	@ 0x128
 8015364:	2401      	movs	r4, #1
 8015366:	45a0      	cmp	r8, r4
 8015368:	da2b      	bge.n	80153c2 <__kernel_rem_pio2+0x5e2>
 801536a:	f1b9 0f00 	cmp.w	r9, #0
 801536e:	d002      	beq.n	8015376 <__kernel_rem_pio2+0x596>
 8015370:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015374:	4619      	mov	r1, r3
 8015376:	9b04      	ldr	r3, [sp, #16]
 8015378:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801537c:	e7a1      	b.n	80152c2 <__kernel_rem_pio2+0x4e2>
 801537e:	9c05      	ldr	r4, [sp, #20]
 8015380:	ab48      	add	r3, sp, #288	@ 0x120
 8015382:	441c      	add	r4, r3
 8015384:	2000      	movs	r0, #0
 8015386:	2100      	movs	r1, #0
 8015388:	f1b8 0f00 	cmp.w	r8, #0
 801538c:	da09      	bge.n	80153a2 <__kernel_rem_pio2+0x5c2>
 801538e:	f1b9 0f00 	cmp.w	r9, #0
 8015392:	d002      	beq.n	801539a <__kernel_rem_pio2+0x5ba>
 8015394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015398:	4619      	mov	r1, r3
 801539a:	9b04      	ldr	r3, [sp, #16]
 801539c:	e9c3 0100 	strd	r0, r1, [r3]
 80153a0:	e78f      	b.n	80152c2 <__kernel_rem_pio2+0x4e2>
 80153a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153a6:	f7ea ff81 	bl	80002ac <__adddf3>
 80153aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80153ae:	e7eb      	b.n	8015388 <__kernel_rem_pio2+0x5a8>
 80153b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80153b4:	f7ea ff7a 	bl	80002ac <__adddf3>
 80153b8:	3c01      	subs	r4, #1
 80153ba:	e7c1      	b.n	8015340 <__kernel_rem_pio2+0x560>
 80153bc:	4602      	mov	r2, r0
 80153be:	460b      	mov	r3, r1
 80153c0:	e7c6      	b.n	8015350 <__kernel_rem_pio2+0x570>
 80153c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80153c6:	f7ea ff71 	bl	80002ac <__adddf3>
 80153ca:	3401      	adds	r4, #1
 80153cc:	e7cb      	b.n	8015366 <__kernel_rem_pio2+0x586>
 80153ce:	ed95 7b00 	vldr	d7, [r5]
 80153d2:	ed8d 7b00 	vstr	d7, [sp]
 80153d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80153da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153de:	ec53 2b17 	vmov	r2, r3, d7
 80153e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80153e6:	f7ea ff61 	bl	80002ac <__adddf3>
 80153ea:	4602      	mov	r2, r0
 80153ec:	460b      	mov	r3, r1
 80153ee:	4606      	mov	r6, r0
 80153f0:	460f      	mov	r7, r1
 80153f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153f6:	f7ea ff57 	bl	80002a8 <__aeabi_dsub>
 80153fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153fe:	f7ea ff55 	bl	80002ac <__adddf3>
 8015402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015406:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801540a:	e9c5 6700 	strd	r6, r7, [r5]
 801540e:	e76d      	b.n	80152ec <__kernel_rem_pio2+0x50c>
 8015410:	ed94 7b00 	vldr	d7, [r4]
 8015414:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015418:	ec51 0b17 	vmov	r0, r1, d7
 801541c:	4652      	mov	r2, sl
 801541e:	465b      	mov	r3, fp
 8015420:	ed8d 7b00 	vstr	d7, [sp]
 8015424:	f7ea ff42 	bl	80002ac <__adddf3>
 8015428:	4602      	mov	r2, r0
 801542a:	460b      	mov	r3, r1
 801542c:	4606      	mov	r6, r0
 801542e:	460f      	mov	r7, r1
 8015430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015434:	f7ea ff38 	bl	80002a8 <__aeabi_dsub>
 8015438:	4652      	mov	r2, sl
 801543a:	465b      	mov	r3, fp
 801543c:	f7ea ff36 	bl	80002ac <__adddf3>
 8015440:	3d01      	subs	r5, #1
 8015442:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015446:	e9c4 6700 	strd	r6, r7, [r4]
 801544a:	e755      	b.n	80152f8 <__kernel_rem_pio2+0x518>
 801544c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015450:	f7ea ff2c 	bl	80002ac <__adddf3>
 8015454:	f108 38ff 	add.w	r8, r8, #4294967295
 8015458:	e758      	b.n	801530c <__kernel_rem_pio2+0x52c>
 801545a:	bf00      	nop
 801545c:	f3af 8000 	nop.w
	...
 8015468:	41700000 	.word	0x41700000
 801546c:	3e700000 	.word	0x3e700000
 8015470:	9b04      	ldr	r3, [sp, #16]
 8015472:	9a04      	ldr	r2, [sp, #16]
 8015474:	601f      	str	r7, [r3, #0]
 8015476:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801547a:	605c      	str	r4, [r3, #4]
 801547c:	609d      	str	r5, [r3, #8]
 801547e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015482:	60d3      	str	r3, [r2, #12]
 8015484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015488:	6110      	str	r0, [r2, #16]
 801548a:	6153      	str	r3, [r2, #20]
 801548c:	e719      	b.n	80152c2 <__kernel_rem_pio2+0x4e2>
 801548e:	bf00      	nop

08015490 <floor>:
 8015490:	ec51 0b10 	vmov	r0, r1, d0
 8015494:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80154a0:	2e13      	cmp	r6, #19
 80154a2:	460c      	mov	r4, r1
 80154a4:	4605      	mov	r5, r0
 80154a6:	4680      	mov	r8, r0
 80154a8:	dc34      	bgt.n	8015514 <floor+0x84>
 80154aa:	2e00      	cmp	r6, #0
 80154ac:	da17      	bge.n	80154de <floor+0x4e>
 80154ae:	a332      	add	r3, pc, #200	@ (adr r3, 8015578 <floor+0xe8>)
 80154b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b4:	f7ea fefa 	bl	80002ac <__adddf3>
 80154b8:	2200      	movs	r2, #0
 80154ba:	2300      	movs	r3, #0
 80154bc:	f7eb fb3c 	bl	8000b38 <__aeabi_dcmpgt>
 80154c0:	b150      	cbz	r0, 80154d8 <floor+0x48>
 80154c2:	2c00      	cmp	r4, #0
 80154c4:	da55      	bge.n	8015572 <floor+0xe2>
 80154c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80154ca:	432c      	orrs	r4, r5
 80154cc:	2500      	movs	r5, #0
 80154ce:	42ac      	cmp	r4, r5
 80154d0:	4c2b      	ldr	r4, [pc, #172]	@ (8015580 <floor+0xf0>)
 80154d2:	bf08      	it	eq
 80154d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80154d8:	4621      	mov	r1, r4
 80154da:	4628      	mov	r0, r5
 80154dc:	e023      	b.n	8015526 <floor+0x96>
 80154de:	4f29      	ldr	r7, [pc, #164]	@ (8015584 <floor+0xf4>)
 80154e0:	4137      	asrs	r7, r6
 80154e2:	ea01 0307 	and.w	r3, r1, r7
 80154e6:	4303      	orrs	r3, r0
 80154e8:	d01d      	beq.n	8015526 <floor+0x96>
 80154ea:	a323      	add	r3, pc, #140	@ (adr r3, 8015578 <floor+0xe8>)
 80154ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f0:	f7ea fedc 	bl	80002ac <__adddf3>
 80154f4:	2200      	movs	r2, #0
 80154f6:	2300      	movs	r3, #0
 80154f8:	f7eb fb1e 	bl	8000b38 <__aeabi_dcmpgt>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d0eb      	beq.n	80154d8 <floor+0x48>
 8015500:	2c00      	cmp	r4, #0
 8015502:	bfbe      	ittt	lt
 8015504:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8015508:	4133      	asrlt	r3, r6
 801550a:	18e4      	addlt	r4, r4, r3
 801550c:	ea24 0407 	bic.w	r4, r4, r7
 8015510:	2500      	movs	r5, #0
 8015512:	e7e1      	b.n	80154d8 <floor+0x48>
 8015514:	2e33      	cmp	r6, #51	@ 0x33
 8015516:	dd0a      	ble.n	801552e <floor+0x9e>
 8015518:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801551c:	d103      	bne.n	8015526 <floor+0x96>
 801551e:	4602      	mov	r2, r0
 8015520:	460b      	mov	r3, r1
 8015522:	f7ea fec3 	bl	80002ac <__adddf3>
 8015526:	ec41 0b10 	vmov	d0, r0, r1
 801552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8015532:	f04f 37ff 	mov.w	r7, #4294967295
 8015536:	40df      	lsrs	r7, r3
 8015538:	4207      	tst	r7, r0
 801553a:	d0f4      	beq.n	8015526 <floor+0x96>
 801553c:	a30e      	add	r3, pc, #56	@ (adr r3, 8015578 <floor+0xe8>)
 801553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015542:	f7ea feb3 	bl	80002ac <__adddf3>
 8015546:	2200      	movs	r2, #0
 8015548:	2300      	movs	r3, #0
 801554a:	f7eb faf5 	bl	8000b38 <__aeabi_dcmpgt>
 801554e:	2800      	cmp	r0, #0
 8015550:	d0c2      	beq.n	80154d8 <floor+0x48>
 8015552:	2c00      	cmp	r4, #0
 8015554:	da0a      	bge.n	801556c <floor+0xdc>
 8015556:	2e14      	cmp	r6, #20
 8015558:	d101      	bne.n	801555e <floor+0xce>
 801555a:	3401      	adds	r4, #1
 801555c:	e006      	b.n	801556c <floor+0xdc>
 801555e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8015562:	2301      	movs	r3, #1
 8015564:	40b3      	lsls	r3, r6
 8015566:	441d      	add	r5, r3
 8015568:	4545      	cmp	r5, r8
 801556a:	d3f6      	bcc.n	801555a <floor+0xca>
 801556c:	ea25 0507 	bic.w	r5, r5, r7
 8015570:	e7b2      	b.n	80154d8 <floor+0x48>
 8015572:	2500      	movs	r5, #0
 8015574:	462c      	mov	r4, r5
 8015576:	e7af      	b.n	80154d8 <floor+0x48>
 8015578:	8800759c 	.word	0x8800759c
 801557c:	7e37e43c 	.word	0x7e37e43c
 8015580:	bff00000 	.word	0xbff00000
 8015584:	000fffff 	.word	0x000fffff

08015588 <_init>:
 8015588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801558a:	bf00      	nop
 801558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801558e:	bc08      	pop	{r3}
 8015590:	469e      	mov	lr, r3
 8015592:	4770      	bx	lr

08015594 <_fini>:
 8015594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015596:	bf00      	nop
 8015598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801559a:	bc08      	pop	{r3}
 801559c:	469e      	mov	lr, r3
 801559e:	4770      	bx	lr
