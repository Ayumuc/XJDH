
XJDH_CLOUD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015370  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08015500  08015500  00016500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016170  08016170  000181f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016170  08016170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016178  08016178  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016178  08016178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801617c  0801617c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08016180  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000181f8  2**0
                  CONTENTS
 10 .bss          00000ef0  200001f8  200001f8  000181f8  2**3
                  ALLOC
 11 ._user_heap_stack 00014000  200010e8  200010e8  000181f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc65  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045a1  00000000  00000000  00033e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120e  00000000  00000000  00039ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b63  00000000  00000000  0003acee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f49c  00000000  00000000  00060851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6d97  00000000  00000000  0007fced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156a84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e48  00000000  00000000  00156ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0015e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080154e8 	.word	0x080154e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080154e8 	.word	0x080154e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <board_init>:
																		   	   	   	   	   	   	   	  board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y,board_config.gps.lon_deg,board_config.gps.lat_deg,board_config.Imu_data.Pitch,board_config.Net_4g.ReserveInt1);
	HAL_UART_Transmit(&huart3,mqtt_firstencode,strlen(mqtt_firstencode),0xff);
	return 1;
}

void board_init(void){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  strcpy(board_config.Net_4g.Imei,"0");
 8001008:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <board_init+0xb4>)
 800100a:	2230      	movs	r2, #48	@ 0x30
 800100c:	801a      	strh	r2, [r3, #0]
  board_config.Net_4g.Use_Status = 0;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <board_init+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 236f 	strb.w	r2, [r3, #879]	@ 0x36f
  board_config.Net_4g.Lock_Status = 0;
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <board_init+0xb8>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 236e 	strb.w	r2, [r3, #878]	@ 0x36e
  board_config.Net_4g.Enable = 0;
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <board_init+0xb8>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2371 	strb.w	r2, [r3, #881]	@ 0x371
  board_config.Battery.MasterVoltage = 0 ;
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <board_init+0xb8>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  board_config.Rockers.Rocker_X = 0;
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <board_init+0xb8>)
 8001032:	2200      	movs	r2, #0
 8001034:	f8a3 23b8 	strh.w	r2, [r3, #952]	@ 0x3b8
  board_config.Rockers.Rocker_Y=0;
 8001038:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <board_init+0xb8>)
 800103a:	2200      	movs	r2, #0
 800103c:	f8a3 23ba 	strh.w	r2, [r3, #954]	@ 0x3ba
  board_config.motor_status.Gear=0;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <board_init+0xb8>)
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
  board_config.motor_status.Direction=0;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <board_init+0xb8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
  board_config.motor_status.L_motor_status = 0;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <board_init+0xb8>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 23aa 	strb.w	r2, [r3, #938]	@ 0x3aa
  board_config.motor_status.L_motor_curr=0;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <board_init+0xb8>)
 800105a:	2200      	movs	r2, #0
 800105c:	f8a3 23a6 	strh.w	r2, [r3, #934]	@ 0x3a6
  board_config.motor_status.R_motor_curr = 0;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <board_init+0xb8>)
 8001062:	2200      	movs	r2, #0
 8001064:	f8a3 23ae 	strh.w	r2, [r3, #942]	@ 0x3ae
  board_config.motor_status.L_motor_vol=0;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <board_init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 23a8 	strb.w	r2, [r3, #936]	@ 0x3a8
  board_config.motor_status.L_motor_speed=0;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <board_init+0xb8>)
 8001072:	2200      	movs	r2, #0
 8001074:	f8a3 23a4 	strh.w	r2, [r3, #932]	@ 0x3a4
  board_config.motor_status.L_motor_temp=0;
 8001078:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <board_init+0xb8>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 23a9 	strb.w	r2, [r3, #937]	@ 0x3a9
  board_config.motor_status.R_motor_status=0;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <board_init+0xb8>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 23b2 	strb.w	r2, [r3, #946]	@ 0x3b2
  board_config.motor_status.R_motor_vol=0;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <board_init+0xb8>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
  board_config.motor_status.R_motor_speed=0;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <board_init+0xb8>)
 8001092:	2200      	movs	r2, #0
 8001094:	f8a3 23ac 	strh.w	r2, [r3, #940]	@ 0x3ac
  board_config.motor_status.R_motor_speed=0;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <board_init+0xb8>)
 800109a:	2200      	movs	r2, #0
 800109c:	f8a3 23ac 	strh.w	r2, [r3, #940]	@ 0x3ac
  strcpy(board_config.gps.lon,"0");
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <board_init+0xbc>)
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	801a      	strh	r2, [r3, #0]
  strcpy(board_config.gps.lat,"0");
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <board_init+0xb8>)
 80010a8:	2230      	movs	r2, #48	@ 0x30
 80010aa:	801a      	strh	r2, [r3, #0]
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000928 	.word	0x20000928
 80010bc:	200005d8 	.word	0x200005d8
 80010c0:	200005f6 	.word	0x200005f6

080010c4 <Data_Collect>:
    double gps_lon;
} PositionData;

int parse_position_data(const char *input, PositionData *data);

int Data_Collect(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	//通过串口采集陀螺仪数据
	//imu_collect();
	//通过adc采集电池数据
	//adc_collect();
	//通过rs485读取上位机数据
	gps_collect();
 80010c8:	f000 f87c 	bl	80011c4 <gps_collect>
	//读取惯导数据
	//Inertial_Navigation_Collect();
	//读取镭神数据
	Laser_Navigation_Collect();
 80010cc:	f000 fc1a 	bl	8001904 <Laser_Navigation_Collect>
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Key_Switch>:

int KEY = 0;
int KEY_FLAG = 0;
int KEY_COUNT = 2;
int Key_Switch(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  KEY = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
 80010dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e0:	4831      	ldr	r0, [pc, #196]	@ (80011a8 <Key_Switch+0xd0>)
 80010e2:	f009 fd5b 	bl	800ab9c <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <Key_Switch+0xd4>)
 80010ec:	601a      	str	r2, [r3, #0]
  if(KEY == 0){
 80010ee:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <Key_Switch+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <Key_Switch+0x24>
	KEY_FLAG = 1;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <Key_Switch+0xd8>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
  }
  if(KEY_FLAG == 1 && KEY == 1){
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <Key_Switch+0xd8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10b      	bne.n	800111c <Key_Switch+0x44>
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <Key_Switch+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <Key_Switch+0x44>
	KEY_FLAG = 2;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <Key_Switch+0xd8>)
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
	KEY_COUNT++;
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <Key_Switch+0xdc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a26      	ldr	r2, [pc, #152]	@ (80011b4 <Key_Switch+0xdc>)
 800111a:	6013      	str	r3, [r2, #0]
  }
  //printf("%d\r\n",KEY_COUNT);
  if(KEY_COUNT%5 == 0){
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <Key_Switch+0xdc>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <Key_Switch+0xe0>)
 8001122:	fb83 2301 	smull	r2, r3, r3, r1
 8001126:	105a      	asrs	r2, r3, #1
 8001128:	17cb      	asrs	r3, r1, #31
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	1aca      	subs	r2, r1, r3
 8001134:	2a00      	cmp	r2, #0
 8001136:	d102      	bne.n	800113e <Key_Switch+0x66>
 	  KEY_COUNT = 2;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <Key_Switch+0xdc>)
 800113a:	2202      	movs	r2, #2
 800113c:	601a      	str	r2, [r3, #0]
  }
  if(KEY_COUNT%4 == 0){
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <Key_Switch+0xdc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <Key_Switch+0x7a>
  	  //printf("Auto\r\n");
   	  auto_flag = 1;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <Key_Switch+0xe4>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e025      	b.n	800119e <Key_Switch+0xc6>
    }
  else if(KEY_COUNT%2 == 0){
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <Key_Switch+0xdc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <Key_Switch+0x9a>
	  Status_get_and_Powerset(Get_KeyState());
 800115e:	f006 fe2f 	bl	8007dc0 <Get_KeyState>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f007 f83f 	bl	80081e8 <Status_get_and_Powerset>
	  auto_flag = 0;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <Key_Switch+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e015      	b.n	800119e <Key_Switch+0xc6>
	  //printf("Rocker\r\n");
  }
  else if(KEY_COUNT%3 == 0){
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <Key_Switch+0xdc>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <Key_Switch+0xe8>)
 8001178:	fb83 3201 	smull	r3, r2, r3, r1
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	2a00      	cmp	r2, #0
 800118a:	d108      	bne.n	800119e <Key_Switch+0xc6>
	  Status_get_and_Powerset_Blue(Get_KeyState_Blue());
 800118c:	f006 ff22 	bl	8007fd4 <Get_KeyState_Blue>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 fa9c 	bl	80086d0 <Status_get_and_Powerset_Blue>
	  auto_flag = 0;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <Key_Switch+0xe4>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
	  //printf("Blue\r\n");
  }
  return KEY_COUNT;
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <Key_Switch+0xdc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020400 	.word	0x40020400
 80011ac:	20000214 	.word	0x20000214
 80011b0:	20000218 	.word	0x20000218
 80011b4:	20000000 	.word	0x20000000
 80011b8:	66666667 	.word	0x66666667
 80011bc:	200005d4 	.word	0x200005d4
 80011c0:	55555556 	.word	0x55555556

080011c4 <gps_collect>:
#endif
    }
	return 1;
}

uint16_t gps_collect(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	if (rxu4_data_ready == 1) {
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <gps_collect+0x34>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d110      	bne.n	80011f2 <gps_collect+0x2e>
	  // 处理接收到的数据
	  gps_decode();
 80011d0:	f000 f818 	bl	8001204 <gps_decode>
	  // 清空接收缓冲区
	  memset(rxu4_buffer, 0, sizeof(rxu4_buffer));
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	2100      	movs	r1, #0
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <gps_collect+0x38>)
 80011dc:	f00e fb32 	bl	800f844 <memset>
	  rxu4_data_ready = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <gps_collect+0x34>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	  // 重新启动DMA接收
	  HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 80011e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ea:	4904      	ldr	r1, [pc, #16]	@ (80011fc <gps_collect+0x38>)
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <gps_collect+0x3c>)
 80011ee:	f00b f983 	bl	800c4f8 <HAL_UART_Receive_DMA>
    }
	return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000ac4 	.word	0x20000ac4
 80011fc:	200009c4 	.word	0x200009c4
 8001200:	20000b90 	.word	0x20000b90

08001204 <gps_decode>:

// 航点数组
#define NUM_WAYPOINTS 6
Waypoint waypointss[NUM_WAYPOINTS];
Head_in head_in;
void gps_decode(void){
 8001204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001208:	ed2d 8b10 	vpush	{d8-d15}
 800120c:	f5ad 7d26 	sub.w	sp, sp, #664	@ 0x298
 8001210:	af16      	add	r7, sp, #88	@ 0x58
	printf("%s\r\n",rxu4_buffer);
 8001212:	499f      	ldr	r1, [pc, #636]	@ (8001490 <gps_decode+0x28c>)
 8001214:	489f      	ldr	r0, [pc, #636]	@ (8001494 <gps_decode+0x290>)
 8001216:	f00e f981 	bl	800f51c <iprintf>
	if(strstr(rxu4_buffer,"Kp")!=NULL && strstr(rxu4_buffer,"Ki")!=NULL && strstr(rxu4_buffer,"Kd")!=NULL && strstr(rxu4_buffer,"Lon1")!=NULL){
 800121a:	499f      	ldr	r1, [pc, #636]	@ (8001498 <gps_decode+0x294>)
 800121c:	489c      	ldr	r0, [pc, #624]	@ (8001490 <gps_decode+0x28c>)
 800121e:	f00e fb87 	bl	800f930 <strstr>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 826b 	beq.w	8001700 <gps_decode+0x4fc>
 800122a:	499c      	ldr	r1, [pc, #624]	@ (800149c <gps_decode+0x298>)
 800122c:	4898      	ldr	r0, [pc, #608]	@ (8001490 <gps_decode+0x28c>)
 800122e:	f00e fb7f 	bl	800f930 <strstr>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 8263 	beq.w	8001700 <gps_decode+0x4fc>
 800123a:	4999      	ldr	r1, [pc, #612]	@ (80014a0 <gps_decode+0x29c>)
 800123c:	4894      	ldr	r0, [pc, #592]	@ (8001490 <gps_decode+0x28c>)
 800123e:	f00e fb77 	bl	800f930 <strstr>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 825b 	beq.w	8001700 <gps_decode+0x4fc>
 800124a:	4996      	ldr	r1, [pc, #600]	@ (80014a4 <gps_decode+0x2a0>)
 800124c:	4890      	ldr	r0, [pc, #576]	@ (8001490 <gps_decode+0x28c>)
 800124e:	f00e fb6f 	bl	800f930 <strstr>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 8253 	beq.w	8001700 <gps_decode+0x4fc>
		printf("\r\n");
 800125a:	4893      	ldr	r0, [pc, #588]	@ (80014a8 <gps_decode+0x2a4>)
 800125c:	f00e f9c6 	bl	800f5ec <puts>
		char *token = strtok((char *)rxu4_buffer, ",");
 8001260:	4992      	ldr	r1, [pc, #584]	@ (80014ac <gps_decode+0x2a8>)
 8001262:	488b      	ldr	r0, [pc, #556]	@ (8001490 <gps_decode+0x28c>)
 8001264:	f00e fb08 	bl	800f878 <strtok>
 8001268:	4603      	mov	r3, r0
 800126a:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
		while (token != NULL) {
 800126e:	e0ac      	b.n	80013ca <gps_decode+0x1c6>
			if (strstr(token, "Kp=")) {
 8001270:	498f      	ldr	r1, [pc, #572]	@ (80014b0 <gps_decode+0x2ac>)
 8001272:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001276:	f00e fb5b 	bl	800f930 <strstr>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <gps_decode+0x8a>
				sscanf(token, "Kp=%f", &heading_pid.Kp);
 8001280:	4a8c      	ldr	r2, [pc, #560]	@ (80014b4 <gps_decode+0x2b0>)
 8001282:	498d      	ldr	r1, [pc, #564]	@ (80014b8 <gps_decode+0x2b4>)
 8001284:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001288:	f00e f9d8 	bl	800f63c <siscanf>
 800128c:	e096      	b.n	80013bc <gps_decode+0x1b8>
			} else if (strstr(token, "Ki=")) {
 800128e:	498b      	ldr	r1, [pc, #556]	@ (80014bc <gps_decode+0x2b8>)
 8001290:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001294:	f00e fb4c 	bl	800f930 <strstr>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <gps_decode+0xa8>
				sscanf(token, "Ki=%f", &heading_pid.Ki);
 800129e:	4a88      	ldr	r2, [pc, #544]	@ (80014c0 <gps_decode+0x2bc>)
 80012a0:	4988      	ldr	r1, [pc, #544]	@ (80014c4 <gps_decode+0x2c0>)
 80012a2:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012a6:	f00e f9c9 	bl	800f63c <siscanf>
 80012aa:	e087      	b.n	80013bc <gps_decode+0x1b8>
			} else if (strstr(token, "Kd=")) {
 80012ac:	4986      	ldr	r1, [pc, #536]	@ (80014c8 <gps_decode+0x2c4>)
 80012ae:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012b2:	f00e fb3d 	bl	800f930 <strstr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <gps_decode+0xc6>
				sscanf(token, "Kd=%f", &heading_pid.Kd);
 80012bc:	4a83      	ldr	r2, [pc, #524]	@ (80014cc <gps_decode+0x2c8>)
 80012be:	4984      	ldr	r1, [pc, #528]	@ (80014d0 <gps_decode+0x2cc>)
 80012c0:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012c4:	f00e f9ba 	bl	800f63c <siscanf>
 80012c8:	e078      	b.n	80013bc <gps_decode+0x1b8>
			}else if (strstr(token, "Min=")) {
 80012ca:	4982      	ldr	r1, [pc, #520]	@ (80014d4 <gps_decode+0x2d0>)
 80012cc:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012d0:	f00e fb2e 	bl	800f930 <strstr>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <gps_decode+0xe4>
				sscanf(token, "Min=%f", &head_in.Min_in);
 80012da:	4a7f      	ldr	r2, [pc, #508]	@ (80014d8 <gps_decode+0x2d4>)
 80012dc:	497f      	ldr	r1, [pc, #508]	@ (80014dc <gps_decode+0x2d8>)
 80012de:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012e2:	f00e f9ab 	bl	800f63c <siscanf>
 80012e6:	e069      	b.n	80013bc <gps_decode+0x1b8>
			}else if (strstr(token, "Max=")) {
 80012e8:	497d      	ldr	r1, [pc, #500]	@ (80014e0 <gps_decode+0x2dc>)
 80012ea:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 80012ee:	f00e fb1f 	bl	800f930 <strstr>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <gps_decode+0x102>
				sscanf(token, "Max=%f", &head_in.Max_in);
 80012f8:	4a7a      	ldr	r2, [pc, #488]	@ (80014e4 <gps_decode+0x2e0>)
 80012fa:	497b      	ldr	r1, [pc, #492]	@ (80014e8 <gps_decode+0x2e4>)
 80012fc:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001300:	f00e f99c 	bl	800f63c <siscanf>
 8001304:	e05a      	b.n	80013bc <gps_decode+0x1b8>
			}else if (strstr(token, "Num=")) {
 8001306:	4979      	ldr	r1, [pc, #484]	@ (80014ec <gps_decode+0x2e8>)
 8001308:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 800130c:	f00e fb10 	bl	800f930 <strstr>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <gps_decode+0x120>
				sscanf(token, "Num=%d", &head_in.gps_num);
 8001316:	4a76      	ldr	r2, [pc, #472]	@ (80014f0 <gps_decode+0x2ec>)
 8001318:	4976      	ldr	r1, [pc, #472]	@ (80014f4 <gps_decode+0x2f0>)
 800131a:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 800131e:	f00e f98d 	bl	800f63c <siscanf>
 8001322:	e04b      	b.n	80013bc <gps_decode+0x1b8>
			}else if (strstr(token, "Lon")) {
 8001324:	4974      	ldr	r1, [pc, #464]	@ (80014f8 <gps_decode+0x2f4>)
 8001326:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 800132a:	f00e fb01 	bl	800f930 <strstr>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01d      	beq.n	8001370 <gps_decode+0x16c>
				int index;
				float value;
				if (sscanf(token, "Lon%d=%f", &index, &value) == 2 && index > 0 && index <= NUM_WAYPOINTS) {
 8001334:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001338:	f507 720d 	add.w	r2, r7, #564	@ 0x234
 800133c:	496f      	ldr	r1, [pc, #444]	@ (80014fc <gps_decode+0x2f8>)
 800133e:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001342:	f00e f97b 	bl	800f63c <siscanf>
 8001346:	4603      	mov	r3, r0
 8001348:	2b02      	cmp	r3, #2
 800134a:	d137      	bne.n	80013bc <gps_decode+0x1b8>
 800134c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd33      	ble.n	80013bc <gps_decode+0x1b8>
 8001354:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001358:	2b06      	cmp	r3, #6
 800135a:	dc2f      	bgt.n	80013bc <gps_decode+0x1b8>
					waypointss[index - 1].longitude = value;
 800135c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001360:	3b01      	subs	r3, #1
 8001362:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8001366:	4966      	ldr	r1, [pc, #408]	@ (8001500 <gps_decode+0x2fc>)
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e025      	b.n	80013bc <gps_decode+0x1b8>
				}
			} else if (strstr(token, "Lat")) {
 8001370:	4964      	ldr	r1, [pc, #400]	@ (8001504 <gps_decode+0x300>)
 8001372:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8001376:	f00e fadb 	bl	800f930 <strstr>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01d      	beq.n	80013bc <gps_decode+0x1b8>
				int index;
				float value;
				if (sscanf(token, "Lat%d=%f", &index, &value) == 2 && index > 0 && index <= NUM_WAYPOINTS) {
 8001380:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001384:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001388:	495f      	ldr	r1, [pc, #380]	@ (8001508 <gps_decode+0x304>)
 800138a:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 800138e:	f00e f955 	bl	800f63c <siscanf>
 8001392:	4603      	mov	r3, r0
 8001394:	2b02      	cmp	r3, #2
 8001396:	d111      	bne.n	80013bc <gps_decode+0x1b8>
 8001398:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd0d      	ble.n	80013bc <gps_decode+0x1b8>
 80013a0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	dc09      	bgt.n	80013bc <gps_decode+0x1b8>
					waypointss[index - 1].latitude = value;
 80013a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80013ac:	3b01      	subs	r3, #1
 80013ae:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80013b2:	4953      	ldr	r1, [pc, #332]	@ (8001500 <gps_decode+0x2fc>)
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	3304      	adds	r3, #4
 80013ba:	601a      	str	r2, [r3, #0]
				}
			}
			token = strtok(NULL, ",");
 80013bc:	493b      	ldr	r1, [pc, #236]	@ (80014ac <gps_decode+0x2a8>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f00e fa5a 	bl	800f878 <strtok>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
		while (token != NULL) {
 80013ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f af4e 	bne.w	8001270 <gps_decode+0x6c>
		}
		Auto_Start_Flag = AUTO_START;
 80013d4:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <gps_decode+0x308>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
		PID_Init(&heading_pid, heading_pid.Kp, heading_pid.Ki, heading_pid.Kd, 0.0f, head_in.Min_in, head_in.Max_in);
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <gps_decode+0x2b0>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <gps_decode+0x2b0>)
 80013e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <gps_decode+0x2b0>)
 80013e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80013ec:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <gps_decode+0x2d4>)
 80013ee:	ed93 6a00 	vldr	s12, [r3]
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <gps_decode+0x2d4>)
 80013f4:	edd3 5a01 	vldr	s11, [r3, #4]
 80013f8:	eef0 2a65 	vmov.f32	s5, s11
 80013fc:	eeb0 2a46 	vmov.f32	s4, s12
 8001400:	eddf 1a43 	vldr	s3, [pc, #268]	@ 8001510 <gps_decode+0x30c>
 8001404:	eeb0 1a66 	vmov.f32	s2, s13
 8001408:	eef0 0a47 	vmov.f32	s1, s14
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	4828      	ldr	r0, [pc, #160]	@ (80014b4 <gps_decode+0x2b0>)
 8001412:	f005 f9ab 	bl	800676c <PID_Init>
		board_config.gps.gps_num = head_in.gps_num;
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <gps_decode+0x2d4>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	4a3e      	ldr	r2, [pc, #248]	@ (8001514 <gps_decode+0x310>)
 800141c:	f8c2 3310 	str.w	r3, [r2, #784]	@ 0x310
		printf("P:%f I:%f D:%f Min:%f Max:%f Num:%d\r\n",heading_pid.Kp, heading_pid.Ki, heading_pid.Kd,head_in.Min_in, head_in.Max_in,board_config.gps.gps_num);
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <gps_decode+0x2b0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f89f 	bl	8000568 <__aeabi_f2d>
 800142a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <gps_decode+0x2b0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f898 	bl	8000568 <__aeabi_f2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <gps_decode+0x2b0>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f891 	bl	8000568 <__aeabi_f2d>
 8001446:	4680      	mov	r8, r0
 8001448:	4689      	mov	r9, r1
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <gps_decode+0x2d4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f88a 	bl	8000568 <__aeabi_f2d>
 8001454:	4682      	mov	sl, r0
 8001456:	468b      	mov	fp, r1
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <gps_decode+0x2d4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f883 	bl	8000568 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	492b      	ldr	r1, [pc, #172]	@ (8001514 <gps_decode+0x310>)
 8001468:	f8d1 1310 	ldr.w	r1, [r1, #784]	@ 0x310
 800146c:	9108      	str	r1, [sp, #32]
 800146e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001472:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001476:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800147a:	e9cd 4500 	strd	r4, r5, [sp]
 800147e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001482:	4825      	ldr	r0, [pc, #148]	@ (8001518 <gps_decode+0x314>)
 8001484:	f00e f84a 	bl	800f51c <iprintf>
		for(int i = 0 ; i < 6 ; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800148e:	e0a6      	b.n	80015de <gps_decode+0x3da>
 8001490:	200009c4 	.word	0x200009c4
 8001494:	08015500 	.word	0x08015500
 8001498:	08015508 	.word	0x08015508
 800149c:	0801550c 	.word	0x0801550c
 80014a0:	08015510 	.word	0x08015510
 80014a4:	08015514 	.word	0x08015514
 80014a8:	0801551c 	.word	0x0801551c
 80014ac:	08015520 	.word	0x08015520
 80014b0:	08015524 	.word	0x08015524
 80014b4:	200009a0 	.word	0x200009a0
 80014b8:	08015528 	.word	0x08015528
 80014bc:	08015530 	.word	0x08015530
 80014c0:	200009a4 	.word	0x200009a4
 80014c4:	08015534 	.word	0x08015534
 80014c8:	0801553c 	.word	0x0801553c
 80014cc:	200009a8 	.word	0x200009a8
 80014d0:	08015540 	.word	0x08015540
 80014d4:	08015548 	.word	0x08015548
 80014d8:	2000024c 	.word	0x2000024c
 80014dc:	08015550 	.word	0x08015550
 80014e0:	08015558 	.word	0x08015558
 80014e4:	20000250 	.word	0x20000250
 80014e8:	08015560 	.word	0x08015560
 80014ec:	08015568 	.word	0x08015568
 80014f0:	20000254 	.word	0x20000254
 80014f4:	08015570 	.word	0x08015570
 80014f8:	08015578 	.word	0x08015578
 80014fc:	0801557c 	.word	0x0801557c
 8001500:	2000021c 	.word	0x2000021c
 8001504:	08015588 	.word	0x08015588
 8001508:	0801558c 	.word	0x0801558c
 800150c:	20000ac5 	.word	0x20000ac5
 8001510:	00000000 	.word	0x00000000
 8001514:	200005d8 	.word	0x200005d8
 8001518:	08015598 	.word	0x08015598
			sprintf(board_config.gps.Target_gpslat[i],"%f",waypointss[i].latitude);
 800151c:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8001520:	4613      	mov	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	3358      	adds	r3, #88	@ 0x58
 800152a:	4aa5      	ldr	r2, [pc, #660]	@ (80017c0 <gps_decode+0x5bc>)
 800152c:	4413      	add	r3, r2
 800152e:	1c9c      	adds	r4, r3, #2
 8001530:	4aa4      	ldr	r2, [pc, #656]	@ (80017c4 <gps_decode+0x5c0>)
 8001532:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	3304      	adds	r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f812 	bl	8000568 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	499f      	ldr	r1, [pc, #636]	@ (80017c8 <gps_decode+0x5c4>)
 800154a:	4620      	mov	r0, r4
 800154c:	f00e f856 	bl	800f5fc <siprintf>
			sprintf(board_config.gps.Target_gpslon[i],"%f",waypointss[i].longitude);
 8001550:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8001554:	4613      	mov	r3, r2
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001560:	4a97      	ldr	r2, [pc, #604]	@ (80017c0 <gps_decode+0x5bc>)
 8001562:	4413      	add	r3, r2
 8001564:	1d9c      	adds	r4, r3, #6
 8001566:	4a97      	ldr	r2, [pc, #604]	@ (80017c4 <gps_decode+0x5c0>)
 8001568:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fff8 	bl	8000568 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4992      	ldr	r1, [pc, #584]	@ (80017c8 <gps_decode+0x5c4>)
 800157e:	4620      	mov	r0, r4
 8001580:	f00e f83c 	bl	800f5fc <siprintf>
			printf("lat:%f   lon:%f\r\n",atof(board_config.gps.Target_gpslat[i]),atof(board_config.gps.Target_gpslon[i]));
 8001584:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8001588:	4613      	mov	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	3358      	adds	r3, #88	@ 0x58
 8001592:	4a8b      	ldr	r2, [pc, #556]	@ (80017c0 <gps_decode+0x5bc>)
 8001594:	4413      	add	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f00c f973 	bl	800d884 <atof>
 800159e:	ec55 4b10 	vmov	r4, r5, d0
 80015a2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80015b2:	4a83      	ldr	r2, [pc, #524]	@ (80017c0 <gps_decode+0x5bc>)
 80015b4:	4413      	add	r3, r2
 80015b6:	3306      	adds	r3, #6
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00c f963 	bl	800d884 <atof>
 80015be:	eeb0 7a40 	vmov.f32	s14, s0
 80015c2:	eef0 7a60 	vmov.f32	s15, s1
 80015c6:	ed8d 7b00 	vstr	d7, [sp]
 80015ca:	4622      	mov	r2, r4
 80015cc:	462b      	mov	r3, r5
 80015ce:	487f      	ldr	r0, [pc, #508]	@ (80017cc <gps_decode+0x5c8>)
 80015d0:	f00d ffa4 	bl	800f51c <iprintf>
		for(int i = 0 ; i < 6 ; i++){
 80015d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80015d8:	3301      	adds	r3, #1
 80015da:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80015de:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	dd9a      	ble.n	800151c <gps_decode+0x318>
		}
		printf("\r\n");
 80015e6:	487a      	ldr	r0, [pc, #488]	@ (80017d0 <gps_decode+0x5cc>)
 80015e8:	f00e f800 	bl	800f5ec <puts>
		uint8_t Laser_Buf[512] = {0};
 80015ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80015f0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	3304      	adds	r3, #4
 80015fa:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00e f91f 	bl	800f844 <memset>
		sprintf(Laser_Buf,"{\"Goal1\":[{\"Lat\":%f,\"Lng\":%f}],\"Goal2\":[{\"Lat\":%f,\"Lng\":%f}],\"Goal3\":[{\"Lat\":%f,\"Lng\":%f}],\"Goal4\":[{\"Lat\":%f,\"Lng\":%f}],\"Goal5\":[{\"Lat\":%f,\"Lng\":%f}],\"Goal6\":[{\"Lat\":%f,\"Lng\":%f}]}",\
 8001606:	4873      	ldr	r0, [pc, #460]	@ (80017d4 <gps_decode+0x5d0>)
 8001608:	f00c f93c 	bl	800d884 <atof>
 800160c:	ec55 4b10 	vmov	r4, r5, d0
 8001610:	4871      	ldr	r0, [pc, #452]	@ (80017d8 <gps_decode+0x5d4>)
 8001612:	f00c f937 	bl	800d884 <atof>
 8001616:	eeb0 8a40 	vmov.f32	s16, s0
 800161a:	eef0 8a60 	vmov.f32	s17, s1
 800161e:	486f      	ldr	r0, [pc, #444]	@ (80017dc <gps_decode+0x5d8>)
 8001620:	f00c f930 	bl	800d884 <atof>
 8001624:	eeb0 9a40 	vmov.f32	s18, s0
 8001628:	eef0 9a60 	vmov.f32	s19, s1
 800162c:	486c      	ldr	r0, [pc, #432]	@ (80017e0 <gps_decode+0x5dc>)
 800162e:	f00c f929 	bl	800d884 <atof>
 8001632:	eeb0 aa40 	vmov.f32	s20, s0
 8001636:	eef0 aa60 	vmov.f32	s21, s1
 800163a:	486a      	ldr	r0, [pc, #424]	@ (80017e4 <gps_decode+0x5e0>)
 800163c:	f00c f922 	bl	800d884 <atof>
 8001640:	eeb0 ba40 	vmov.f32	s22, s0
 8001644:	eef0 ba60 	vmov.f32	s23, s1
 8001648:	4866      	ldr	r0, [pc, #408]	@ (80017e4 <gps_decode+0x5e0>)
 800164a:	f00c f91b 	bl	800d884 <atof>
 800164e:	eeb0 ca40 	vmov.f32	s24, s0
 8001652:	eef0 ca60 	vmov.f32	s25, s1
 8001656:	4864      	ldr	r0, [pc, #400]	@ (80017e8 <gps_decode+0x5e4>)
 8001658:	f00c f914 	bl	800d884 <atof>
 800165c:	eeb0 da40 	vmov.f32	s26, s0
 8001660:	eef0 da60 	vmov.f32	s27, s1
 8001664:	4861      	ldr	r0, [pc, #388]	@ (80017ec <gps_decode+0x5e8>)
 8001666:	f00c f90d 	bl	800d884 <atof>
 800166a:	eeb0 ea40 	vmov.f32	s28, s0
 800166e:	eef0 ea60 	vmov.f32	s29, s1
 8001672:	485f      	ldr	r0, [pc, #380]	@ (80017f0 <gps_decode+0x5ec>)
 8001674:	f00c f906 	bl	800d884 <atof>
 8001678:	eeb0 fa40 	vmov.f32	s30, s0
 800167c:	eef0 fa60 	vmov.f32	s31, s1
 8001680:	485c      	ldr	r0, [pc, #368]	@ (80017f4 <gps_decode+0x5f0>)
 8001682:	f00c f8ff 	bl	800d884 <atof>
 8001686:	ed87 0b02 	vstr	d0, [r7, #8]
 800168a:	485b      	ldr	r0, [pc, #364]	@ (80017f8 <gps_decode+0x5f4>)
 800168c:	f00c f8fa 	bl	800d884 <atof>
 8001690:	ed87 0b00 	vstr	d0, [r7]
 8001694:	4859      	ldr	r0, [pc, #356]	@ (80017fc <gps_decode+0x5f8>)
 8001696:	f00c f8f5 	bl	800d884 <atof>
 800169a:	eeb0 7a40 	vmov.f32	s14, s0
 800169e:	eef0 7a60 	vmov.f32	s15, s1
 80016a2:	f107 0010 	add.w	r0, r7, #16
 80016a6:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80016aa:	ed97 7b00 	vldr	d7, [r7]
 80016ae:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80016b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016b6:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80016ba:	ed8d fb0e 	vstr	d15, [sp, #56]	@ 0x38
 80016be:	ed8d eb0c 	vstr	d14, [sp, #48]	@ 0x30
 80016c2:	ed8d db0a 	vstr	d13, [sp, #40]	@ 0x28
 80016c6:	ed8d cb08 	vstr	d12, [sp, #32]
 80016ca:	ed8d bb06 	vstr	d11, [sp, #24]
 80016ce:	ed8d ab04 	vstr	d10, [sp, #16]
 80016d2:	ed8d 9b02 	vstr	d9, [sp, #8]
 80016d6:	ed8d 8b00 	vstr	d8, [sp]
 80016da:	4622      	mov	r2, r4
 80016dc:	462b      	mov	r3, r5
 80016de:	4948      	ldr	r1, [pc, #288]	@ (8001800 <gps_decode+0x5fc>)
 80016e0:	f00d ff8c 	bl	800f5fc <siprintf>
				atof(board_config.gps.Target_gpslat[0]),atof(board_config.gps.Target_gpslon[0]),atof(board_config.gps.Target_gpslat[1]),atof(board_config.gps.Target_gpslon[1]),atof(board_config.gps.Target_gpslat[2]),atof(board_config.gps.Target_gpslat[2]),\
				atof(board_config.gps.Target_gpslat[3]),atof(board_config.gps.Target_gpslon[3]),atof(board_config.gps.Target_gpslat[4]),atof(board_config.gps.Target_gpslon[4]),atof(board_config.gps.Target_gpslat[5]),atof(board_config.gps.Target_gpslon[5]));
		HAL_UART_Transmit(&huart2,Laser_Buf,strlen(Laser_Buf),0xff);
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fdd1 	bl	8000290 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f107 0110 	add.w	r1, r7, #16
 80016f6:	23ff      	movs	r3, #255	@ 0xff
 80016f8:	4842      	ldr	r0, [pc, #264]	@ (8001804 <gps_decode+0x600>)
 80016fa:	f00a fe4d 	bl	800c398 <HAL_UART_Transmit>
	if(strstr(rxu4_buffer,"Kp")!=NULL && strstr(rxu4_buffer,"Ki")!=NULL && strstr(rxu4_buffer,"Kd")!=NULL && strstr(rxu4_buffer,"Lon1")!=NULL){
 80016fe:	e055      	b.n	80017ac <gps_decode+0x5a8>
	}
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 8001700:	4941      	ldr	r1, [pc, #260]	@ (8001808 <gps_decode+0x604>)
 8001702:	4842      	ldr	r0, [pc, #264]	@ (800180c <gps_decode+0x608>)
 8001704:	f00e f914 	bl	800f930 <strstr>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d039      	beq.n	8001782 <gps_decode+0x57e>
 800170e:	4940      	ldr	r1, [pc, #256]	@ (8001810 <gps_decode+0x60c>)
 8001710:	483e      	ldr	r0, [pc, #248]	@ (800180c <gps_decode+0x608>)
 8001712:	f00e f90d 	bl	800f930 <strstr>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <gps_decode+0x57e>
 800171c:	493d      	ldr	r1, [pc, #244]	@ (8001814 <gps_decode+0x610>)
 800171e:	483b      	ldr	r0, [pc, #236]	@ (800180c <gps_decode+0x608>)
 8001720:	f00e f906 	bl	800f930 <strstr>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d02b      	beq.n	8001782 <gps_decode+0x57e>
		PositionData data;
		if (parse_position_data(rxu4_buffer, &data) == 0) {
 800172a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800172e:	4619      	mov	r1, r3
 8001730:	4836      	ldr	r0, [pc, #216]	@ (800180c <gps_decode+0x608>)
 8001732:	f000 f881 	bl	8001838 <parse_position_data>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d11e      	bne.n	800177a <gps_decode+0x576>
			// 输出解析后的数据
			printf("Pitch: %.6f", data.pitch);
 800173c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8001740:	4835      	ldr	r0, [pc, #212]	@ (8001818 <gps_decode+0x614>)
 8001742:	f00d feeb 	bl	800f51c <iprintf>
			printf("  GPS Latitude: %.6f", data.gps_lat);
 8001746:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800174a:	4834      	ldr	r0, [pc, #208]	@ (800181c <gps_decode+0x618>)
 800174c:	f00d fee6 	bl	800f51c <iprintf>
			printf("  GPS Longitude: %.6f\r\n", data.gps_lon);
 8001750:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8001754:	4832      	ldr	r0, [pc, #200]	@ (8001820 <gps_decode+0x61c>)
 8001756:	f00d fee1 	bl	800f51c <iprintf>
			board_config.Imu_data.Pitch = data.pitch;
 800175a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800175e:	4918      	ldr	r1, [pc, #96]	@ (80017c0 <gps_decode+0x5bc>)
 8001760:	e9c1 23ce 	strd	r2, r3, [r1, #824]	@ 0x338
			board_config.gps.lat_deg = data.gps_lat;
 8001764:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8001768:	4915      	ldr	r1, [pc, #84]	@ (80017c0 <gps_decode+0x5bc>)
 800176a:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
			board_config.gps.lon_deg = data.gps_lon;
 800176e:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8001772:	4913      	ldr	r1, [pc, #76]	@ (80017c0 <gps_decode+0x5bc>)
 8001774:	e9c1 23be 	strd	r2, r3, [r1, #760]	@ 0x2f8
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 8001778:	e018      	b.n	80017ac <gps_decode+0x5a8>
		} else {
			printf("Failed to parse the input data.\n");
 800177a:	482a      	ldr	r0, [pc, #168]	@ (8001824 <gps_decode+0x620>)
 800177c:	f00d ff36 	bl	800f5ec <puts>
	else if(strstr(rxu4_buffer,"Pitch")!=NULL && strstr(rxu4_buffer,"Gps_Lat")!=NULL && strstr(rxu4_buffer,"Gps_Lon")!=NULL){
 8001780:	e014      	b.n	80017ac <gps_decode+0x5a8>
		}
	}
	else if(strstr(rxu4_buffer,"AutomaticReturn_Start")!=NULL){
 8001782:	4929      	ldr	r1, [pc, #164]	@ (8001828 <gps_decode+0x624>)
 8001784:	4821      	ldr	r0, [pc, #132]	@ (800180c <gps_decode+0x608>)
 8001786:	f00e f8d3 	bl	800f930 <strstr>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <gps_decode+0x594>
		Auto_Status = Auto_Return;
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <gps_decode+0x628>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
	}
	else if(strstr(rxu4_buffer,"Stop_Auto")!=NULL){
		Auto_Start_Flag = AUTO_STOP;
	}
	return ;
 8001796:	e00a      	b.n	80017ae <gps_decode+0x5aa>
	else if(strstr(rxu4_buffer,"Stop_Auto")!=NULL){
 8001798:	4925      	ldr	r1, [pc, #148]	@ (8001830 <gps_decode+0x62c>)
 800179a:	481c      	ldr	r0, [pc, #112]	@ (800180c <gps_decode+0x608>)
 800179c:	f00e f8c8 	bl	800f930 <strstr>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <gps_decode+0x5aa>
		Auto_Start_Flag = AUTO_STOP;
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <gps_decode+0x630>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
	return ;
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
}
 80017b0:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 80017b4:	46bd      	mov	sp, r7
 80017b6:	ecbd 8b10 	vpop	{d8-d15}
 80017ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017be:	bf00      	nop
 80017c0:	200005d8 	.word	0x200005d8
 80017c4:	2000021c 	.word	0x2000021c
 80017c8:	080155c0 	.word	0x080155c0
 80017cc:	080155c4 	.word	0x080155c4
 80017d0:	0801551c 	.word	0x0801551c
 80017d4:	20000632 	.word	0x20000632
 80017d8:	200006e6 	.word	0x200006e6
 80017dc:	20000650 	.word	0x20000650
 80017e0:	20000704 	.word	0x20000704
 80017e4:	2000066e 	.word	0x2000066e
 80017e8:	2000068c 	.word	0x2000068c
 80017ec:	20000740 	.word	0x20000740
 80017f0:	200006aa 	.word	0x200006aa
 80017f4:	2000075e 	.word	0x2000075e
 80017f8:	200006c8 	.word	0x200006c8
 80017fc:	2000077c 	.word	0x2000077c
 8001800:	080155d8 	.word	0x080155d8
 8001804:	20000c68 	.word	0x20000c68
 8001808:	08015690 	.word	0x08015690
 800180c:	200009c4 	.word	0x200009c4
 8001810:	08015698 	.word	0x08015698
 8001814:	080156a0 	.word	0x080156a0
 8001818:	080156a8 	.word	0x080156a8
 800181c:	080156b4 	.word	0x080156b4
 8001820:	080156cc 	.word	0x080156cc
 8001824:	080156e4 	.word	0x080156e4
 8001828:	08015704 	.word	0x08015704
 800182c:	20000ac8 	.word	0x20000ac8
 8001830:	0801571c 	.word	0x0801571c
 8001834:	20000ac5 	.word	0x20000ac5

08001838 <parse_position_data>:

/*{"curPt":[{"Alt":91.4,"Lat":221280068.0,"Lng":1133170163.0,"Yaw":-1488.64744}],"goalPt":[{"Alt":91.4,"Lat":221280068.0,"Lng":1133170163.0,"Yaw":-1488.6474609375}]}*/

int parse_position_data(const char *input, PositionData *data) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b09c      	sub	sp, #112	@ 0x70
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    // 定义变量用于存储解析结果
    char pitch_str[32] = {0};
 8001842:	2300      	movs	r3, #0
 8001844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001846:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	619a      	str	r2, [r3, #24]
    char lat_str[32] = {0};
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]
    char lon_str[32] = {0};
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]

    // 使用sscanf函数解析输入字符串
    if (sscanf(input, "Pitch=%31[^,],Gps_Lat=%31[^,],Gps_Lon=%31[^\n]",
 800188a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800188e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	460b      	mov	r3, r1
 800189a:	4919      	ldr	r1, [pc, #100]	@ (8001900 <parse_position_data+0xc8>)
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f00d fecd 	bl	800f63c <siscanf>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d002      	beq.n	80018ae <parse_position_data+0x76>
               pitch_str, lat_str, lon_str) != 3) {
        // 如果解析失败，返回错误码
        return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	e024      	b.n	80018f8 <parse_position_data+0xc0>
    }

    // 将字符串转换为double类型
    data->pitch = atof(pitch_str);
 80018ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00b ffe6 	bl	800d884 <atof>
 80018b8:	eeb0 7a40 	vmov.f32	s14, s0
 80018bc:	eef0 7a60 	vmov.f32	s15, s1
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	ed83 7b00 	vstr	d7, [r3]
    data->gps_lat = atof(lat_str);
 80018c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00b ffda 	bl	800d884 <atof>
 80018d0:	eeb0 7a40 	vmov.f32	s14, s0
 80018d4:	eef0 7a60 	vmov.f32	s15, s1
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	ed83 7b02 	vstr	d7, [r3, #8]
    data->gps_lon = atof(lon_str);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b ffce 	bl	800d884 <atof>
 80018e8:	eeb0 7a40 	vmov.f32	s14, s0
 80018ec:	eef0 7a60 	vmov.f32	s15, s1
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	ed83 7b04 	vstr	d7, [r3, #16]

    return 0; // 解析成功
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3768      	adds	r7, #104	@ 0x68
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	08015728 	.word	0x08015728

08001904 <Laser_Navigation_Collect>:
	}
	return 1;
}


uint16_t Laser_Navigation_Collect(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if (rxu2_data_ready == 1) {
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <Laser_Navigation_Collect+0x4c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d11c      	bne.n	800194a <Laser_Navigation_Collect+0x46>
		  printf("recv:%s\r\n",imu_buf);
 8001910:	4910      	ldr	r1, [pc, #64]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 8001912:	4811      	ldr	r0, [pc, #68]	@ (8001958 <Laser_Navigation_Collect+0x54>)
 8001914:	f00d fe02 	bl	800f51c <iprintf>
		  // 处理接收到的数据
		  ParseLaserJSON(imu_buf);
 8001918:	480e      	ldr	r0, [pc, #56]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 800191a:	f000 f821 	bl	8001960 <ParseLaserJSON>
		  // 清空接收缓冲区
		  memset(imu_buf, 0, sizeof(imu_buf));
 800191e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001922:	2100      	movs	r1, #0
 8001924:	480b      	ldr	r0, [pc, #44]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 8001926:	f00d ff8d 	bl	800f844 <memset>

		  rxu2_data_ready = 0;
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <Laser_Navigation_Collect+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		  // 重新启动DMA接收
		  HAL_UART_Receive_DMA(&huart2, (uint8_t *)imu_buf, imu_buf);
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4907      	ldr	r1, [pc, #28]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <Laser_Navigation_Collect+0x58>)
 800193a:	f00a fddd 	bl	800c4f8 <HAL_UART_Receive_DMA>

		  HAL_UART_Receive_IT(&huart2, (uint8_t *)imu_buf, sizeof(imu_buf));
 800193e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001942:	4904      	ldr	r1, [pc, #16]	@ (8001954 <Laser_Navigation_Collect+0x50>)
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <Laser_Navigation_Collect+0x58>)
 8001946:	f00a fdb2 	bl	800c4ae <HAL_UART_Receive_IT>
	    }
		return 1;
 800194a:	2301      	movs	r3, #1

	return 1;
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000ac6 	.word	0x20000ac6
 8001954:	200004d4 	.word	0x200004d4
 8001958:	08015778 	.word	0x08015778
 800195c:	20000c68 	.word	0x20000c68

08001960 <ParseLaserJSON>:


void ParseLaserJSON(const char *jsonString)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b0cd      	sub	sp, #308	@ 0x134
 8001964:	af04      	add	r7, sp, #16
 8001966:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800196a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800196e:	6018      	str	r0, [r3, #0]
	 cJSON *root = cJSON_Parse(jsonString);
 8001970:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001974:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	f001 f8d1 	bl	8002b20 <cJSON_Parse>
 800197e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	if (root == NULL)
 8001982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10e      	bne.n	80019a8 <ParseLaserJSON+0x48>
	{
		const char *error_ptr = cJSON_GetErrorPtr();
 800198a:	f000 fb59 	bl	8002040 <cJSON_GetErrorPtr>
 800198e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
		if (error_ptr != NULL)
 8001992:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80f8 	beq.w	8001b8c <ParseLaserJSON+0x22c>
		{
			printf("Error before: %s\r\n", error_ptr);
 800199c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80019a0:	487f      	ldr	r0, [pc, #508]	@ (8001ba0 <ParseLaserJSON+0x240>)
 80019a2:	f00d fdbb 	bl	800f51c <iprintf>
		}
		return;
 80019a6:	e0f1      	b.n	8001b8c <ParseLaserJSON+0x22c>
	}

	// 获取curPt数组
	cJSON *curPtArray = cJSON_GetObjectItemCaseSensitive(root, "curPt");
 80019a8:	497e      	ldr	r1, [pc, #504]	@ (8001ba4 <ParseLaserJSON+0x244>)
 80019aa:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80019ae:	f001 fc21 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 80019b2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	if (cJSON_IsArray(curPtArray) && cJSON_GetArraySize(curPtArray) > 0)
 80019b6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80019ba:	f001 fc2a 	bl	8003212 <cJSON_IsArray>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05c      	beq.n	8001a7e <ParseLaserJSON+0x11e>
 80019c4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80019c8:	f001 fb74 	bl	80030b4 <cJSON_GetArraySize>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd55      	ble.n	8001a7e <ParseLaserJSON+0x11e>
	{
		cJSON *curPt = cJSON_GetArrayItem(curPtArray, 0);
 80019d2:	2100      	movs	r1, #0
 80019d4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80019d8:	f001 fbb0 	bl	800313c <cJSON_GetArrayItem>
 80019dc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
		if (cJSON_IsObject(curPt))
 80019e0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80019e4:	f001 fc2c 	bl	8003240 <cJSON_IsObject>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d047      	beq.n	8001a7e <ParseLaserJSON+0x11e>
		{
			board_config.gps.lat_deg = (cJSON_GetObjectItemCaseSensitive(curPt, "Lat")->valuedouble)/10000000;
 80019ee:	496e      	ldr	r1, [pc, #440]	@ (8001ba8 <ParseLaserJSON+0x248>)
 80019f0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80019f4:	f001 fbfe 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 80019f8:	4603      	mov	r3, r0
 80019fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019fe:	a366      	add	r3, pc, #408	@ (adr r3, 8001b98 <ParseLaserJSON+0x238>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe ff32 	bl	800086c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4967      	ldr	r1, [pc, #412]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a0e:	e9c1 23bc 	strd	r2, r3, [r1, #752]	@ 0x2f0
			board_config.gps.lon_deg = (cJSON_GetObjectItemCaseSensitive(curPt, "Lng")->valuedouble)/10000000;;
 8001a12:	4967      	ldr	r1, [pc, #412]	@ (8001bb0 <ParseLaserJSON+0x250>)
 8001a14:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001a18:	f001 fbec 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a22:	a35d      	add	r3, pc, #372	@ (adr r3, 8001b98 <ParseLaserJSON+0x238>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe ff20 	bl	800086c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	495e      	ldr	r1, [pc, #376]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a32:	e9c1 23be 	strd	r2, r3, [r1, #760]	@ 0x2f8
			//double curAlt = (cJSON_GetObjectItemCaseSensitive(curPt, "Alt")->valuedouble)/100;;
			board_config.Imu_data.Pitch = (cJSON_GetObjectItemCaseSensitive(curPt, "Yaw")->valuedouble)/100;
 8001a36:	495f      	ldr	r1, [pc, #380]	@ (8001bb4 <ParseLaserJSON+0x254>)
 8001a38:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001a3c:	f001 fbda 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 8001a40:	4603      	mov	r3, r0
 8001a42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb8 <ParseLaserJSON+0x258>)
 8001a4c:	f7fe ff0e 	bl	800086c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4955      	ldr	r1, [pc, #340]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a56:	e9c1 23ce 	strd	r2, r3, [r1, #824]	@ 0x338

			printf("Current Point - Lat: %.6f, Lng: %.6f, Yaw: %.6f\n", board_config.gps.lat_deg , board_config.gps.lon_deg, board_config.Imu_data.Pitch);
 8001a5a:	4b54      	ldr	r3, [pc, #336]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a5c:	e9d3 45bc 	ldrd	r4, r5, [r3, #752]	@ 0x2f0
 8001a60:	4b52      	ldr	r3, [pc, #328]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a62:	e9d3 23be 	ldrd	r2, r3, [r3, #760]	@ 0x2f8
 8001a66:	4951      	ldr	r1, [pc, #324]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001a68:	e9d1 01ce 	ldrd	r0, r1, [r1, #824]	@ 0x338
 8001a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a70:	e9cd 2300 	strd	r2, r3, [sp]
 8001a74:	4622      	mov	r2, r4
 8001a76:	462b      	mov	r3, r5
 8001a78:	4850      	ldr	r0, [pc, #320]	@ (8001bbc <ParseLaserJSON+0x25c>)
 8001a7a:	f00d fd4f 	bl	800f51c <iprintf>
		}
	}

	// 获取goalPt数组
	cJSON *goalPtArray = cJSON_GetObjectItemCaseSensitive(root, "goalPt");
 8001a7e:	4950      	ldr	r1, [pc, #320]	@ (8001bc0 <ParseLaserJSON+0x260>)
 8001a80:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001a84:	f001 fbb6 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 8001a88:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	if (cJSON_IsArray(goalPtArray) && cJSON_GetArraySize(goalPtArray) > 0)
 8001a8c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001a90:	f001 fbbf 	bl	8003212 <cJSON_IsArray>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d045      	beq.n	8001b26 <ParseLaserJSON+0x1c6>
 8001a9a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001a9e:	f001 fb09 	bl	80030b4 <cJSON_GetArraySize>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd3e      	ble.n	8001b26 <ParseLaserJSON+0x1c6>
	{
		cJSON *goalPt = cJSON_GetArrayItem(goalPtArray, 0);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001aae:	f001 fb45 	bl	800313c <cJSON_GetArrayItem>
 8001ab2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
		if (cJSON_IsObject(goalPt))
 8001ab6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001aba:	f001 fbc1 	bl	8003240 <cJSON_IsObject>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d030      	beq.n	8001b26 <ParseLaserJSON+0x1c6>
		{
			board_config.gps.Goal_Lat = (cJSON_GetObjectItemCaseSensitive(goalPt, "Lat")->valuedouble)/10000000;
 8001ac4:	4938      	ldr	r1, [pc, #224]	@ (8001ba8 <ParseLaserJSON+0x248>)
 8001ac6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001aca:	f001 fb93 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ad4:	a330      	add	r3, pc, #192	@ (adr r3, 8001b98 <ParseLaserJSON+0x238>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fec7 	bl	800086c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4932      	ldr	r1, [pc, #200]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001ae4:	e9c1 23c0 	strd	r2, r3, [r1, #768]	@ 0x300
			board_config.gps.Goal_Lon = (cJSON_GetObjectItemCaseSensitive(goalPt, "Lng")->valuedouble)/10000000;
 8001ae8:	4931      	ldr	r1, [pc, #196]	@ (8001bb0 <ParseLaserJSON+0x250>)
 8001aea:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001aee:	f001 fb81 	bl	80031f4 <cJSON_GetObjectItemCaseSensitive>
 8001af2:	4603      	mov	r3, r0
 8001af4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001af8:	a327      	add	r3, pc, #156	@ (adr r3, 8001b98 <ParseLaserJSON+0x238>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe feb5 	bl	800086c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4929      	ldr	r1, [pc, #164]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b08:	e9c1 23c2 	strd	r2, r3, [r1, #776]	@ 0x308
//			double goalAlt = (cJSON_GetObjectItemCaseSensitive(goalPt, "Alt")->valuedouble)/100;
//			double goalYaw = (cJSON_GetObjectItemCaseSensitive(goalPt, "Yaw")->valuedouble)/100;

			printf("       Goal Point - Lat: %.6f, Lng: %.6f\r\n", board_config.gps.Goal_Lat, board_config.gps.Goal_Lon);
 8001b0c:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b0e:	e9d3 01c0 	ldrd	r0, r1, [r3, #768]	@ 0x300
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b14:	e9d3 23c2 	ldrd	r2, r3, [r3, #776]	@ 0x308
 8001b18:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <ParseLaserJSON+0x264>)
 8001b22:	f00d fcfb 	bl	800f51c <iprintf>
		}
	}

	pid_flag++;
 8001b26:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <ParseLaserJSON+0x268>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <ParseLaserJSON+0x268>)
 8001b2e:	6013      	str	r3, [r2, #0]
	if(pid_flag >= 15){
 8001b30:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <ParseLaserJSON+0x268>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b0e      	cmp	r3, #14
 8001b36:	dd24      	ble.n	8001b82 <ParseLaserJSON+0x222>
		char PitchMessage[256];
		sprintf(PitchMessage,"Pitch=%f,Gps_Lat=%f,Gps_Lon=%f",board_config.Imu_data.Pitch,board_config.gps.lat_deg,board_config.gps.lon_deg);
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b3a:	e9d3 45ce 	ldrd	r4, r5, [r3, #824]	@ 0x338
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b40:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	@ 0x2f0
 8001b44:	4919      	ldr	r1, [pc, #100]	@ (8001bac <ParseLaserJSON+0x24c>)
 8001b46:	e9d1 01be 	ldrd	r0, r1, [r1, #760]	@ 0x2f8
 8001b4a:	f107 0608 	add.w	r6, r7, #8
 8001b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b52:	e9cd 2300 	strd	r2, r3, [sp]
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	491c      	ldr	r1, [pc, #112]	@ (8001bcc <ParseLaserJSON+0x26c>)
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f00d fd4d 	bl	800f5fc <siprintf>
		HAL_UART_Transmit(&huart4,PitchMessage,strlen(PitchMessage),0xff);
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb92 	bl	8000290 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f107 0108 	add.w	r1, r7, #8
 8001b74:	23ff      	movs	r3, #255	@ 0xff
 8001b76:	4816      	ldr	r0, [pc, #88]	@ (8001bd0 <ParseLaserJSON+0x270>)
 8001b78:	f00a fc0e 	bl	800c398 <HAL_UART_Transmit>
		pid_flag = 0;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <ParseLaserJSON+0x268>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
	}

	// 清理
	cJSON_Delete(root);
 8001b82:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001b86:	f000 faeb 	bl	8002160 <cJSON_Delete>
 8001b8a:	e000      	b.n	8001b8e <ParseLaserJSON+0x22e>
		return;
 8001b8c:	bf00      	nop
}
 8001b8e:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	416312d0 	.word	0x416312d0
 8001ba0:	08015784 	.word	0x08015784
 8001ba4:	08015798 	.word	0x08015798
 8001ba8:	08015588 	.word	0x08015588
 8001bac:	200005d8 	.word	0x200005d8
 8001bb0:	080157a0 	.word	0x080157a0
 8001bb4:	080157a4 	.word	0x080157a4
 8001bb8:	40590000 	.word	0x40590000
 8001bbc:	080157a8 	.word	0x080157a8
 8001bc0:	080157dc 	.word	0x080157dc
 8001bc4:	080157e4 	.word	0x080157e4
 8001bc8:	20000258 	.word	0x20000258
 8001bcc:	08015758 	.word	0x08015758
 8001bd0:	20000b90 	.word	0x20000b90

08001bd4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001be8:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <MX_ADC1_Init+0x9c>)
 8001bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <MX_ADC1_Init+0xa0>)
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c18:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c32:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c34:	f007 fb5e 	bl	80092f4 <HAL_ADC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f002 fcb9 	bl	80045b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001c42:	2308      	movs	r3, #8
 8001c44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	@ (8001c6c <MX_ADC1_Init+0x98>)
 8001c54:	f007 fcfc 	bl	8009650 <HAL_ADC_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c5e:	f002 fca9 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000025c 	.word	0x2000025c
 8001c70:	40012000 	.word	0x40012000
 8001c74:	0f000001 	.word	0x0f000001

08001c78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001c8c:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <MX_ADC2_Init+0x9c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <MX_ADC2_Init+0xa0>)
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cd6:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cd8:	f007 fb0c 	bl	80092f4 <HAL_ADC_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f002 fc67 	bl	80045b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <MX_ADC2_Init+0x98>)
 8001cf8:	f007 fcaa 	bl	8009650 <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f002 fc57 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002a4 	.word	0x200002a4
 8001d14:	40012100 	.word	0x40012100
 8001d18:	0f000001 	.word	0x0f000001

08001d1c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d22:	463b      	mov	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d30:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <MX_ADC3_Init+0x9c>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <MX_ADC3_Init+0xa0>)
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d7a:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d7c:	f007 faba 	bl	80092f4 <HAL_ADC_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f002 fc15 	bl	80045b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d8a:	230b      	movs	r3, #11
 8001d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	@ (8001db4 <MX_ADC3_Init+0x98>)
 8001d9c:	f007 fc58 	bl	8009650 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001da6:	f002 fc05 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002ec 	.word	0x200002ec
 8001db8:	40012200 	.word	0x40012200
 8001dbc:	0f000001 	.word	0x0f000001

08001dc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	@ 0x38
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8c      	ldr	r2, [pc, #560]	@ (8002010 <HAL_ADC_MspInit+0x250>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d157      	bne.n	8001e92 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	4b8b      	ldr	r3, [pc, #556]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a8a      	ldr	r2, [pc, #552]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	4b84      	ldr	r3, [pc, #528]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a83      	ldr	r2, [pc, #524]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b81      	ldr	r3, [pc, #516]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	487a      	ldr	r0, [pc, #488]	@ (8002018 <HAL_ADC_MspInit+0x258>)
 8001e2e:	f008 fd19 	bl	800a864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e32:	4b7a      	ldr	r3, [pc, #488]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e34:	4a7a      	ldr	r2, [pc, #488]	@ (8002020 <HAL_ADC_MspInit+0x260>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e38:	4b78      	ldr	r3, [pc, #480]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3e:	4b77      	ldr	r3, [pc, #476]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b75      	ldr	r3, [pc, #468]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b74      	ldr	r3, [pc, #464]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e52:	4b72      	ldr	r3, [pc, #456]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e5a:	4b70      	ldr	r3, [pc, #448]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e62:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b6c      	ldr	r3, [pc, #432]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e74:	4869      	ldr	r0, [pc, #420]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e76:	f008 f8f3 	bl	800a060 <HAL_DMA_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001e80:	f002 fb98 	bl	80045b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a65      	ldr	r2, [pc, #404]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e88:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e8a:	4a64      	ldr	r2, [pc, #400]	@ (800201c <HAL_ADC_MspInit+0x25c>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001e90:	e0ba      	b.n	8002008 <HAL_ADC_MspInit+0x248>
  else if(adcHandle->Instance==ADC2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a63      	ldr	r2, [pc, #396]	@ (8002024 <HAL_ADC_MspInit+0x264>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d158      	bne.n	8001f4e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	4a5b      	ldr	r2, [pc, #364]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eac:	4b59      	ldr	r3, [pc, #356]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	4b55      	ldr	r3, [pc, #340]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	4a54      	ldr	r2, [pc, #336]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec8:	4b52      	ldr	r3, [pc, #328]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	484c      	ldr	r0, [pc, #304]	@ (8002018 <HAL_ADC_MspInit+0x258>)
 8001ee8:	f008 fcbc 	bl	800a864 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8001eec:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001eee:	4a4f      	ldr	r2, [pc, #316]	@ (800202c <HAL_ADC_MspInit+0x26c>)
 8001ef0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001ef4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efa:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f00:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001f06:	4b48      	ldr	r3, [pc, #288]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f14:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f16:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001f1e:	4b42      	ldr	r3, [pc, #264]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001f30:	483d      	ldr	r0, [pc, #244]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f32:	f008 f895 	bl	800a060 <HAL_DMA_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8001f3c:	f002 fb3a 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a39      	ldr	r2, [pc, #228]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f44:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f46:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_ADC_MspInit+0x268>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f4c:	e05c      	b.n	8002008 <HAL_ADC_MspInit+0x248>
  else if(adcHandle->Instance==ADC3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a37      	ldr	r2, [pc, #220]	@ (8002030 <HAL_ADC_MspInit+0x270>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d157      	bne.n	8002008 <HAL_ADC_MspInit+0x248>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f60:	4a2c      	ldr	r2, [pc, #176]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f66:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	4a25      	ldr	r2, [pc, #148]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_ADC_MspInit+0x254>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f90:	2302      	movs	r3, #2
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4824      	ldr	r0, [pc, #144]	@ (8002034 <HAL_ADC_MspInit+0x274>)
 8001fa4:	f008 fc5e 	bl	800a864 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001faa:	4a24      	ldr	r2, [pc, #144]	@ (800203c <HAL_ADC_MspInit+0x27c>)
 8001fac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fb0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fb4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fca:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fd0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001fec:	4812      	ldr	r0, [pc, #72]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8001fee:	f008 f837 	bl	800a060 <HAL_DMA_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_ADC_MspInit+0x23c>
      Error_Handler();
 8001ff8:	f002 fadc 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8002000:	639a      	str	r2, [r3, #56]	@ 0x38
 8002002:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_ADC_MspInit+0x278>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	@ 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40012000 	.word	0x40012000
 8002014:	40023800 	.word	0x40023800
 8002018:	40020400 	.word	0x40020400
 800201c:	20000334 	.word	0x20000334
 8002020:	40026410 	.word	0x40026410
 8002024:	40012100 	.word	0x40012100
 8002028:	20000394 	.word	0x20000394
 800202c:	40026458 	.word	0x40026458
 8002030:	40012200 	.word	0x40012200
 8002034:	40020800 	.word	0x40020800
 8002038:	200003f4 	.word	0x200003f4
 800203c:	40026428 	.word	0x40026428

08002040 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <cJSON_GetErrorPtr+0x18>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <cJSON_GetErrorPtr+0x18>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4413      	add	r3, r2
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	20000454 	.word	0x20000454

0800205c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <case_insensitive_strcmp+0x16>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8002072:	2301      	movs	r3, #1
 8002074:	e056      	b.n	8002124 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d10d      	bne.n	800209a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800207e:	2300      	movs	r3, #0
 8002080:	e050      	b.n	8002124 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800208a:	2300      	movs	r3, #0
 800208c:	e04a      	b.n	8002124 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <case_insensitive_strcmp+0xd4>)
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d103      	bne.n	80020ba <case_insensitive_strcmp+0x5e>
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	f103 0220 	add.w	r2, r3, #32
 80020b8:	e000      	b.n	80020bc <case_insensitive_strcmp+0x60>
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	73bb      	strb	r3, [r7, #14]
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	3301      	adds	r3, #1
 80020c6:	491a      	ldr	r1, [pc, #104]	@ (8002130 <case_insensitive_strcmp+0xd4>)
 80020c8:	440b      	add	r3, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <case_insensitive_strcmp+0x7e>
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	3320      	adds	r3, #32
 80020d8:	e000      	b.n	80020dc <case_insensitive_strcmp+0x80>
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d0d0      	beq.n	8002082 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	737b      	strb	r3, [r7, #13]
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <case_insensitive_strcmp+0xd4>)
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <case_insensitive_strcmp+0xa4>
 80020f8:	7b7b      	ldrb	r3, [r7, #13]
 80020fa:	f103 0220 	add.w	r2, r3, #32
 80020fe:	e000      	b.n	8002102 <case_insensitive_strcmp+0xa6>
 8002100:	7b7a      	ldrb	r2, [r7, #13]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	733b      	strb	r3, [r7, #12]
 8002108:	7b3b      	ldrb	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	4908      	ldr	r1, [pc, #32]	@ (8002130 <case_insensitive_strcmp+0xd4>)
 800210e:	440b      	add	r3, r1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <case_insensitive_strcmp+0xc4>
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	3320      	adds	r3, #32
 800211e:	e000      	b.n	8002122 <case_insensitive_strcmp+0xc6>
 8002120:	7b3b      	ldrb	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	08015aa0 	.word	0x08015aa0

08002134 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2028      	movs	r0, #40	@ 0x28
 8002142:	4798      	blx	r3
 8002144:	60f8      	str	r0, [r7, #12]
    if (node)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800214c:	2228      	movs	r2, #40	@ 0x28
 800214e:	2100      	movs	r1, #0
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f00d fb77 	bl	800f844 <memset>
    }

    return node;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800216c:	e03d      	b.n	80021ea <cJSON_Delete+0x8a>
    {
        next = item->next;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <cJSON_Delete+0x32>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ffe7 	bl	8002160 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <cJSON_Delete+0x58>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <cJSON_Delete+0x9c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6912      	ldr	r2, [r2, #16]
 80021ae:	4610      	mov	r0, r2
 80021b0:	4798      	blx	r3
            item->valuestring = NULL;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10c      	bne.n	80021de <cJSON_Delete+0x7e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <cJSON_Delete+0x9c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6a12      	ldr	r2, [r2, #32]
 80021d4:	4610      	mov	r0, r2
 80021d6:	4798      	blx	r3
            item->string = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <cJSON_Delete+0x9c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
        item = next;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1be      	bne.n	800216e <cJSON_Delete+0xe>
    }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000004 	.word	0x20000004

08002200 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002204:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b098      	sub	sp, #96	@ 0x60
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    double number = 0;
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800222a:	f7ff ffe9 	bl	8002200 <get_decimal_point>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <parse_number+0x36>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <parse_number+0x3a>
    {
        return false;
 8002246:	2300      	movs	r3, #0
 8002248:	e0a0      	b.n	800238c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800224a:	2300      	movs	r3, #0
 800224c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800224e:	e03d      	b.n	80022cc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800225a:	440b      	add	r3, r1
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b45      	cmp	r3, #69	@ 0x45
 8002262:	dc17      	bgt.n	8002294 <parse_number+0x84>
 8002264:	2b2b      	cmp	r3, #43	@ 0x2b
 8002266:	db40      	blt.n	80022ea <parse_number+0xda>
 8002268:	3b2b      	subs	r3, #43	@ 0x2b
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
 800226e:	4b4c      	ldr	r3, [pc, #304]	@ (80023a0 <parse_number+0x190>)
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <parse_number+0x88>
 8002280:	f002 0308 	and.w	r3, r2, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d111      	bne.n	80022b6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8002292:	e02a      	b.n	80022ea <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8002294:	2b65      	cmp	r3, #101	@ 0x65
 8002296:	d128      	bne.n	80022ea <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a2:	440b      	add	r3, r1
 80022a4:	4413      	add	r3, r2
 80022a6:	7819      	ldrb	r1, [r3, #0]
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ae:	4413      	add	r3, r2
 80022b0:	460a      	mov	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
                break;
 80022b4:	e007      	b.n	80022c6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80022b6:	f107 0208 	add.w	r2, r7, #8
 80022ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022bc:	4413      	add	r3, r2
 80022be:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80022c2:	701a      	strb	r2, [r3, #0]
                break;
 80022c4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80022c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c8:	3301      	adds	r3, #1
 80022ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80022d0:	d80d      	bhi.n	80022ee <parse_number+0xde>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <parse_number+0xde>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022de:	441a      	add	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3b3      	bcc.n	8002250 <parse_number+0x40>
        }
    }
loop_end:
 80022e8:	e001      	b.n	80022ee <parse_number+0xde>
                goto loop_end;
 80022ea:	bf00      	nop
 80022ec:	e000      	b.n	80022f0 <parse_number+0xe0>
loop_end:
 80022ee:	bf00      	nop
    number_c_string[i] = '\0';
 80022f0:	f107 0208 	add.w	r2, r7, #8
 80022f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f6:	4413      	add	r3, r2
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80022fc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f00c f9bc 	bl	800e684 <strtod>
 800230c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8002310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	429a      	cmp	r2, r3
 8002318:	d101      	bne.n	800231e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800231a:	2300      	movs	r3, #0
 800231c:	e036      	b.n	800238c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002324:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8002328:	a31b      	add	r3, pc, #108	@ (adr r3, 8002398 <parse_number+0x188>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002332:	f7fe fbf7 	bl	8000b24 <__aeabi_dcmpge>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	e015      	b.n	8002372 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <parse_number+0x194>)
 800234c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002350:	f7fe fbde 	bl	8000b10 <__aeabi_dcmple>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	e006      	b.n	8002372 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8002364:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002368:	f7fe fc06 	bl	8000b78 <__aeabi_d2iz>
 800236c:	4602      	mov	r2, r0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2208      	movs	r2, #8
 8002376:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800237e:	f107 0208 	add.w	r2, r7, #8
 8002382:	1a8a      	subs	r2, r1, r2
 8002384:	441a      	add	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	609a      	str	r2, [r3, #8]
    return true;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3760      	adds	r7, #96	@ 0x60
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f3af 8000 	nop.w
 8002398:	ffc00000 	.word	0xffc00000
 800239c:	41dfffff 	.word	0x41dfffff
 80023a0:	04007fe5 	.word	0x04007fe5
 80023a4:	c1e00000 	.word	0xc1e00000

080023a8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	e04c      	b.n	8002458 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80023c8:	d90f      	bls.n	80023ea <parse_hex4+0x42>
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b39      	cmp	r3, #57	@ 0x39
 80023d4:	d809      	bhi.n	80023ea <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	3b30      	subs	r3, #48	@ 0x30
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e02d      	b.n	8002446 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b40      	cmp	r3, #64	@ 0x40
 80023f4:	d90f      	bls.n	8002416 <parse_hex4+0x6e>
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b46      	cmp	r3, #70	@ 0x46
 8002400:	d809      	bhi.n	8002416 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	3b37      	subs	r3, #55	@ 0x37
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e017      	b.n	8002446 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b60      	cmp	r3, #96	@ 0x60
 8002420:	d90f      	bls.n	8002442 <parse_hex4+0x9a>
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b66      	cmp	r3, #102	@ 0x66
 800242c:	d809      	bhi.n	8002442 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	3b57      	subs	r3, #87	@ 0x57
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e001      	b.n	8002446 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8002442:	2300      	movs	r3, #0
 8002444:	e00c      	b.n	8002460 <parse_hex4+0xb8>
        }

        if (i < 3)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d802      	bhi.n	8002452 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d9af      	bls.n	80023be <parse_hex4+0x16>
        }
    }

    return h;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	f340 80b7 	ble.w	8002616 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff7b 	bl	80023a8 <parse_hex4>
 80024b2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80024ba:	d304      	bcc.n	80024c6 <utf16_literal_to_utf8+0x5a>
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80024c2:	f0c0 80aa 	bcc.w	800261a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80024cc:	d337      	bcc.n	800253e <utf16_literal_to_utf8+0xd2>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80024d4:	d233      	bcs.n	800253e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3306      	adds	r3, #6
 80024da:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80024e0:	230c      	movs	r3, #12
 80024e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	f340 8096 	ble.w	800261e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80024f8:	f040 8093 	bne.w	8002622 <utf16_literal_to_utf8+0x1b6>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b75      	cmp	r3, #117	@ 0x75
 8002504:	f040 808d 	bne.w	8002622 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3302      	adds	r3, #2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff4b 	bl	80023a8 <parse_hex4>
 8002512:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800251a:	f0c0 8084 	bcc.w	8002626 <utf16_literal_to_utf8+0x1ba>
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002524:	d27f      	bcs.n	8002626 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	029a      	lsls	r2, r3, #10
 800252a:	4b43      	ldr	r3, [pc, #268]	@ (8002638 <utf16_literal_to_utf8+0x1cc>)
 800252c:	4013      	ands	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002534:	4313      	orrs	r3, r2
 8002536:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800253c:	e004      	b.n	8002548 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800253e:	2306      	movs	r3, #6
 8002540:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	2b7f      	cmp	r3, #127	@ 0x7f
 800254c:	d803      	bhi.n	8002556 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002554:	e01f      	b.n	8002596 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800255c:	d206      	bcs.n	800256c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800255e:	2302      	movs	r3, #2
 8002560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8002564:	23c0      	movs	r3, #192	@ 0xc0
 8002566:	f887 3020 	strb.w	r3, [r7, #32]
 800256a:	e014      	b.n	8002596 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002572:	d206      	bcs.n	8002582 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002574:	2303      	movs	r3, #3
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800257a:	23e0      	movs	r3, #224	@ 0xe0
 800257c:	f887 3020 	strb.w	r3, [r7, #32]
 8002580:	e009      	b.n	8002596 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002588:	d24f      	bcs.n	800262a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800258a:	2304      	movs	r3, #4
 800258c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002590:	23f0      	movs	r3, #240	@ 0xf0
 8002592:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800259a:	3b01      	subs	r3, #1
 800259c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80025a0:	e015      	b.n	80025ce <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80025b4:	440b      	add	r3, r1
 80025b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80025c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80025c8:	3b01      	subs	r3, #1
 80025ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80025ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e5      	bne.n	80025a2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80025d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d909      	bls.n	80025f2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	b2d9      	uxtb	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e007      	b.n	8002602 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800260a:	441a      	add	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8002610:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002614:	e00b      	b.n	800262e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8002616:	bf00      	nop
 8002618:	e008      	b.n	800262c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800261a:	bf00      	nop
 800261c:	e006      	b.n	800262c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800261e:	bf00      	nop
 8002620:	e004      	b.n	800262c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800262a:	bf00      	nop

fail:
    return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3728      	adds	r7, #40	@ 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	000ffc00 	.word	0x000ffc00

0800263c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	3301      	adds	r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b22      	cmp	r3, #34	@ 0x22
 8002678:	f040 8103 	bne.w	8002882 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002684:	e017      	b.n	80026b6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b5c      	cmp	r3, #92	@ 0x5c
 800268c:	d110      	bne.n	80026b0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	f080 80f1 	bcs.w	8002886 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	3301      	adds	r3, #1
 80026ae:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	3301      	adds	r3, #1
 80026b4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d203      	bcs.n	80026d0 <parse_string+0x94>
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b22      	cmp	r3, #34	@ 0x22
 80026ce:	d1da      	bne.n	8002686 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	f080 80d3 	bcs.w	800288a <parse_string+0x24e>
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b22      	cmp	r3, #34	@ 0x22
 80026ea:	f040 80ce 	bne.w	800288a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4413      	add	r3, r2
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	3201      	adds	r2, #1
 800270c:	4610      	mov	r0, r2
 800270e:	4798      	blx	r3
 8002710:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ba 	beq.w	800288e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800271e:	e094      	b.n	800284a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b5c      	cmp	r3, #92	@ 0x5c
 8002726:	d008      	beq.n	800273a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	1c53      	adds	r3, r2, #1
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1c59      	adds	r1, r3, #1
 8002732:	60f9      	str	r1, [r7, #12]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e087      	b.n	800284a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800273a:	2302      	movs	r3, #2
 800273c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f340 80a4 	ble.w	8002892 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b75      	cmp	r3, #117	@ 0x75
 8002752:	f300 80a0 	bgt.w	8002896 <parse_string+0x25a>
 8002756:	2b5c      	cmp	r3, #92	@ 0x5c
 8002758:	da04      	bge.n	8002764 <parse_string+0x128>
 800275a:	2b22      	cmp	r3, #34	@ 0x22
 800275c:	d05c      	beq.n	8002818 <parse_string+0x1dc>
 800275e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002760:	d05a      	beq.n	8002818 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8002762:	e098      	b.n	8002896 <parse_string+0x25a>
            switch (input_pointer[1])
 8002764:	3b5c      	subs	r3, #92	@ 0x5c
 8002766:	2b19      	cmp	r3, #25
 8002768:	f200 8095 	bhi.w	8002896 <parse_string+0x25a>
 800276c:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <parse_string+0x138>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002819 	.word	0x08002819
 8002778:	08002897 	.word	0x08002897
 800277c:	08002897 	.word	0x08002897
 8002780:	08002897 	.word	0x08002897
 8002784:	08002897 	.word	0x08002897
 8002788:	08002897 	.word	0x08002897
 800278c:	080027dd 	.word	0x080027dd
 8002790:	08002897 	.word	0x08002897
 8002794:	08002897 	.word	0x08002897
 8002798:	08002897 	.word	0x08002897
 800279c:	080027e9 	.word	0x080027e9
 80027a0:	08002897 	.word	0x08002897
 80027a4:	08002897 	.word	0x08002897
 80027a8:	08002897 	.word	0x08002897
 80027ac:	08002897 	.word	0x08002897
 80027b0:	08002897 	.word	0x08002897
 80027b4:	08002897 	.word	0x08002897
 80027b8:	08002897 	.word	0x08002897
 80027bc:	080027f5 	.word	0x080027f5
 80027c0:	08002897 	.word	0x08002897
 80027c4:	08002897 	.word	0x08002897
 80027c8:	08002897 	.word	0x08002897
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002897 	.word	0x08002897
 80027d4:	0800280d 	.word	0x0800280d
 80027d8:	08002829 	.word	0x08002829
                    *output_pointer++ = '\b';
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	60fa      	str	r2, [r7, #12]
 80027e2:	2208      	movs	r2, #8
 80027e4:	701a      	strb	r2, [r3, #0]
                    break;
 80027e6:	e02c      	b.n	8002842 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60fa      	str	r2, [r7, #12]
 80027ee:	220c      	movs	r2, #12
 80027f0:	701a      	strb	r2, [r3, #0]
                    break;
 80027f2:	e026      	b.n	8002842 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	60fa      	str	r2, [r7, #12]
 80027fa:	220a      	movs	r2, #10
 80027fc:	701a      	strb	r2, [r3, #0]
                    break;
 80027fe:	e020      	b.n	8002842 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	60fa      	str	r2, [r7, #12]
 8002806:	220d      	movs	r2, #13
 8002808:	701a      	strb	r2, [r3, #0]
                    break;
 800280a:	e01a      	b.n	8002842 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60fa      	str	r2, [r7, #12]
 8002812:	2209      	movs	r2, #9
 8002814:	701a      	strb	r2, [r3, #0]
                    break;
 8002816:	e014      	b.n	8002842 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1c59      	adds	r1, r3, #1
 8002820:	60f9      	str	r1, [r7, #12]
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
                    break;
 8002826:	e00c      	b.n	8002842 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	461a      	mov	r2, r3
 800282e:	6a39      	ldr	r1, [r7, #32]
 8002830:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002832:	f7ff fe1b 	bl	800246c <utf16_literal_to_utf8>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d02c      	beq.n	800289a <parse_string+0x25e>
                    break;
 8002840:	bf00      	nop
            }
            input_pointer += sequence_length;
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002846:	4413      	add	r3, r2
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800284a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	429a      	cmp	r2, r3
 8002850:	f4ff af66 	bcc.w	8002720 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2210      	movs	r2, #16
 800285e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	461a      	mov	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	609a      	str	r2, [r3, #8]

    return true;
 800287e:	2301      	movs	r3, #1
 8002880:	e020      	b.n	80028c4 <parse_string+0x288>
        goto fail;
 8002882:	bf00      	nop
 8002884:	e00a      	b.n	800289c <parse_string+0x260>
                    goto fail;
 8002886:	bf00      	nop
 8002888:	e008      	b.n	800289c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800288a:	bf00      	nop
 800288c:	e006      	b.n	800289c <parse_string+0x260>
            goto fail; /* allocation failure */
 800288e:	bf00      	nop
 8002890:	e004      	b.n	800289c <parse_string+0x260>
                goto fail;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <parse_string+0x260>
                    goto fail;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <parse_string+0x260>
                        goto fail;
 800289a:	bf00      	nop

fail:
    if (output != NULL)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	69f8      	ldr	r0, [r7, #28]
 80028a8:	4798      	blx	r3
        output = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3728      	adds	r7, #40	@ 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <buffer_skip_whitespace+0x16>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e02c      	b.n	8002940 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <buffer_skip_whitespace+0x2c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d306      	bcc.n	8002906 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	e021      	b.n	8002940 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <buffer_skip_whitespace+0x5c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d207      	bcs.n	8002928 <buffer_skip_whitespace+0x5c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b20      	cmp	r3, #32
 8002926:	d9e9      	bls.n	80028fc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d104      	bne.n	800293e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <skip_utf8_bom+0x1e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <skip_utf8_bom+0x1e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <skip_utf8_bom+0x22>
    {
        return NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	e01c      	b.n	80029a8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <skip_utf8_bom+0x5a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	1d1a      	adds	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d211      	bcs.n	80029a6 <skip_utf8_bom+0x5a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4413      	add	r3, r2
 800298c:	2203      	movs	r2, #3
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <skip_utf8_bom+0x64>)
 8002990:	4618      	mov	r0, r3
 8002992:	f00c ff5f 	bl	800f854 <strncmp>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	1cda      	adds	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80029a6:	687b      	ldr	r3, [r7, #4]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08015848 	.word	0x08015848

080029b4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e00c      	b.n	80029e4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7fd fc60 	bl	8000290 <strlen>
 80029d0:	4603      	mov	r3, r0
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f805 	bl	80029ec <cJSON_ParseWithLengthOpts>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	@ 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80029fa:	f107 0318 	add.w	r3, r7, #24
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8002a12:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002a18:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d042      	beq.n	8002aaa <cJSON_ParseWithLengthOpts+0xbe>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03f      	beq.n	8002aaa <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002a36:	4a39      	ldr	r2, [pc, #228]	@ (8002b1c <cJSON_ParseWithLengthOpts+0x130>)
 8002a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002a42:	4836      	ldr	r0, [pc, #216]	@ (8002b1c <cJSON_ParseWithLengthOpts+0x130>)
 8002a44:	f7ff fb76 	bl	8002134 <cJSON_New_Item>
 8002a48:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d02e      	beq.n	8002aae <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002a50:	f107 0318 	add.w	r3, r7, #24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff79 	bl	800294c <skip_utf8_bom>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff35 	bl	80028cc <buffer_skip_whitespace>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a68:	f000 f868 	bl	8002b3c <parse_value>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01f      	beq.n	8002ab2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff25 	bl	80028cc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002a82:	6a3a      	ldr	r2, [r7, #32]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d215      	bcs.n	8002ab6 <cJSON_ParseWithLengthOpts+0xca>
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	e031      	b.n	8002b0e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002aaa:	bf00      	nop
 8002aac:	e004      	b.n	8002ab8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002ab6:	bf00      	nop

fail:
    if (item != NULL)
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002abe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002ac0:	f7ff fb4e 	bl	8002160 <cJSON_Delete>
    }

    if (value != NULL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d202      	bcs.n	8002ae0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e005      	b.n	8002aec <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	441a      	add	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <cJSON_ParseWithLengthOpts+0x12c>)
 8002afe:	461a      	mov	r2, r3
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b08:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3738      	adds	r7, #56	@ 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000454 	.word	0x20000454
 8002b1c:	20000004 	.word	0x20000004

08002b20 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff41 	bl	80029b4 <cJSON_ParseWithOpts>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <parse_value+0x18>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <parse_value+0x1c>
    {
        return false; /* no input */
 8002b54:	2300      	movs	r3, #0
 8002b56:	e0d2      	b.n	8002cfe <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01d      	beq.n	8002b9a <parse_value+0x5e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d816      	bhi.n	8002b9a <parse_value+0x5e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4413      	add	r3, r2
 8002b76:	2204      	movs	r2, #4
 8002b78:	4963      	ldr	r1, [pc, #396]	@ (8002d08 <parse_value+0x1cc>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f00c fe6a 	bl	800f854 <strncmp>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	1d1a      	adds	r2, r3, #4
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	609a      	str	r2, [r3, #8]
        return true;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0b1      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01d      	beq.n	8002bdc <parse_value+0xa0>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	1d5a      	adds	r2, r3, #5
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d816      	bhi.n	8002bdc <parse_value+0xa0>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2205      	movs	r2, #5
 8002bba:	4954      	ldr	r1, [pc, #336]	@ (8002d0c <parse_value+0x1d0>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00c fe49 	bl	800f854 <strncmp>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	1d5a      	adds	r2, r3, #5
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	609a      	str	r2, [r3, #8]
        return true;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e090      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d020      	beq.n	8002c24 <parse_value+0xe8>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d819      	bhi.n	8002c24 <parse_value+0xe8>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4944      	ldr	r1, [pc, #272]	@ (8002d10 <parse_value+0x1d4>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00c fe28 	bl	800f854 <strncmp>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
        return true;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e06c      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <parse_value+0x116>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20d      	bcs.n	8002c52 <parse_value+0x116>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b22      	cmp	r3, #34	@ 0x22
 8002c44:	d105      	bne.n	8002c52 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fcf7 	bl	800263c <parse_string>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	e055      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d023      	beq.n	8002ca0 <parse_value+0x164>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d21d      	bcs.n	8002ca0 <parse_value+0x164>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c72:	d00f      	beq.n	8002c94 <parse_value+0x158>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c82:	d90d      	bls.n	8002ca0 <parse_value+0x164>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b39      	cmp	r3, #57	@ 0x39
 8002c92:	d805      	bhi.n	8002ca0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff faba 	bl	8002210 <parse_number>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	e02e      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d013      	beq.n	8002cce <parse_value+0x192>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d20d      	bcs.n	8002cce <parse_value+0x192>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b5b      	cmp	r3, #91	@ 0x5b
 8002cc0:	d105      	bne.n	8002cce <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f825 	bl	8002d14 <parse_array>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	e017      	b.n	8002cfe <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <parse_value+0x1c0>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d20d      	bcs.n	8002cfc <parse_value+0x1c0>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b7b      	cmp	r3, #123	@ 0x7b
 8002cee:	d105      	bne.n	8002cfc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8d2 	bl	8002e9c <parse_object>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	e000      	b.n	8002cfe <parse_value+0x1c2>
    }

    return false;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	0801581c 	.word	0x0801581c
 8002d0c:	0801584c 	.word	0x0801584c
 8002d10:	08015854 	.word	0x08015854

08002d14 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d2e:	d301      	bcc.n	8002d34 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002d30:	2300      	movs	r3, #0
 8002d32:	e0af      	b.n	8002e94 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b5b      	cmp	r3, #91	@ 0x5b
 8002d4c:	f040 8094 	bne.w	8002e78 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002d5a:	6838      	ldr	r0, [r7, #0]
 8002d5c:	f7ff fdb6 	bl	80028cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <parse_array+0x6e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d207      	bcs.n	8002d82 <parse_array+0x6e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b5d      	cmp	r3, #93	@ 0x5d
 8002d80:	d061      	beq.n	8002e46 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <parse_array+0x80>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d305      	bcc.n	8002da0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	609a      	str	r2, [r3, #8]
        goto fail;
 8002d9e:	e072      	b.n	8002e86 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3310      	adds	r3, #16
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f9c0 	bl	8002134 <cJSON_New_Item>
 8002db4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05f      	beq.n	8002e7c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e007      	b.n	8002ddc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	f7ff fd70 	bl	80028cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	6938      	ldr	r0, [r7, #16]
 8002df0:	f7ff fea4 	bl	8002b3c <parse_value>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d042      	beq.n	8002e80 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f7ff fd66 	bl	80028cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <parse_array+0x10e>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d207      	bcs.n	8002e22 <parse_array+0x10e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002e20:	d0c3      	beq.n	8002daa <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02d      	beq.n	8002e84 <parse_array+0x170>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d227      	bcs.n	8002e84 <parse_array+0x170>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b5d      	cmp	r3, #93	@ 0x5d
 8002e42:	d11f      	bne.n	8002e84 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002e44:	e000      	b.n	8002e48 <parse_array+0x134>
        goto success;
 8002e46:	bf00      	nop
    input_buffer->depth--;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <parse_array+0x14a>
        head->prev = current_item;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	609a      	str	r2, [r3, #8]

    return true;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e00d      	b.n	8002e94 <parse_array+0x180>
        goto fail;
 8002e78:	bf00      	nop
 8002e7a:	e004      	b.n	8002e86 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002e84:	bf00      	nop

fail:
    if (head != NULL)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f7ff f967 	bl	8002160 <cJSON_Delete>
    }

    return false;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eb6:	d301      	bcc.n	8002ebc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e0f7      	b.n	80030ac <parse_object+0x210>
    }
    input_buffer->depth++;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80db 	beq.w	8003084 <parse_object+0x1e8>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f080 80d4 	bcs.w	8003084 <parse_object+0x1e8>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b7b      	cmp	r3, #123	@ 0x7b
 8002eea:	f040 80cb 	bne.w	8003084 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f7ff fce7 	bl	80028cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <parse_object+0x86>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <parse_object+0x86>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b7d      	cmp	r3, #125	@ 0x7d
 8002f1e:	f000 8098 	beq.w	8003052 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <parse_object+0x98>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d305      	bcc.n	8002f40 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	609a      	str	r2, [r3, #8]
        goto fail;
 8002f3e:	e0ae      	b.n	800309e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f8f0 	bl	8002134 <cJSON_New_Item>
 8002f54:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8095 	beq.w	8003088 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e007      	b.n	8002f7e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8083 	beq.w	800308c <parse_object+0x1f0>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d27b      	bcs.n	800308c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f7ff fc94 	bl	80028cc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	6938      	ldr	r0, [r7, #16]
 8002fa8:	f7ff fb48 	bl	800263c <parse_string>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06e      	beq.n	8003090 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	f7ff fc8a 	bl	80028cc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d063      	beq.n	8003094 <parse_object+0x1f8>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d25d      	bcs.n	8003094 <parse_object+0x1f8>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b3a      	cmp	r3, #58	@ 0x3a
 8002fe6:	d155      	bne.n	8003094 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002ff2:	6838      	ldr	r0, [r7, #0]
 8002ff4:	f7ff fc6a 	bl	80028cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	6938      	ldr	r0, [r7, #16]
 8002ffc:	f7ff fd9e 	bl	8002b3c <parse_value>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d048      	beq.n	8003098 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f7ff fc60 	bl	80028cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <parse_object+0x192>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d207      	bcs.n	800302e <parse_object+0x192>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b2c      	cmp	r3, #44	@ 0x2c
 800302c:	d08d      	beq.n	8002f4a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d033      	beq.n	800309c <parse_object+0x200>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d22d      	bcs.n	800309c <parse_object+0x200>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b7d      	cmp	r3, #125	@ 0x7d
 800304e:	d125      	bne.n	800309c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8003050:	e000      	b.n	8003054 <parse_object+0x1b8>
        goto success; /* empty object */
 8003052:	bf00      	nop
    input_buffer->depth--;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	1e5a      	subs	r2, r3, #1
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <parse_object+0x1ce>
        head->prev = current_item;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	@ 0x40
 800306e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	609a      	str	r2, [r3, #8]
    return true;
 8003080:	2301      	movs	r3, #1
 8003082:	e013      	b.n	80030ac <parse_object+0x210>
        goto fail; /* not an object */
 8003084:	bf00      	nop
 8003086:	e00a      	b.n	800309e <parse_object+0x202>
            goto fail; /* allocation failure */
 8003088:	bf00      	nop
 800308a:	e008      	b.n	800309e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800308c:	bf00      	nop
 800308e:	e006      	b.n	800309e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8003090:	bf00      	nop
 8003092:	e004      	b.n	800309e <parse_object+0x202>
            goto fail; /* invalid object */
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <parse_object+0x202>
        goto fail; /* expected end of object */
 800309c:	bf00      	nop

fail:
    if (head != NULL)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <parse_object+0x20e>
    {
        cJSON_Delete(head);
 80030a4:	6978      	ldr	r0, [r7, #20]
 80030a6:	f7ff f85b 	bl	8002160 <cJSON_Delete>
    }

    return false;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <cJSON_GetArraySize+0x1a>
    {
        return 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e00d      	b.n	80030ea <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 80030d4:	e005      	b.n	80030e2 <cJSON_GetArraySize+0x2e>
    {
        size++;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
        child = child->next;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f6      	bne.n	80030d6 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 80030e8:	68bb      	ldr	r3, [r7, #8]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <get_array_item+0x18>
    {
        return NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	e010      	b.n	8003130 <get_array_item+0x3a>
    }

    current_child = array->child;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8003114:	e005      	b.n	8003122 <get_array_item+0x2c>
    {
        index--;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <get_array_item+0x38>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f3      	bne.n	8003116 <get_array_item+0x20>
    }

    return current_child;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da01      	bge.n	8003150 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	e005      	b.n	800315c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ffce 	bl	80030f6 <get_array_item>
 800315a:	4603      	mov	r3, r0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <get_object_item+0x1c>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <get_object_item+0x20>
    {
        return NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	e033      	b.n	80031ec <get_object_item+0x88>
    }

    current_element = object->child;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d017      	beq.n	80031c0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003190:	e002      	b.n	8003198 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <get_object_item+0x74>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <get_object_item+0x74>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4619      	mov	r1, r3
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	f7fd f80f 	bl	80001d0 <strcmp>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ec      	bne.n	8003192 <get_object_item+0x2e>
 80031b8:	e00e      	b.n	80031d8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <get_object_item+0x74>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4619      	mov	r1, r3
 80031cc:	68b8      	ldr	r0, [r7, #8]
 80031ce:	f7fe ff45 	bl	800205c <case_insensitive_strcmp>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <get_object_item+0x82>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <get_object_item+0x86>
        return NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <get_object_item+0x88>
    }

    return current_element;
 80031ea:	697b      	ldr	r3, [r7, #20]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80031fe:	2201      	movs	r2, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffae 	bl	8003164 <get_object_item>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <cJSON_IsArray>:

    return (item->type & 0xFF) == cJSON_String;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <cJSON_IsArray+0x12>
    {
        return false;
 8003220:	2300      	movs	r3, #0
 8003222:	e007      	b.n	8003234 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <cJSON_IsObject+0x12>
    {
        return false;
 800324e:	2300      	movs	r3, #0
 8003250:	e007      	b.n	8003262 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003274:	4b17      	ldr	r3, [pc, #92]	@ (80032d4 <MX_CAN1_Init+0x64>)
 8003276:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <MX_CAN1_Init+0x68>)
 8003278:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800327a:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <MX_CAN1_Init+0x64>)
 800327c:	2202      	movs	r2, #2
 800327e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <MX_CAN1_Init+0x64>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <MX_CAN1_Init+0x64>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <MX_CAN1_Init+0x64>)
 800328e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8003292:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <MX_CAN1_Init+0x64>)
 8003296:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 800329a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800329c:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <MX_CAN1_Init+0x64>)
 800329e:	2200      	movs	r2, #0
 80032a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032bc:	2200      	movs	r2, #0
 80032be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80032c0:	4804      	ldr	r0, [pc, #16]	@ (80032d4 <MX_CAN1_Init+0x64>)
 80032c2:	f006 fbef 	bl	8009aa4 <HAL_CAN_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80032cc:	f001 f972 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000045c 	.word	0x2000045c
 80032d8:	40006400 	.word	0x40006400

080032dc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80032e0:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <MX_CAN2_Init+0x64>)
 80032e2:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <MX_CAN2_Init+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <MX_CAN2_Init+0x64>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <MX_CAN2_Init+0x64>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <MX_CAN2_Init+0x64>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <MX_CAN2_Init+0x64>)
 80032fa:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80032fe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_6TQ;
 8003300:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <MX_CAN2_Init+0x64>)
 8003302:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8003306:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003308:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <MX_CAN2_Init+0x64>)
 800330a:	2200      	movs	r2, #0
 800330c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <MX_CAN2_Init+0x64>)
 8003310:	2200      	movs	r2, #0
 8003312:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <MX_CAN2_Init+0x64>)
 8003316:	2200      	movs	r2, #0
 8003318:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800331a:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <MX_CAN2_Init+0x64>)
 800331c:	2200      	movs	r2, #0
 800331e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <MX_CAN2_Init+0x64>)
 8003322:	2200      	movs	r2, #0
 8003324:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <MX_CAN2_Init+0x64>)
 8003328:	2200      	movs	r2, #0
 800332a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800332c:	4804      	ldr	r0, [pc, #16]	@ (8003340 <MX_CAN2_Init+0x64>)
 800332e:	f006 fbb9 	bl	8009aa4 <HAL_CAN_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003338:	f001 f93c 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000484 	.word	0x20000484
 8003344:	40006800 	.word	0x40006800

08003348 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	@ 0x38
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_CAN_MspInit+0x168>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d155      	bne.n	8003416 <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800336a:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a50      	ldr	r2, [pc, #320]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 8003372:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003374:	4b4f      	ldr	r3, [pc, #316]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10d      	bne.n	8003398 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	4b4d      	ldr	r3, [pc, #308]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	4a4c      	ldr	r2, [pc, #304]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003386:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800338a:	6413      	str	r3, [r2, #64]	@ 0x40
 800338c:	4b4a      	ldr	r3, [pc, #296]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	623b      	str	r3, [r7, #32]
 8003396:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4a45      	ldr	r2, [pc, #276]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a8:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	4a3e      	ldr	r2, [pc, #248]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c4:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80033e2:	2309      	movs	r3, #9
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ea:	4619      	mov	r1, r3
 80033ec:	4833      	ldr	r0, [pc, #204]	@ (80034bc <HAL_CAN_MspInit+0x174>)
 80033ee:	f007 fa39 	bl	800a864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003404:	2309      	movs	r3, #9
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800340c:	4619      	mov	r1, r3
 800340e:	482c      	ldr	r0, [pc, #176]	@ (80034c0 <HAL_CAN_MspInit+0x178>)
 8003410:	f007 fa28 	bl	800a864 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003414:	e048      	b.n	80034a8 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <HAL_CAN_MspInit+0x17c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d143      	bne.n	80034a8 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	4a23      	ldr	r2, [pc, #140]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 800342a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800342e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003430:	4b21      	ldr	r3, [pc, #132]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800343c:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 8003444:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003446:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_CAN_MspInit+0x16c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800345c:	6413      	str	r3, [r2, #64]	@ 0x40
 800345e:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	4a11      	ldr	r2, [pc, #68]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 8003474:	f043 0302 	orr.w	r3, r3, #2
 8003478:	6313      	str	r3, [r2, #48]	@ 0x30
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_CAN_MspInit+0x170>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003486:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003494:	2303      	movs	r3, #3
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003498:	2309      	movs	r3, #9
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	4807      	ldr	r0, [pc, #28]	@ (80034c0 <HAL_CAN_MspInit+0x178>)
 80034a4:	f007 f9de 	bl	800a864 <HAL_GPIO_Init>
}
 80034a8:	bf00      	nop
 80034aa:	3738      	adds	r7, #56	@ 0x38
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40006400 	.word	0x40006400
 80034b4:	200004ac 	.word	0x200004ac
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40006800 	.word	0x40006800

080034c8 <CAN_TX_Message>:
 * @retval: Tx_Error: send error; other: the mailbox which has been used, this parameter can be a CAN_TX_MAILBOX0,
 * 																						   CAN_TX_MAILBOX1,
 * 																						   CAN_TX_MAILBOX2.
 */
uint32_t CAN_TX_Message(uint8_t TxData[], uint8_t length)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]

	uint32_t TxMailboxNumber = 0x00000000U;    // 瀛樺偍鏈鍙戦�佹墍浣跨敤閭鐨勯偖绠卞彿
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

	Tx_pHeader.StdId = 0x200;    // 浠ユID鍙戦��
 80034d8:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <CAN_TX_Message+0x58>)
 80034da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]
	Tx_pHeader.ExtId = 0x0000;    // 鎵╁睍ID锛堟澶勬棤鐢級
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <CAN_TX_Message+0x58>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
	Tx_pHeader.IDE = CAN_ID_STD;    // 鏍囧噯甯�
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <CAN_TX_Message+0x58>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
	Tx_pHeader.RTR = CAN_RTR_DATA;    // 鏁版嵁甯�
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <CAN_TX_Message+0x58>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
	Tx_pHeader.DLC = length;    // 鍙戦�佹暟鎹殑闀垮害
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <CAN_TX_Message+0x58>)
 80034f6:	6113      	str	r3, [r2, #16]
	Tx_pHeader.TransmitGlobalTime = DISABLE;
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <CAN_TX_Message+0x58>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	751a      	strb	r2, [r3, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &Tx_pHeader, TxData, &TxMailboxNumber) != HAL_OK)
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4906      	ldr	r1, [pc, #24]	@ (8003520 <CAN_TX_Message+0x58>)
 8003506:	4807      	ldr	r0, [pc, #28]	@ (8003524 <CAN_TX_Message+0x5c>)
 8003508:	f006 fbc7 	bl	8009c9a <HAL_CAN_AddTxMessage>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <CAN_TX_Message+0x4e>
	{
		return Tx_Error;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <CAN_TX_Message+0x50>
	}
	return TxMailboxNumber;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200004b0 	.word	0x200004b0
 8003524:	2000045c 	.word	0x2000045c

08003528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <MX_DMA_Init+0xe8>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	4a36      	ldr	r2, [pc, #216]	@ (8003610 <MX_DMA_Init+0xe8>)
 8003538:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800353c:	6313      	str	r3, [r2, #48]	@ 0x30
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <MX_DMA_Init+0xe8>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4b30      	ldr	r3, [pc, #192]	@ (8003610 <MX_DMA_Init+0xe8>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	4a2f      	ldr	r2, [pc, #188]	@ (8003610 <MX_DMA_Init+0xe8>)
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003558:	6313      	str	r3, [r2, #48]	@ 0x30
 800355a:	4b2d      	ldr	r3, [pc, #180]	@ (8003610 <MX_DMA_Init+0xe8>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	200b      	movs	r0, #11
 800356c:	f006 fd41 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003570:	200b      	movs	r0, #11
 8003572:	f006 fd5a 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	200c      	movs	r0, #12
 800357c:	f006 fd39 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003580:	200c      	movs	r0, #12
 8003582:	f006 fd52 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	200d      	movs	r0, #13
 800358c:	f006 fd31 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003590:	200d      	movs	r0, #13
 8003592:	f006 fd4a 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	200f      	movs	r0, #15
 800359c:	f006 fd29 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80035a0:	200f      	movs	r0, #15
 80035a2:	f006 fd42 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	2010      	movs	r0, #16
 80035ac:	f006 fd21 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80035b0:	2010      	movs	r0, #16
 80035b2:	f006 fd3a 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	202f      	movs	r0, #47	@ 0x2f
 80035bc:	f006 fd19 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80035c0:	202f      	movs	r0, #47	@ 0x2f
 80035c2:	f006 fd32 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2038      	movs	r0, #56	@ 0x38
 80035cc:	f006 fd11 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80035d0:	2038      	movs	r0, #56	@ 0x38
 80035d2:	f006 fd2a 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2039      	movs	r0, #57	@ 0x39
 80035dc:	f006 fd09 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80035e0:	2039      	movs	r0, #57	@ 0x39
 80035e2:	f006 fd22 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	203a      	movs	r0, #58	@ 0x3a
 80035ec:	f006 fd01 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80035f0:	203a      	movs	r0, #58	@ 0x3a
 80035f2:	f006 fd1a 	bl	800a02a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	203b      	movs	r0, #59	@ 0x3b
 80035fc:	f006 fcf9 	bl	8009ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003600:	203b      	movs	r0, #59	@ 0x3b
 8003602:	f006 fd12 	bl	800a02a <HAL_NVIC_EnableIRQ>

}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	@ 0x28
 8003618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	4a39      	ldr	r2, [pc, #228]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6313      	str	r3, [r2, #48]	@ 0x30
 800363a:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <MX_GPIO_Init+0x104>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <MX_GPIO_Init+0x104>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	4a32      	ldr	r2, [pc, #200]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003654:	6313      	str	r3, [r2, #48]	@ 0x30
 8003656:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b2c      	ldr	r3, [pc, #176]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4a2b      	ldr	r2, [pc, #172]	@ (8003718 <MX_GPIO_Init+0x104>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	@ 0x30
 8003672:	4b29      	ldr	r3, [pc, #164]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	@ 0x30
 800368e:	4b22      	ldr	r3, [pc, #136]	@ (8003718 <MX_GPIO_Init+0x104>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <MX_GPIO_Init+0x104>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <MX_GPIO_Init+0x104>)
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <MX_GPIO_Init+0x104>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY3_Pin|RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2138      	movs	r1, #56	@ 0x38
 80036ba:	4818      	ldr	r0, [pc, #96]	@ (800371c <MX_GPIO_Init+0x108>)
 80036bc:	f007 fa86 	bl	800abcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 80036c0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80036c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	4811      	ldr	r0, [pc, #68]	@ (800371c <MX_GPIO_Init+0x108>)
 80036d6:	f007 f8c5 	bl	800a864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin;
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	480c      	ldr	r0, [pc, #48]	@ (8003720 <MX_GPIO_Init+0x10c>)
 80036ee:	f007 f8b9 	bl	800a864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY3_Pin|RELAY2_Pin|RELAY1_Pin;
 80036f2:	2338      	movs	r3, #56	@ 0x38
 80036f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	4619      	mov	r1, r3
 8003708:	4804      	ldr	r0, [pc, #16]	@ (800371c <MX_GPIO_Init+0x108>)
 800370a:	f007 f8ab 	bl	800a864 <HAL_GPIO_Init>

}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40020400 	.word	0x40020400
 8003720:	40020800 	.word	0x40020800
 8003724:	00000000 	.word	0x00000000

08003728 <out_of_china>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @return 如果在中国境内返回0，否则返回1
 */
int out_of_china(double lon, double lat) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003732:	ed87 1b00 	vstr	d1, [r7]
    if (lon < 72.004 || lon > 137.8347) {
 8003736:	a318      	add	r3, pc, #96	@ (adr r3, 8003798 <out_of_china+0x70>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003740:	f7fd f9dc 	bl	8000afc <__aeabi_dcmplt>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <out_of_china+0x36>
 800374a:	a315      	add	r3, pc, #84	@ (adr r3, 80037a0 <out_of_china+0x78>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003754:	f7fd f9f0 	bl	8000b38 <__aeabi_dcmpgt>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <out_of_china+0x3a>
        return 1;
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <out_of_china+0x68>
    }
    if (lat < 0.8293 || lat > 55.8271) {
 8003762:	a311      	add	r3, pc, #68	@ (adr r3, 80037a8 <out_of_china+0x80>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800376c:	f7fd f9c6 	bl	8000afc <__aeabi_dcmplt>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <out_of_china+0x62>
 8003776:	a30e      	add	r3, pc, #56	@ (adr r3, 80037b0 <out_of_china+0x88>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003780:	f7fd f9da 	bl	8000b38 <__aeabi_dcmpgt>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <out_of_china+0x66>
        return 1;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <out_of_china+0x68>
    }
    return 0;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	89374bc7 	.word	0x89374bc7
 800379c:	40520041 	.word	0x40520041
 80037a0:	dcc63f14 	.word	0xdcc63f14
 80037a4:	40613ab5 	.word	0x40613ab5
 80037a8:	27525461 	.word	0x27525461
 80037ac:	3fea89a0 	.word	0x3fea89a0
 80037b0:	69ad42c4 	.word	0x69ad42c4
 80037b4:	404be9de 	.word	0x404be9de

080037b8 <transform_latitude>:


double transform_latitude(double lon, double lat) {
 80037b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80037c4:	ed87 1b00 	vstr	d1, [r7]
    double ret = -100.0 + 2.0 * lon + 3.0 * lat + 0.2 * lat * lat + 0.1 * lon * lat + 0.2 * sqrt(fabs(lon));
 80037c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	f7fc fd6c 	bl	80002ac <__adddf3>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	4bd3      	ldr	r3, [pc, #844]	@ (8003b30 <transform_latitude+0x378>)
 80037e2:	f7fc fd61 	bl	80002a8 <__aeabi_dsub>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	4bd0      	ldr	r3, [pc, #832]	@ (8003b34 <transform_latitude+0x37c>)
 80037f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037f8:	f7fc ff0e 	bl	8000618 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4640      	mov	r0, r8
 8003802:	4649      	mov	r1, r9
 8003804:	f7fc fd52 	bl	80002ac <__adddf3>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4690      	mov	r8, r2
 800380e:	4699      	mov	r9, r3
 8003810:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003b18 <transform_latitude+0x360>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800381a:	f7fc fefd 	bl	8000618 <__aeabi_dmul>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800382a:	f7fc fef5 	bl	8000618 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4640      	mov	r0, r8
 8003834:	4649      	mov	r1, r9
 8003836:	f7fc fd39 	bl	80002ac <__adddf3>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	a3b7      	add	r3, pc, #732	@ (adr r3, 8003b20 <transform_latitude+0x368>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384c:	f7fc fee4 	bl	8000618 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800385c:	f7fc fedc 	bl	8000618 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4640      	mov	r0, r8
 8003866:	4649      	mov	r1, r9
 8003868:	f7fc fd20 	bl	80002ac <__adddf3>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4690      	mov	r8, r2
 8003872:	4699      	mov	r9, r3
 8003874:	68bc      	ldr	r4, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800387c:	ec45 4b10 	vmov	d0, r4, r5
 8003880:	f00f f968 	bl	8012b54 <sqrt>
 8003884:	ec51 0b10 	vmov	r0, r1, d0
 8003888:	a3a3      	add	r3, pc, #652	@ (adr r3, 8003b18 <transform_latitude+0x360>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc fec3 	bl	8000618 <__aeabi_dmul>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4640      	mov	r0, r8
 8003898:	4649      	mov	r1, r9
 800389a:	f7fc fd07 	bl	80002ac <__adddf3>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	4ba3      	ldr	r3, [pc, #652]	@ (8003b38 <transform_latitude+0x380>)
 80038ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038b0:	f7fc feb2 	bl	8000618 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	a39a      	add	r3, pc, #616	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fea9 	bl	8000618 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	ec43 2b17 	vmov	d7, r2, r3
 80038ce:	eeb0 0a47 	vmov.f32	s0, s14
 80038d2:	eef0 0a67 	vmov.f32	s1, s15
 80038d6:	f00f f9c7 	bl	8012c68 <sin>
 80038da:	ec51 0b10 	vmov	r0, r1, d0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	4b96      	ldr	r3, [pc, #600]	@ (8003b3c <transform_latitude+0x384>)
 80038e4:	f7fc fe98 	bl	8000618 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4614      	mov	r4, r2
 80038ee:	461d      	mov	r5, r3
 80038f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	f7fc fcd8 	bl	80002ac <__adddf3>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	a388      	add	r3, pc, #544	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fe85 	bl	8000618 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ec43 2b17 	vmov	d7, r2, r3
 8003916:	eeb0 0a47 	vmov.f32	s0, s14
 800391a:	eef0 0a67 	vmov.f32	s1, s15
 800391e:	f00f f9a3 	bl	8012c68 <sin>
 8003922:	ec51 0b10 	vmov	r0, r1, d0
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	4b84      	ldr	r3, [pc, #528]	@ (8003b3c <transform_latitude+0x384>)
 800392c:	f7fc fe74 	bl	8000618 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fc fcb8 	bl	80002ac <__adddf3>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	f7fc fcb0 	bl	80002ac <__adddf3>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	4b76      	ldr	r3, [pc, #472]	@ (8003b34 <transform_latitude+0x37c>)
 800395a:	f7fc ff87 	bl	800086c <__aeabi_ddiv>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003966:	f7fc fca1 	bl	80002ac <__adddf3>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(lat * PI) + 40.0 * sin(lat / 3.0 * PI)) * 2.0 / 3.0;
 8003972:	a36d      	add	r3, pc, #436	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800397c:	f7fc fe4c 	bl	8000618 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	ec43 2b17 	vmov	d7, r2, r3
 8003988:	eeb0 0a47 	vmov.f32	s0, s14
 800398c:	eef0 0a67 	vmov.f32	s1, s15
 8003990:	f00f f96a 	bl	8012c68 <sin>
 8003994:	ec51 0b10 	vmov	r0, r1, d0
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	4b67      	ldr	r3, [pc, #412]	@ (8003b3c <transform_latitude+0x384>)
 800399e:	f7fc fe3b 	bl	8000618 <__aeabi_dmul>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4614      	mov	r4, r2
 80039a8:	461d      	mov	r5, r3
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	4b61      	ldr	r3, [pc, #388]	@ (8003b34 <transform_latitude+0x37c>)
 80039b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039b4:	f7fc ff5a 	bl	800086c <__aeabi_ddiv>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	a359      	add	r3, pc, #356	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fe27 	bl	8000618 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	ec43 2b17 	vmov	d7, r2, r3
 80039d2:	eeb0 0a47 	vmov.f32	s0, s14
 80039d6:	eef0 0a67 	vmov.f32	s1, s15
 80039da:	f00f f945 	bl	8012c68 <sin>
 80039de:	ec51 0b10 	vmov	r0, r1, d0
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b56      	ldr	r3, [pc, #344]	@ (8003b40 <transform_latitude+0x388>)
 80039e8:	f7fc fe16 	bl	8000618 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fc5a 	bl	80002ac <__adddf3>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	f7fc fc52 	bl	80002ac <__adddf3>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <transform_latitude+0x37c>)
 8003a16:	f7fc ff29 	bl	800086c <__aeabi_ddiv>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a22:	f7fc fc43 	bl	80002ac <__adddf3>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (160.0 * sin(lat / 12.0 * PI) + 320 * sin(lat * PI / 30.0)) * 2.0 / 3.0;
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	4b44      	ldr	r3, [pc, #272]	@ (8003b44 <transform_latitude+0x38c>)
 8003a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a38:	f7fc ff18 	bl	800086c <__aeabi_ddiv>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	a338      	add	r3, pc, #224	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fde5 	bl	8000618 <__aeabi_dmul>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	ec43 2b17 	vmov	d7, r2, r3
 8003a56:	eeb0 0a47 	vmov.f32	s0, s14
 8003a5a:	eef0 0a67 	vmov.f32	s1, s15
 8003a5e:	f00f f903 	bl	8012c68 <sin>
 8003a62:	ec51 0b10 	vmov	r0, r1, d0
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <transform_latitude+0x390>)
 8003a6c:	f7fc fdd4 	bl	8000618 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	a32b      	add	r3, pc, #172	@ (adr r3, 8003b28 <transform_latitude+0x370>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a82:	f7fc fdc9 	bl	8000618 <__aeabi_dmul>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <transform_latitude+0x394>)
 8003a94:	f7fc feea 	bl	800086c <__aeabi_ddiv>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	ec43 2b17 	vmov	d7, r2, r3
 8003aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa4:	eef0 0a67 	vmov.f32	s1, s15
 8003aa8:	f00f f8de 	bl	8012c68 <sin>
 8003aac:	ec51 0b10 	vmov	r0, r1, d0
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <transform_latitude+0x398>)
 8003ab6:	f7fc fdaf 	bl	8000618 <__aeabi_dmul>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fbf3 	bl	80002ac <__adddf3>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	f7fc fbeb 	bl	80002ac <__adddf3>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <transform_latitude+0x37c>)
 8003ae4:	f7fc fec2 	bl	800086c <__aeabi_ddiv>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003af0:	f7fc fbdc 	bl	80002ac <__adddf3>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return ret;
 8003afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b00:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b04:	eeb0 0a47 	vmov.f32	s0, s14
 8003b08:	eef0 0a67 	vmov.f32	s1, s15
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b14:	f3af 8000 	nop.w
 8003b18:	9999999a 	.word	0x9999999a
 8003b1c:	3fc99999 	.word	0x3fc99999
 8003b20:	9999999a 	.word	0x9999999a
 8003b24:	3fb99999 	.word	0x3fb99999
 8003b28:	54442d18 	.word	0x54442d18
 8003b2c:	400921fb 	.word	0x400921fb
 8003b30:	40590000 	.word	0x40590000
 8003b34:	40080000 	.word	0x40080000
 8003b38:	40180000 	.word	0x40180000
 8003b3c:	40340000 	.word	0x40340000
 8003b40:	40440000 	.word	0x40440000
 8003b44:	40280000 	.word	0x40280000
 8003b48:	40640000 	.word	0x40640000
 8003b4c:	403e0000 	.word	0x403e0000
 8003b50:	40740000 	.word	0x40740000
 8003b54:	00000000 	.word	0x00000000

08003b58 <transform_longitude>:

double transform_longitude(double lon, double lat) {
 8003b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b64:	ed87 1b00 	vstr	d1, [r7]
    double ret = 300.0 + lon + 2.0 * lat + 0.1 * lon * lon + 0.1 * lon * lat + 0.1 * sqrt(fabs(lon));
 8003b68:	a3d3      	add	r3, pc, #844	@ (adr r3, 8003eb8 <transform_longitude+0x360>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b72:	f7fc fb9b 	bl	80002ac <__adddf3>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4690      	mov	r8, r2
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	f7fc fb91 	bl	80002ac <__adddf3>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4640      	mov	r0, r8
 8003b90:	4649      	mov	r1, r9
 8003b92:	f7fc fb8b 	bl	80002ac <__adddf3>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4690      	mov	r8, r2
 8003b9c:	4699      	mov	r9, r3
 8003b9e:	a3ce      	add	r3, pc, #824	@ (adr r3, 8003ed8 <transform_longitude+0x380>)
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ba8:	f7fc fd36 	bl	8000618 <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb8:	f7fc fd2e 	bl	8000618 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	f7fc fb72 	bl	80002ac <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4690      	mov	r8, r2
 8003bce:	4699      	mov	r9, r3
 8003bd0:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003ed8 <transform_longitude+0x380>)
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bda:	f7fc fd1d 	bl	8000618 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bea:	f7fc fd15 	bl	8000618 <__aeabi_dmul>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	f7fc fb59 	bl	80002ac <__adddf3>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4690      	mov	r8, r2
 8003c00:	4699      	mov	r9, r3
 8003c02:	68bc      	ldr	r4, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003c0a:	ec45 4b10 	vmov	d0, r4, r5
 8003c0e:	f00e ffa1 	bl	8012b54 <sqrt>
 8003c12:	ec51 0b10 	vmov	r0, r1, d0
 8003c16:	a3b0      	add	r3, pc, #704	@ (adr r3, 8003ed8 <transform_longitude+0x380>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fcfc 	bl	8000618 <__aeabi_dmul>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4640      	mov	r0, r8
 8003c26:	4649      	mov	r1, r9
 8003c28:	f7fc fb40 	bl	80002ac <__adddf3>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(6.0 * lon * PI) + 20.0 * sin(2.0 * lon * PI)) * 2.0 / 3.0;
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec0 <transform_longitude+0x368>)
 8003c3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c3e:	f7fc fceb 	bl	8000618 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	a397      	add	r3, pc, #604	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f7fc fce2 	bl	8000618 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	ec43 2b17 	vmov	d7, r2, r3
 8003c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c60:	eef0 0a67 	vmov.f32	s1, s15
 8003c64:	f00f f800 	bl	8012c68 <sin>
 8003c68:	ec51 0b10 	vmov	r0, r1, d0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	4b94      	ldr	r3, [pc, #592]	@ (8003ec4 <transform_longitude+0x36c>)
 8003c72:	f7fc fcd1 	bl	8000618 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	461d      	mov	r5, r3
 8003c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	f7fc fb11 	bl	80002ac <__adddf3>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	a385      	add	r3, pc, #532	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fcbe 	bl	8000618 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	ec43 2b17 	vmov	d7, r2, r3
 8003ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca8:	eef0 0a67 	vmov.f32	s1, s15
 8003cac:	f00e ffdc 	bl	8012c68 <sin>
 8003cb0:	ec51 0b10 	vmov	r0, r1, d0
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <transform_longitude+0x36c>)
 8003cba:	f7fc fcad 	bl	8000618 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc faf1 	bl	80002ac <__adddf3>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	f7fc fae9 	bl	80002ac <__adddf3>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	4b78      	ldr	r3, [pc, #480]	@ (8003ec8 <transform_longitude+0x370>)
 8003ce8:	f7fc fdc0 	bl	800086c <__aeabi_ddiv>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cf4:	f7fc fada 	bl	80002ac <__adddf3>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (20.0 * sin(lon * PI) + 40.0 * sin(lon / 3.0 * PI)) * 2.0 / 3.0;
 8003d00:	a369      	add	r3, pc, #420	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d0a:	f7fc fc85 	bl	8000618 <__aeabi_dmul>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	ec43 2b17 	vmov	d7, r2, r3
 8003d16:	eeb0 0a47 	vmov.f32	s0, s14
 8003d1a:	eef0 0a67 	vmov.f32	s1, s15
 8003d1e:	f00e ffa3 	bl	8012c68 <sin>
 8003d22:	ec51 0b10 	vmov	r0, r1, d0
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <transform_longitude+0x36c>)
 8003d2c:	f7fc fc74 	bl	8000618 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b62      	ldr	r3, [pc, #392]	@ (8003ec8 <transform_longitude+0x370>)
 8003d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d42:	f7fc fd93 	bl	800086c <__aeabi_ddiv>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	a356      	add	r3, pc, #344	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fc60 	bl	8000618 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	ec43 2b17 	vmov	d7, r2, r3
 8003d60:	eeb0 0a47 	vmov.f32	s0, s14
 8003d64:	eef0 0a67 	vmov.f32	s1, s15
 8003d68:	f00e ff7e 	bl	8012c68 <sin>
 8003d6c:	ec51 0b10 	vmov	r0, r1, d0
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	4b55      	ldr	r3, [pc, #340]	@ (8003ecc <transform_longitude+0x374>)
 8003d76:	f7fc fc4f 	bl	8000618 <__aeabi_dmul>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7fc fa93 	bl	80002ac <__adddf3>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	f7fc fa8b 	bl	80002ac <__adddf3>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	4b49      	ldr	r3, [pc, #292]	@ (8003ec8 <transform_longitude+0x370>)
 8003da4:	f7fc fd62 	bl	800086c <__aeabi_ddiv>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003db0:	f7fc fa7c 	bl	80002ac <__adddf3>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ret += (150.0 * sin(lon / 12.0 * PI) + 300.0 * sin(lon / 30.0 * PI)) * 2.0 / 3.0;
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	4b43      	ldr	r3, [pc, #268]	@ (8003ed0 <transform_longitude+0x378>)
 8003dc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dc6:	f7fc fd51 	bl	800086c <__aeabi_ddiv>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	a335      	add	r3, pc, #212	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fc1e 	bl	8000618 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	ec43 2b17 	vmov	d7, r2, r3
 8003de4:	eeb0 0a47 	vmov.f32	s0, s14
 8003de8:	eef0 0a67 	vmov.f32	s1, s15
 8003dec:	f00e ff3c 	bl	8012c68 <sin>
 8003df0:	ec51 0b10 	vmov	r0, r1, d0
 8003df4:	a32e      	add	r3, pc, #184	@ (adr r3, 8003eb0 <transform_longitude+0x358>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fc0d 	bl	8000618 <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4614      	mov	r4, r2
 8003e04:	461d      	mov	r5, r3
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ed4 <transform_longitude+0x37c>)
 8003e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e10:	f7fc fd2c 	bl	800086c <__aeabi_ddiv>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	a322      	add	r3, pc, #136	@ (adr r3, 8003ea8 <transform_longitude+0x350>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fbf9 	bl	8000618 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	ec43 2b17 	vmov	d7, r2, r3
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	eef0 0a67 	vmov.f32	s1, s15
 8003e36:	f00e ff17 	bl	8012c68 <sin>
 8003e3a:	ec51 0b10 	vmov	r0, r1, d0
 8003e3e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003eb8 <transform_longitude+0x360>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fbe8 	bl	8000618 <__aeabi_dmul>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7fc fa2c 	bl	80002ac <__adddf3>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	f7fc fa24 	bl	80002ac <__adddf3>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <transform_longitude+0x370>)
 8003e72:	f7fc fcfb 	bl	800086c <__aeabi_ddiv>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e7e:	f7fc fa15 	bl	80002ac <__adddf3>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return ret;
 8003e8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e92:	eeb0 0a47 	vmov.f32	s0, s14
 8003e96:	eef0 0a67 	vmov.f32	s1, s15
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ea2:	bf00      	nop
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	54442d18 	.word	0x54442d18
 8003eac:	400921fb 	.word	0x400921fb
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	4062c000 	.word	0x4062c000
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	4072c000 	.word	0x4072c000
 8003ec0:	40180000 	.word	0x40180000
 8003ec4:	40340000 	.word	0x40340000
 8003ec8:	40080000 	.word	0x40080000
 8003ecc:	40440000 	.word	0x40440000
 8003ed0:	40280000 	.word	0x40280000
 8003ed4:	403e0000 	.word	0x403e0000
 8003ed8:	9999999a 	.word	0x9999999a
 8003edc:	3fb99999 	.word	0x3fb99999

08003ee0 <wgs84_to_gcj02>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_gcj02(double lon, double lat, double *output) {
 8003ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ee4:	ed2d 8b02 	vpush	{d8}
 8003ee8:	b090      	sub	sp, #64	@ 0x40
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	ed87 0b04 	vstr	d0, [r7, #16]
 8003ef0:	ed87 1b02 	vstr	d1, [r7, #8]
 8003ef4:	6078      	str	r0, [r7, #4]
    if (out_of_china(lon, lat) == 0) {
 8003ef6:	ed97 1b02 	vldr	d1, [r7, #8]
 8003efa:	ed97 0b04 	vldr	d0, [r7, #16]
 8003efe:	f7ff fc13 	bl	8003728 <out_of_china>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 80f5 	bne.w	80040f4 <wgs84_to_gcj02+0x214>
        double d_lat = transform_latitude(lon - 105.0, lat - 35.0);
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8004140 <wgs84_to_gcj02+0x260>)
 8003f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f14:	f7fc f9c8 	bl	80002a8 <__aeabi_dsub>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	ec43 2b18 	vmov	d8, r2, r3
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	4b87      	ldr	r3, [pc, #540]	@ (8004144 <wgs84_to_gcj02+0x264>)
 8003f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f2a:	f7fc f9bd 	bl	80002a8 <__aeabi_dsub>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	ec43 2b17 	vmov	d7, r2, r3
 8003f36:	eeb0 1a47 	vmov.f32	s2, s14
 8003f3a:	eef0 1a67 	vmov.f32	s3, s15
 8003f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8003f42:	eef0 0a68 	vmov.f32	s1, s17
 8003f46:	f7ff fc37 	bl	80037b8 <transform_latitude>
 8003f4a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
        double d_lon = transform_longitude(lon - 105.0, lat - 35.0);
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b7b      	ldr	r3, [pc, #492]	@ (8004140 <wgs84_to_gcj02+0x260>)
 8003f54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f58:	f7fc f9a6 	bl	80002a8 <__aeabi_dsub>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	ec43 2b18 	vmov	d8, r2, r3
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	4b76      	ldr	r3, [pc, #472]	@ (8004144 <wgs84_to_gcj02+0x264>)
 8003f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f6e:	f7fc f99b 	bl	80002a8 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	ec43 2b17 	vmov	d7, r2, r3
 8003f7a:	eeb0 1a47 	vmov.f32	s2, s14
 8003f7e:	eef0 1a67 	vmov.f32	s3, s15
 8003f82:	eeb0 0a48 	vmov.f32	s0, s16
 8003f86:	eef0 0a68 	vmov.f32	s1, s17
 8003f8a:	f7ff fde5 	bl	8003b58 <transform_longitude>
 8003f8e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
        double rad_lat = lat / 180.0 * PI;
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	4b6c      	ldr	r3, [pc, #432]	@ (8004148 <wgs84_to_gcj02+0x268>)
 8003f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f9c:	f7fc fc66 	bl	800086c <__aeabi_ddiv>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	a35d      	add	r3, pc, #372	@ (adr r3, 8004120 <wgs84_to_gcj02+0x240>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fb33 	bl	8000618 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double magic = sin(rad_lat);
 8003fba:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8003fbe:	f00e fe53 	bl	8012c68 <sin>
 8003fc2:	ed87 0b08 	vstr	d0, [r7, #32]
        magic = 1 - EE * magic * magic;
 8003fc6:	a358      	add	r3, pc, #352	@ (adr r3, 8004128 <wgs84_to_gcj02+0x248>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003fd0:	f7fc fb22 	bl	8000618 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe0:	f7fc fb1a 	bl	8000618 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	4957      	ldr	r1, [pc, #348]	@ (800414c <wgs84_to_gcj02+0x26c>)
 8003fee:	f7fc f95b 	bl	80002a8 <__aeabi_dsub>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double sqrt_magic = sqrt(magic);
 8003ffa:	ed97 0b08 	vldr	d0, [r7, #32]
 8003ffe:	f00e fda9 	bl	8012b54 <sqrt>
 8004002:	ed87 0b06 	vstr	d0, [r7, #24]
        d_lat = (d_lat * 180.0) / ((A * (1 - EE)) / (magic * sqrt_magic) * PI);
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	4b4f      	ldr	r3, [pc, #316]	@ (8004148 <wgs84_to_gcj02+0x268>)
 800400c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004010:	f7fc fb02 	bl	8000618 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
 800401c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004020:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004024:	f7fc faf8 	bl	8000618 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	a140      	add	r1, pc, #256	@ (adr r1, 8004130 <wgs84_to_gcj02+0x250>)
 800402e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004032:	f7fc fc1b 	bl	800086c <__aeabi_ddiv>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	a338      	add	r3, pc, #224	@ (adr r3, 8004120 <wgs84_to_gcj02+0x240>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fae8 	bl	8000618 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	f7fc fc0c 	bl	800086c <__aeabi_ddiv>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        d_lon = (d_lon * 180.0) / (A / sqrt_magic * cos(rad_lat) * PI);
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <wgs84_to_gcj02+0x268>)
 8004062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004066:	f7fc fad7 	bl	8000618 <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4614      	mov	r4, r2
 8004070:	461d      	mov	r5, r3
 8004072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004076:	a130      	add	r1, pc, #192	@ (adr r1, 8004138 <wgs84_to_gcj02+0x258>)
 8004078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800407c:	f7fc fbf6 	bl	800086c <__aeabi_ddiv>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4690      	mov	r8, r2
 8004086:	4699      	mov	r9, r3
 8004088:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800408c:	f00e fd90 	bl	8012bb0 <cos>
 8004090:	ec53 2b10 	vmov	r2, r3, d0
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	f7fc fabe 	bl	8000618 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	a31e      	add	r3, pc, #120	@ (adr r3, 8004120 <wgs84_to_gcj02+0x240>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc fab5 	bl	8000618 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4620      	mov	r0, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7fc fbd9 	bl	800086c <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        output[0] = lon + d_lon;
 80040c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80040c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040ca:	f7fc f8ef 	bl	80002ac <__adddf3>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	e9c1 2300 	strd	r2, r3, [r1]
        output[1] = lat + d_lat;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f103 0408 	add.w	r4, r3, #8
 80040de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040e6:	f7fc f8e1 	bl	80002ac <__adddf3>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9c4 2300 	strd	r2, r3, [r4]
    } else {
        output[0] = lon;
        output[1] = lat;
    }
}
 80040f2:	e00b      	b.n	800410c <wgs84_to_gcj02+0x22c>
        output[0] = lon;
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040fa:	e9c1 2300 	strd	r2, r3, [r1]
        output[1] = lat;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f103 0108 	add.w	r1, r3, #8
 8004104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004108:	e9c1 2300 	strd	r2, r3, [r1]
}
 800410c:	bf00      	nop
 800410e:	3740      	adds	r7, #64	@ 0x40
 8004110:	46bd      	mov	sp, r7
 8004112:	ecbd 8b02 	vpop	{d8}
 8004116:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800411a:	bf00      	nop
 800411c:	f3af 8000 	nop.w
 8004120:	54442d18 	.word	0x54442d18
 8004124:	400921fb 	.word	0x400921fb
 8004128:	af80ef0b 	.word	0xaf80ef0b
 800412c:	3f7b6a8f 	.word	0x3f7b6a8f
 8004130:	2de355c1 	.word	0x2de355c1
 8004134:	41582b10 	.word	0x41582b10
 8004138:	40000000 	.word	0x40000000
 800413c:	415854c1 	.word	0x415854c1
 8004140:	405a4000 	.word	0x405a4000
 8004144:	40418000 	.word	0x40418000
 8004148:	40668000 	.word	0x40668000
 800414c:	3ff00000 	.word	0x3ff00000

08004150 <gcj02_to_bd09>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void gcj02_to_bd09(double lon, double lat, double *output) {
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b08e      	sub	sp, #56	@ 0x38
 8004154:	af00      	add	r7, sp, #0
 8004156:	ed87 0b04 	vstr	d0, [r7, #16]
 800415a:	ed87 1b02 	vstr	d1, [r7, #8]
 800415e:	6078      	str	r0, [r7, #4]
    double x = lon, y = lat;
 8004160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004164:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double z = sqrt(x * x + y * y) + 0.00002 * sin(y * X_PI);
 8004170:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004174:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004178:	f7fc fa4e 	bl	8000618 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004188:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800418c:	f7fc fa44 	bl	8000618 <__aeabi_dmul>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4620      	mov	r0, r4
 8004196:	4629      	mov	r1, r5
 8004198:	f7fc f888 	bl	80002ac <__adddf3>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	ec43 2b17 	vmov	d7, r2, r3
 80041a4:	eeb0 0a47 	vmov.f32	s0, s14
 80041a8:	eef0 0a67 	vmov.f32	s1, s15
 80041ac:	f00e fcd2 	bl	8012b54 <sqrt>
 80041b0:	ec55 4b10 	vmov	r4, r5, d0
 80041b4:	a340      	add	r3, pc, #256	@ (adr r3, 80042b8 <gcj02_to_bd09+0x168>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041be:	f7fc fa2b 	bl	8000618 <__aeabi_dmul>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	ec43 2b17 	vmov	d7, r2, r3
 80041ca:	eeb0 0a47 	vmov.f32	s0, s14
 80041ce:	eef0 0a67 	vmov.f32	s1, s15
 80041d2:	f00e fd49 	bl	8012c68 <sin>
 80041d6:	ec51 0b10 	vmov	r0, r1, d0
 80041da:	a339      	add	r3, pc, #228	@ (adr r3, 80042c0 <gcj02_to_bd09+0x170>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc fa1a 	bl	8000618 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc f85e 	bl	80002ac <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double theta = atan2(y, x) + 0.000003 * cos(x * X_PI);
 80041f8:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80041fc:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8004200:	f00e fc08 	bl	8012a14 <atan2>
 8004204:	ec55 4b10 	vmov	r4, r5, d0
 8004208:	a32b      	add	r3, pc, #172	@ (adr r3, 80042b8 <gcj02_to_bd09+0x168>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004212:	f7fc fa01 	bl	8000618 <__aeabi_dmul>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	ec43 2b17 	vmov	d7, r2, r3
 800421e:	eeb0 0a47 	vmov.f32	s0, s14
 8004222:	eef0 0a67 	vmov.f32	s1, s15
 8004226:	f00e fcc3 	bl	8012bb0 <cos>
 800422a:	ec51 0b10 	vmov	r0, r1, d0
 800422e:	a326      	add	r3, pc, #152	@ (adr r3, 80042c8 <gcj02_to_bd09+0x178>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f7fc f9f0 	bl	8000618 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc f834 	bl	80002ac <__adddf3>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e9c7 2306 	strd	r2, r3, [r7, #24]
    output[0] = z * cos(theta) + 0.0065;
 800424c:	ed97 0b06 	vldr	d0, [r7, #24]
 8004250:	f00e fcae 	bl	8012bb0 <cos>
 8004254:	ec51 0b10 	vmov	r0, r1, d0
 8004258:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800425c:	f7fc f9dc 	bl	8000618 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	a319      	add	r3, pc, #100	@ (adr r3, 80042d0 <gcj02_to_bd09+0x180>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc f81d 	bl	80002ac <__adddf3>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	e9c1 2300 	strd	r2, r3, [r1]
    output[1] = z * sin(theta) + 0.006;
 800427c:	ed97 0b06 	vldr	d0, [r7, #24]
 8004280:	f00e fcf2 	bl	8012c68 <sin>
 8004284:	ec51 0b10 	vmov	r0, r1, d0
 8004288:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428c:	f7fc f9c4 	bl	8000618 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f103 0408 	add.w	r4, r3, #8
 800429e:	a30e      	add	r3, pc, #56	@ (adr r3, 80042d8 <gcj02_to_bd09+0x188>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc f802 	bl	80002ac <__adddf3>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	e9c4 2300 	strd	r2, r3, [r4]
}
 80042b0:	bf00      	nop
 80042b2:	3738      	adds	r7, #56	@ 0x38
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bdb0      	pop	{r4, r5, r7, pc}
 80042b8:	77c7044e 	.word	0x77c7044e
 80042bc:	404a2e10 	.word	0x404a2e10
 80042c0:	88e368f1 	.word	0x88e368f1
 80042c4:	3ef4f8b5 	.word	0x3ef4f8b5
 80042c8:	7110e454 	.word	0x7110e454
 80042cc:	3ec92a73 	.word	0x3ec92a73
 80042d0:	76c8b439 	.word	0x76c8b439
 80042d4:	3f7a9fbe 	.word	0x3f7a9fbe
 80042d8:	bc6a7efa 	.word	0xbc6a7efa
 80042dc:	3f789374 	.word	0x3f789374

080042e0 <wgs84_to_bd09>:
 *
 * @param lon 经度值
 * @param lat 纬度值
 * @param output 输出数组，长度为2
 */
void wgs84_to_bd09(double lon, double lat, double *output) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	@ 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	ed87 0b04 	vstr	d0, [r7, #16]
 80042ea:	ed87 1b02 	vstr	d1, [r7, #8]
 80042ee:	6078      	str	r0, [r7, #4]
    double gcj02[2];
    wgs84_to_gcj02(lon, lat, gcj02);
 80042f0:	f107 0318 	add.w	r3, r7, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	ed97 1b02 	vldr	d1, [r7, #8]
 80042fa:	ed97 0b04 	vldr	d0, [r7, #16]
 80042fe:	f7ff fdef 	bl	8003ee0 <wgs84_to_gcj02>
    gcj02_to_bd09(gcj02[0], gcj02[1], output);
 8004302:	ed97 7b06 	vldr	d7, [r7, #24]
 8004306:	ed97 6b08 	vldr	d6, [r7, #32]
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	eeb0 1a46 	vmov.f32	s2, s12
 8004310:	eef0 1a66 	vmov.f32	s3, s13
 8004314:	eeb0 0a47 	vmov.f32	s0, s14
 8004318:	eef0 0a67 	vmov.f32	s1, s15
 800431c:	f7ff ff18 	bl	8004150 <gcj02_to_bd09>
}
 8004320:	bf00      	nop
 8004322:	3728      	adds	r7, #40	@ 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800432c:	f004 ff4c 	bl	80091c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004330:	f000 f898 	bl	8004464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004334:	f7ff f96e 	bl	8003614 <MX_GPIO_Init>
  MX_DMA_Init();
 8004338:	f7ff f8f6 	bl	8003528 <MX_DMA_Init>
  MX_UART4_Init();
 800433c:	f004 fb44 	bl	80089c8 <MX_UART4_Init>
  MX_ADC1_Init();
 8004340:	f7fd fc48 	bl	8001bd4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8004344:	f003 f9ae 	bl	80076a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004348:	f003 fa4c 	bl	80077e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800434c:	f004 fba4 	bl	8008a98 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8004350:	f7fe ff8e 	bl	8003270 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004354:	f7fe ffc2 	bl	80032dc <MX_CAN2_Init>
  MX_ADC2_Init();
 8004358:	f7fd fc8e 	bl	8001c78 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 800435c:	f004 fbc6 	bl	8008aec <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8004360:	f7fd fcdc 	bl	8001d1c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8004364:	f004 fc02 	bl	8008b6c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8004368:	f004 fb6c 	bl	8008a44 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  printf("Start!!\r\n");
 800436c:	482b      	ldr	r0, [pc, #172]	@ (800441c <main+0xf4>)
 800436e:	f00b f93d 	bl	800f5ec <puts>
  board_config.Net_4g.Status == Outline;
//  HAL_UART_Receive_IT(&huart3, RECV_4G_BUFF , sizeof(RECV_4G_BUFF));
  HAL_UART_Receive_IT(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 8004372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004376:	492a      	ldr	r1, [pc, #168]	@ (8004420 <main+0xf8>)
 8004378:	482a      	ldr	r0, [pc, #168]	@ (8004424 <main+0xfc>)
 800437a:	f008 f898 	bl	800c4ae <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)imu_buf, sizeof(imu_buf));
 800437e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004382:	4929      	ldr	r1, [pc, #164]	@ (8004428 <main+0x100>)
 8004384:	4829      	ldr	r0, [pc, #164]	@ (800442c <main+0x104>)
 8004386:	f008 f892 	bl	800c4ae <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800438a:	2100      	movs	r1, #0
 800438c:	4828      	ldr	r0, [pc, #160]	@ (8004430 <main+0x108>)
 800438e:	f007 f977 	bl	800b680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8004392:	210c      	movs	r1, #12
 8004394:	4827      	ldr	r0, [pc, #156]	@ (8004434 <main+0x10c>)
 8004396:	f007 f973 	bl	800b680 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <main+0x108>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 3000);
 80043a4:	4b23      	ldr	r3, [pc, #140]	@ (8004434 <main+0x10c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40
  board_config.Rockers.Rocker_X = 2048;
 80043ae:	4b22      	ldr	r3, [pc, #136]	@ (8004438 <main+0x110>)
 80043b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043b4:	f8a3 23b8 	strh.w	r2, [r3, #952]	@ 0x3b8
  board_config.Rockers.Rocker_Y = 2048;
 80043b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <main+0x110>)
 80043ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043be:	f8a3 23ba 	strh.w	r2, [r3, #954]	@ 0x3ba
  board_config.Net_4g.Lock_Status = 0;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <main+0x110>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 236e 	strb.w	r2, [r3, #878]	@ 0x36e
  Uart_4g_End = 0;
 80043ca:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <main+0x114>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
  dt = 0.1f;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <main+0x118>)
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <main+0x11c>)
 80043d4:	601a      	str	r2, [r3, #0]
  board_init();
 80043d6:	f7fc fe15 	bl	8001004 <board_init>
  auto_flag = 0;
 80043da:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <main+0x120>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
  rc4g_flag = 0;
 80043e0:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <main+0x124>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
  rxu2_data_ready = 0;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <main+0x128>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
  Auto_Status = Auto_Normal;
 80043ec:	4b19      	ldr	r3, [pc, #100]	@ (8004454 <main+0x12c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
  rxu4_data_ready = 0;
 80043f2:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <main+0x130>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
  Auto_Start_Flag = 0;
 80043f8:	4b18      	ldr	r3, [pc, #96]	@ (800445c <main+0x134>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
  board_config.gps.gps_num = 0;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <main+0x110>)
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
  board_config.Imu_data.Pitch = 240.0;
 8004406:	490c      	ldr	r1, [pc, #48]	@ (8004438 <main+0x110>)
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <main+0x138>)
 800440e:	e9c1 23ce 	strd	r2, r3, [r1, #824]	@ 0x338
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    /*获取按钮次数，判断当前是哪一种控制模�?*/
	PID_Motor_Contorl();
 8004412:	f002 fb6d 	bl	8006af0 <PID_Motor_Contorl>
  {
 8004416:	bf00      	nop
 8004418:	e7fb      	b.n	8004412 <main+0xea>
 800441a:	bf00      	nop
 800441c:	0801585c 	.word	0x0801585c
 8004420:	200009c4 	.word	0x200009c4
 8004424:	20000b90 	.word	0x20000b90
 8004428:	200004d4 	.word	0x200004d4
 800442c:	20000c68 	.word	0x20000c68
 8004430:	20000af0 	.word	0x20000af0
 8004434:	20000b38 	.word	0x20000b38
 8004438:	200005d8 	.word	0x200005d8
 800443c:	200004d0 	.word	0x200004d0
 8004440:	20000ad0 	.word	0x20000ad0
 8004444:	3dcccccd 	.word	0x3dcccccd
 8004448:	200005d4 	.word	0x200005d4
 800444c:	20000acc 	.word	0x20000acc
 8004450:	20000ac6 	.word	0x20000ac6
 8004454:	20000ac8 	.word	0x20000ac8
 8004458:	20000ac4 	.word	0x20000ac4
 800445c:	20000ac5 	.word	0x20000ac5
 8004460:	406e0000 	.word	0x406e0000

08004464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b094      	sub	sp, #80	@ 0x50
 8004468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800446a:	f107 0320 	add.w	r3, r7, #32
 800446e:	2230      	movs	r2, #48	@ 0x30
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f00b f9e6 	bl	800f844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	4b27      	ldr	r3, [pc, #156]	@ (800452c <SystemClock_Config+0xc8>)
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	4a26      	ldr	r2, [pc, #152]	@ (800452c <SystemClock_Config+0xc8>)
 8004492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004496:	6413      	str	r3, [r2, #64]	@ 0x40
 8004498:	4b24      	ldr	r3, [pc, #144]	@ (800452c <SystemClock_Config+0xc8>)
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a4:	2300      	movs	r3, #0
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <SystemClock_Config+0xcc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <SystemClock_Config+0xcc>)
 80044ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <SystemClock_Config+0xcc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044ca:	2302      	movs	r3, #2
 80044cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044d4:	2304      	movs	r3, #4
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80044d8:	2348      	movs	r3, #72	@ 0x48
 80044da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044dc:	2302      	movs	r3, #2
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044e0:	2304      	movs	r3, #4
 80044e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e4:	f107 0320 	add.w	r3, r7, #32
 80044e8:	4618      	mov	r0, r3
 80044ea:	f006 fb89 	bl	800ac00 <HAL_RCC_OscConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80044f4:	f000 f85e 	bl	80045b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044f8:	230f      	movs	r3, #15
 80044fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044fc:	2302      	movs	r3, #2
 80044fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	2102      	movs	r1, #2
 8004514:	4618      	mov	r0, r3
 8004516:	f006 fdeb 	bl	800b0f0 <HAL_RCC_ClockConfig>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004520:	f000 f848 	bl	80045b4 <Error_Handler>
  }
}
 8004524:	bf00      	nop
 8004526:	3750      	adds	r7, #80	@ 0x50
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	40007000 	.word	0x40007000

08004534 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_UART_RxCpltCallback+0x60>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d106      	bne.n	8004554 <HAL_UART_RxCpltCallback+0x20>
		Uart_4g_End = 1;
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <HAL_UART_RxCpltCallback+0x64>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
		rc4g_flag = 1;
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <HAL_UART_RxCpltCallback+0x68>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
	}
	else if(huart->Instance == USART2){
		rxu2_data_ready = 1;
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	}
}
 8004552:	e018      	b.n	8004586 <HAL_UART_RxCpltCallback+0x52>
	else if (huart->Instance == UART4) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a11      	ldr	r2, [pc, #68]	@ (80045a0 <HAL_UART_RxCpltCallback+0x6c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d103      	bne.n	8004566 <HAL_UART_RxCpltCallback+0x32>
		rxu4_data_ready = 1;
 800455e:	4b11      	ldr	r3, [pc, #68]	@ (80045a4 <HAL_UART_RxCpltCallback+0x70>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
}
 8004564:	e00f      	b.n	8004586 <HAL_UART_RxCpltCallback+0x52>
	else if(huart->Instance == USART2){
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0f      	ldr	r2, [pc, #60]	@ (80045a8 <HAL_UART_RxCpltCallback+0x74>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10a      	bne.n	8004586 <HAL_UART_RxCpltCallback+0x52>
		rxu2_data_ready = 1;
 8004570:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <HAL_UART_RxCpltCallback+0x78>)
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8004576:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <HAL_UART_RxCpltCallback+0x7c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <HAL_UART_RxCpltCallback+0x7c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0220 	bic.w	r2, r2, #32
 8004584:	60da      	str	r2, [r3, #12]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40004800 	.word	0x40004800
 8004598:	200004d0 	.word	0x200004d0
 800459c:	20000acc 	.word	0x20000acc
 80045a0:	40004c00 	.word	0x40004c00
 80045a4:	20000ac4 	.word	0x20000ac4
 80045a8:	40004400 	.word	0x40004400
 80045ac:	20000ac6 	.word	0x20000ac6
 80045b0:	20000c68 	.word	0x20000c68

080045b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045b8:	b672      	cpsid	i
}
 80045ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <Error_Handler+0x8>

080045c0 <Servo_Control>:
#define PWM_REG_MID 1000
#define PWM_REG_RANGE 333


 void Servo_Control(uint8_t mode_flag , uint16_t X , uint16_t Y)
 {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	@ 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	460b      	mov	r3, r1
 80045cc:	80bb      	strh	r3, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	807b      	strh	r3, [r7, #2]
	float weight,left_pwm,right_pwm;
	float temp_k;
	float precision_l,precision_r,precision;
	float motor,motor_l,motor_r;
	//printf("X: %d   Y:%d\r\n",X,Y);
	if(mode_flag == mode_zero){
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10a      	bne.n	80045ee <Servo_Control+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_cycle_zero);
 80045d8:	4ba9      	ldr	r3, [pc, #676]	@ (8004880 <Servo_Control+0x2c0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80045e0:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Duty_cycle_zero);
 80045e2:	4ba8      	ldr	r3, [pc, #672]	@ (8004884 <Servo_Control+0x2c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40
		return ;
 80045ec:	e3f4      	b.n	8004dd8 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_stright){
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d125      	bne.n	8004640 <Servo_Control+0x80>
		precision =(Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 80045f4:	4ba4      	ldr	r3, [pc, #656]	@ (8004888 <Servo_Control+0x2c8>)
 80045f6:	613b      	str	r3, [r7, #16]
		motor = ((4096-Y) * precision) + Duty_cycle_min ;
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004606:	edd7 7a04 	vldr	s15, [r7, #16]
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800488c <Servo_Control+0x2cc>
 8004612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004616:	edc7 7a03 	vstr	s15, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor);
 800461a:	4b99      	ldr	r3, [pc, #612]	@ (8004880 <Servo_Control+0x2c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004626:	ee17 2a90 	vmov	r2, s15
 800462a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor);
 800462c:	4b95      	ldr	r3, [pc, #596]	@ (8004884 <Servo_Control+0x2c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	edd7 7a03 	vldr	s15, [r7, #12]
 8004634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004638:	ee17 2a90 	vmov	r2, s15
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40
		//printf("motor_l:%f\r\n",motor);
		//printf("motor_r:%f\r\n",motor);
		return;
 800463e:	e3cb      	b.n	8004dd8 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_rightleft){
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d138      	bne.n	80046b8 <Servo_Control+0xf8>
		precision_l = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004646:	4b90      	ldr	r3, [pc, #576]	@ (8004888 <Servo_Control+0x2c8>)
 8004648:	623b      	str	r3, [r7, #32]
		precision_r = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 800464a:	4b8f      	ldr	r3, [pc, #572]	@ (8004888 <Servo_Control+0x2c8>)
 800464c:	61fb      	str	r3, [r7, #28]
		motor_l = Duty_cycle_max - ((4096-X) * precision_r);
 800464e:	88bb      	ldrh	r3, [r7, #4]
 8004650:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8004890 <Servo_Control+0x2d0>
 8004668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466c:	edc7 7a06 	vstr	s15, [r7, #24]
		motor_r = ((4096-X) * precision_l) + Duty_cycle_min ;
 8004670:	88bb      	ldrh	r3, [r7, #4]
 8004672:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800488c <Servo_Control+0x2cc>
 800468a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800468e:	edc7 7a05 	vstr	s15, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_l);
 8004692:	4b7b      	ldr	r3, [pc, #492]	@ (8004880 <Servo_Control+0x2c0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	edd7 7a06 	vldr	s15, [r7, #24]
 800469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469e:	ee17 2a90 	vmov	r2, s15
 80046a2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor_r);
 80046a4:	4b77      	ldr	r3, [pc, #476]	@ (8004884 <Servo_Control+0x2c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
		//printf("motor_l:%f\r\n",motor_l);
		//printf("motor_r:%f\r\n",motor_r);
		return ;
 80046b6:	e38f      	b.n	8004dd8 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_upleft){
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	f040 80f8 	bne.w	80048b0 <Servo_Control+0x2f0>
		temp_k = cmu_k((float)X,(float)Y);
 80046c0:	88bb      	ldrh	r3, [r7, #4]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	ee07 3a10 	vmov	s14, r3
 80046d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80046d4:	eef0 0a47 	vmov.f32	s1, s14
 80046d8:	eeb0 0a67 	vmov.f32	s0, s15
 80046dc:	f001 fee8 	bl	80064b0 <cmu_k>
 80046e0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1)
 80046e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	dd2e      	ble.n	8004754 <Servo_Control+0x194>
			right_pwm=3000+((2048 - X)/2048.0)*1000 + 800;
 80046f6:	88bb      	ldrh	r3, [r7, #4]
 80046f8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb ff21 	bl	8000544 <__aeabi_i2d>
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	4b63      	ldr	r3, [pc, #396]	@ (8004894 <Servo_Control+0x2d4>)
 8004708:	f7fc f8b0 	bl	800086c <__aeabi_ddiv>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	4b5f      	ldr	r3, [pc, #380]	@ (8004898 <Servo_Control+0x2d8>)
 800471a:	f7fb ff7d 	bl	8000618 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	a352      	add	r3, pc, #328	@ (adr r3, 8004870 <Servo_Control+0x2b0>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb fdbe 	bl	80002ac <__adddf3>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	4b57      	ldr	r3, [pc, #348]	@ (800489c <Servo_Control+0x2dc>)
 800473e:	f7fb fdb5 	bl	80002ac <__adddf3>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc fa5d 	bl	8000c08 <__aeabi_d2f>
 800474e:	4603      	mov	r3, r0
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004752:	e02d      	b.n	80047b0 <Servo_Control+0x1f0>
		else
			right_pwm=3000+((2048 - Y)/2048.0)*1000 + 300;
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800475a:	4618      	mov	r0, r3
 800475c:	f7fb fef2 	bl	8000544 <__aeabi_i2d>
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	4b4b      	ldr	r3, [pc, #300]	@ (8004894 <Servo_Control+0x2d4>)
 8004766:	f7fc f881 	bl	800086c <__aeabi_ddiv>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	4b48      	ldr	r3, [pc, #288]	@ (8004898 <Servo_Control+0x2d8>)
 8004778:	f7fb ff4e 	bl	8000618 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	a33a      	add	r3, pc, #232	@ (adr r3, 8004870 <Servo_Control+0x2b0>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb fd8f 	bl	80002ac <__adddf3>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	a338      	add	r3, pc, #224	@ (adr r3, 8004878 <Servo_Control+0x2b8>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f7fb fd86 	bl	80002ac <__adddf3>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7fc fa2e 	bl	8000c08 <__aeabi_d2f>
 80047ac:	4603      	mov	r3, r0
 80047ae:	62bb      	str	r3, [r7, #40]	@ 0x28
		left_pwm=(uint16_t)(3000 + temp_k*1000) - 1200;
 80047b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80047b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80048a0 <Servo_Control+0x2e0>
 80047b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047bc:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80048a4 <Servo_Control+0x2e4>
 80047c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c8:	ee17 3a90 	vmov	r3, s15
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 80047de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80047e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004890 <Servo_Control+0x2d0>
 80047e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ee:	dd01      	ble.n	80047f4 <Servo_Control+0x234>
 80047f0:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <Servo_Control+0x2e8>)
 80047f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 80047f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80047f8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800488c <Servo_Control+0x2cc>
 80047fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004804:	d501      	bpl.n	800480a <Servo_Control+0x24a>
 8004806:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <Servo_Control+0x2ec>)
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 800480a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800480e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004890 <Servo_Control+0x2d0>
 8004812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	dd01      	ble.n	8004820 <Servo_Control+0x260>
 800481c:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <Servo_Control+0x2e8>)
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004820:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004824:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800488c <Servo_Control+0x2cc>
 8004828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	d501      	bpl.n	8004836 <Servo_Control+0x276>
 8004832:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <Servo_Control+0x2ec>)
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(left_pwm > right_pwm)return;
 8004836:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800483a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800483e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	f300 82c4 	bgt.w	8004dd2 <Servo_Control+0x812>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <Servo_Control+0x2c0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 800485c:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <Servo_Control+0x2c4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004868:	ee17 2a90 	vmov	r2, s15
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 800486e:	e2b3      	b.n	8004dd8 <Servo_Control+0x818>
 8004870:	00000000 	.word	0x00000000
 8004874:	40a77000 	.word	0x40a77000
 8004878:	00000000 	.word	0x00000000
 800487c:	4072c000 	.word	0x4072c000
 8004880:	20000af0 	.word	0x20000af0
 8004884:	20000b38 	.word	0x20000b38
 8004888:	3f160000 	.word	0x3f160000
 800488c:	44e10000 	.word	0x44e10000
 8004890:	45834000 	.word	0x45834000
 8004894:	40a00000 	.word	0x40a00000
 8004898:	408f4000 	.word	0x408f4000
 800489c:	40890000 	.word	0x40890000
 80048a0:	447a0000 	.word	0x447a0000
 80048a4:	453b8000 	.word	0x453b8000
 80048a8:	45834000 	.word	0x45834000
 80048ac:	44e10000 	.word	0x44e10000
	}
	else if(mode_flag == mode_upright){
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	f040 80ce 	bne.w	8004a54 <Servo_Control+0x494>
		temp_k = cmu_k((float)X,(float)Y);
 80048b8:	88bb      	ldrh	r3, [r7, #4]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	ee07 3a10 	vmov	s14, r3
 80048c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80048cc:	eef0 0a47 	vmov.f32	s1, s14
 80048d0:	eeb0 0a67 	vmov.f32	s0, s15
 80048d4:	f001 fdec 	bl	80064b0 <cmu_k>
 80048d8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	    //printf("K:%f\r\n",temp_k);
		if(temp_k < (-1)){
 80048dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80048e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80048e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d52e      	bpl.n	800494c <Servo_Control+0x38c>
			left_pwm = 3000+((X - 2048)/2048.0)*1000 + 1200;
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fb fe25 	bl	8000544 <__aeabi_i2d>
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4bbe      	ldr	r3, [pc, #760]	@ (8004bf8 <Servo_Control+0x638>)
 8004900:	f7fb ffb4 	bl	800086c <__aeabi_ddiv>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	4bba      	ldr	r3, [pc, #744]	@ (8004bfc <Servo_Control+0x63c>)
 8004912:	f7fb fe81 	bl	8000618 <__aeabi_dmul>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4610      	mov	r0, r2
 800491c:	4619      	mov	r1, r3
 800491e:	a3b4      	add	r3, pc, #720	@ (adr r3, 8004bf0 <Servo_Control+0x630>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fcc2 	bl	80002ac <__adddf3>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	4bb2      	ldr	r3, [pc, #712]	@ (8004c00 <Servo_Control+0x640>)
 8004936:	f7fb fcb9 	bl	80002ac <__adddf3>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f7fc f961 	bl	8000c08 <__aeabi_d2f>
 8004946:	4603      	mov	r3, r0
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800494a:	e02d      	b.n	80049a8 <Servo_Control+0x3e8>
		}
		else{
			left_pwm=3000+((2048 - Y)/2048.0)*1000 + 1200;
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004952:	4618      	mov	r0, r3
 8004954:	f7fb fdf6 	bl	8000544 <__aeabi_i2d>
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	4ba6      	ldr	r3, [pc, #664]	@ (8004bf8 <Servo_Control+0x638>)
 800495e:	f7fb ff85 	bl	800086c <__aeabi_ddiv>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	4ba3      	ldr	r3, [pc, #652]	@ (8004bfc <Servo_Control+0x63c>)
 8004970:	f7fb fe52 	bl	8000618 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004bf0 <Servo_Control+0x630>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fc93 	bl	80002ac <__adddf3>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	4b9b      	ldr	r3, [pc, #620]	@ (8004c00 <Servo_Control+0x640>)
 8004994:	f7fb fc8a 	bl	80002ac <__adddf3>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4610      	mov	r0, r2
 800499e:	4619      	mov	r1, r3
 80049a0:	f7fc f932 	bl	8000c08 <__aeabi_d2f>
 80049a4:	4603      	mov	r3, r0
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		right_pwm=(uint16_t)(3000-temp_k*1000) - 1200;
 80049a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80049ac:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8004c04 <Servo_Control+0x644>
 80049b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049b4:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004c08 <Servo_Control+0x648>
 80049b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 3a90 	vmov	r3, s15
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 80049d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80049da:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8004c0c <Servo_Control+0x64c>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	dd01      	ble.n	80049ec <Servo_Control+0x42c>
 80049e8:	4b89      	ldr	r3, [pc, #548]	@ (8004c10 <Servo_Control+0x650>)
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 80049ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80049f0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004c14 <Servo_Control+0x654>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d501      	bpl.n	8004a02 <Servo_Control+0x442>
 80049fe:	4b86      	ldr	r3, [pc, #536]	@ (8004c18 <Servo_Control+0x658>)
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004a02:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004a06:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004c0c <Servo_Control+0x64c>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	dd01      	ble.n	8004a18 <Servo_Control+0x458>
 8004a14:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <Servo_Control+0x650>)
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004a18:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004a1c:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004c14 <Servo_Control+0x654>
 8004a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d501      	bpl.n	8004a2e <Servo_Control+0x46e>
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <Servo_Control+0x658>)
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c1c <Servo_Control+0x65c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3a:	ee17 2a90 	vmov	r2, s15
 8004a3e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004a40:	4b77      	ldr	r3, [pc, #476]	@ (8004c20 <Servo_Control+0x660>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4c:	ee17 2a90 	vmov	r2, s15
 8004a50:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004a52:	e1c1      	b.n	8004dd8 <Servo_Control+0x818>
	}
	else if(mode_flag == mode_downleft){
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	f040 80e4 	bne.w	8004c24 <Servo_Control+0x664>
		temp_k = cmu_k((float)X,(float)Y);
 8004a5c:	88bb      	ldrh	r3, [r7, #4]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	887b      	ldrh	r3, [r7, #2]
 8004a68:	ee07 3a10 	vmov	s14, r3
 8004a6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a70:	eef0 0a47 	vmov.f32	s1, s14
 8004a74:	eeb0 0a67 	vmov.f32	s0, s15
 8004a78:	f001 fd1a 	bl	80064b0 <cmu_k>
 8004a7c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k<(-1))
 8004a80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004a84:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	d52c      	bpl.n	8004aec <Servo_Control+0x52c>
			left_pwm=3000-((2048-X)/2048.0)*1000 - 1200;
 8004a92:	88bb      	ldrh	r3, [r7, #4]
 8004a94:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fd53 	bl	8000544 <__aeabi_i2d>
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	4b55      	ldr	r3, [pc, #340]	@ (8004bf8 <Servo_Control+0x638>)
 8004aa4:	f7fb fee2 	bl	800086c <__aeabi_ddiv>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	4b51      	ldr	r3, [pc, #324]	@ (8004bfc <Servo_Control+0x63c>)
 8004ab6:	f7fb fdaf 	bl	8000618 <__aeabi_dmul>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	a14c      	add	r1, pc, #304	@ (adr r1, 8004bf0 <Servo_Control+0x630>)
 8004ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac4:	f7fb fbf0 	bl	80002a8 <__aeabi_dsub>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8004c00 <Servo_Control+0x640>)
 8004ad6:	f7fb fbe7 	bl	80002a8 <__aeabi_dsub>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fc f891 	bl	8000c08 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aea:	e02b      	b.n	8004b44 <Servo_Control+0x584>
		else
			left_pwm=3000-((2048-Y)/2048.0)*1000 - 1200;
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fd26 	bl	8000544 <__aeabi_i2d>
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf8 <Servo_Control+0x638>)
 8004afe:	f7fb feb5 	bl	800086c <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004bfc <Servo_Control+0x63c>)
 8004b10:	f7fb fd82 	bl	8000618 <__aeabi_dmul>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	a135      	add	r1, pc, #212	@ (adr r1, 8004bf0 <Servo_Control+0x630>)
 8004b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1e:	f7fb fbc3 	bl	80002a8 <__aeabi_dsub>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	4b34      	ldr	r3, [pc, #208]	@ (8004c00 <Servo_Control+0x640>)
 8004b30:	f7fb fbba 	bl	80002a8 <__aeabi_dsub>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f7fc f864 	bl	8000c08 <__aeabi_d2f>
 8004b40:	4603      	mov	r3, r0
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
		right_pwm=(uint16_t)(3000+temp_k*1000) + 1200;
 8004b44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b48:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004c04 <Servo_Control+0x644>
 8004b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b50:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004c08 <Servo_Control+0x648>
 8004b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5c:	ee17 3a90 	vmov	r3, s15
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b6e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 8004b72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b76:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004c0c <Servo_Control+0x64c>
 8004b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	dd01      	ble.n	8004b88 <Servo_Control+0x5c8>
 8004b84:	4b22      	ldr	r3, [pc, #136]	@ (8004c10 <Servo_Control+0x650>)
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < Duty_cycle_min)left_pwm = Duty_cycle_min;
 8004b88:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b8c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004c14 <Servo_Control+0x654>
 8004b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d501      	bpl.n	8004b9e <Servo_Control+0x5de>
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <Servo_Control+0x658>)
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004b9e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004ba2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004c0c <Servo_Control+0x64c>
 8004ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	dd01      	ble.n	8004bb4 <Servo_Control+0x5f4>
 8004bb0:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <Servo_Control+0x650>)
 8004bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004bb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004bb8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004c14 <Servo_Control+0x654>
 8004bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d501      	bpl.n	8004bca <Servo_Control+0x60a>
 8004bc6:	4b14      	ldr	r3, [pc, #80]	@ (8004c18 <Servo_Control+0x658>)
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <Servo_Control+0x65c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <Servo_Control+0x660>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be8:	ee17 2a90 	vmov	r2, s15
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004bee:	e0f3      	b.n	8004dd8 <Servo_Control+0x818>
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	40a77000 	.word	0x40a77000
 8004bf8:	40a00000 	.word	0x40a00000
 8004bfc:	408f4000 	.word	0x408f4000
 8004c00:	4092c000 	.word	0x4092c000
 8004c04:	447a0000 	.word	0x447a0000
 8004c08:	453b8000 	.word	0x453b8000
 8004c0c:	45834000 	.word	0x45834000
 8004c10:	45834000 	.word	0x45834000
 8004c14:	44e10000 	.word	0x44e10000
 8004c18:	44e10000 	.word	0x44e10000
 8004c1c:	20000af0 	.word	0x20000af0
 8004c20:	20000b38 	.word	0x20000b38
	}
	else if(mode_flag == mode_downright){
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	f040 80d6 	bne.w	8004dd8 <Servo_Control+0x818>
		temp_k = cmu_k((float)X,(float)Y);
 8004c2c:	88bb      	ldrh	r3, [r7, #4]
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	ee07 3a10 	vmov	s14, r3
 8004c3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c40:	eef0 0a47 	vmov.f32	s1, s14
 8004c44:	eeb0 0a67 	vmov.f32	s0, s15
 8004c48:	f001 fc32 	bl	80064b0 <cmu_k>
 8004c4c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1.0){
 8004c50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	dd2c      	ble.n	8004cbc <Servo_Control+0x6fc>
			right_pwm = 3000-((2048-Y)/2048.0)*1000 - 1850;
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fc6b 	bl	8000544 <__aeabi_i2d>
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	4b5f      	ldr	r3, [pc, #380]	@ (8004df0 <Servo_Control+0x830>)
 8004c74:	f7fb fdfa 	bl	800086c <__aeabi_ddiv>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	4b5b      	ldr	r3, [pc, #364]	@ (8004df4 <Servo_Control+0x834>)
 8004c86:	f7fb fcc7 	bl	8000618 <__aeabi_dmul>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	a154      	add	r1, pc, #336	@ (adr r1, 8004de0 <Servo_Control+0x820>)
 8004c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c94:	f7fb fb08 	bl	80002a8 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	a351      	add	r3, pc, #324	@ (adr r3, 8004de8 <Servo_Control+0x828>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb faff 	bl	80002a8 <__aeabi_dsub>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f7fb ffa9 	bl	8000c08 <__aeabi_d2f>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cba:	e02b      	b.n	8004d14 <Servo_Control+0x754>
		}
		else{
			right_pwm= 3000-((X-2048)/2048.0)*1000 - 100;
 8004cbc:	88bb      	ldrh	r3, [r7, #4]
 8004cbe:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fc3e 	bl	8000544 <__aeabi_i2d>
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <Servo_Control+0x830>)
 8004cce:	f7fb fdcd 	bl	800086c <__aeabi_ddiv>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	4b45      	ldr	r3, [pc, #276]	@ (8004df4 <Servo_Control+0x834>)
 8004ce0:	f7fb fc9a 	bl	8000618 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	a13d      	add	r1, pc, #244	@ (adr r1, 8004de0 <Servo_Control+0x820>)
 8004cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cee:	f7fb fadb 	bl	80002a8 <__aeabi_dsub>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <Servo_Control+0x838>)
 8004d00:	f7fb fad2 	bl	80002a8 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7fb ff7c 	bl	8000c08 <__aeabi_d2f>
 8004d10:	4603      	mov	r3, r0
 8004d12:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		left_pwm=(uint16_t)(3000-temp_k*1000) + 1600;
 8004d14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004d18:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004dfc <Servo_Control+0x83c>
 8004d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d20:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8004e00 <Servo_Control+0x840>
 8004d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2c:	ee17 3a90 	vmov	r3, s15
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > Duty_cycle_max)left_pwm = Duty_cycle_max;
 8004d42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004d46:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004e04 <Servo_Control+0x844>
 8004d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	dd01      	ble.n	8004d58 <Servo_Control+0x798>
 8004d54:	4b2c      	ldr	r3, [pc, #176]	@ (8004e08 <Servo_Control+0x848>)
 8004d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = Duty_cycle_min;
 8004d58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004d5c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004e0c <Servo_Control+0x84c>
 8004d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d68:	d501      	bpl.n	8004d6e <Servo_Control+0x7ae>
 8004d6a:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <Servo_Control+0x850>)
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > Duty_cycle_max)right_pwm = Duty_cycle_max;
 8004d6e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d72:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004e04 <Servo_Control+0x844>
 8004d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	dd01      	ble.n	8004d84 <Servo_Control+0x7c4>
 8004d80:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <Servo_Control+0x848>)
 8004d82:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < Duty_cycle_min)right_pwm = Duty_cycle_min;
 8004d84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004d88:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004e0c <Servo_Control+0x84c>
 8004d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d501      	bpl.n	8004d9a <Servo_Control+0x7da>
 8004d96:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <Servo_Control+0x850>)
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(right_pwm > left_pwm)return;
 8004d9a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004d9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004daa:	dc14      	bgt.n	8004dd6 <Servo_Control+0x816>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <Servo_Control+0x854>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db8:	ee17 2a90 	vmov	r2, s15
 8004dbc:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8004dbe:	4b16      	ldr	r3, [pc, #88]	@ (8004e18 <Servo_Control+0x858>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dca:	ee17 2a90 	vmov	r2, s15
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
		return;
 8004dd0:	e002      	b.n	8004dd8 <Servo_Control+0x818>
		if(left_pwm > right_pwm)return;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <Servo_Control+0x818>
		if(right_pwm > left_pwm)return;
 8004dd6:	bf00      	nop
	}
 }
 8004dd8:	3730      	adds	r7, #48	@ 0x30
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	00000000 	.word	0x00000000
 8004de4:	40a77000 	.word	0x40a77000
 8004de8:	00000000 	.word	0x00000000
 8004dec:	409ce800 	.word	0x409ce800
 8004df0:	40a00000 	.word	0x40a00000
 8004df4:	408f4000 	.word	0x408f4000
 8004df8:	40590000 	.word	0x40590000
 8004dfc:	447a0000 	.word	0x447a0000
 8004e00:	453b8000 	.word	0x453b8000
 8004e04:	45834000 	.word	0x45834000
 8004e08:	45834000 	.word	0x45834000
 8004e0c:	44e10000 	.word	0x44e10000
 8004e10:	44e10000 	.word	0x44e10000
 8004e14:	20000af0 	.word	0x20000af0
 8004e18:	20000b38 	.word	0x20000b38
 8004e1c:	00000000 	.word	0x00000000

08004e20 <Servo_Control_Blue>:

void Servo_Control_Blue(uint8_t mode_flag , uint16_t X , uint16_t Y){
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	@ 0x30
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	80bb      	strh	r3, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	807b      	strh	r3, [r7, #2]
	float weight,left_pwm,right_pwm;
	float temp_k;
	float precision_l,precision_r,precision;
	float motor,motor_l,motor_r;
	switch(mode_flag){
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	f200 83ff 	bhi.w	800563a <Servo_Control_Blue+0x81a>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <Servo_Control_Blue+0x24>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e77 	.word	0x08004e77
 8004e4c:	08004ec3 	.word	0x08004ec3
 8004e50:	08004f35 	.word	0x08004f35
 8004e54:	080050e5 	.word	0x080050e5
 8004e58:	080052c5 	.word	0x080052c5
 8004e5c:	08005459 	.word	0x08005459
	case mode_zero:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_cycle_zero);
 8004e60:	4bc9      	ldr	r3, [pc, #804]	@ (8005188 <Servo_Control_Blue+0x368>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004e68:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, Duty_cycle_zero);
 8004e6a:	4bc8      	ldr	r3, [pc, #800]	@ (800518c <Servo_Control_Blue+0x36c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004e74:	e3e2      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_stright:
		precision =(Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004e76:	4bc6      	ldr	r3, [pc, #792]	@ (8005190 <Servo_Control_Blue+0x370>)
 8004e78:	613b      	str	r3, [r7, #16]
		motor = ((4096-Y) * precision) + Duty_cycle_min ;
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e90:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8005194 <Servo_Control_Blue+0x374>
 8004e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e98:	edc7 7a03 	vstr	s15, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor);
 8004e9c:	4bba      	ldr	r3, [pc, #744]	@ (8005188 <Servo_Control_Blue+0x368>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea8:	ee17 2a90 	vmov	r2, s15
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor);
 8004eae:	4bb7      	ldr	r3, [pc, #732]	@ (800518c <Servo_Control_Blue+0x36c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eba:	ee17 2a90 	vmov	r2, s15
 8004ebe:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004ec0:	e3bc      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_rightleft:
		precision_l = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004ec2:	4bb3      	ldr	r3, [pc, #716]	@ (8005190 <Servo_Control_Blue+0x370>)
 8004ec4:	623b      	str	r3, [r7, #32]
		precision_r = (Duty_cycle_max - Duty_cycle_min) / (4096 - 0);
 8004ec6:	4bb2      	ldr	r3, [pc, #712]	@ (8005190 <Servo_Control_Blue+0x370>)
 8004ec8:	61fb      	str	r3, [r7, #28]
		motor_l = Duty_cycle_max - ((4096-X) * precision_r);
 8004eca:	88bb      	ldrh	r3, [r7, #4]
 8004ecc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee0:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8005198 <Servo_Control_Blue+0x378>
 8004ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee8:	edc7 7a06 	vstr	s15, [r7, #24]
		motor_r = ((4096-X) * precision_l) + Duty_cycle_min ;
 8004eec:	88bb      	ldrh	r3, [r7, #4]
 8004eee:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004efa:	edd7 7a08 	vldr	s15, [r7, #32]
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005194 <Servo_Control_Blue+0x374>
 8004f06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f0a:	edc7 7a05 	vstr	s15, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_l);
 8004f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005188 <Servo_Control_Blue+0x368>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1a:	ee17 2a90 	vmov	r2, s15
 8004f1e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, motor_r);
 8004f20:	4b9a      	ldr	r3, [pc, #616]	@ (800518c <Servo_Control_Blue+0x36c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 2a90 	vmov	r2, s15
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8004f32:	e383      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_upleft:
		temp_k = cmu_k((float)X,(float)Y);
 8004f34:	88bb      	ldrh	r3, [r7, #4]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	ee07 3a10 	vmov	s14, r3
 8004f44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f48:	eef0 0a47 	vmov.f32	s1, s14
 8004f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f50:	f001 faae 	bl	80064b0 <cmu_k>
 8004f54:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1)
 8004f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f68:	dd2e      	ble.n	8004fc8 <Servo_Control_Blue+0x1a8>
			right_pwm=3000+((2048 - X)/2048.0)*1000 + 800;
 8004f6a:	88bb      	ldrh	r3, [r7, #4]
 8004f6c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb fae7 	bl	8000544 <__aeabi_i2d>
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	4b88      	ldr	r3, [pc, #544]	@ (800519c <Servo_Control_Blue+0x37c>)
 8004f7c:	f7fb fc76 	bl	800086c <__aeabi_ddiv>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	4b84      	ldr	r3, [pc, #528]	@ (80051a0 <Servo_Control_Blue+0x380>)
 8004f8e:	f7fb fb43 	bl	8000618 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	a377      	add	r3, pc, #476	@ (adr r3, 8005178 <Servo_Control_Blue+0x358>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f984 	bl	80002ac <__adddf3>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80051a4 <Servo_Control_Blue+0x384>)
 8004fb2:	f7fb f97b 	bl	80002ac <__adddf3>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fe23 	bl	8000c08 <__aeabi_d2f>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc6:	e02d      	b.n	8005024 <Servo_Control_Blue+0x204>
		else
			right_pwm=3000+((2048 - Y)/2048.0)*1000 + 300;
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb fab8 	bl	8000544 <__aeabi_i2d>
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	4b70      	ldr	r3, [pc, #448]	@ (800519c <Servo_Control_Blue+0x37c>)
 8004fda:	f7fb fc47 	bl	800086c <__aeabi_ddiv>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	4b6d      	ldr	r3, [pc, #436]	@ (80051a0 <Servo_Control_Blue+0x380>)
 8004fec:	f7fb fb14 	bl	8000618 <__aeabi_dmul>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	a35f      	add	r3, pc, #380	@ (adr r3, 8005178 <Servo_Control_Blue+0x358>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f955 	bl	80002ac <__adddf3>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	a35d      	add	r3, pc, #372	@ (adr r3, 8005180 <Servo_Control_Blue+0x360>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb f94c 	bl	80002ac <__adddf3>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	f7fb fdf4 	bl	8000c08 <__aeabi_d2f>
 8005020:	4603      	mov	r3, r0
 8005022:	62bb      	str	r3, [r7, #40]	@ 0x28
		left_pwm=(uint16_t)(3000 + temp_k*1000) - 1200;
 8005024:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005028:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80051a8 <Servo_Control_Blue+0x388>
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80051ac <Servo_Control_Blue+0x38c>
 8005034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503c:	ee17 3a90 	vmov	r3, s15
 8005040:	b29b      	uxth	r3, r3
 8005042:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 4200)left_pwm = 4200;
 8005052:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005056:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005198 <Servo_Control_Blue+0x378>
 800505a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	dd01      	ble.n	8005068 <Servo_Control_Blue+0x248>
 8005064:	4b52      	ldr	r3, [pc, #328]	@ (80051b0 <Servo_Control_Blue+0x390>)
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 8005068:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800506c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005194 <Servo_Control_Blue+0x374>
 8005070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005078:	d501      	bpl.n	800507e <Servo_Control_Blue+0x25e>
 800507a:	4b4e      	ldr	r3, [pc, #312]	@ (80051b4 <Servo_Control_Blue+0x394>)
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 800507e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005082:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005198 <Servo_Control_Blue+0x378>
 8005086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	dd01      	ble.n	8005094 <Servo_Control_Blue+0x274>
 8005090:	4b47      	ldr	r3, [pc, #284]	@ (80051b0 <Servo_Control_Blue+0x390>)
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 8005094:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005098:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005194 <Servo_Control_Blue+0x374>
 800509c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	d501      	bpl.n	80050aa <Servo_Control_Blue+0x28a>
 80050a6:	4b43      	ldr	r3, [pc, #268]	@ (80051b4 <Servo_Control_Blue+0x394>)
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(left_pwm > right_pwm)return;
 80050aa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80050ae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80050b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ba:	f300 82c0 	bgt.w	800563e <Servo_Control_Blue+0x81e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 80050be:	4b32      	ldr	r3, [pc, #200]	@ (8005188 <Servo_Control_Blue+0x368>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80050c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ca:	ee17 2a90 	vmov	r2, s15
 80050ce:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 80050d0:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <Servo_Control_Blue+0x36c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80050d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050dc:	ee17 2a90 	vmov	r2, s15
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80050e2:	e2ab      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_upright:
		temp_k = cmu_k((float)X,(float)Y);
 80050e4:	88bb      	ldrh	r3, [r7, #4]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	ee07 3a10 	vmov	s14, r3
 80050f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80050f8:	eef0 0a47 	vmov.f32	s1, s14
 80050fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005100:	f001 f9d6 	bl	80064b0 <cmu_k>
 8005104:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k < (-1)){
 8005108:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800510c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005118:	d550      	bpl.n	80051bc <Servo_Control_Blue+0x39c>
			left_pwm = 3000+((X - 2048)/2048.0)*1000 + 1200;
 800511a:	88bb      	ldrh	r3, [r7, #4]
 800511c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb fa0f 	bl	8000544 <__aeabi_i2d>
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	4b1c      	ldr	r3, [pc, #112]	@ (800519c <Servo_Control_Blue+0x37c>)
 800512c:	f7fb fb9e 	bl	800086c <__aeabi_ddiv>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	4b18      	ldr	r3, [pc, #96]	@ (80051a0 <Servo_Control_Blue+0x380>)
 800513e:	f7fb fa6b 	bl	8000618 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	a30b      	add	r3, pc, #44	@ (adr r3, 8005178 <Servo_Control_Blue+0x358>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb f8ac 	bl	80002ac <__adddf3>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <Servo_Control_Blue+0x398>)
 8005162:	f7fb f8a3 	bl	80002ac <__adddf3>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	f7fb fd4b 	bl	8000c08 <__aeabi_d2f>
 8005172:	4603      	mov	r3, r0
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005176:	e04f      	b.n	8005218 <Servo_Control_Blue+0x3f8>
 8005178:	00000000 	.word	0x00000000
 800517c:	40a77000 	.word	0x40a77000
 8005180:	00000000 	.word	0x00000000
 8005184:	4072c000 	.word	0x4072c000
 8005188:	20000af0 	.word	0x20000af0
 800518c:	20000b38 	.word	0x20000b38
 8005190:	3f160000 	.word	0x3f160000
 8005194:	44e10000 	.word	0x44e10000
 8005198:	45834000 	.word	0x45834000
 800519c:	40a00000 	.word	0x40a00000
 80051a0:	408f4000 	.word	0x408f4000
 80051a4:	40890000 	.word	0x40890000
 80051a8:	447a0000 	.word	0x447a0000
 80051ac:	453b8000 	.word	0x453b8000
 80051b0:	45834000 	.word	0x45834000
 80051b4:	44e10000 	.word	0x44e10000
 80051b8:	4092c000 	.word	0x4092c000
		}
		else{
			left_pwm=3000+((2048 - Y)/2048.0)*1000 + 1200;
 80051bc:	887b      	ldrh	r3, [r7, #2]
 80051be:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb f9be 	bl	8000544 <__aeabi_i2d>
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	4bca      	ldr	r3, [pc, #808]	@ (80054f8 <Servo_Control_Blue+0x6d8>)
 80051ce:	f7fb fb4d 	bl	800086c <__aeabi_ddiv>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	4bc7      	ldr	r3, [pc, #796]	@ (80054fc <Servo_Control_Blue+0x6dc>)
 80051e0:	f7fb fa1a 	bl	8000618 <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	a3be      	add	r3, pc, #760	@ (adr r3, 80054e8 <Servo_Control_Blue+0x6c8>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb f85b 	bl	80002ac <__adddf3>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	4bbf      	ldr	r3, [pc, #764]	@ (8005500 <Servo_Control_Blue+0x6e0>)
 8005204:	f7fb f852 	bl	80002ac <__adddf3>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7fb fcfa 	bl	8000c08 <__aeabi_d2f>
 8005214:	4603      	mov	r3, r0
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		right_pwm=(uint16_t)(3000-temp_k*1000) - 1200;
 8005218:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800521c:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8005504 <Servo_Control_Blue+0x6e4>
 8005220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005224:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8005508 <Servo_Control_Blue+0x6e8>
 8005228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 3a90 	vmov	r3, s15
 8005234:	b29b      	uxth	r3, r3
 8005236:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005242:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > 4200)left_pwm = 4200;
 8005246:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800524a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800550c <Servo_Control_Blue+0x6ec>
 800524e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005256:	dd01      	ble.n	800525c <Servo_Control_Blue+0x43c>
 8005258:	4bad      	ldr	r3, [pc, #692]	@ (8005510 <Servo_Control_Blue+0x6f0>)
 800525a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 800525c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005260:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8005514 <Servo_Control_Blue+0x6f4>
 8005264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d501      	bpl.n	8005272 <Servo_Control_Blue+0x452>
 800526e:	4baa      	ldr	r3, [pc, #680]	@ (8005518 <Servo_Control_Blue+0x6f8>)
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 8005272:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005276:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800550c <Servo_Control_Blue+0x6ec>
 800527a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	dd01      	ble.n	8005288 <Servo_Control_Blue+0x468>
 8005284:	4ba2      	ldr	r3, [pc, #648]	@ (8005510 <Servo_Control_Blue+0x6f0>)
 8005286:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 8005288:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800528c:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8005514 <Servo_Control_Blue+0x6f4>
 8005290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	d501      	bpl.n	800529e <Servo_Control_Blue+0x47e>
 800529a:	4b9f      	ldr	r3, [pc, #636]	@ (8005518 <Servo_Control_Blue+0x6f8>)
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 800529e:	4b9f      	ldr	r3, [pc, #636]	@ (800551c <Servo_Control_Blue+0x6fc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80052a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052aa:	ee17 2a90 	vmov	r2, s15
 80052ae:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 80052b0:	4b9b      	ldr	r3, [pc, #620]	@ (8005520 <Servo_Control_Blue+0x700>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80052b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052bc:	ee17 2a90 	vmov	r2, s15
 80052c0:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80052c2:	e1bb      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_downleft:
		temp_k = cmu_k((float)X,(float)Y);
 80052c4:	88bb      	ldrh	r3, [r7, #4]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	887b      	ldrh	r3, [r7, #2]
 80052d0:	ee07 3a10 	vmov	s14, r3
 80052d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80052d8:	eef0 0a47 	vmov.f32	s1, s14
 80052dc:	eeb0 0a67 	vmov.f32	s0, s15
 80052e0:	f001 f8e6 	bl	80064b0 <cmu_k>
 80052e4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k<(-1))
 80052e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80052ec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80052f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f8:	d52c      	bpl.n	8005354 <Servo_Control_Blue+0x534>
			left_pwm=3000-((2048-X)/2048.0)*1000 - 1200;
 80052fa:	88bb      	ldrh	r3, [r7, #4]
 80052fc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb f91f 	bl	8000544 <__aeabi_i2d>
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	4b7b      	ldr	r3, [pc, #492]	@ (80054f8 <Servo_Control_Blue+0x6d8>)
 800530c:	f7fb faae 	bl	800086c <__aeabi_ddiv>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	4b77      	ldr	r3, [pc, #476]	@ (80054fc <Servo_Control_Blue+0x6dc>)
 800531e:	f7fb f97b 	bl	8000618 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	a170      	add	r1, pc, #448	@ (adr r1, 80054e8 <Servo_Control_Blue+0x6c8>)
 8005328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800532c:	f7fa ffbc 	bl	80002a8 <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b70      	ldr	r3, [pc, #448]	@ (8005500 <Servo_Control_Blue+0x6e0>)
 800533e:	f7fa ffb3 	bl	80002a8 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb fc5d 	bl	8000c08 <__aeabi_d2f>
 800534e:	4603      	mov	r3, r0
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005352:	e02b      	b.n	80053ac <Servo_Control_Blue+0x58c>
		else
			left_pwm=3000-((2048-Y)/2048.0)*1000 - 1200;
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb f8f2 	bl	8000544 <__aeabi_i2d>
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	4b64      	ldr	r3, [pc, #400]	@ (80054f8 <Servo_Control_Blue+0x6d8>)
 8005366:	f7fb fa81 	bl	800086c <__aeabi_ddiv>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <Servo_Control_Blue+0x6dc>)
 8005378:	f7fb f94e 	bl	8000618 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	a159      	add	r1, pc, #356	@ (adr r1, 80054e8 <Servo_Control_Blue+0x6c8>)
 8005382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005386:	f7fa ff8f 	bl	80002a8 <__aeabi_dsub>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	4b5a      	ldr	r3, [pc, #360]	@ (8005500 <Servo_Control_Blue+0x6e0>)
 8005398:	f7fa ff86 	bl	80002a8 <__aeabi_dsub>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7fb fc30 	bl	8000c08 <__aeabi_d2f>
 80053a8:	4603      	mov	r3, r0
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		right_pwm=(uint16_t)(3000+temp_k*1000) + 1200;
 80053ac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80053b0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005504 <Servo_Control_Blue+0x6e4>
 80053b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8005508 <Servo_Control_Blue+0x6e8>
 80053bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c4:	ee17 3a90 	vmov	r3, s15
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if(left_pwm > 4200)left_pwm = 4200;
 80053da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80053de:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800550c <Servo_Control_Blue+0x6ec>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	dd01      	ble.n	80053f0 <Servo_Control_Blue+0x5d0>
 80053ec:	4b48      	ldr	r3, [pc, #288]	@ (8005510 <Servo_Control_Blue+0x6f0>)
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 80053f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80053f4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005514 <Servo_Control_Blue+0x6f4>
 80053f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005400:	d501      	bpl.n	8005406 <Servo_Control_Blue+0x5e6>
 8005402:	4b45      	ldr	r3, [pc, #276]	@ (8005518 <Servo_Control_Blue+0x6f8>)
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 8005406:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800540a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800550c <Servo_Control_Blue+0x6ec>
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	dd01      	ble.n	800541c <Servo_Control_Blue+0x5fc>
 8005418:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <Servo_Control_Blue+0x6f0>)
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 800541c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005420:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005514 <Servo_Control_Blue+0x6f4>
 8005424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	d501      	bpl.n	8005432 <Servo_Control_Blue+0x612>
 800542e:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <Servo_Control_Blue+0x6f8>)
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8005432:	4b3a      	ldr	r3, [pc, #232]	@ (800551c <Servo_Control_Blue+0x6fc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800543a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543e:	ee17 2a90 	vmov	r2, s15
 8005442:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8005444:	4b36      	ldr	r3, [pc, #216]	@ (8005520 <Servo_Control_Blue+0x700>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800544c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005450:	ee17 2a90 	vmov	r2, s15
 8005454:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8005456:	e0f1      	b.n	800563c <Servo_Control_Blue+0x81c>
	case mode_downright:
		temp_k = cmu_k((float)X,(float)Y);
 8005458:	88bb      	ldrh	r3, [r7, #4]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	ee07 3a10 	vmov	s14, r3
 8005468:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800546c:	eef0 0a47 	vmov.f32	s1, s14
 8005470:	eeb0 0a67 	vmov.f32	s0, s15
 8005474:	f001 f81c 	bl	80064b0 <cmu_k>
 8005478:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		//printf("K:%f\r\n",temp_k);
		if(temp_k > 1.0){
 800547c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	dd4a      	ble.n	8005524 <Servo_Control_Blue+0x704>
			right_pwm = 3000-((2048-Y)/2048.0)*1000 - 1850;
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8005494:	4618      	mov	r0, r3
 8005496:	f7fb f855 	bl	8000544 <__aeabi_i2d>
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	4b16      	ldr	r3, [pc, #88]	@ (80054f8 <Servo_Control_Blue+0x6d8>)
 80054a0:	f7fb f9e4 	bl	800086c <__aeabi_ddiv>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4610      	mov	r0, r2
 80054aa:	4619      	mov	r1, r3
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <Servo_Control_Blue+0x6dc>)
 80054b2:	f7fb f8b1 	bl	8000618 <__aeabi_dmul>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80054e8 <Servo_Control_Blue+0x6c8>)
 80054bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054c0:	f7fa fef2 	bl	80002a8 <__aeabi_dsub>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	a308      	add	r3, pc, #32	@ (adr r3, 80054f0 <Servo_Control_Blue+0x6d0>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fee9 	bl	80002a8 <__aeabi_dsub>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f7fb fb93 	bl	8000c08 <__aeabi_d2f>
 80054e2:	4603      	mov	r3, r0
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e6:	e049      	b.n	800557c <Servo_Control_Blue+0x75c>
 80054e8:	00000000 	.word	0x00000000
 80054ec:	40a77000 	.word	0x40a77000
 80054f0:	00000000 	.word	0x00000000
 80054f4:	409ce800 	.word	0x409ce800
 80054f8:	40a00000 	.word	0x40a00000
 80054fc:	408f4000 	.word	0x408f4000
 8005500:	4092c000 	.word	0x4092c000
 8005504:	447a0000 	.word	0x447a0000
 8005508:	453b8000 	.word	0x453b8000
 800550c:	45834000 	.word	0x45834000
 8005510:	45834000 	.word	0x45834000
 8005514:	44e10000 	.word	0x44e10000
 8005518:	44e10000 	.word	0x44e10000
 800551c:	20000af0 	.word	0x20000af0
 8005520:	20000b38 	.word	0x20000b38
		}
		else{
			right_pwm= 3000-((X-2048)/2048.0)*1000 - 100;
 8005524:	88bb      	ldrh	r3, [r7, #4]
 8005526:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800552a:	4618      	mov	r0, r3
 800552c:	f7fb f80a 	bl	8000544 <__aeabi_i2d>
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	4b48      	ldr	r3, [pc, #288]	@ (8005658 <Servo_Control_Blue+0x838>)
 8005536:	f7fb f999 	bl	800086c <__aeabi_ddiv>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	4b45      	ldr	r3, [pc, #276]	@ (800565c <Servo_Control_Blue+0x83c>)
 8005548:	f7fb f866 	bl	8000618 <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	a13f      	add	r1, pc, #252	@ (adr r1, 8005650 <Servo_Control_Blue+0x830>)
 8005552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005556:	f7fa fea7 	bl	80002a8 <__aeabi_dsub>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	4b3e      	ldr	r3, [pc, #248]	@ (8005660 <Servo_Control_Blue+0x840>)
 8005568:	f7fa fe9e 	bl	80002a8 <__aeabi_dsub>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f7fb fb48 	bl	8000c08 <__aeabi_d2f>
 8005578:	4603      	mov	r3, r0
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		left_pwm=(uint16_t)(3000-temp_k*1000) + 1600;
 800557c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005580:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005664 <Servo_Control_Blue+0x844>
 8005584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005588:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005668 <Servo_Control_Blue+0x848>
 800558c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005594:	ee17 3a90 	vmov	r3, s15
 8005598:	b29b      	uxth	r3, r3
 800559a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 4200)left_pwm = 4200;
 80055aa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80055ae:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800566c <Servo_Control_Blue+0x84c>
 80055b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	dd01      	ble.n	80055c0 <Servo_Control_Blue+0x7a0>
 80055bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005670 <Servo_Control_Blue+0x850>)
 80055be:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 1800)left_pwm = 1800;
 80055c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80055c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005674 <Servo_Control_Blue+0x854>
 80055c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d501      	bpl.n	80055d6 <Servo_Control_Blue+0x7b6>
 80055d2:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <Servo_Control_Blue+0x858>)
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 4200)right_pwm = 4200;
 80055d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80055da:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800566c <Servo_Control_Blue+0x84c>
 80055de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	dd01      	ble.n	80055ec <Servo_Control_Blue+0x7cc>
 80055e8:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <Servo_Control_Blue+0x850>)
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 1800)right_pwm = 1800;
 80055ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80055f0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005674 <Servo_Control_Blue+0x854>
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d501      	bpl.n	8005602 <Servo_Control_Blue+0x7e2>
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <Servo_Control_Blue+0x858>)
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
		//printf("motor_l:%f\r\n",left_pwm);
		//printf("motor_r:%f\r\n",right_pwm);
		if(right_pwm > left_pwm)return;
 8005602:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005606:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800560a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	dc16      	bgt.n	8005642 <Servo_Control_Blue+0x822>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);
 8005614:	4b19      	ldr	r3, [pc, #100]	@ (800567c <Servo_Control_Blue+0x85c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800561c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005620:	ee17 2a90 	vmov	r2, s15
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);
 8005626:	4b16      	ldr	r3, [pc, #88]	@ (8005680 <Servo_Control_Blue+0x860>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800562e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005632:	ee17 2a90 	vmov	r2, s15
 8005636:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8005638:	e000      	b.n	800563c <Servo_Control_Blue+0x81c>
	default:break;
 800563a:	bf00      	nop
	}
	return ;
 800563c:	e002      	b.n	8005644 <Servo_Control_Blue+0x824>
		if(left_pwm > right_pwm)return;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <Servo_Control_Blue+0x824>
		if(right_pwm > left_pwm)return;
 8005642:	bf00      	nop
}
 8005644:	3730      	adds	r7, #48	@ 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w
 8005650:	00000000 	.word	0x00000000
 8005654:	40a77000 	.word	0x40a77000
 8005658:	40a00000 	.word	0x40a00000
 800565c:	408f4000 	.word	0x408f4000
 8005660:	40590000 	.word	0x40590000
 8005664:	447a0000 	.word	0x447a0000
 8005668:	453b8000 	.word	0x453b8000
 800566c:	45834000 	.word	0x45834000
 8005670:	45834000 	.word	0x45834000
 8005674:	44e10000 	.word	0x44e10000
 8005678:	44e10000 	.word	0x44e10000
 800567c:	20000af0 	.word	0x20000af0
 8005680:	20000b38 	.word	0x20000b38

08005684 <Servo_Control_CAN>:

#define	SET_BIT(x, bit)	(x |= (1 << bit))	/* 置位第bit位 */
#define	CLEAR_BIT(x, bit)	(x &= ~(1 << bit))	/* 清零第bit位 */

	 uint8_t TxData[8] = {0};
 void Servo_Control_CAN(uint8_t mode_flag , uint16_t X , uint16_t Y){
 8005684:	b580      	push	{r7, lr}
 8005686:	b08c      	sub	sp, #48	@ 0x30
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
 800568e:	460b      	mov	r3, r1
 8005690:	81bb      	strh	r3, [r7, #12]
 8005692:	4613      	mov	r3, r2
 8005694:	817b      	strh	r3, [r7, #10]
	 uint8_t length = 0x08;
 8005696:	2308      	movs	r3, #8
 8005698:	76fb      	strb	r3, [r7, #27]
	 uint8_t high,low;
	 float temp_k;
	 float weight,left_pwm,right_pwm;
	 float precision,precision_l,precision_r,motor,motor_l,motor_r;
	 if(mode_flag == mode_zero){
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d114      	bne.n	80056ca <Servo_Control_CAN+0x46>
		for(int i = 0 ; i < 8 ; i++){
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e007      	b.n	80056b6 <Servo_Control_CAN+0x32>
			TxData[i] = 0x00;
 80056a6:	4a9c      	ldr	r2, [pc, #624]	@ (8005918 <Servo_Control_CAN+0x294>)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
		for(int i = 0 ; i < 8 ; i++){
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2b07      	cmp	r3, #7
 80056ba:	ddf4      	ble.n	80056a6 <Servo_Control_CAN+0x22>
		}
		CAN_TX_Message(TxData, length);
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	4619      	mov	r1, r3
 80056c0:	4895      	ldr	r0, [pc, #596]	@ (8005918 <Servo_Control_CAN+0x294>)
 80056c2:	f7fd ff01 	bl	80034c8 <CAN_TX_Message>
		return ;
 80056c6:	f000 bee1 	b.w	800648c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_upstright){
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d165      	bne.n	800579c <Servo_Control_CAN+0x118>
		motor = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(Y-4096))/(4096 - 0));
 80056d0:	897b      	ldrh	r3, [r7, #10]
 80056d2:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfb8      	it	lt
 80056da:	425b      	neglt	r3, r3
 80056dc:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		printf("motor:%f\r\n",motor);
 80056ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056ee:	f7fa ff3b 	bl	8000568 <__aeabi_f2d>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4889      	ldr	r0, [pc, #548]	@ (800591c <Servo_Control_CAN+0x298>)
 80056f8:	f009 ff10 	bl	800f51c <iprintf>
		if(motor > 2000)motor = 2000;
 80056fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005700:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8005924 <Servo_Control_CAN+0x2a0>
 8005704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	dd01      	ble.n	8005712 <Servo_Control_CAN+0x8e>
 800570e:	4b84      	ldr	r3, [pc, #528]	@ (8005920 <Servo_Control_CAN+0x29c>)
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
		if(motor < 0)motor = 0;
 8005712:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800571a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571e:	d502      	bpl.n	8005726 <Servo_Control_CAN+0xa2>
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
		TxData[0] = ((int)motor >> 8) & 0xff;	 	//高8位
 8005726:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800572a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800572e:	ee17 3a90 	vmov	r3, s15
 8005732:	121b      	asrs	r3, r3, #8
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b78      	ldr	r3, [pc, #480]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005738:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor & 0xff; 		//低8位
 800573a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800573e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005742:	edc7 7a01 	vstr	s15, [r7, #4]
 8005746:	793a      	ldrb	r2, [r7, #4]
 8005748:	4b73      	ldr	r3, [pc, #460]	@ (8005918 <Servo_Control_CAN+0x294>)
 800574a:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor >> 8) & 0xff;	 	//高8位
 800574c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005754:	ee17 3a90 	vmov	r3, s15
 8005758:	121b      	asrs	r3, r3, #8
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b6e      	ldr	r3, [pc, #440]	@ (8005918 <Servo_Control_CAN+0x294>)
 800575e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor & 0xff; 		 //低8位
 8005760:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005768:	edc7 7a01 	vstr	s15, [r7, #4]
 800576c:	793a      	ldrb	r2, [r7, #4]
 800576e:	4b6a      	ldr	r3, [pc, #424]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005770:	70da      	strb	r2, [r3, #3]
		CLEAR_BIT(TxData[0],3);
 8005772:	4b69      	ldr	r3, [pc, #420]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f023 0308 	bic.w	r3, r3, #8
 800577a:	b2da      	uxtb	r2, r3
 800577c:	4b66      	ldr	r3, [pc, #408]	@ (8005918 <Servo_Control_CAN+0x294>)
 800577e:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 8005780:	4b65      	ldr	r3, [pc, #404]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005782:	789b      	ldrb	r3, [r3, #2]
 8005784:	f023 0308 	bic.w	r3, r3, #8
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b63      	ldr	r3, [pc, #396]	@ (8005918 <Servo_Control_CAN+0x294>)
 800578c:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 800578e:	7efb      	ldrb	r3, [r7, #27]
 8005790:	4619      	mov	r1, r3
 8005792:	4861      	ldr	r0, [pc, #388]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005794:	f7fd fe98 	bl	80034c8 <CAN_TX_Message>
		return;
 8005798:	f000 be78 	b.w	800648c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_downstright){
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d158      	bne.n	8005854 <Servo_Control_CAN+0x1d0>
		motor = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-Y)/(4096 - 0));
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		if(motor > 2000)motor = 2000;
 80057b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057b8:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8005924 <Servo_Control_CAN+0x2a0>
 80057bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	dd01      	ble.n	80057ca <Servo_Control_CAN+0x146>
 80057c6:	4b56      	ldr	r3, [pc, #344]	@ (8005920 <Servo_Control_CAN+0x29c>)
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if(motor < 0)motor = 0;
 80057ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d6:	d502      	bpl.n	80057de <Servo_Control_CAN+0x15a>
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
		TxData[0] = ((int)motor >> 8) & 0xff;	 	//高8位
 80057de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e6:	ee17 3a90 	vmov	r3, s15
 80057ea:	121b      	asrs	r3, r3, #8
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <Servo_Control_CAN+0x294>)
 80057f0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor & 0xff; 		//低8位
 80057f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80057f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80057fe:	793a      	ldrb	r2, [r7, #4]
 8005800:	4b45      	ldr	r3, [pc, #276]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005802:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor >> 8) & 0xff;	 	//高8位
 8005804:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800580c:	ee17 3a90 	vmov	r3, s15
 8005810:	121b      	asrs	r3, r3, #8
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b40      	ldr	r3, [pc, #256]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005816:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor & 0xff; 		//低8位
 8005818:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800581c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005820:	edc7 7a01 	vstr	s15, [r7, #4]
 8005824:	793a      	ldrb	r2, [r7, #4]
 8005826:	4b3c      	ldr	r3, [pc, #240]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005828:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 800582a:	4b3b      	ldr	r3, [pc, #236]	@ (8005918 <Servo_Control_CAN+0x294>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f043 0308 	orr.w	r3, r3, #8
 8005832:	b2da      	uxtb	r2, r3
 8005834:	4b38      	ldr	r3, [pc, #224]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005836:	701a      	strb	r2, [r3, #0]
		SET_BIT(TxData[2],3);
 8005838:	4b37      	ldr	r3, [pc, #220]	@ (8005918 <Servo_Control_CAN+0x294>)
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	f043 0308 	orr.w	r3, r3, #8
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005844:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 8005846:	7efb      	ldrb	r3, [r7, #27]
 8005848:	4619      	mov	r1, r3
 800584a:	4833      	ldr	r0, [pc, #204]	@ (8005918 <Servo_Control_CAN+0x294>)
 800584c:	f7fd fe3c 	bl	80034c8 <CAN_TX_Message>
		return;
 8005850:	f000 be1c 	b.w	800648c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_left){
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b04      	cmp	r3, #4
 8005858:	d166      	bne.n	8005928 <Servo_Control_CAN+0x2a4>
		motor_l = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0));
 800585a:	89bb      	ldrh	r3, [r7, #12]
 800585c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005860:	2b00      	cmp	r3, #0
 8005862:	bfb8      	it	lt
 8005864:	425b      	neglt	r3, r3
 8005866:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005872:	edc7 7a08 	vstr	s15, [r7, #32]
		if(motor > 2000)motor_l = 2000;
 8005876:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800587a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005924 <Servo_Control_CAN+0x2a0>
 800587e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	dd01      	ble.n	800588c <Servo_Control_CAN+0x208>
 8005888:	4b25      	ldr	r3, [pc, #148]	@ (8005920 <Servo_Control_CAN+0x29c>)
 800588a:	623b      	str	r3, [r7, #32]
		if(motor < 0)motor_l = 0;
 800588c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	d502      	bpl.n	80058a0 <Servo_Control_CAN+0x21c>
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	623b      	str	r3, [r7, #32]
		TxData[0] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 80058a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a8:	ee17 3a90 	vmov	r3, s15
 80058ac:	121b      	asrs	r3, r3, #8
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058b2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor_l & 0xff; 		//低8位
 80058b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80058b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80058c0:	793a      	ldrb	r2, [r7, #4]
 80058c2:	4b15      	ldr	r3, [pc, #84]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058c4:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 80058c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80058ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ce:	ee17 3a90 	vmov	r3, s15
 80058d2:	121b      	asrs	r3, r3, #8
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058d8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor_l & 0xff; 		//低8位
 80058da:	edd7 7a08 	vldr	s15, [r7, #32]
 80058de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80058e6:	793a      	ldrb	r2, [r7, #4]
 80058e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058ea:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f043 0308 	orr.w	r3, r3, #8
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058f8:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 80058fa:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <Servo_Control_CAN+0x294>)
 80058fc:	789b      	ldrb	r3, [r3, #2]
 80058fe:	f023 0308 	bic.w	r3, r3, #8
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <Servo_Control_CAN+0x294>)
 8005906:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 8005908:	7efb      	ldrb	r3, [r7, #27]
 800590a:	4619      	mov	r1, r3
 800590c:	4802      	ldr	r0, [pc, #8]	@ (8005918 <Servo_Control_CAN+0x294>)
 800590e:	f7fd fddb 	bl	80034c8 <CAN_TX_Message>
 8005912:	f000 bdbb 	b.w	800648c <Servo_Control_CAN+0xe08>
 8005916:	bf00      	nop
 8005918:	20000ad4 	.word	0x20000ad4
 800591c:	08015868 	.word	0x08015868
 8005920:	44fa0000 	.word	0x44fa0000
 8005924:	44fa0000 	.word	0x44fa0000
	 }
	 else if(mode_flag == can_mode_right){
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b05      	cmp	r3, #5
 800592c:	d168      	bne.n	8005a00 <Servo_Control_CAN+0x37c>
		motor_l = CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-X)/(4096 - 0));
 800592e:	89bb      	ldrh	r3, [r7, #12]
 8005930:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800593c:	edc7 7a08 	vstr	s15, [r7, #32]
		if(motor > 2000)motor_l = 2000;
 8005940:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005944:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8005924 <Servo_Control_CAN+0x2a0>
 8005948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005950:	dd01      	ble.n	8005956 <Servo_Control_CAN+0x2d2>
 8005952:	4bbd      	ldr	r3, [pc, #756]	@ (8005c48 <Servo_Control_CAN+0x5c4>)
 8005954:	623b      	str	r3, [r7, #32]
		if(motor < 0)motor_l = 0;
 8005956:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800595a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005962:	d502      	bpl.n	800596a <Servo_Control_CAN+0x2e6>
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	623b      	str	r3, [r7, #32]
		TxData[0] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 800596a:	edd7 7a08 	vldr	s15, [r7, #32]
 800596e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005972:	ee17 3a90 	vmov	r3, s15
 8005976:	121b      	asrs	r3, r3, #8
 8005978:	b2da      	uxtb	r2, r3
 800597a:	4bb4      	ldr	r3, [pc, #720]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 800597c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)motor_l & 0xff; 		//低8位
 800597e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005986:	edc7 7a01 	vstr	s15, [r7, #4]
 800598a:	793a      	ldrb	r2, [r7, #4]
 800598c:	4baf      	ldr	r3, [pc, #700]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 800598e:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)motor_l >> 8) & 0xff;	 	//高8位
 8005990:	edd7 7a08 	vldr	s15, [r7, #32]
 8005994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005998:	ee17 3a90 	vmov	r3, s15
 800599c:	121b      	asrs	r3, r3, #8
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	4baa      	ldr	r3, [pc, #680]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059a2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)motor_l & 0xff; 		//低8位
 80059a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80059a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80059b0:	793a      	ldrb	r2, [r7, #4]
 80059b2:	4ba6      	ldr	r3, [pc, #664]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059b4:	70da      	strb	r2, [r3, #3]
		printf("motor_l:%f\r\n",motor_l);
 80059b6:	6a38      	ldr	r0, [r7, #32]
 80059b8:	f7fa fdd6 	bl	8000568 <__aeabi_f2d>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	48a3      	ldr	r0, [pc, #652]	@ (8005c50 <Servo_Control_CAN+0x5cc>)
 80059c2:	f009 fdab 	bl	800f51c <iprintf>
		printf("motor_r:%f\r\n",motor_l);
 80059c6:	6a38      	ldr	r0, [r7, #32]
 80059c8:	f7fa fdce 	bl	8000568 <__aeabi_f2d>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	48a0      	ldr	r0, [pc, #640]	@ (8005c54 <Servo_Control_CAN+0x5d0>)
 80059d2:	f009 fda3 	bl	800f51c <iprintf>
		CLEAR_BIT(TxData[0],3);
 80059d6:	4b9d      	ldr	r3, [pc, #628]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f023 0308 	bic.w	r3, r3, #8
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	4b9a      	ldr	r3, [pc, #616]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059e2:	701a      	strb	r2, [r3, #0]
		SET_BIT(TxData[2],3);
 80059e4:	4b99      	ldr	r3, [pc, #612]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059e6:	789b      	ldrb	r3, [r3, #2]
 80059e8:	f043 0308 	orr.w	r3, r3, #8
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	4b97      	ldr	r3, [pc, #604]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059f0:	709a      	strb	r2, [r3, #2]
		CAN_TX_Message(TxData, length);
 80059f2:	7efb      	ldrb	r3, [r7, #27]
 80059f4:	4619      	mov	r1, r3
 80059f6:	4895      	ldr	r0, [pc, #596]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 80059f8:	f7fd fd66 	bl	80034c8 <CAN_TX_Message>
 80059fc:	f000 bd46 	b.w	800648c <Servo_Control_CAN+0xe08>
	 }
	 else if(mode_flag == can_mode_leftup){
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	f040 812a 	bne.w	8005c5c <Servo_Control_CAN+0x5d8>
		right_pwm=CAN_Duty_cycle_max - ((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0));
 8005a08:	89bb      	ldrh	r3, [r7, #12]
 8005a0a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfb8      	it	lt
 8005a12:	425b      	neglt	r3, r3
 8005a14:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005a18:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	da01      	bge.n	8005a28 <Servo_Control_CAN+0x3a4>
 8005a24:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005a28:	131b      	asrs	r3, r3, #12
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a38:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bfb8      	it	lt
 8005a46:	425b      	neglt	r3, r3
 8005a48:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005a4c:	ee07 3a90 	vmov	s15, r3
 8005a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a54:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		if(left_pwm > 2000)left_pwm = 2000;
 8005a58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005a5c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8005c58 <Servo_Control_CAN+0x5d4>
 8005a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a68:	dd01      	ble.n	8005a6e <Servo_Control_CAN+0x3ea>
 8005a6a:	4b77      	ldr	r3, [pc, #476]	@ (8005c48 <Servo_Control_CAN+0x5c4>)
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(left_pwm < 0)left_pwm = 0;
 8005a6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7a:	d502      	bpl.n	8005a82 <Servo_Control_CAN+0x3fe>
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(right_pwm > 2000)right_pwm = 2000;
 8005a82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005a86:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005c58 <Servo_Control_CAN+0x5d4>
 8005a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	dd01      	ble.n	8005a98 <Servo_Control_CAN+0x414>
 8005a94:	4b6c      	ldr	r3, [pc, #432]	@ (8005c48 <Servo_Control_CAN+0x5c4>)
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(right_pwm < 0)right_pwm = 0;
 8005a98:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d502      	bpl.n	8005aac <Servo_Control_CAN+0x428>
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005aac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab4:	ee17 3a90 	vmov	r3, s15
 8005ab8:	121b      	asrs	r3, r3, #8
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	4b63      	ldr	r3, [pc, #396]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005abe:	701a      	strb	r2, [r3, #0]
		TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005ac0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ac8:	edc7 7a01 	vstr	s15, [r7, #4]
 8005acc:	793a      	ldrb	r2, [r7, #4]
 8005ace:	4b5f      	ldr	r3, [pc, #380]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005ad0:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005ad2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ada:	ee17 3a90 	vmov	r3, s15
 8005ade:	121b      	asrs	r3, r3, #8
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005ae4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005ae6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aee:	edc7 7a01 	vstr	s15, [r7, #4]
 8005af2:	793a      	ldrb	r2, [r7, #4]
 8005af4:	4b55      	ldr	r3, [pc, #340]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005af6:	70da      	strb	r2, [r3, #3]
		SET_BIT(TxData[0],3);
 8005af8:	4b54      	ldr	r3, [pc, #336]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f043 0308 	orr.w	r3, r3, #8
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4b52      	ldr	r3, [pc, #328]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005b04:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TxData[2],3);
 8005b06:	4b51      	ldr	r3, [pc, #324]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005b08:	789b      	ldrb	r3, [r3, #2]
 8005b0a:	f023 0308 	bic.w	r3, r3, #8
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	4b4e      	ldr	r3, [pc, #312]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005b12:	709a      	strb	r2, [r3, #2]
		if(X > Y){
 8005b14:	89ba      	ldrh	r2, [r7, #12]
 8005b16:	897b      	ldrh	r3, [r7, #10]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d97d      	bls.n	8005c18 <Servo_Control_CAN+0x594>
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(X-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005b1c:	89bb      	ldrh	r3, [r7, #12]
 8005b1e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bfb8      	it	lt
 8005b26:	425b      	neglt	r3, r3
 8005b28:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005b2c:	ee07 3a90 	vmov	s15, r3
 8005b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b34:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			right_pwm=((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-Y)/(4096 - 0)) + CAN_Duty_cycle_min ;
 8005b38:	897b      	ldrh	r3, [r7, #10]
 8005b3a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005b3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	da01      	bge.n	8005b4e <Servo_Control_CAN+0x4ca>
 8005b4a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005b4e:	131b      	asrs	r3, r3, #12
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b58:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			if(left_pwm > 2000)left_pwm = 2000;
 8005b5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b60:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005c58 <Servo_Control_CAN+0x5d4>
 8005b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	dd01      	ble.n	8005b72 <Servo_Control_CAN+0x4ee>
 8005b6e:	4b36      	ldr	r3, [pc, #216]	@ (8005c48 <Servo_Control_CAN+0x5c4>)
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005b72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d502      	bpl.n	8005b86 <Servo_Control_CAN+0x502>
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005b86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005b8a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8005c58 <Servo_Control_CAN+0x5d4>
 8005b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b96:	dd01      	ble.n	8005b9c <Servo_Control_CAN+0x518>
 8005b98:	4b2b      	ldr	r3, [pc, #172]	@ (8005c48 <Servo_Control_CAN+0x5c4>)
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	d502      	bpl.n	8005bb0 <Servo_Control_CAN+0x52c>
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005bb0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bb8:	ee17 3a90 	vmov	r3, s15
 8005bbc:	121b      	asrs	r3, r3, #8
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b22      	ldr	r3, [pc, #136]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005bc2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005bc4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8005bd0:	793a      	ldrb	r2, [r7, #4]
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005bd4:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005bd6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bde:	ee17 3a90 	vmov	r3, s15
 8005be2:	121b      	asrs	r3, r3, #8
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b19      	ldr	r3, [pc, #100]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005be8:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005bea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bf2:	edc7 7a01 	vstr	s15, [r7, #4]
 8005bf6:	793a      	ldrb	r2, [r7, #4]
 8005bf8:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005bfa:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005bfc:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f023 0308 	bic.w	r3, r3, #8
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4b11      	ldr	r3, [pc, #68]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005c08:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 8005c0a:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	f023 0308 	bic.w	r3, r3, #8
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b0d      	ldr	r3, [pc, #52]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005c16:	709a      	strb	r2, [r3, #2]
		}
		printf("motor_l:%f\r\n",left_pwm);
 8005c18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c1a:	f7fa fca5 	bl	8000568 <__aeabi_f2d>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	480b      	ldr	r0, [pc, #44]	@ (8005c50 <Servo_Control_CAN+0x5cc>)
 8005c24:	f009 fc7a 	bl	800f51c <iprintf>
		printf("motor_r:%f\r\n",right_pwm);
 8005c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c2a:	f7fa fc9d 	bl	8000568 <__aeabi_f2d>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4808      	ldr	r0, [pc, #32]	@ (8005c54 <Servo_Control_CAN+0x5d0>)
 8005c34:	f009 fc72 	bl	800f51c <iprintf>
		CAN_TX_Message(TxData, length);
 8005c38:	7efb      	ldrb	r3, [r7, #27]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4803      	ldr	r0, [pc, #12]	@ (8005c4c <Servo_Control_CAN+0x5c8>)
 8005c3e:	f7fd fc43 	bl	80034c8 <CAN_TX_Message>
		return;
 8005c42:	f000 bc23 	b.w	800648c <Servo_Control_CAN+0xe08>
 8005c46:	bf00      	nop
 8005c48:	44fa0000 	.word	0x44fa0000
 8005c4c:	20000ad4 	.word	0x20000ad4
 8005c50:	08015874 	.word	0x08015874
 8005c54:	08015884 	.word	0x08015884
 8005c58:	44fa0000 	.word	0x44fa0000
	 }
	 else if(mode_flag == can_mode_rightup){
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b07      	cmp	r3, #7
 8005c60:	f040 815e 	bne.w	8005f20 <Servo_Control_CAN+0x89c>
		temp_k = cmu_k((float)X,(float)Y);
 8005c64:	89bb      	ldrh	r3, [r7, #12]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	ee07 3a10 	vmov	s14, r3
 8005c74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005c78:	eef0 0a47 	vmov.f32	s1, s14
 8005c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c80:	f000 fc16 	bl	80064b0 <cmu_k>
 8005c84:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)X);
 8005c88:	89bb      	ldrh	r3, [r7, #12]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	ee17 0a90 	vmov	r0, s15
 8005c96:	f7fa fc67 	bl	8000568 <__aeabi_f2d>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4899      	ldr	r0, [pc, #612]	@ (8005f04 <Servo_Control_CAN+0x880>)
 8005ca0:	f009 fc3c 	bl	800f51c <iprintf>
		printf("Y:%f\r\n",(float)Y);
 8005ca4:	897b      	ldrh	r3, [r7, #10]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	ee17 0a90 	vmov	r0, s15
 8005cb2:	f7fa fc59 	bl	8000568 <__aeabi_f2d>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4893      	ldr	r0, [pc, #588]	@ (8005f08 <Servo_Control_CAN+0x884>)
 8005cbc:	f009 fc2e 	bl	800f51c <iprintf>
		printf("k:%f\r\n",temp_k);
 8005cc0:	6978      	ldr	r0, [r7, #20]
 8005cc2:	f7fa fc51 	bl	8000568 <__aeabi_f2d>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4890      	ldr	r0, [pc, #576]	@ (8005f0c <Servo_Control_CAN+0x888>)
 8005ccc:	f009 fc26 	bl	800f51c <iprintf>
		if(temp_k > (-1)){
 8005cd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cd4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce0:	f340 8086 	ble.w	8005df0 <Servo_Control_CAN+0x76c>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 8005ce4:	4b8a      	ldr	r3, [pc, #552]	@ (8005f10 <Servo_Control_CAN+0x88c>)
 8005ce6:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8005cea:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bfb8      	it	lt
 8005cf2:	425b      	neglt	r3, r3
 8005cf4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d00:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=CAN_Duty_cycle_max - ((CAN_Duty_cycle_max - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0));
 8005d04:	4b82      	ldr	r3, [pc, #520]	@ (8005f10 <Servo_Control_CAN+0x88c>)
 8005d06:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005d0a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005d0e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da01      	bge.n	8005d1e <Servo_Control_CAN+0x69a>
 8005d1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8005d1e:	131b      	asrs	r3, r3, #12
 8005d20:	425b      	negs	r3, r3
 8005d22:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8005d32:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d36:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8005f14 <Servo_Control_CAN+0x890>
 8005d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	dd01      	ble.n	8005d48 <Servo_Control_CAN+0x6c4>
 8005d44:	4b74      	ldr	r3, [pc, #464]	@ (8005f18 <Servo_Control_CAN+0x894>)
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005d48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d54:	d502      	bpl.n	8005d5c <Servo_Control_CAN+0x6d8>
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005d5c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005d60:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005f14 <Servo_Control_CAN+0x890>
 8005d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	dd01      	ble.n	8005d72 <Servo_Control_CAN+0x6ee>
 8005d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f18 <Servo_Control_CAN+0x894>)
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005d72:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7e:	d502      	bpl.n	8005d86 <Servo_Control_CAN+0x702>
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005d86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d8e:	ee17 3a90 	vmov	r3, s15
 8005d92:	121b      	asrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005d98:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005d9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da2:	edc7 7a01 	vstr	s15, [r7, #4]
 8005da6:	793a      	ldrb	r2, [r7, #4]
 8005da8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005daa:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005dac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005db4:	ee17 3a90 	vmov	r3, s15
 8005db8:	121b      	asrs	r3, r3, #8
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b57      	ldr	r3, [pc, #348]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005dbe:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005dc0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8005dcc:	793a      	ldrb	r2, [r7, #4]
 8005dce:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005dd0:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005dd2:	4b52      	ldr	r3, [pc, #328]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f023 0308 	bic.w	r3, r3, #8
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005dde:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8005de0:	4b4e      	ldr	r3, [pc, #312]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005de2:	789b      	ldrb	r3, [r3, #2]
 8005de4:	f043 0308 	orr.w	r3, r3, #8
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	4b4c      	ldr	r3, [pc, #304]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005dec:	709a      	strb	r2, [r3, #2]
 8005dee:	e082      	b.n	8005ef6 <Servo_Control_CAN+0x872>
		}
		else if(temp_k <= -1 && board_config.Rockers.Rocker_X != 2048){
 8005df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005df4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	d879      	bhi.n	8005ef6 <Servo_Control_CAN+0x872>
 8005e02:	4b43      	ldr	r3, [pc, #268]	@ (8005f10 <Servo_Control_CAN+0x88c>)
 8005e04:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e0c:	d073      	beq.n	8005ef6 <Servo_Control_CAN+0x872>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) + CAN_Duty_cycle_min ;
 8005e0e:	4b40      	ldr	r3, [pc, #256]	@ (8005f10 <Servo_Control_CAN+0x88c>)
 8005e10:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005e14:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e20:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 8005e24:	4b3a      	ldr	r3, [pc, #232]	@ (8005f10 <Servo_Control_CAN+0x88c>)
 8005e26:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8005e2a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e36:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8005e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e3e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005f14 <Servo_Control_CAN+0x890>
 8005e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4a:	dd01      	ble.n	8005e50 <Servo_Control_CAN+0x7cc>
 8005e4c:	4b32      	ldr	r3, [pc, #200]	@ (8005f18 <Servo_Control_CAN+0x894>)
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8005e50:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	d502      	bpl.n	8005e64 <Servo_Control_CAN+0x7e0>
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8005e64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e68:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005f14 <Servo_Control_CAN+0x890>
 8005e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	dd01      	ble.n	8005e7a <Servo_Control_CAN+0x7f6>
 8005e76:	4b28      	ldr	r3, [pc, #160]	@ (8005f18 <Servo_Control_CAN+0x894>)
 8005e78:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8005e7a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e86:	d502      	bpl.n	8005e8e <Servo_Control_CAN+0x80a>
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8005e8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e96:	ee17 3a90 	vmov	r3, s15
 8005e9a:	121b      	asrs	r3, r3, #8
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005ea0:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8005ea2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eaa:	edc7 7a01 	vstr	s15, [r7, #4]
 8005eae:	793a      	ldrb	r2, [r7, #4]
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005eb2:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8005eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ebc:	ee17 3a90 	vmov	r3, s15
 8005ec0:	121b      	asrs	r3, r3, #8
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b15      	ldr	r3, [pc, #84]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005ec6:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8005ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed0:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ed4:	793a      	ldrb	r2, [r7, #4]
 8005ed6:	4b11      	ldr	r3, [pc, #68]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005ed8:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8005eda:	4b10      	ldr	r3, [pc, #64]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f023 0308 	bic.w	r3, r3, #8
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005ee6:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005eea:	789b      	ldrb	r3, [r3, #2]
 8005eec:	f023 0308 	bic.w	r3, r3, #8
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005ef4:	709a      	strb	r2, [r3, #2]
		}
//		printf("motor_l:%f\r\n",left_pwm);
//		printf("motor_r:%f\r\n",right_pwm);
		CAN_TX_Message(TxData, length);
 8005ef6:	7efb      	ldrb	r3, [r7, #27]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4808      	ldr	r0, [pc, #32]	@ (8005f1c <Servo_Control_CAN+0x898>)
 8005efc:	f7fd fae4 	bl	80034c8 <CAN_TX_Message>
		return;
 8005f00:	e2c4      	b.n	800648c <Servo_Control_CAN+0xe08>
 8005f02:	bf00      	nop
 8005f04:	08015894 	.word	0x08015894
 8005f08:	0801589c 	.word	0x0801589c
 8005f0c:	080158a4 	.word	0x080158a4
 8005f10:	200005d8 	.word	0x200005d8
 8005f14:	44fa0000 	.word	0x44fa0000
 8005f18:	44fa0000 	.word	0x44fa0000
 8005f1c:	20000ad4 	.word	0x20000ad4
	 }
	 else if(mode_flag == can_mode_leftdown){
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	f040 8164 	bne.w	80061f0 <Servo_Control_CAN+0xb6c>
		temp_k = cmu_k((float)board_config.Rockers.Rocker_X,(float)board_config.Rockers.Rocker_Y);
 8005f28:	4baa      	ldr	r3, [pc, #680]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005f2a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	4ba7      	ldr	r3, [pc, #668]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005f38:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8005f3c:	ee07 3a10 	vmov	s14, r3
 8005f40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f44:	eef0 0a47 	vmov.f32	s1, s14
 8005f48:	eeb0 0a67 	vmov.f32	s0, s15
 8005f4c:	f000 fab0 	bl	80064b0 <cmu_k>
 8005f50:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)board_config.Rockers.Rocker_X);
 8005f54:	4b9f      	ldr	r3, [pc, #636]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005f56:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	ee17 0a90 	vmov	r0, s15
 8005f66:	f7fa faff 	bl	8000568 <__aeabi_f2d>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	489a      	ldr	r0, [pc, #616]	@ (80061d8 <Servo_Control_CAN+0xb54>)
 8005f70:	f009 fad4 	bl	800f51c <iprintf>
		printf("Y:%f\r\n",(float)board_config.Rockers.Rocker_Y);
 8005f74:	4b97      	ldr	r3, [pc, #604]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005f76:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	ee17 0a90 	vmov	r0, s15
 8005f86:	f7fa faef 	bl	8000568 <__aeabi_f2d>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4893      	ldr	r0, [pc, #588]	@ (80061dc <Servo_Control_CAN+0xb58>)
 8005f90:	f009 fac4 	bl	800f51c <iprintf>
		printf("k:%f\r\n",temp_k);
 8005f94:	6978      	ldr	r0, [r7, #20]
 8005f96:	f7fa fae7 	bl	8000568 <__aeabi_f2d>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4890      	ldr	r0, [pc, #576]	@ (80061e0 <Servo_Control_CAN+0xb5c>)
 8005fa0:	f009 fabc 	bl	800f51c <iprintf>
		if(temp_k > (-1)){
 8005fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fa8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	dd79      	ble.n	80060aa <Servo_Control_CAN+0xa26>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 8005fb6:	4b87      	ldr	r3, [pc, #540]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005fb8:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8005fbc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_X-4096))/(4096 - 0)) ;
 8005fcc:	4b81      	ldr	r3, [pc, #516]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 8005fce:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8005fd2:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfb8      	it	lt
 8005fda:	425b      	neglt	r3, r3
 8005fdc:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fe8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 8005fec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ff0:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80061e4 <Servo_Control_CAN+0xb60>
 8005ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffc:	dd01      	ble.n	8006002 <Servo_Control_CAN+0x97e>
 8005ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80061e8 <Servo_Control_CAN+0xb64>)
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8006002:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800600a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600e:	d502      	bpl.n	8006016 <Servo_Control_CAN+0x992>
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8006016:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800601a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80061e4 <Servo_Control_CAN+0xb60>
 800601e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	dd01      	ble.n	800602c <Servo_Control_CAN+0x9a8>
 8006028:	4b6f      	ldr	r3, [pc, #444]	@ (80061e8 <Servo_Control_CAN+0xb64>)
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 800602c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006038:	d502      	bpl.n	8006040 <Servo_Control_CAN+0x9bc>
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8006040:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006048:	ee17 3a90 	vmov	r3, s15
 800604c:	121b      	asrs	r3, r3, #8
 800604e:	b2da      	uxtb	r2, r3
 8006050:	4b66      	ldr	r3, [pc, #408]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006052:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8006054:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800605c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006060:	793a      	ldrb	r2, [r7, #4]
 8006062:	4b62      	ldr	r3, [pc, #392]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006064:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8006066:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800606a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800606e:	ee17 3a90 	vmov	r3, s15
 8006072:	121b      	asrs	r3, r3, #8
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4b5d      	ldr	r3, [pc, #372]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006078:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 800607a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800607e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006082:	edc7 7a01 	vstr	s15, [r7, #4]
 8006086:	793a      	ldrb	r2, [r7, #4]
 8006088:	4b58      	ldr	r3, [pc, #352]	@ (80061ec <Servo_Control_CAN+0xb68>)
 800608a:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 800608c:	4b57      	ldr	r3, [pc, #348]	@ (80061ec <Servo_Control_CAN+0xb68>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f043 0308 	orr.w	r3, r3, #8
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4b55      	ldr	r3, [pc, #340]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006098:	701a      	strb	r2, [r3, #0]
			CLEAR_BIT(TxData[2],3);
 800609a:	4b54      	ldr	r3, [pc, #336]	@ (80061ec <Servo_Control_CAN+0xb68>)
 800609c:	789b      	ldrb	r3, [r3, #2]
 800609e:	f023 0308 	bic.w	r3, r3, #8
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	4b51      	ldr	r3, [pc, #324]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80060a6:	709a      	strb	r2, [r3, #2]
 80060a8:	e08d      	b.n	80061c6 <Servo_Control_CAN+0xb42>
		}
		else if(temp_k <= (-1) && board_config.Rockers.Rocker_X != 2048){
 80060aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80060ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80060b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ba:	f200 8084 	bhi.w	80061c6 <Servo_Control_CAN+0xb42>
 80060be:	4b45      	ldr	r3, [pc, #276]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 80060c0:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80060c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c8:	d07d      	beq.n	80061c6 <Servo_Control_CAN+0xb42>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_X-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 80060ca:	4b42      	ldr	r3, [pc, #264]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 80060cc:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80060d0:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfb8      	it	lt
 80060d8:	425b      	neglt	r3, r3
 80060da:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min  ;
 80060ea:	4b3a      	ldr	r3, [pc, #232]	@ (80061d4 <Servo_Control_CAN+0xb50>)
 80060ec:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 80060f0:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfb8      	it	lt
 80060f8:	425b      	neglt	r3, r3
 80060fa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006106:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 800610a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800610e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80061e4 <Servo_Control_CAN+0xb60>
 8006112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611a:	dd01      	ble.n	8006120 <Servo_Control_CAN+0xa9c>
 800611c:	4b32      	ldr	r3, [pc, #200]	@ (80061e8 <Servo_Control_CAN+0xb64>)
 800611e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 8006120:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612c:	d502      	bpl.n	8006134 <Servo_Control_CAN+0xab0>
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 8006134:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006138:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80061e4 <Servo_Control_CAN+0xb60>
 800613c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	dd01      	ble.n	800614a <Servo_Control_CAN+0xac6>
 8006146:	4b28      	ldr	r3, [pc, #160]	@ (80061e8 <Servo_Control_CAN+0xb64>)
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 800614a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800614e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	d502      	bpl.n	800615e <Servo_Control_CAN+0xada>
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 800615e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006166:	ee17 3a90 	vmov	r3, s15
 800616a:	121b      	asrs	r3, r3, #8
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4b1f      	ldr	r3, [pc, #124]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006170:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 8006172:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617a:	edc7 7a01 	vstr	s15, [r7, #4]
 800617e:	793a      	ldrb	r2, [r7, #4]
 8006180:	4b1a      	ldr	r3, [pc, #104]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006182:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 8006184:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800618c:	ee17 3a90 	vmov	r3, s15
 8006190:	121b      	asrs	r3, r3, #8
 8006192:	b2da      	uxtb	r2, r3
 8006194:	4b15      	ldr	r3, [pc, #84]	@ (80061ec <Servo_Control_CAN+0xb68>)
 8006196:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8006198:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800619c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80061a4:	793a      	ldrb	r2, [r7, #4]
 80061a6:	4b11      	ldr	r3, [pc, #68]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061a8:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 80061aa:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f043 0308 	orr.w	r3, r3, #8
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061b6:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 80061b8:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061ba:	789b      	ldrb	r3, [r3, #2]
 80061bc:	f043 0308 	orr.w	r3, r3, #8
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061c4:	709a      	strb	r2, [r3, #2]
		}
		CAN_TX_Message(TxData, length);
 80061c6:	7efb      	ldrb	r3, [r7, #27]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4808      	ldr	r0, [pc, #32]	@ (80061ec <Servo_Control_CAN+0xb68>)
 80061cc:	f7fd f97c 	bl	80034c8 <CAN_TX_Message>
		return ;
 80061d0:	e15c      	b.n	800648c <Servo_Control_CAN+0xe08>
 80061d2:	bf00      	nop
 80061d4:	200005d8 	.word	0x200005d8
 80061d8:	08015894 	.word	0x08015894
 80061dc:	0801589c 	.word	0x0801589c
 80061e0:	080158a4 	.word	0x080158a4
 80061e4:	44fa0000 	.word	0x44fa0000
 80061e8:	44fa0000 	.word	0x44fa0000
 80061ec:	20000ad4 	.word	0x20000ad4
	 }
	 else if(mode_flag == can_mode_rightdown){
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	f040 814a 	bne.w	800648c <Servo_Control_CAN+0xe08>
		temp_k = cmu_k((float)board_config.Rockers.Rocker_X,(float)board_config.Rockers.Rocker_Y);
 80061f8:	4ba6      	ldr	r3, [pc, #664]	@ (8006494 <Servo_Control_CAN+0xe10>)
 80061fa:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	4ba3      	ldr	r3, [pc, #652]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006208:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 800620c:	ee07 3a10 	vmov	s14, r3
 8006210:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006214:	eef0 0a47 	vmov.f32	s1, s14
 8006218:	eeb0 0a67 	vmov.f32	s0, s15
 800621c:	f000 f948 	bl	80064b0 <cmu_k>
 8006220:	ed87 0a05 	vstr	s0, [r7, #20]
		printf("X:%f\r\n",(float)board_config.Rockers.Rocker_X);
 8006224:	4b9b      	ldr	r3, [pc, #620]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006226:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	ee17 0a90 	vmov	r0, s15
 8006236:	f7fa f997 	bl	8000568 <__aeabi_f2d>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4896      	ldr	r0, [pc, #600]	@ (8006498 <Servo_Control_CAN+0xe14>)
 8006240:	f009 f96c 	bl	800f51c <iprintf>
		printf("Y:%f\r\n",(float)board_config.Rockers.Rocker_Y);
 8006244:	4b93      	ldr	r3, [pc, #588]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006246:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	ee17 0a90 	vmov	r0, s15
 8006256:	f7fa f987 	bl	8000568 <__aeabi_f2d>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	488f      	ldr	r0, [pc, #572]	@ (800649c <Servo_Control_CAN+0xe18>)
 8006260:	f009 f95c 	bl	800f51c <iprintf>
		printf("k:%f\r\n",temp_k);
 8006264:	6978      	ldr	r0, [r7, #20]
 8006266:	f7fa f97f 	bl	8000568 <__aeabi_f2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	488c      	ldr	r0, [pc, #560]	@ (80064a0 <Servo_Control_CAN+0xe1c>)
 8006270:	f009 f954 	bl	800f51c <iprintf>
		if(temp_k < 1){
 8006274:	edd7 7a05 	vldr	s15, [r7, #20]
 8006278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800627c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	d574      	bpl.n	8006370 <Servo_Control_CAN+0xcec>
			right_pwm=CAN_Duty_cycle_max - ((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) ;
 8006286:	4b83      	ldr	r3, [pc, #524]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006288:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800628c:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006298:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_Y)/(4096 - 0)) + CAN_Duty_cycle_min;
 800629c:	4b7d      	ldr	r3, [pc, #500]	@ (8006494 <Servo_Control_CAN+0xe10>)
 800629e:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 80062a2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 80062b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80062b6:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80064a4 <Servo_Control_CAN+0xe20>
 80062ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	dd01      	ble.n	80062c8 <Servo_Control_CAN+0xc44>
 80062c4:	4b78      	ldr	r3, [pc, #480]	@ (80064a8 <Servo_Control_CAN+0xe24>)
 80062c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 80062c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80062cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	d502      	bpl.n	80062dc <Servo_Control_CAN+0xc58>
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 80062dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80062e0:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80064a4 <Servo_Control_CAN+0xe20>
 80062e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	dd01      	ble.n	80062f2 <Servo_Control_CAN+0xc6e>
 80062ee:	4b6e      	ldr	r3, [pc, #440]	@ (80064a8 <Servo_Control_CAN+0xe24>)
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 80062f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80062f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fe:	d502      	bpl.n	8006306 <Servo_Control_CAN+0xc82>
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8006306:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800630a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800630e:	ee17 3a90 	vmov	r3, s15
 8006312:	121b      	asrs	r3, r3, #8
 8006314:	b2da      	uxtb	r2, r3
 8006316:	4b65      	ldr	r3, [pc, #404]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006318:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 800631a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800631e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006322:	edc7 7a01 	vstr	s15, [r7, #4]
 8006326:	793a      	ldrb	r2, [r7, #4]
 8006328:	4b60      	ldr	r3, [pc, #384]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800632a:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 800632c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006334:	ee17 3a90 	vmov	r3, s15
 8006338:	121b      	asrs	r3, r3, #8
 800633a:	b2da      	uxtb	r2, r3
 800633c:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800633e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8006340:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006348:	edc7 7a01 	vstr	s15, [r7, #4]
 800634c:	793a      	ldrb	r2, [r7, #4]
 800634e:	4b57      	ldr	r3, [pc, #348]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006350:	70da      	strb	r2, [r3, #3]
			CLEAR_BIT(TxData[0],3);
 8006352:	4b56      	ldr	r3, [pc, #344]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f023 0308 	bic.w	r3, r3, #8
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b53      	ldr	r3, [pc, #332]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800635e:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8006360:	4b52      	ldr	r3, [pc, #328]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006362:	789b      	ldrb	r3, [r3, #2]
 8006364:	f043 0308 	orr.w	r3, r3, #8
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b50      	ldr	r3, [pc, #320]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800636c:	709a      	strb	r2, [r3, #2]
 800636e:	e087      	b.n	8006480 <Servo_Control_CAN+0xdfc>
		}
		else if(temp_k >= 1 && board_config.Rockers.Rocker_X != 2048){
 8006370:	edd7 7a05 	vldr	s15, [r7, #20]
 8006374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006380:	db7e      	blt.n	8006480 <Servo_Control_CAN+0xdfc>
 8006382:	4b44      	ldr	r3, [pc, #272]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006384:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800638c:	d078      	beq.n	8006480 <Servo_Control_CAN+0xdfc>
			right_pwm=((4096 - CAN_Duty_cycle_min)*(4096-abs(board_config.Rockers.Rocker_Y-4096))/(4096 - 0)) + CAN_Duty_cycle_min;
 800638e:	4b41      	ldr	r3, [pc, #260]	@ (8006494 <Servo_Control_CAN+0xe10>)
 8006390:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8006394:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfb8      	it	lt
 800639c:	425b      	neglt	r3, r3
 800639e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			left_pwm=((4096 - CAN_Duty_cycle_min)*(4096-board_config.Rockers.Rocker_X)/(4096 - 0)) + CAN_Duty_cycle_min  ;
 80063ae:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <Servo_Control_CAN+0xe10>)
 80063b0:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80063b4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063c0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			if(left_pwm > 2000)left_pwm = 2000;
 80063c4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063c8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80064a4 <Servo_Control_CAN+0xe20>
 80063cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d4:	dd01      	ble.n	80063da <Servo_Control_CAN+0xd56>
 80063d6:	4b34      	ldr	r3, [pc, #208]	@ (80064a8 <Servo_Control_CAN+0xe24>)
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(left_pwm < 0)left_pwm = 0;
 80063da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	d502      	bpl.n	80063ee <Servo_Control_CAN+0xd6a>
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(right_pwm > 2000)right_pwm = 2000;
 80063ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80063f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80064a4 <Servo_Control_CAN+0xe20>
 80063f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fe:	dd01      	ble.n	8006404 <Servo_Control_CAN+0xd80>
 8006400:	4b29      	ldr	r3, [pc, #164]	@ (80064a8 <Servo_Control_CAN+0xe24>)
 8006402:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(right_pwm < 0)right_pwm = 0;
 8006404:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006410:	d502      	bpl.n	8006418 <Servo_Control_CAN+0xd94>
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28
			TxData[0] = ((int)left_pwm >> 8) & 0xff;	 	//高8位
 8006418:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800641c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006420:	ee17 3a90 	vmov	r3, s15
 8006424:	121b      	asrs	r3, r3, #8
 8006426:	b2da      	uxtb	r2, r3
 8006428:	4b20      	ldr	r3, [pc, #128]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800642a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 	(int)left_pwm & 0xff; 		//低8位
 800642c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006434:	edc7 7a01 	vstr	s15, [r7, #4]
 8006438:	793a      	ldrb	r2, [r7, #4]
 800643a:	4b1c      	ldr	r3, [pc, #112]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800643c:	705a      	strb	r2, [r3, #1]
			TxData[2] = ((int)right_pwm >> 8) & 0xff;	 	//高8位
 800643e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006446:	ee17 3a90 	vmov	r3, s15
 800644a:	121b      	asrs	r3, r3, #8
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4b17      	ldr	r3, [pc, #92]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006450:	709a      	strb	r2, [r3, #2]
			TxData[3] = 	(int)right_pwm & 0xff; 		//低8位
 8006452:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800645a:	edc7 7a01 	vstr	s15, [r7, #4]
 800645e:	793a      	ldrb	r2, [r7, #4]
 8006460:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006462:	70da      	strb	r2, [r3, #3]
			SET_BIT(TxData[0],3);
 8006464:	4b11      	ldr	r3, [pc, #68]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f043 0308 	orr.w	r3, r3, #8
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006470:	701a      	strb	r2, [r3, #0]
			SET_BIT(TxData[2],3);
 8006472:	4b0e      	ldr	r3, [pc, #56]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006474:	789b      	ldrb	r3, [r3, #2]
 8006476:	f043 0308 	orr.w	r3, r3, #8
 800647a:	b2da      	uxtb	r2, r3
 800647c:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <Servo_Control_CAN+0xe28>)
 800647e:	709a      	strb	r2, [r3, #2]
		}
		CAN_TX_Message(TxData, length);
 8006480:	7efb      	ldrb	r3, [r7, #27]
 8006482:	4619      	mov	r1, r3
 8006484:	4809      	ldr	r0, [pc, #36]	@ (80064ac <Servo_Control_CAN+0xe28>)
 8006486:	f7fd f81f 	bl	80034c8 <CAN_TX_Message>
		return ;
 800648a:	bf00      	nop
	 }
 }
 800648c:	3730      	adds	r7, #48	@ 0x30
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200005d8 	.word	0x200005d8
 8006498:	08015894 	.word	0x08015894
 800649c:	0801589c 	.word	0x0801589c
 80064a0:	080158a4 	.word	0x080158a4
 80064a4:	44fa0000 	.word	0x44fa0000
 80064a8:	44fa0000 	.word	0x44fa0000
 80064ac:	20000ad4 	.word	0x20000ad4

080064b0 <cmu_k>:

 float cmu_k(float x,float y){
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80064ba:	edc7 0a00 	vstr	s1, [r7]
	 if(x == 2048){
 80064be:	edd7 7a01 	vldr	s15, [r7, #4]
 80064c2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006504 <cmu_k+0x54>
 80064c6:	eef4 7a47 	vcmp.f32	s15, s14
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	d102      	bne.n	80064d6 <cmu_k+0x26>
		 return 0;
 80064d0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8006508 <cmu_k+0x58>
 80064d4:	e00d      	b.n	80064f2 <cmu_k+0x42>
	 }
     return ((y-2048)/(x-2048));
 80064d6:	edd7 7a00 	vldr	s15, [r7]
 80064da:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006504 <cmu_k+0x54>
 80064de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064e6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006504 <cmu_k+0x54>
 80064ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 }
 80064f2:	eef0 7a66 	vmov.f32	s15, s13
 80064f6:	eeb0 0a67 	vmov.f32	s0, s15
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	45000000 	.word	0x45000000
	...

08006510 <get_distance>:




 double get_distance(double lat1, double lng1, double lat2, double lng2)
 {
 8006510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006514:	b092      	sub	sp, #72	@ 0x48
 8006516:	af00      	add	r7, sp, #0
 8006518:	ed87 0b06 	vstr	d0, [r7, #24]
 800651c:	ed87 1b04 	vstr	d1, [r7, #16]
 8006520:	ed87 2b02 	vstr	d2, [r7, #8]
 8006524:	ed87 3b00 	vstr	d3, [r7]
 	double radLat1 = lat1 * PI / 180.0;   //角度1˚ = π / 180
 8006528:	a387      	add	r3, pc, #540	@ (adr r3, 8006748 <get_distance+0x238>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006532:	f7fa f871 	bl	8000618 <__aeabi_dmul>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	4b89      	ldr	r3, [pc, #548]	@ (8006768 <get_distance+0x258>)
 8006544:	f7fa f992 	bl	800086c <__aeabi_ddiv>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 	double radLat2 = lat2 * PI / 180.0;   //角度1˚ = π / 180
 8006550:	a37d      	add	r3, pc, #500	@ (adr r3, 8006748 <get_distance+0x238>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800655a:	f7fa f85d 	bl	8000618 <__aeabi_dmul>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	4b7f      	ldr	r3, [pc, #508]	@ (8006768 <get_distance+0x258>)
 800656c:	f7fa f97e 	bl	800086c <__aeabi_ddiv>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 	double a = radLat1 - radLat2;//纬度之差
 8006578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800657c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8006580:	f7f9 fe92 	bl	80002a8 <__aeabi_dsub>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 	double b = lng1 * PI / 180.0 - lng2* PI / 180.0;  //经度之差
 800658c:	a36e      	add	r3, pc, #440	@ (adr r3, 8006748 <get_distance+0x238>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006596:	f7fa f83f 	bl	8000618 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	4b70      	ldr	r3, [pc, #448]	@ (8006768 <get_distance+0x258>)
 80065a8:	f7fa f960 	bl	800086c <__aeabi_ddiv>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	a364      	add	r3, pc, #400	@ (adr r3, 8006748 <get_distance+0x238>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065be:	f7fa f82b 	bl	8000618 <__aeabi_dmul>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <get_distance+0x258>)
 80065d0:	f7fa f94c 	bl	800086c <__aeabi_ddiv>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7f9 fe64 	bl	80002a8 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 	double dst = 2 * asin((sqrt(pow(sin(a / 2), 2) + cos(radLat1) * cos(radLat2) * pow(sin(b / 2), 2))));
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80065f4:	f7fa f93a 	bl	800086c <__aeabi_ddiv>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	ec43 2b17 	vmov	d7, r2, r3
 8006600:	eeb0 0a47 	vmov.f32	s0, s14
 8006604:	eef0 0a67 	vmov.f32	s1, s15
 8006608:	f00c fb2e 	bl	8012c68 <sin>
 800660c:	eeb0 7a40 	vmov.f32	s14, s0
 8006610:	eef0 7a60 	vmov.f32	s15, s1
 8006614:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8006750 <get_distance+0x240>
 8006618:	eeb0 0a47 	vmov.f32	s0, s14
 800661c:	eef0 0a67 	vmov.f32	s1, s15
 8006620:	f00c fa28 	bl	8012a74 <pow>
 8006624:	ec59 8b10 	vmov	r8, r9, d0
 8006628:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800662c:	f00c fac0 	bl	8012bb0 <cos>
 8006630:	ec55 4b10 	vmov	r4, r5, d0
 8006634:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8006638:	f00c faba 	bl	8012bb0 <cos>
 800663c:	ec53 2b10 	vmov	r2, r3, d0
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7f9 ffe8 	bl	8000618 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4614      	mov	r4, r2
 800664e:	461d      	mov	r5, r3
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800665c:	f7fa f906 	bl	800086c <__aeabi_ddiv>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	ec43 2b17 	vmov	d7, r2, r3
 8006668:	eeb0 0a47 	vmov.f32	s0, s14
 800666c:	eef0 0a67 	vmov.f32	s1, s15
 8006670:	f00c fafa 	bl	8012c68 <sin>
 8006674:	eeb0 7a40 	vmov.f32	s14, s0
 8006678:	eef0 7a60 	vmov.f32	s15, s1
 800667c:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8006750 <get_distance+0x240>
 8006680:	eeb0 0a47 	vmov.f32	s0, s14
 8006684:	eef0 0a67 	vmov.f32	s1, s15
 8006688:	f00c f9f4 	bl	8012a74 <pow>
 800668c:	ec53 2b10 	vmov	r2, r3, d0
 8006690:	4620      	mov	r0, r4
 8006692:	4629      	mov	r1, r5
 8006694:	f7f9 ffc0 	bl	8000618 <__aeabi_dmul>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f7f9 fe04 	bl	80002ac <__adddf3>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	ec43 2b17 	vmov	d7, r2, r3
 80066ac:	eeb0 0a47 	vmov.f32	s0, s14
 80066b0:	eef0 0a67 	vmov.f32	s1, s15
 80066b4:	f00c fa4e 	bl	8012b54 <sqrt>
 80066b8:	eeb0 7a40 	vmov.f32	s14, s0
 80066bc:	eef0 7a60 	vmov.f32	s15, s1
 80066c0:	eeb0 0a47 	vmov.f32	s0, s14
 80066c4:	eef0 0a67 	vmov.f32	s1, s15
 80066c8:	f00c f970 	bl	80129ac <asin>
 80066cc:	ec51 0b10 	vmov	r0, r1, d0
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	f7f9 fdea 	bl	80002ac <__adddf3>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	dst = dst * EARTH_RADIUS;
 80066e0:	a31d      	add	r3, pc, #116	@ (adr r3, 8006758 <get_distance+0x248>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066ea:	f7f9 ff95 	bl	8000618 <__aeabi_dmul>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	dst = round(dst * 10000) / 10000;
 80066f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006760 <get_distance+0x250>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006700:	f7f9 ff8a 	bl	8000618 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	ec43 2b17 	vmov	d7, r2, r3
 800670c:	eeb0 0a47 	vmov.f32	s0, s14
 8006710:	eef0 0a67 	vmov.f32	s1, s15
 8006714:	f00c fbe2 	bl	8012edc <round>
 8006718:	ec51 0b10 	vmov	r0, r1, d0
 800671c:	a310      	add	r3, pc, #64	@ (adr r3, 8006760 <get_distance+0x250>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7fa f8a3 	bl	800086c <__aeabi_ddiv>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	return dst;
 800672e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006732:	ec43 2b17 	vmov	d7, r2, r3
 }
 8006736:	eeb0 0a47 	vmov.f32	s0, s14
 800673a:	eef0 0a67 	vmov.f32	s1, s15
 800673e:	3748      	adds	r7, #72	@ 0x48
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006746:	bf00      	nop
 8006748:	54524550 	.word	0x54524550
 800674c:	400921fb 	.word	0x400921fb
 8006750:	00000000 	.word	0x00000000
 8006754:	40000000 	.word	0x40000000
 8006758:	126e978d 	.word	0x126e978d
 800675c:	40b8ea23 	.word	0x40b8ea23
 8006760:	00000000 	.word	0x00000000
 8006764:	40c38800 	.word	0x40c38800
 8006768:	40668000 	.word	0x40668000

0800676c <PID_Init>:

#define AUTO 4


// 初始化PID控制器
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float min_output, float max_output) {
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	@ 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	61f8      	str	r0, [r7, #28]
 8006774:	ed87 0a06 	vstr	s0, [r7, #24]
 8006778:	edc7 0a05 	vstr	s1, [r7, #20]
 800677c:	ed87 1a04 	vstr	s2, [r7, #16]
 8006780:	edc7 1a03 	vstr	s3, [r7, #12]
 8006784:	ed87 2a02 	vstr	s4, [r7, #8]
 8006788:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	615a      	str	r2, [r3, #20]
    pid->min_output = min_output;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	61da      	str	r2, [r3, #28]
    pid->max_output = max_output;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	3724      	adds	r7, #36	@ 0x24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <PID_Update>:

// 更新PID控制器
float PID_Update(PIDController *pid, float measured_value, float dt) {
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	@ 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80067d8:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = pid->setpoint - measured_value;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	ed93 7a03 	vldr	s14, [r3, #12]
 80067e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80067e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ea:	edc7 7a06 	vstr	s15, [r7, #24]

    // 计算比例、积分和微分项
    float proportional = pid->Kp * error;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	edd3 7a00 	vldr	s15, [r3]
 80067f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80067f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fc:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += pid->Ki * error * dt;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	ed93 7a04 	vldr	s14, [r3, #16]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	edd3 6a01 	vldr	s13, [r3, #4]
 800680c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006810:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006814:	edd7 7a01 	vldr	s15, [r7, #4]
 8006818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800681c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = pid->Kd * (error - pid->previous_error) / dt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	ed93 7a02 	vldr	s14, [r3, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006832:	edd7 6a06 	vldr	s13, [r7, #24]
 8006836:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800683a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800683e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006846:	edc7 7a04 	vstr	s15, [r7, #16]

    // 计算总输出
    float output = proportional + pid->integral + derivative;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006850:	edd7 7a05 	vldr	s15, [r7, #20]
 8006854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006858:	ed97 7a04 	vldr	s14, [r7, #16]
 800685c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006860:	edc7 7a07 	vstr	s15, [r7, #28]

    // 防止输出超出范围
    if (output > pid->max_output) {
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	edd3 7a08 	vldr	s15, [r3, #32]
 800686a:	ed97 7a07 	vldr	s14, [r7, #28]
 800686e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006876:	dd03      	ble.n	8006880 <PID_Update+0xb4>
        output = pid->max_output;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	e00c      	b.n	800689a <PID_Update+0xce>
    } else if (output < pid->min_output) {
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	edd3 7a07 	vldr	s15, [r3, #28]
 8006886:	ed97 7a07 	vldr	s14, [r7, #28]
 800688a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	d502      	bpl.n	800689a <PID_Update+0xce>
        output = pid->min_output;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	61fb      	str	r3, [r7, #28]
    }

    // 积分抗饱和
    if (output == pid->max_output || output == pid->min_output) {
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	edd3 7a08 	vldr	s15, [r3, #32]
 80068a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80068a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80068a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ac:	d009      	beq.n	80068c2 <PID_Update+0xf6>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80068b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80068b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80068bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c0:	d112      	bne.n	80068e8 <PID_Update+0x11c>
        // 如果输出已经达到最大或最小值，停止积分项的累加
        pid->integral -= pid->Ki * error * dt;  // 取消本次积分累加
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80068ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80068d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80068da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // 更新上一次误差
    pid->previous_error = error;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	615a      	str	r2, [r3, #20]

    return output;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	ee07 3a90 	vmov	s15, r3
}
 80068f4:	eeb0 0a67 	vmov.f32	s0, s15
 80068f8:	3724      	adds	r7, #36	@ 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <reset_PID>:

void reset_PID(PIDController *pid) {
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f; // 重置积分器
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f; // 重置之前的误差
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	615a      	str	r2, [r3, #20]
    pid->last_input = 0.0f; // 重置最后一次输入
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	619a      	str	r2, [r3, #24]
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <calculate_bearing>:
#define TO_RAD (PI / 180.0)  // 度转弧度
#define TO_DEG (180.0 / PI)  // 弧度转度
#define MID_PWM 3000

// 计算目标方位角（假设已知当前位置和目标位置）
float calculate_bearing(double lat1, double lon1, double lat2, double lon2) {
 8006930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006934:	b096      	sub	sp, #88	@ 0x58
 8006936:	af00      	add	r7, sp, #0
 8006938:	ed87 0b06 	vstr	d0, [r7, #24]
 800693c:	ed87 1b04 	vstr	d1, [r7, #16]
 8006940:	ed87 2b02 	vstr	d2, [r7, #8]
 8006944:	ed87 3b00 	vstr	d3, [r7]
	double phi1 = lat1 * TO_RAD;
 8006948:	a364      	add	r3, pc, #400	@ (adr r3, 8006adc <calculate_bearing+0x1ac>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006952:	f7f9 fe61 	bl	8000618 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double phi2 = lat2 * TO_RAD;
 800695e:	a35f      	add	r3, pc, #380	@ (adr r3, 8006adc <calculate_bearing+0x1ac>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006968:	f7f9 fe56 	bl	8000618 <__aeabi_dmul>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double lambda1 = lon1 * TO_RAD;
 8006974:	a359      	add	r3, pc, #356	@ (adr r3, 8006adc <calculate_bearing+0x1ac>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800697e:	f7f9 fe4b 	bl	8000618 <__aeabi_dmul>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double lambda2 = lon2 * TO_RAD;
 800698a:	a354      	add	r3, pc, #336	@ (adr r3, 8006adc <calculate_bearing+0x1ac>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006994:	f7f9 fe40 	bl	8000618 <__aeabi_dmul>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	// 使用球面三角公式计算方位角
	double y = sin(lambda2 - lambda1) * cos(phi2);
 80069a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80069a8:	f7f9 fc7e 	bl	80002a8 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	ec43 2b17 	vmov	d7, r2, r3
 80069b4:	eeb0 0a47 	vmov.f32	s0, s14
 80069b8:	eef0 0a67 	vmov.f32	s1, s15
 80069bc:	f00c f954 	bl	8012c68 <sin>
 80069c0:	ec55 4b10 	vmov	r4, r5, d0
 80069c4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80069c8:	f00c f8f2 	bl	8012bb0 <cos>
 80069cc:	ec53 2b10 	vmov	r2, r3, d0
 80069d0:	4620      	mov	r0, r4
 80069d2:	4629      	mov	r1, r5
 80069d4:	f7f9 fe20 	bl	8000618 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double x = cos(phi1) * sin(phi2) -
 80069e0:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 80069e4:	f00c f8e4 	bl	8012bb0 <cos>
 80069e8:	ec55 4b10 	vmov	r4, r5, d0
 80069ec:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80069f0:	f00c f93a 	bl	8012c68 <sin>
 80069f4:	ec53 2b10 	vmov	r2, r3, d0
 80069f8:	4620      	mov	r0, r4
 80069fa:	4629      	mov	r1, r5
 80069fc:	f7f9 fe0c 	bl	8000618 <__aeabi_dmul>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
			   sin(phi1) * cos(phi2) * cos(lambda2 - lambda1);
 8006a08:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8006a0c:	f00c f92c 	bl	8012c68 <sin>
 8006a10:	ec59 8b10 	vmov	r8, r9, d0
 8006a14:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8006a18:	f00c f8ca 	bl	8012bb0 <cos>
 8006a1c:	ec53 2b10 	vmov	r2, r3, d0
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7f9 fdf8 	bl	8000618 <__aeabi_dmul>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4690      	mov	r8, r2
 8006a2e:	4699      	mov	r9, r3
 8006a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006a34:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006a38:	f7f9 fc36 	bl	80002a8 <__aeabi_dsub>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	ec43 2b17 	vmov	d7, r2, r3
 8006a44:	eeb0 0a47 	vmov.f32	s0, s14
 8006a48:	eef0 0a67 	vmov.f32	s1, s15
 8006a4c:	f00c f8b0 	bl	8012bb0 <cos>
 8006a50:	ec53 2b10 	vmov	r2, r3, d0
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7f9 fdde 	bl	8000618 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
	double x = cos(phi1) * sin(phi2) -
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7f9 fc20 	bl	80002a8 <__aeabi_dsub>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// 计算方位角并将其转换为度数
	double bearing = atan2(y, x) * TO_DEG;
 8006a70:	ed97 1b08 	vldr	d1, [r7, #32]
 8006a74:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8006a78:	f00b ffcc 	bl	8012a14 <atan2>
 8006a7c:	ec51 0b10 	vmov	r0, r1, d0
 8006a80:	a318      	add	r3, pc, #96	@ (adr r3, 8006ae4 <calculate_bearing+0x1b4>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fdc7 	bl	8000618 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	// 调整方位角在0到360度之间
	if (bearing < 0.0) {
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006a9e:	f7fa f82d 	bl	8000afc <__aeabi_dcmplt>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <calculate_bearing+0x18e>
		bearing += 360.0;
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <calculate_bearing+0x1a8>)
 8006aae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006ab2:	f7f9 fbfb 	bl	80002ac <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	}

	return bearing;
 8006abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006ac2:	f7fa f8a1 	bl	8000c08 <__aeabi_d2f>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	ee07 3a90 	vmov	s15, r3
}
 8006acc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad0:	3758      	adds	r7, #88	@ 0x58
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ad8:	40768000 	.word	0x40768000
 8006adc:	a2529d39 	.word	0xa2529d39
 8006ae0:	3f91df46 	.word	0x3f91df46
 8006ae4:	1a63c1f8 	.word	0x1a63c1f8
 8006ae8:	404ca5dc 	.word	0x404ca5dc
 8006aec:	00000000 	.word	0x00000000

08006af0 <PID_Motor_Contorl>:
#define PWM_MIN 3000
#define PWM_MAX 3600

/*113.4891718°，纬度22.3088105°*/

void PID_Motor_Contorl(void){
 8006af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006af4:	ed2d 8b02 	vpush	{d8}
 8006af8:	b0a0      	sub	sp, #128	@ 0x80
 8006afa:	af06      	add	r7, sp, #24
	int key;
	int nou_number = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	667b      	str	r3, [r7, #100]	@ 0x64
	float current_heading_before = 0.0;
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	653b      	str	r3, [r7, #80]	@ 0x50
	float current_heading = 0.0;
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double ret[2];
	double ret_target[2];
	double ret_last[2];
	float heading_error = 0.0;
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
	float target_bearing = 0.0;
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	647b      	str	r3, [r7, #68]	@ 0x44
	float correction = 0.0;
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	663b      	str	r3, [r7, #96]	@ 0x60
	float left_pwm = 0.0;
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float right_pwm = 0.0;
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	65bb      	str	r3, [r7, #88]	@ 0x58
	float board_distance = 0.0;
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	643b      	str	r3, [r7, #64]	@ 0x40
	float board_distance_last = 0.0;
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float return_heading = 0.0;
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	int return_flag = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	637b      	str	r3, [r7, #52]	@ 0x34
	 // 调整这些参数以适应你的系统
	while (1) {
		// 获取当前控制方式
		key = Key_Switch();
 8006b40:	f7fa faca 	bl	80010d8 <Key_Switch>
 8006b44:	6338      	str	r0, [r7, #48]	@ 0x30
		Data_Collect();
 8006b46:	f7fa fabd 	bl	80010c4 <Data_Collect>
		//Update_Data(ret[0],ret[1],ret_target[0],ret_target[1],current_heading,left_pwm,right_pwm,board_distance,heading_error,target_bearing);
		switch(Auto_Status){
 8006b4a:	4b85      	ldr	r3, [pc, #532]	@ (8006d60 <PID_Motor_Contorl+0x270>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <PID_Motor_Contorl+0x6a>
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	f000 82a5 	beq.w	80070a2 <PID_Motor_Contorl+0x5b2>
		case Auto_Return:
			if(key == AUTO && Auto_Start_Flag == AUTO_START){

			}
			break;
		default:break;
 8006b58:	e2a6      	b.n	80070a8 <PID_Motor_Contorl+0x5b8>
			if(key == AUTO && Auto_Start_Flag == AUTO_START && board_config.gps.gps_num > 0){
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	f040 829c 	bne.w	800709a <PID_Motor_Contorl+0x5aa>
 8006b62:	4b80      	ldr	r3, [pc, #512]	@ (8006d64 <PID_Motor_Contorl+0x274>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f040 8297 	bne.w	800709a <PID_Motor_Contorl+0x5aa>
 8006b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006b6e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f340 8291 	ble.w	800709a <PID_Motor_Contorl+0x5aa>
				current_heading = get_heading_from_imu();
 8006b78:	f000 fac6 	bl	8007108 <get_heading_from_imu>
 8006b7c:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
				wgs84_to_bd09(board_config.gps.lon_deg, board_config.gps.lat_deg, ret);
 8006b80:	4b79      	ldr	r3, [pc, #484]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006b82:	ed93 7bbe 	vldr	d7, [r3, #760]	@ 0x2f8
 8006b86:	4b78      	ldr	r3, [pc, #480]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006b88:	ed93 6bbc 	vldr	d6, [r3, #752]	@ 0x2f0
 8006b8c:	f107 0320 	add.w	r3, r7, #32
 8006b90:	4618      	mov	r0, r3
 8006b92:	eeb0 1a46 	vmov.f32	s2, s12
 8006b96:	eef0 1a66 	vmov.f32	s3, s13
 8006b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8006b9e:	eef0 0a67 	vmov.f32	s1, s15
 8006ba2:	f7fd fb9d 	bl	80042e0 <wgs84_to_bd09>
				wgs84_to_bd09(atof(board_config.gps.Target_gpslon[nou_number]), atof(board_config.gps.Target_gpslat[nou_number]),ret_last);
 8006ba6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ba8:	4613      	mov	r3, r2
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006bb4:	4a6c      	ldr	r2, [pc, #432]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3306      	adds	r3, #6
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f006 fe62 	bl	800d884 <atof>
 8006bc0:	eeb0 8a40 	vmov.f32	s16, s0
 8006bc4:	eef0 8a60 	vmov.f32	s17, s1
 8006bc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bca:	4613      	mov	r3, r2
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	3358      	adds	r3, #88	@ 0x58
 8006bd4:	4a64      	ldr	r2, [pc, #400]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3302      	adds	r3, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f006 fe52 	bl	800d884 <atof>
 8006be0:	eeb0 7a40 	vmov.f32	s14, s0
 8006be4:	eef0 7a60 	vmov.f32	s15, s1
 8006be8:	463b      	mov	r3, r7
 8006bea:	4618      	mov	r0, r3
 8006bec:	eeb0 1a47 	vmov.f32	s2, s14
 8006bf0:	eef0 1a67 	vmov.f32	s3, s15
 8006bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf8:	eef0 0a68 	vmov.f32	s1, s17
 8006bfc:	f7fd fb70 	bl	80042e0 <wgs84_to_bd09>
				wgs84_to_bd09(board_config.gps.Goal_Lon, board_config.gps.Goal_Lat, ret_target);
 8006c00:	4b59      	ldr	r3, [pc, #356]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006c02:	ed93 7bc2 	vldr	d7, [r3, #776]	@ 0x308
 8006c06:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <PID_Motor_Contorl+0x278>)
 8006c08:	ed93 6bc0 	vldr	d6, [r3, #768]	@ 0x300
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	4618      	mov	r0, r3
 8006c12:	eeb0 1a46 	vmov.f32	s2, s12
 8006c16:	eef0 1a66 	vmov.f32	s3, s13
 8006c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8006c1e:	eef0 0a67 	vmov.f32	s1, s15
 8006c22:	f7fd fb5d 	bl	80042e0 <wgs84_to_bd09>
				target_bearing = calculate_bearing(ret[1], ret[0],ret_target[1],ret_target[0]);
 8006c26:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8006c2a:	ed97 6b08 	vldr	d6, [r7, #32]
 8006c2e:	ed97 5b06 	vldr	d5, [r7, #24]
 8006c32:	ed97 4b04 	vldr	d4, [r7, #16]
 8006c36:	eeb0 3a44 	vmov.f32	s6, s8
 8006c3a:	eef0 3a64 	vmov.f32	s7, s9
 8006c3e:	eeb0 2a45 	vmov.f32	s4, s10
 8006c42:	eef0 2a65 	vmov.f32	s5, s11
 8006c46:	eeb0 1a46 	vmov.f32	s2, s12
 8006c4a:	eef0 1a66 	vmov.f32	s3, s13
 8006c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8006c52:	eef0 0a67 	vmov.f32	s1, s15
 8006c56:	f7ff fe6b 	bl	8006930 <calculate_bearing>
 8006c5a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
				heading_error = fmod(target_bearing - current_heading + 180.0f, 360.0f) - 180.0f;
 8006c5e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8006c62:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8006c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c6a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006d6c <PID_Motor_Contorl+0x27c>
 8006c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c72:	ee17 0a90 	vmov	r0, s15
 8006c76:	f7f9 fc77 	bl	8000568 <__aeabi_f2d>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8006d58 <PID_Motor_Contorl+0x268>
 8006c82:	ec43 2b10 	vmov	d0, r2, r3
 8006c86:	f00b fec7 	bl	8012a18 <fmod>
 8006c8a:	ec51 0b10 	vmov	r0, r1, d0
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	4b37      	ldr	r3, [pc, #220]	@ (8006d70 <PID_Motor_Contorl+0x280>)
 8006c94:	f7f9 fb08 	bl	80002a8 <__aeabi_dsub>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f7f9 ffb2 	bl	8000c08 <__aeabi_d2f>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
				if(abs(heading_error) >= 30.0 && abs(heading_error) <= 45.0){
 8006ca8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cb0:	ee17 3a90 	vmov	r3, s15
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfb8      	it	lt
 8006cb8:	425b      	neglt	r3, r3
 8006cba:	2b1d      	cmp	r3, #29
 8006cbc:	dd29      	ble.n	8006d12 <PID_Motor_Contorl+0x222>
 8006cbe:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cc6:	ee17 3a90 	vmov	r3, s15
 8006cca:	f113 0f2d 	cmn.w	r3, #45	@ 0x2d
 8006cce:	db20      	blt.n	8006d12 <PID_Motor_Contorl+0x222>
 8006cd0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cd8:	ee17 3a90 	vmov	r3, s15
 8006cdc:	2b2d      	cmp	r3, #45	@ 0x2d
 8006cde:	dc18      	bgt.n	8006d12 <PID_Motor_Contorl+0x222>
					if(heading_error < 0.0){
 8006ce0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	d504      	bpl.n	8006cf8 <PID_Motor_Contorl+0x208>
						left_pwm = 2400;  // 中间值3000，加上负修正
 8006cee:	4b21      	ldr	r3, [pc, #132]	@ (8006d74 <PID_Motor_Contorl+0x284>)
 8006cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
						right_pwm = 3600;  // 中间值3000，加上正修正
 8006cf2:	4b21      	ldr	r3, [pc, #132]	@ (8006d78 <PID_Motor_Contorl+0x288>)
 8006cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
					if(heading_error < 0.0){
 8006cf6:	e084      	b.n	8006e02 <PID_Motor_Contorl+0x312>
					}else if(heading_error >= 0.0){
 8006cf8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d04:	da00      	bge.n	8006d08 <PID_Motor_Contorl+0x218>
					if(heading_error < 0.0){
 8006d06:	e07c      	b.n	8006e02 <PID_Motor_Contorl+0x312>
						left_pwm = 3600;  // 中间值3000，加上负修正
 8006d08:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <PID_Motor_Contorl+0x288>)
 8006d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
						right_pwm = 2400;  // 中间值3000，加上正修正
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <PID_Motor_Contorl+0x284>)
 8006d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
					if(heading_error < 0.0){
 8006d10:	e077      	b.n	8006e02 <PID_Motor_Contorl+0x312>
				else if(abs(heading_error) > 45.0){
 8006d12:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d1a:	ee17 3a90 	vmov	r3, s15
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfb8      	it	lt
 8006d22:	425b      	neglt	r3, r3
 8006d24:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d26:	dd39      	ble.n	8006d9c <PID_Motor_Contorl+0x2ac>
					if(heading_error < 0.0){
 8006d28:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d34:	d504      	bpl.n	8006d40 <PID_Motor_Contorl+0x250>
						left_pwm = 1800;  // 中间值3000，加上负修正
 8006d36:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <PID_Motor_Contorl+0x28c>)
 8006d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
						right_pwm = 4200;  // 中间值3000，加上正修正
 8006d3a:	4b11      	ldr	r3, [pc, #68]	@ (8006d80 <PID_Motor_Contorl+0x290>)
 8006d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d3e:	e060      	b.n	8006e02 <PID_Motor_Contorl+0x312>
					}else if(heading_error >= 0.0){
 8006d40:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8006d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	db59      	blt.n	8006e02 <PID_Motor_Contorl+0x312>
						left_pwm = 4200;  // 中间值3000，加上负修正
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <PID_Motor_Contorl+0x290>)
 8006d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
						right_pwm = 1800;  // 中间值3000，加上正修正
 8006d52:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <PID_Motor_Contorl+0x28c>)
 8006d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d56:	e054      	b.n	8006e02 <PID_Motor_Contorl+0x312>
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	40768000 	.word	0x40768000
 8006d60:	20000ac8 	.word	0x20000ac8
 8006d64:	20000ac5 	.word	0x20000ac5
 8006d68:	200005d8 	.word	0x200005d8
 8006d6c:	43340000 	.word	0x43340000
 8006d70:	40668000 	.word	0x40668000
 8006d74:	45160000 	.word	0x45160000
 8006d78:	45610000 	.word	0x45610000
 8006d7c:	44e10000 	.word	0x44e10000
 8006d80:	45834000 	.word	0x45834000
 8006d84:	43020000 	.word	0x43020000
 8006d88:	c3020000 	.word	0xc3020000
 8006d8c:	3fe66666 	.word	0x3fe66666
 8006d90:	3f8ccccd 	.word	0x3f8ccccd
 8006d94:	3d99999a 	.word	0x3d99999a
 8006d98:	00000000 	.word	0x00000000
					PID_Init(&heading_pid, 1.8f, 1.1f, 0.075f, 0.0f, -130.0f, 130.0f);
 8006d9c:	ed5f 2a07 	vldr	s5, [pc, #-28]	@ 8006d84 <PID_Motor_Contorl+0x294>
 8006da0:	ed1f 2a07 	vldr	s4, [pc, #-28]	@ 8006d88 <PID_Motor_Contorl+0x298>
 8006da4:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 8006d98 <PID_Motor_Contorl+0x2a8>
 8006da8:	ed1f 1a06 	vldr	s2, [pc, #-24]	@ 8006d94 <PID_Motor_Contorl+0x2a4>
 8006dac:	ed5f 0a08 	vldr	s1, [pc, #-32]	@ 8006d90 <PID_Motor_Contorl+0x2a0>
 8006db0:	ed1f 0a0a 	vldr	s0, [pc, #-40]	@ 8006d8c <PID_Motor_Contorl+0x29c>
 8006db4:	48c2      	ldr	r0, [pc, #776]	@ (80070c0 <PID_Motor_Contorl+0x5d0>)
 8006db6:	f7ff fcd9 	bl	800676c <PID_Init>
					correction = PID_Update(&heading_pid, heading_error, dt);
 8006dba:	4bc2      	ldr	r3, [pc, #776]	@ (80070c4 <PID_Motor_Contorl+0x5d4>)
 8006dbc:	edd3 7a00 	vldr	s15, [r3]
 8006dc0:	eef0 0a67 	vmov.f32	s1, s15
 8006dc4:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8006dc8:	48bd      	ldr	r0, [pc, #756]	@ (80070c0 <PID_Motor_Contorl+0x5d0>)
 8006dca:	f7ff fcff 	bl	80067cc <PID_Update>
 8006dce:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
					left_pwm = (uint32_t)(3600.0f - correction);  // 中间值3000，加上负修正
 8006dd2:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 80070c8 <PID_Motor_Contorl+0x5d8>
 8006dd6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
					right_pwm = (uint32_t)(3600.0f + correction);  // 中间值3000，加上正修正
 8006dea:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006dee:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80070c8 <PID_Motor_Contorl+0x5d8>
 8006df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
				if (left_pwm > 4200) left_pwm = 4200;
 8006e02:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006e06:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80070cc <PID_Motor_Contorl+0x5dc>
 8006e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e12:	dd01      	ble.n	8006e18 <PID_Motor_Contorl+0x328>
 8006e14:	4bae      	ldr	r3, [pc, #696]	@ (80070d0 <PID_Motor_Contorl+0x5e0>)
 8006e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (left_pwm < 1800) left_pwm = 1800;
 8006e18:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006e1c:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80070d4 <PID_Motor_Contorl+0x5e4>
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d501      	bpl.n	8006e2e <PID_Motor_Contorl+0x33e>
 8006e2a:	4bab      	ldr	r3, [pc, #684]	@ (80070d8 <PID_Motor_Contorl+0x5e8>)
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (right_pwm > 4200) right_pwm = 4200;
 8006e2e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e32:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80070cc <PID_Motor_Contorl+0x5dc>
 8006e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	dd01      	ble.n	8006e44 <PID_Motor_Contorl+0x354>
 8006e40:	4ba3      	ldr	r3, [pc, #652]	@ (80070d0 <PID_Motor_Contorl+0x5e0>)
 8006e42:	65bb      	str	r3, [r7, #88]	@ 0x58
				if (right_pwm < 1800) right_pwm = 1800;
 8006e44:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e48:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80070d4 <PID_Motor_Contorl+0x5e4>
 8006e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	d501      	bpl.n	8006e5a <PID_Motor_Contorl+0x36a>
 8006e56:	4ba0      	ldr	r3, [pc, #640]	@ (80070d8 <PID_Motor_Contorl+0x5e8>)
 8006e58:	65bb      	str	r3, [r7, #88]	@ 0x58
				board_distance = get_distance(ret_target[1], ret_target[0], ret[1], ret[0]);
 8006e5a:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e5e:	ed97 6b04 	vldr	d6, [r7, #16]
 8006e62:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8006e66:	ed97 4b08 	vldr	d4, [r7, #32]
 8006e6a:	eeb0 3a44 	vmov.f32	s6, s8
 8006e6e:	eef0 3a64 	vmov.f32	s7, s9
 8006e72:	eeb0 2a45 	vmov.f32	s4, s10
 8006e76:	eef0 2a65 	vmov.f32	s5, s11
 8006e7a:	eeb0 1a46 	vmov.f32	s2, s12
 8006e7e:	eef0 1a66 	vmov.f32	s3, s13
 8006e82:	eeb0 0a47 	vmov.f32	s0, s14
 8006e86:	eef0 0a67 	vmov.f32	s1, s15
 8006e8a:	f7ff fb41 	bl	8006510 <get_distance>
 8006e8e:	ec53 2b10 	vmov	r2, r3, d0
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f7f9 feb7 	bl	8000c08 <__aeabi_d2f>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	643b      	str	r3, [r7, #64]	@ 0x40
				board_distance_last = get_distance(ret_last[1], ret_last[0], ret[1], ret[0]);
 8006e9e:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ea2:	ed97 6b00 	vldr	d6, [r7]
 8006ea6:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8006eaa:	ed97 4b08 	vldr	d4, [r7, #32]
 8006eae:	eeb0 3a44 	vmov.f32	s6, s8
 8006eb2:	eef0 3a64 	vmov.f32	s7, s9
 8006eb6:	eeb0 2a45 	vmov.f32	s4, s10
 8006eba:	eef0 2a65 	vmov.f32	s5, s11
 8006ebe:	eeb0 1a46 	vmov.f32	s2, s12
 8006ec2:	eef0 1a66 	vmov.f32	s3, s13
 8006ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8006eca:	eef0 0a67 	vmov.f32	s1, s15
 8006ece:	f7ff fb1f 	bl	8006510 <get_distance>
 8006ed2:	ec53 2b10 	vmov	r2, r3, d0
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7f9 fe95 	bl	8000c08 <__aeabi_d2f>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
				if (board_distance < 0.01  && board_distance_last > 0.008) {
 8006ee2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006ee4:	f7f9 fb40 	bl	8000568 <__aeabi_f2d>
 8006ee8:	a371      	add	r3, pc, #452	@ (adr r3, 80070b0 <PID_Motor_Contorl+0x5c0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 fe05 	bl	8000afc <__aeabi_dcmplt>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01f      	beq.n	8006f38 <PID_Motor_Contorl+0x448>
 8006ef8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006efa:	f7f9 fb35 	bl	8000568 <__aeabi_f2d>
 8006efe:	a36e      	add	r3, pc, #440	@ (adr r3, 80070b8 <PID_Motor_Contorl+0x5c8>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fe18 	bl	8000b38 <__aeabi_dcmpgt>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d014      	beq.n	8006f38 <PID_Motor_Contorl+0x448>
					if(nou_number < board_config.gps.gps_num){
 8006f0e:	4b73      	ldr	r3, [pc, #460]	@ (80070dc <PID_Motor_Contorl+0x5ec>)
 8006f10:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8006f14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f16:	429a      	cmp	r2, r3
 8006f18:	da03      	bge.n	8006f22 <PID_Motor_Contorl+0x432>
						nou_number++;
 8006f1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	667b      	str	r3, [r7, #100]	@ 0x64
					if(nou_number < board_config.gps.gps_num){
 8006f20:	e05e      	b.n	8006fe0 <PID_Motor_Contorl+0x4f0>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2800);
 8006f22:	4b6f      	ldr	r3, [pc, #444]	@ (80070e0 <PID_Motor_Contorl+0x5f0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8006f2a:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2800);
 8006f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80070e4 <PID_Motor_Contorl+0x5f4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 622f 	mov.w	r2, #2800	@ 0xaf0
 8006f34:	641a      	str	r2, [r3, #64]	@ 0x40
					if(nou_number < board_config.gps.gps_num){
 8006f36:	e053      	b.n	8006fe0 <PID_Motor_Contorl+0x4f0>
				else if(board_distance <= 0.008){
 8006f38:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006f3a:	f7f9 fb15 	bl	8000568 <__aeabi_f2d>
 8006f3e:	a35e      	add	r3, pc, #376	@ (adr r3, 80070b8 <PID_Motor_Contorl+0x5c8>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 fde4 	bl	8000b10 <__aeabi_dcmple>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d036      	beq.n	8006fbc <PID_Motor_Contorl+0x4cc>
					for(int i = 0 ; i < 6 ; i++){
 8006f4e:	2300      	movs	r3, #0
 8006f50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f52:	e01f      	b.n	8006f94 <PID_Motor_Contorl+0x4a4>
						sprintf(board_config.gps.Target_gpslat[i],"%s","0.00");
 8006f54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f56:	4613      	mov	r3, r2
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	3358      	adds	r3, #88	@ 0x58
 8006f60:	4a5e      	ldr	r2, [pc, #376]	@ (80070dc <PID_Motor_Contorl+0x5ec>)
 8006f62:	4413      	add	r3, r2
 8006f64:	3302      	adds	r3, #2
 8006f66:	4a60      	ldr	r2, [pc, #384]	@ (80070e8 <PID_Motor_Contorl+0x5f8>)
 8006f68:	4960      	ldr	r1, [pc, #384]	@ (80070ec <PID_Motor_Contorl+0x5fc>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f008 fb46 	bl	800f5fc <siprintf>
						sprintf(board_config.gps.Target_gpslon[i],"%s","0.00");
 8006f70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f72:	4613      	mov	r3, r2
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006f7e:	4a57      	ldr	r2, [pc, #348]	@ (80070dc <PID_Motor_Contorl+0x5ec>)
 8006f80:	4413      	add	r3, r2
 8006f82:	3306      	adds	r3, #6
 8006f84:	4a58      	ldr	r2, [pc, #352]	@ (80070e8 <PID_Motor_Contorl+0x5f8>)
 8006f86:	4959      	ldr	r1, [pc, #356]	@ (80070ec <PID_Motor_Contorl+0x5fc>)
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f008 fb37 	bl	800f5fc <siprintf>
					for(int i = 0 ; i < 6 ; i++){
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f90:	3301      	adds	r3, #1
 8006f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	dddc      	ble.n	8006f54 <PID_Motor_Contorl+0x464>
					nou_number = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	667b      	str	r3, [r7, #100]	@ 0x64
					board_config.gps.gps_num = 0;
 8006f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80070dc <PID_Motor_Contorl+0x5ec>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8006fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80070e0 <PID_Motor_Contorl+0x5f0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006fae:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 3000);
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80070e4 <PID_Motor_Contorl+0x5f4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006fb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8006fba:	e011      	b.n	8006fe0 <PID_Motor_Contorl+0x4f0>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, left_pwm);  // 基础占空比加上修正
 8006fbc:	4b48      	ldr	r3, [pc, #288]	@ (80070e0 <PID_Motor_Contorl+0x5f0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc8:	ee17 2a90 	vmov	r2, s15
 8006fcc:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, right_pwm);  // 基础占空比加上修正
 8006fce:	4b45      	ldr	r3, [pc, #276]	@ (80070e4 <PID_Motor_Contorl+0x5f4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fda:	ee17 2a90 	vmov	r2, s15
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40
				printf("current_heading:%f  target_bearing:%f  heading_error:%f\r\n",current_heading,target_bearing,heading_error);
 8006fe0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006fe2:	f7f9 fac1 	bl	8000568 <__aeabi_f2d>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	4689      	mov	r9, r1
 8006fea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006fec:	f7f9 fabc 	bl	8000568 <__aeabi_f2d>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8006ff6:	f7f9 fab7 	bl	8000568 <__aeabi_f2d>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007002:	e9cd 4500 	strd	r4, r5, [sp]
 8007006:	4642      	mov	r2, r8
 8007008:	464b      	mov	r3, r9
 800700a:	4839      	ldr	r0, [pc, #228]	@ (80070f0 <PID_Motor_Contorl+0x600>)
 800700c:	f008 fa86 	bl	800f51c <iprintf>
				printf("%f,%f ------------>%f,%f\r\n",ret[0],ret[1],ret_target[0],ret_target[1]);
 8007010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007018:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800701c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007020:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007028:	e9cd 2300 	strd	r2, r3, [sp]
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	4830      	ldr	r0, [pc, #192]	@ (80070f4 <PID_Motor_Contorl+0x604>)
 8007032:	f008 fa73 	bl	800f51c <iprintf>
				printf("correction:%f  left_pwm:%f  right_pwm:%f\r\n",correction,left_pwm,right_pwm);
 8007036:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007038:	f7f9 fa96 	bl	8000568 <__aeabi_f2d>
 800703c:	4680      	mov	r8, r0
 800703e:	4689      	mov	r9, r1
 8007040:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007042:	f7f9 fa91 	bl	8000568 <__aeabi_f2d>
 8007046:	4604      	mov	r4, r0
 8007048:	460d      	mov	r5, r1
 800704a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800704c:	f7f9 fa8c 	bl	8000568 <__aeabi_f2d>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007058:	e9cd 4500 	strd	r4, r5, [sp]
 800705c:	4642      	mov	r2, r8
 800705e:	464b      	mov	r3, r9
 8007060:	4825      	ldr	r0, [pc, #148]	@ (80070f8 <PID_Motor_Contorl+0x608>)
 8007062:	f008 fa5b 	bl	800f51c <iprintf>
				printf("distance:%fKm\r\n",board_distance);
 8007066:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007068:	f7f9 fa7e 	bl	8000568 <__aeabi_f2d>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4822      	ldr	r0, [pc, #136]	@ (80070fc <PID_Motor_Contorl+0x60c>)
 8007072:	f008 fa53 	bl	800f51c <iprintf>
				printf("\r\n");
 8007076:	4822      	ldr	r0, [pc, #136]	@ (8007100 <PID_Motor_Contorl+0x610>)
 8007078:	f008 fab8 	bl	800f5ec <puts>
				HAL_Delay((uint32_t)(dt * 1000));
 800707c:	4b11      	ldr	r3, [pc, #68]	@ (80070c4 <PID_Motor_Contorl+0x5d4>)
 800707e:	edd3 7a00 	vldr	s15, [r3]
 8007082:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8007104 <PID_Motor_Contorl+0x614>
 8007086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 0a90 	vmov	r0, s15
 8007092:	f002 f90b 	bl	80092ac <HAL_Delay>
			if(key == AUTO && Auto_Start_Flag == AUTO_START && board_config.gps.gps_num > 0){
 8007096:	bf00      	nop
			break;
 8007098:	e006      	b.n	80070a8 <PID_Motor_Contorl+0x5b8>
				reset_PID(&heading_pid);
 800709a:	4809      	ldr	r0, [pc, #36]	@ (80070c0 <PID_Motor_Contorl+0x5d0>)
 800709c:	f7ff fc31 	bl	8006902 <reset_PID>
			break;
 80070a0:	e002      	b.n	80070a8 <PID_Motor_Contorl+0x5b8>
			if(key == AUTO && Auto_Start_Flag == AUTO_START){
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b04      	cmp	r3, #4
			break;
 80070a6:	bf00      	nop
		key = Key_Switch();
 80070a8:	e54a      	b.n	8006b40 <PID_Motor_Contorl+0x50>
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w
 80070b0:	47ae147b 	.word	0x47ae147b
 80070b4:	3f847ae1 	.word	0x3f847ae1
 80070b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80070bc:	3f80624d 	.word	0x3f80624d
 80070c0:	200009a0 	.word	0x200009a0
 80070c4:	20000ad0 	.word	0x20000ad0
 80070c8:	45610000 	.word	0x45610000
 80070cc:	45834000 	.word	0x45834000
 80070d0:	45834000 	.word	0x45834000
 80070d4:	44e10000 	.word	0x44e10000
 80070d8:	44e10000 	.word	0x44e10000
 80070dc:	200005d8 	.word	0x200005d8
 80070e0:	20000af0 	.word	0x20000af0
 80070e4:	20000b38 	.word	0x20000b38
 80070e8:	080158bc 	.word	0x080158bc
 80070ec:	080158c4 	.word	0x080158c4
 80070f0:	080158c8 	.word	0x080158c8
 80070f4:	08015904 	.word	0x08015904
 80070f8:	08015920 	.word	0x08015920
 80070fc:	0801594c 	.word	0x0801594c
 8007100:	0801595c 	.word	0x0801595c
 8007104:	447a0000 	.word	0x447a0000

08007108 <get_heading_from_imu>:
		}
	}
}

float get_heading_from_imu(void) {
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
    // 实现串口通信以读取IMU的数据
    // 返回当前的航向角（单位：度）
    return board_config.Imu_data.Pitch;  // 示例返回值
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <get_heading_from_imu+0x20>)
 800710e:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	@ 0x338
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	f7f9 fd77 	bl	8000c08 <__aeabi_d2f>
 800711a:	4603      	mov	r3, r0
 800711c:	ee07 3a90 	vmov	s15, r3

}
 8007120:	eeb0 0a67 	vmov.f32	s0, s15
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200005d8 	.word	0x200005d8

0800712c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007132:	2300      	movs	r3, #0
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <HAL_MspInit+0x4c>)
 8007138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713a:	4a0f      	ldr	r2, [pc, #60]	@ (8007178 <HAL_MspInit+0x4c>)
 800713c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007140:	6453      	str	r3, [r2, #68]	@ 0x44
 8007142:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <HAL_MspInit+0x4c>)
 8007144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800714e:	2300      	movs	r3, #0
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <HAL_MspInit+0x4c>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	4a08      	ldr	r2, [pc, #32]	@ (8007178 <HAL_MspInit+0x4c>)
 8007158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800715c:	6413      	str	r3, [r2, #64]	@ 0x40
 800715e:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <HAL_MspInit+0x4c>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800

0800717c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007180:	bf00      	nop
 8007182:	e7fd      	b.n	8007180 <NMI_Handler+0x4>

08007184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <HardFault_Handler+0x4>

0800718c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007190:	bf00      	nop
 8007192:	e7fd      	b.n	8007190 <MemManage_Handler+0x4>

08007194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <BusFault_Handler+0x4>

0800719c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071a0:	bf00      	nop
 80071a2:	e7fd      	b.n	80071a0 <UsageFault_Handler+0x4>

080071a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071b2:	b480      	push	{r7}
 80071b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071b6:	bf00      	nop
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071d2:	f002 f84b 	bl	800926c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071d6:	bf00      	nop
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80071e0:	4802      	ldr	r0, [pc, #8]	@ (80071ec <DMA1_Stream0_IRQHandler+0x10>)
 80071e2:	f003 f8d5 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000db8 	.word	0x20000db8

080071f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80071f4:	4802      	ldr	r0, [pc, #8]	@ (8007200 <DMA1_Stream1_IRQHandler+0x10>)
 80071f6:	f003 f8cb 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000f38 	.word	0x20000f38

08007204 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8007208:	4802      	ldr	r0, [pc, #8]	@ (8007214 <DMA1_Stream2_IRQHandler+0x10>)
 800720a:	f003 f8c1 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800720e:	bf00      	nop
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000d58 	.word	0x20000d58

08007218 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800721c:	4802      	ldr	r0, [pc, #8]	@ (8007228 <DMA1_Stream4_IRQHandler+0x10>)
 800721e:	f003 f8b7 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007222:	bf00      	nop
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000cf8 	.word	0x20000cf8

0800722c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007230:	4802      	ldr	r0, [pc, #8]	@ (800723c <DMA1_Stream5_IRQHandler+0x10>)
 8007232:	f003 f8ad 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007236:	bf00      	nop
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000ed8 	.word	0x20000ed8

08007240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007246:	481f      	ldr	r0, [pc, #124]	@ (80072c4 <USART2_IRQHandler+0x84>)
 8007248:	f005 f9fa 	bl	800c640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uint32_t tmp_flag = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8007250:	4b1c      	ldr	r3, [pc, #112]	@ (80072c4 <USART2_IRQHandler+0x84>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b10      	cmp	r3, #16
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d026      	beq.n	80072ba <USART2_IRQHandler+0x7a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800726c:	2300      	movs	r3, #0
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <USART2_IRQHandler+0x84>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <USART2_IRQHandler+0x84>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
  	temp = huart2.Instance->SR;
 8007282:	4b10      	ldr	r3, [pc, #64]	@ (80072c4 <USART2_IRQHandler+0x84>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60bb      	str	r3, [r7, #8]
  	temp = huart2.Instance->DR;
 800728a:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <USART2_IRQHandler+0x84>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	60bb      	str	r3, [r7, #8]
  	HAL_UART_DMAStop(&huart2);
 8007292:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <USART2_IRQHandler+0x84>)
 8007294:	f005 f955 	bl	800c542 <HAL_UART_DMAStop>
  	temp = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007298:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <USART2_IRQHandler+0x88>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60bb      	str	r3, [r7, #8]
  	uart2_rx_len =  UART2_BUF_SIZE - temp;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <USART2_IRQHandler+0x8c>)
 80072ac:	801a      	strh	r2, [r3, #0]
  	uart2_recv_end_flag = 1;
 80072ae:	4b08      	ldr	r3, [pc, #32]	@ (80072d0 <USART2_IRQHandler+0x90>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
  	HAL_UART_RxCpltCallback(&huart2);
 80072b4:	4803      	ldr	r0, [pc, #12]	@ (80072c4 <USART2_IRQHandler+0x84>)
 80072b6:	f7fd f93d 	bl	8004534 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000c68 	.word	0x20000c68
 80072c8:	20000ed8 	.word	0x20000ed8
 80072cc:	20000adc 	.word	0x20000adc
 80072d0:	20000ade 	.word	0x20000ade

080072d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80072da:	481f      	ldr	r0, [pc, #124]	@ (8007358 <USART3_IRQHandler+0x84>)
 80072dc:	f005 f9b0 	bl	800c640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  uint32_t tmp_flag = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80072e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007358 <USART3_IRQHandler+0x84>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d026      	beq.n	800734e <USART3_IRQHandler+0x7a>
  {
	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8007300:	2300      	movs	r3, #0
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	4b14      	ldr	r3, [pc, #80]	@ (8007358 <USART3_IRQHandler+0x84>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	4b12      	ldr	r3, [pc, #72]	@ (8007358 <USART3_IRQHandler+0x84>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
	temp = huart3.Instance->SR;
 8007316:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <USART3_IRQHandler+0x84>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60bb      	str	r3, [r7, #8]
	temp = huart3.Instance->DR;
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <USART3_IRQHandler+0x84>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60bb      	str	r3, [r7, #8]
	HAL_UART_DMAStop(&huart3);
 8007326:	480c      	ldr	r0, [pc, #48]	@ (8007358 <USART3_IRQHandler+0x84>)
 8007328:	f005 f90b 	bl	800c542 <HAL_UART_DMAStop>
	temp = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <USART3_IRQHandler+0x88>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	60bb      	str	r3, [r7, #8]
	uart3_rx_len =  UART3_BUF_SIZE - temp;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800733c:	b29a      	uxth	r2, r3
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <USART3_IRQHandler+0x8c>)
 8007340:	801a      	strh	r2, [r3, #0]
	uart3_recv_end_flag = 1;
 8007342:	4b08      	ldr	r3, [pc, #32]	@ (8007364 <USART3_IRQHandler+0x90>)
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
	HAL_UART_RxCpltCallback(&huart3);
 8007348:	4803      	ldr	r0, [pc, #12]	@ (8007358 <USART3_IRQHandler+0x84>)
 800734a:	f7fd f8f3 	bl	8004534 <HAL_UART_RxCpltCallback>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000cb0 	.word	0x20000cb0
 800735c:	20000f38 	.word	0x20000f38
 8007360:	20000ae0 	.word	0x20000ae0
 8007364:	20000ae2 	.word	0x20000ae2

08007368 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800736c:	4802      	ldr	r0, [pc, #8]	@ (8007378 <DMA1_Stream7_IRQHandler+0x10>)
 800736e:	f003 f80f 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000e18 	.word	0x20000e18

0800737c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007382:	481f      	ldr	r0, [pc, #124]	@ (8007400 <UART4_IRQHandler+0x84>)
 8007384:	f005 f95c 	bl	800c640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  uint32_t tmp_flag = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800738c:	4b1c      	ldr	r3, [pc, #112]	@ (8007400 <UART4_IRQHandler+0x84>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d026      	beq.n	80073f6 <UART4_IRQHandler+0x7a>
  {
  __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	4b14      	ldr	r3, [pc, #80]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
  temp = huart4.Instance->SR;
 80073be:	4b10      	ldr	r3, [pc, #64]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60bb      	str	r3, [r7, #8]
  temp = huart4.Instance->DR;
 80073c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60bb      	str	r3, [r7, #8]
  HAL_UART_DMAStop(&huart4);
 80073ce:	480c      	ldr	r0, [pc, #48]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073d0:	f005 f8b7 	bl	800c542 <HAL_UART_DMAStop>
  temp = __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <UART4_IRQHandler+0x88>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60bb      	str	r3, [r7, #8]
  uart4_rx_len =  UART4_BUF_SIZE - temp;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	4b08      	ldr	r3, [pc, #32]	@ (8007408 <UART4_IRQHandler+0x8c>)
 80073e8:	801a      	strh	r2, [r3, #0]
  uart4_recv_end_flag = 1;
 80073ea:	4b08      	ldr	r3, [pc, #32]	@ (800740c <UART4_IRQHandler+0x90>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	701a      	strb	r2, [r3, #0]
  HAL_UART_RxCpltCallback(&huart4);
 80073f0:	4803      	ldr	r0, [pc, #12]	@ (8007400 <UART4_IRQHandler+0x84>)
 80073f2:	f7fd f89f 	bl	8004534 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART4_IRQn 1 */
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000b90 	.word	0x20000b90
 8007404:	20000d58 	.word	0x20000d58
 8007408:	20000ae4 	.word	0x20000ae4
 800740c:	20000ae6 	.word	0x20000ae6

08007410 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007416:	481f      	ldr	r0, [pc, #124]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007418:	f005 f912 	bl	800c640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  uint32_t tmp_flag = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =  __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 8007420:	4b1c      	ldr	r3, [pc, #112]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d026      	beq.n	800748a <UART5_IRQHandler+0x7a>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800743c:	2300      	movs	r3, #0
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	4b14      	ldr	r3, [pc, #80]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <UART5_IRQHandler+0x84>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
	  temp = huart5.Instance->SR;
 8007452:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60bb      	str	r3, [r7, #8]
	  temp = huart5.Instance->DR;
 800745a:	4b0e      	ldr	r3, [pc, #56]	@ (8007494 <UART5_IRQHandler+0x84>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	60bb      	str	r3, [r7, #8]
	  HAL_UART_DMAStop(&huart5);
 8007462:	480c      	ldr	r0, [pc, #48]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007464:	f005 f86d 	bl	800c542 <HAL_UART_DMAStop>
	  temp = __HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8007468:	4b0b      	ldr	r3, [pc, #44]	@ (8007498 <UART5_IRQHandler+0x88>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60bb      	str	r3, [r7, #8]
	  uart5_rx_len =  UART5_BUF_SIZE - temp;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007478:	b29a      	uxth	r2, r3
 800747a:	4b08      	ldr	r3, [pc, #32]	@ (800749c <UART5_IRQHandler+0x8c>)
 800747c:	801a      	strh	r2, [r3, #0]
	  uart5_recv_end_flag = 1;
 800747e:	4b08      	ldr	r3, [pc, #32]	@ (80074a0 <UART5_IRQHandler+0x90>)
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
	  HAL_UART_RxCpltCallback(&huart5);
 8007484:	4803      	ldr	r0, [pc, #12]	@ (8007494 <UART5_IRQHandler+0x84>)
 8007486:	f7fd f855 	bl	8004534 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END UART5_IRQn 1 */
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000bd8 	.word	0x20000bd8
 8007498:	20000db8 	.word	0x20000db8
 800749c:	20000ae8 	.word	0x20000ae8
 80074a0:	20000aea 	.word	0x20000aea

080074a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074a8:	4802      	ldr	r0, [pc, #8]	@ (80074b4 <DMA2_Stream0_IRQHandler+0x10>)
 80074aa:	f002 ff71 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000334 	.word	0x20000334

080074b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80074bc:	4802      	ldr	r0, [pc, #8]	@ (80074c8 <DMA2_Stream1_IRQHandler+0x10>)
 80074be:	f002 ff67 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80074c2:	bf00      	nop
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200003f4 	.word	0x200003f4

080074cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80074d0:	4802      	ldr	r0, [pc, #8]	@ (80074dc <DMA2_Stream2_IRQHandler+0x10>)
 80074d2:	f002 ff5d 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80074d6:	bf00      	nop
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000e78 	.word	0x20000e78

080074e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074e4:	4802      	ldr	r0, [pc, #8]	@ (80074f0 <DMA2_Stream3_IRQHandler+0x10>)
 80074e6:	f002 ff53 	bl	800a390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000394 	.word	0x20000394

080074f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  return 1;
 80074f8:	2301      	movs	r3, #1
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <_kill>:

int _kill(int pid, int sig)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800750e:	f008 fa7f 	bl	800fa10 <__errno>
 8007512:	4603      	mov	r3, r0
 8007514:	2216      	movs	r2, #22
 8007516:	601a      	str	r2, [r3, #0]
  return -1;
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <_exit>:

void _exit (int status)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800752c:	f04f 31ff 	mov.w	r1, #4294967295
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff ffe7 	bl	8007504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <_exit+0x12>

0800753a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e00a      	b.n	8007562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800754c:	f3af 8000 	nop.w
 8007550:	4601      	mov	r1, r0
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	60ba      	str	r2, [r7, #8]
 8007558:	b2ca      	uxtb	r2, r1
 800755a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3301      	adds	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	dbf0      	blt.n	800754c <_read+0x12>
  }

  return len;
 800756a:	687b      	ldr	r3, [r7, #4]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e009      	b.n	800759a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	60ba      	str	r2, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f001 fdde 	bl	8009150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3301      	adds	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	dbf1      	blt.n	8007586 <_write+0x12>
  }
  return len;
 80075a2:	687b      	ldr	r3, [r7, #4]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_close>:

int _close(int file)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80075d4:	605a      	str	r2, [r3, #4]
  return 0;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <_isatty>:

int _isatty(int file)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80075ec:	2301      	movs	r3, #1
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800761c:	4a14      	ldr	r2, [pc, #80]	@ (8007670 <_sbrk+0x5c>)
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <_sbrk+0x60>)
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007628:	4b13      	ldr	r3, [pc, #76]	@ (8007678 <_sbrk+0x64>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007630:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <_sbrk+0x64>)
 8007632:	4a12      	ldr	r2, [pc, #72]	@ (800767c <_sbrk+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007636:	4b10      	ldr	r3, [pc, #64]	@ (8007678 <_sbrk+0x64>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d207      	bcs.n	8007654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007644:	f008 f9e4 	bl	800fa10 <__errno>
 8007648:	4603      	mov	r3, r0
 800764a:	220c      	movs	r2, #12
 800764c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295
 8007652:	e009      	b.n	8007668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007654:	4b08      	ldr	r3, [pc, #32]	@ (8007678 <_sbrk+0x64>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800765a:	4b07      	ldr	r3, [pc, #28]	@ (8007678 <_sbrk+0x64>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	4a05      	ldr	r2, [pc, #20]	@ (8007678 <_sbrk+0x64>)
 8007664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20020000 	.word	0x20020000
 8007674:	0000a000 	.word	0x0000a000
 8007678:	20000aec 	.word	0x20000aec
 800767c:	200010e8 	.word	0x200010e8

08007680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007684:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <SystemInit+0x20>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	4a05      	ldr	r2, [pc, #20]	@ (80076a0 <SystemInit+0x20>)
 800768c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	e000ed00 	.word	0xe000ed00

080076a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b096      	sub	sp, #88	@ 0x58
 80076a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	605a      	str	r2, [r3, #4]
 80076b4:	609a      	str	r2, [r3, #8]
 80076b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	605a      	str	r2, [r3, #4]
 80076cc:	609a      	str	r2, [r3, #8]
 80076ce:	60da      	str	r2, [r3, #12]
 80076d0:	611a      	str	r2, [r3, #16]
 80076d2:	615a      	str	r2, [r3, #20]
 80076d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80076d6:	1d3b      	adds	r3, r7, #4
 80076d8:	2220      	movs	r2, #32
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f008 f8b1 	bl	800f844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80076e2:	4b3e      	ldr	r3, [pc, #248]	@ (80077dc <MX_TIM1_Init+0x138>)
 80076e4:	4a3e      	ldr	r2, [pc, #248]	@ (80077e0 <MX_TIM1_Init+0x13c>)
 80076e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80076e8:	4b3c      	ldr	r3, [pc, #240]	@ (80077dc <MX_TIM1_Init+0x138>)
 80076ea:	2223      	movs	r2, #35	@ 0x23
 80076ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076ee:	4b3b      	ldr	r3, [pc, #236]	@ (80077dc <MX_TIM1_Init+0x138>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 80076f4:	4b39      	ldr	r3, [pc, #228]	@ (80077dc <MX_TIM1_Init+0x138>)
 80076f6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80076fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076fc:	4b37      	ldr	r3, [pc, #220]	@ (80077dc <MX_TIM1_Init+0x138>)
 80076fe:	2200      	movs	r2, #0
 8007700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007702:	4b36      	ldr	r3, [pc, #216]	@ (80077dc <MX_TIM1_Init+0x138>)
 8007704:	2200      	movs	r2, #0
 8007706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007708:	4b34      	ldr	r3, [pc, #208]	@ (80077dc <MX_TIM1_Init+0x138>)
 800770a:	2200      	movs	r2, #0
 800770c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800770e:	4833      	ldr	r0, [pc, #204]	@ (80077dc <MX_TIM1_Init+0x138>)
 8007710:	f003 ff0e 	bl	800b530 <HAL_TIM_Base_Init>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800771a:	f7fc ff4b 	bl	80045b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800771e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007722:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007724:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007728:	4619      	mov	r1, r3
 800772a:	482c      	ldr	r0, [pc, #176]	@ (80077dc <MX_TIM1_Init+0x138>)
 800772c:	f004 f932 	bl	800b994 <HAL_TIM_ConfigClockSource>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007736:	f7fc ff3d 	bl	80045b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800773a:	4828      	ldr	r0, [pc, #160]	@ (80077dc <MX_TIM1_Init+0x138>)
 800773c:	f003 ff47 	bl	800b5ce <HAL_TIM_PWM_Init>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007746:	f7fc ff35 	bl	80045b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800774a:	2300      	movs	r3, #0
 800774c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800774e:	2300      	movs	r3, #0
 8007750:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007752:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007756:	4619      	mov	r1, r3
 8007758:	4820      	ldr	r0, [pc, #128]	@ (80077dc <MX_TIM1_Init+0x138>)
 800775a:	f004 fcff 	bl	800c15c <HAL_TIMEx_MasterConfigSynchronization>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007764:	f7fc ff26 	bl	80045b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007768:	2360      	movs	r3, #96	@ 0x60
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007774:	2300      	movs	r3, #0
 8007776:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007778:	2300      	movs	r3, #0
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800777c:	2300      	movs	r3, #0
 800777e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007780:	2300      	movs	r3, #0
 8007782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007788:	2200      	movs	r2, #0
 800778a:	4619      	mov	r1, r3
 800778c:	4813      	ldr	r0, [pc, #76]	@ (80077dc <MX_TIM1_Init+0x138>)
 800778e:	f004 f83f 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007798:	f7fc ff0c 	bl	80045b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800779c:	2300      	movs	r3, #0
 800779e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80077b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80077ba:	1d3b      	adds	r3, r7, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4807      	ldr	r0, [pc, #28]	@ (80077dc <MX_TIM1_Init+0x138>)
 80077c0:	f004 fd48 	bl	800c254 <HAL_TIMEx_ConfigBreakDeadTime>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80077ca:	f7fc fef3 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80077ce:	4803      	ldr	r0, [pc, #12]	@ (80077dc <MX_TIM1_Init+0x138>)
 80077d0:	f000 f8b6 	bl	8007940 <HAL_TIM_MspPostInit>

}
 80077d4:	bf00      	nop
 80077d6:	3758      	adds	r7, #88	@ 0x58
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000af0 	.word	0x20000af0
 80077e0:	40010000 	.word	0x40010000

080077e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	@ 0x38
 80077e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	609a      	str	r2, [r3, #8]
 80077f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077f8:	f107 0320 	add.w	r3, r7, #32
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	611a      	str	r2, [r3, #16]
 8007810:	615a      	str	r2, [r3, #20]
 8007812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007814:	4b2c      	ldr	r3, [pc, #176]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007816:	4a2d      	ldr	r2, [pc, #180]	@ (80078cc <MX_TIM3_Init+0xe8>)
 8007818:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 800781a:	4b2b      	ldr	r3, [pc, #172]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 800781c:	2223      	movs	r2, #35	@ 0x23
 800781e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007820:	4b29      	ldr	r3, [pc, #164]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8007826:	4b28      	ldr	r3, [pc, #160]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007828:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800782c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800782e:	4b26      	ldr	r3, [pc, #152]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007830:	2200      	movs	r2, #0
 8007832:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007834:	4b24      	ldr	r3, [pc, #144]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007836:	2200      	movs	r2, #0
 8007838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800783a:	4823      	ldr	r0, [pc, #140]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 800783c:	f003 fe78 	bl	800b530 <HAL_TIM_Base_Init>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8007846:	f7fc feb5 	bl	80045b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800784a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800784e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007850:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007854:	4619      	mov	r1, r3
 8007856:	481c      	ldr	r0, [pc, #112]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007858:	f004 f89c 	bl	800b994 <HAL_TIM_ConfigClockSource>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8007862:	f7fc fea7 	bl	80045b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007866:	4818      	ldr	r0, [pc, #96]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007868:	f003 feb1 	bl	800b5ce <HAL_TIM_PWM_Init>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8007872:	f7fc fe9f 	bl	80045b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007876:	2300      	movs	r3, #0
 8007878:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800787e:	f107 0320 	add.w	r3, r7, #32
 8007882:	4619      	mov	r1, r3
 8007884:	4810      	ldr	r0, [pc, #64]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 8007886:	f004 fc69 	bl	800c15c <HAL_TIMEx_MasterConfigSynchronization>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007890:	f7fc fe90 	bl	80045b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007894:	2360      	movs	r3, #96	@ 0x60
 8007896:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80078a4:	1d3b      	adds	r3, r7, #4
 80078a6:	220c      	movs	r2, #12
 80078a8:	4619      	mov	r1, r3
 80078aa:	4807      	ldr	r0, [pc, #28]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 80078ac:	f003 ffb0 	bl	800b810 <HAL_TIM_PWM_ConfigChannel>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80078b6:	f7fc fe7d 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80078ba:	4803      	ldr	r0, [pc, #12]	@ (80078c8 <MX_TIM3_Init+0xe4>)
 80078bc:	f000 f840 	bl	8007940 <HAL_TIM_MspPostInit>

}
 80078c0:	bf00      	nop
 80078c2:	3738      	adds	r7, #56	@ 0x38
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000b38 	.word	0x20000b38
 80078cc:	40000400 	.word	0x40000400

080078d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <HAL_TIM_Base_MspInit+0x64>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10e      	bne.n	8007900 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	4a13      	ldr	r2, [pc, #76]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80078f2:	4b11      	ldr	r3, [pc, #68]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80078fe:	e012      	b.n	8007926 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a0d      	ldr	r2, [pc, #52]	@ (800793c <HAL_TIM_Base_MspInit+0x6c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d10d      	bne.n	8007926 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	6413      	str	r3, [r2, #64]	@ 0x40
 800791a:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <HAL_TIM_Base_MspInit+0x68>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	60bb      	str	r3, [r7, #8]
 8007924:	68bb      	ldr	r3, [r7, #8]
}
 8007926:	bf00      	nop
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40010000 	.word	0x40010000
 8007938:	40023800 	.word	0x40023800
 800793c:	40000400 	.word	0x40000400

08007940 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a25      	ldr	r2, [pc, #148]	@ (80079f4 <HAL_TIM_MspPostInit+0xb4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d11f      	bne.n	80079a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796a:	4a23      	ldr	r2, [pc, #140]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	6313      	str	r3, [r2, #48]	@ 0x30
 8007972:	4b21      	ldr	r3, [pc, #132]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800797e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007984:	2302      	movs	r3, #2
 8007986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800798c:	2300      	movs	r3, #0
 800798e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007990:	2301      	movs	r3, #1
 8007992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4619      	mov	r1, r3
 800799a:	4818      	ldr	r0, [pc, #96]	@ (80079fc <HAL_TIM_MspPostInit+0xbc>)
 800799c:	f002 ff62 	bl	800a864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80079a0:	e023      	b.n	80079ea <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM3)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a16      	ldr	r2, [pc, #88]	@ (8007a00 <HAL_TIM_MspPostInit+0xc0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d11e      	bne.n	80079ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	4b11      	ldr	r3, [pc, #68]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	4a10      	ldr	r2, [pc, #64]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 80079b6:	f043 0304 	orr.w	r3, r3, #4
 80079ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80079bc:	4b0e      	ldr	r3, [pc, #56]	@ (80079f8 <HAL_TIM_MspPostInit+0xb8>)
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80079c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ce:	2302      	movs	r3, #2
 80079d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079d6:	2300      	movs	r3, #0
 80079d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80079da:	2302      	movs	r3, #2
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079de:	f107 0314 	add.w	r3, r7, #20
 80079e2:	4619      	mov	r1, r3
 80079e4:	4807      	ldr	r0, [pc, #28]	@ (8007a04 <HAL_TIM_MspPostInit+0xc4>)
 80079e6:	f002 ff3d 	bl	800a864 <HAL_GPIO_Init>
}
 80079ea:	bf00      	nop
 80079ec:	3728      	adds	r7, #40	@ 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40020000 	.word	0x40020000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40020800 	.word	0x40020800

08007a08 <Get_xyzVal>:

/*函数名称:获取xyz轴的值*/
/*形参:无              */
/*返回值:无            */
void Get_xyzVal(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
  uint16_t ADC1_Value;
  uint16_t ADC2_Value;
  HAL_ADC_Start(&hadc1);
 8007a0e:	4870      	ldr	r0, [pc, #448]	@ (8007bd0 <Get_xyzVal+0x1c8>)
 8007a10:	f001 fcb4 	bl	800937c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8007a14:	486f      	ldr	r0, [pc, #444]	@ (8007bd4 <Get_xyzVal+0x1cc>)
 8007a16:	f001 fcb1 	bl	800937c <HAL_ADC_Start>
  int power_mode = POWER_MODE_PWM;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	603b      	str	r3, [r7, #0]
  HAL_ADC_PollForConversion(&hadc1, 50);   //绛夊緟杞崲瀹屾垚锛�50涓烘渶澶х瓑寰呮椂闂达紝鍗曚綅涓簃s
 8007a1e:	2132      	movs	r1, #50	@ 0x32
 8007a20:	486b      	ldr	r0, [pc, #428]	@ (8007bd0 <Get_xyzVal+0x1c8>)
 8007a22:	f001 fd7d 	bl	8009520 <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8007a26:	486a      	ldr	r0, [pc, #424]	@ (8007bd0 <Get_xyzVal+0x1c8>)
 8007a28:	f001 ff34 	bl	8009894 <HAL_ADC_GetState>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a36:	d104      	bne.n	8007a42 <Get_xyzVal+0x3a>
  {
   ADC1_Value = HAL_ADC_GetValue(&hadc1);   //鑾峰彇AD鍊�
 8007a38:	4865      	ldr	r0, [pc, #404]	@ (8007bd0 <Get_xyzVal+0x1c8>)
 8007a3a:	f001 fdfc 	bl	8009636 <HAL_ADC_GetValue>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	80fb      	strh	r3, [r7, #6]
   //printf("ADC1: %d   ",ADC1_Value);
  }
  HAL_ADC_PollForConversion(&hadc2, 50);   //绛夊緟杞崲瀹屾垚锛�50涓烘渶澶х瓑寰呮椂闂达紝鍗曚綅涓簃s
 8007a42:	2132      	movs	r1, #50	@ 0x32
 8007a44:	4863      	ldr	r0, [pc, #396]	@ (8007bd4 <Get_xyzVal+0x1cc>)
 8007a46:	f001 fd6b 	bl	8009520 <HAL_ADC_PollForConversion>
  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc2), HAL_ADC_STATE_REG_EOC))
 8007a4a:	4862      	ldr	r0, [pc, #392]	@ (8007bd4 <Get_xyzVal+0x1cc>)
 8007a4c:	f001 ff22 	bl	8009894 <HAL_ADC_GetState>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5a:	d104      	bne.n	8007a66 <Get_xyzVal+0x5e>
  {
   ADC2_Value = HAL_ADC_GetValue(&hadc2);   //鑾峰彇AD鍊�
 8007a5c:	485d      	ldr	r0, [pc, #372]	@ (8007bd4 <Get_xyzVal+0x1cc>)
 8007a5e:	f001 fdea 	bl	8009636 <HAL_ADC_GetValue>
 8007a62:	4603      	mov	r3, r0
 8007a64:	80bb      	strh	r3, [r7, #4]
   //printf("ADC2: %d \r\n",ADC2_Value);
  }
  if(power_mode == POWER_MODE_PWM){
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d10b      	bne.n	8007a84 <Get_xyzVal+0x7c>
	  if(ADC2_Value >= 2077 && ADC2_Value <= 2079){
 8007a6c:	88bb      	ldrh	r3, [r7, #4]
 8007a6e:	f640 021c 	movw	r2, #2076	@ 0x81c
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d906      	bls.n	8007a84 <Get_xyzVal+0x7c>
 8007a76:	88bb      	ldrh	r3, [r7, #4]
 8007a78:	f5b3 6f02 	cmp.w	r3, #2080	@ 0x820
 8007a7c:	d202      	bcs.n	8007a84 <Get_xyzVal+0x7c>
		  ADC2_Value = 2078;
 8007a7e:	f640 031e 	movw	r3, #2078	@ 0x81e
 8007a82:	80bb      	strh	r3, [r7, #4]
	  }
	 // ADC2_Value = abs(ADC2_Value - 4096) ;
  }
  board_config.Rockers.Rocker_X = ADC1_Value;
 8007a84:	4a54      	ldr	r2, [pc, #336]	@ (8007bd8 <Get_xyzVal+0x1d0>)
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	f8a2 33b8 	strh.w	r3, [r2, #952]	@ 0x3b8
  board_config.Rockers.Rocker_Y = ADC2_Value;
 8007a8c:	4a52      	ldr	r2, [pc, #328]	@ (8007bd8 <Get_xyzVal+0x1d0>)
 8007a8e:	88bb      	ldrh	r3, [r7, #4]
 8007a90:	f8a2 33ba 	strh.w	r3, [r2, #954]	@ 0x3ba
  g_iAdcx[0] = ADC2_Value;
 8007a94:	4a51      	ldr	r2, [pc, #324]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007a96:	88bb      	ldrh	r3, [r7, #4]
 8007a98:	8013      	strh	r3, [r2, #0]
  g_iAdcx[1] = ADC1_Value;
 8007a9a:	4a50      	ldr	r2, [pc, #320]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	8053      	strh	r3, [r2, #2]
 // printf("Y = %d\r\nX = %d\r\n", g_iAdcx[0], g_iAdcx[1]);
  if(g_iAdcx[0]<1000 && g_iAdcx[0]>0)          //y0
 8007aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aa8:	d207      	bcs.n	8007aba <Get_xyzVal+0xb2>
 8007aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <Get_xyzVal+0xb2>
    xyzVal.Y = Yup;
 8007ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e03b      	b.n	8007b32 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<1800 && g_iAdcx[0]>1000)  //y1
 8007aba:	4b48      	ldr	r3, [pc, #288]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007ac2:	d208      	bcs.n	8007ad6 <Get_xyzVal+0xce>
 8007ac4:	4b45      	ldr	r3, [pc, #276]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007acc:	d903      	bls.n	8007ad6 <Get_xyzVal+0xce>
    xyzVal.Y = Ysup;
 8007ace:	4b44      	ldr	r3, [pc, #272]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e02d      	b.n	8007b32 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<2200 && g_iAdcx[0]>1800)  //y2
 8007ad6:	4b41      	ldr	r3, [pc, #260]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	f640 0297 	movw	r2, #2199	@ 0x897
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d808      	bhi.n	8007af4 <Get_xyzVal+0xec>
 8007ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007aea:	d903      	bls.n	8007af4 <Get_xyzVal+0xec>
    xyzVal.Y = Ysp;
 8007aec:	4b3c      	ldr	r3, [pc, #240]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007aee:	2202      	movs	r2, #2
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e01e      	b.n	8007b32 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<3000 && g_iAdcx[0]>2200)  //y3
 8007af4:	4b39      	ldr	r3, [pc, #228]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d809      	bhi.n	8007b14 <Get_xyzVal+0x10c>
 8007b00:	4b36      	ldr	r3, [pc, #216]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	f640 0298 	movw	r2, #2200	@ 0x898
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d903      	bls.n	8007b14 <Get_xyzVal+0x10c>
    xyzVal.Y = Ysdn;
 8007b0c:	4b34      	ldr	r3, [pc, #208]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007b0e:	2204      	movs	r2, #4
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e00e      	b.n	8007b32 <Get_xyzVal+0x12a>
  else if(g_iAdcx[0]<4200 && g_iAdcx[0]>3000)  //y4
 8007b14:	4b31      	ldr	r3, [pc, #196]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d808      	bhi.n	8007b32 <Get_xyzVal+0x12a>
 8007b20:	4b2e      	ldr	r3, [pc, #184]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d902      	bls.n	8007b32 <Get_xyzVal+0x12a>
    xyzVal.Y = Ydn;
 8007b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007b2e:	2203      	movs	r2, #3
 8007b30:	601a      	str	r2, [r3, #0]


  if(g_iAdcx[1]<1000 && g_iAdcx[1]>0)          //x0
 8007b32:	4b2a      	ldr	r3, [pc, #168]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b3a:	d207      	bcs.n	8007b4c <Get_xyzVal+0x144>
 8007b3c:	4b27      	ldr	r3, [pc, #156]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b3e:	885b      	ldrh	r3, [r3, #2]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <Get_xyzVal+0x144>
    xyzVal.X = Xlf;
 8007b44:	4b26      	ldr	r3, [pc, #152]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	e03c      	b.n	8007bc6 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<1800 && g_iAdcx[1]>1000)  //x1
 8007b4c:	4b23      	ldr	r3, [pc, #140]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007b54:	d208      	bcs.n	8007b68 <Get_xyzVal+0x160>
 8007b56:	4b21      	ldr	r3, [pc, #132]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b58:	885b      	ldrh	r3, [r3, #2]
 8007b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b5e:	d903      	bls.n	8007b68 <Get_xyzVal+0x160>
    xyzVal.X = Xslf;
 8007b60:	4b1f      	ldr	r3, [pc, #124]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e02e      	b.n	8007bc6 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<2200 && g_iAdcx[1]>1800)  //x2
 8007b68:	4b1c      	ldr	r3, [pc, #112]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	f640 0297 	movw	r2, #2199	@ 0x897
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d808      	bhi.n	8007b86 <Get_xyzVal+0x17e>
 8007b74:	4b19      	ldr	r3, [pc, #100]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007b7c:	d903      	bls.n	8007b86 <Get_xyzVal+0x17e>
    xyzVal.X = Xsp;
 8007b7e:	4b18      	ldr	r3, [pc, #96]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007b80:	2202      	movs	r2, #2
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	e01f      	b.n	8007bc6 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<3000 && g_iAdcx[1]>2200)  //x3
 8007b86:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d809      	bhi.n	8007ba6 <Get_xyzVal+0x19e>
 8007b92:	4b12      	ldr	r3, [pc, #72]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	f640 0298 	movw	r2, #2200	@ 0x898
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d903      	bls.n	8007ba6 <Get_xyzVal+0x19e>
    xyzVal.X = Xsri;
 8007b9e:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	605a      	str	r2, [r3, #4]
 8007ba4:	e00f      	b.n	8007bc6 <Get_xyzVal+0x1be>
  else if(g_iAdcx[1]<4200 && g_iAdcx[1]>3000)  //x4
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d809      	bhi.n	8007bc6 <Get_xyzVal+0x1be>
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <Get_xyzVal+0x1d4>)
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d903      	bls.n	8007bc6 <Get_xyzVal+0x1be>
    xyzVal.X = Xri;
 8007bbe:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <Get_xyzVal+0x1d8>)
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	605a      	str	r2, [r3, #4]

//  PrintfDebug("xyzVal.X = %d\r\nxyzVal.Y = %d\r\nxyzVal.Z = %d\r\n", xyzVal.X, xyzVal.Y, xyzVal.Z);
}
 8007bc4:	e7ff      	b.n	8007bc6 <Get_xyzVal+0x1be>
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000025c 	.word	0x2000025c
 8007bd4:	200002a4 	.word	0x200002a4
 8007bd8:	200005d8 	.word	0x200005d8
 8007bdc:	20000b8c 	.word	0x20000b8c
 8007be0:	20000b80 	.word	0x20000b80

08007be4 <Get_xyzVal_Blue>:

void Get_xyzVal_Blue(void){
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_iAdcx, sizeof(g_iAdcx) / sizeof(g_iAdcx[0]));
  HAL_UART_Receive_DMA(&huart1,BLUE_BUF,sizeof(BLUE_BUF));
 8007be8:	2208      	movs	r2, #8
 8007bea:	496f      	ldr	r1, [pc, #444]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007bec:	486f      	ldr	r0, [pc, #444]	@ (8007dac <Get_xyzVal_Blue+0x1c8>)
 8007bee:	f004 fc83 	bl	800c4f8 <HAL_UART_Receive_DMA>
  if(BLUE_BUF[0] != 0x55){
 8007bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b55      	cmp	r3, #85	@ 0x55
 8007bf8:	d00a      	beq.n	8007c10 <Get_xyzVal_Blue+0x2c>
	  board_config.Rockers.Rocker_X = 2048;
 8007bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c00:	f8a3 23b8 	strh.w	r2, [r3, #952]	@ 0x3b8
	  board_config.Rockers.Rocker_Y = 2048;
 8007c04:	4b6a      	ldr	r3, [pc, #424]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0a:	f8a3 23ba 	strh.w	r2, [r3, #954]	@ 0x3ba
	  return;
 8007c0e:	e0ca      	b.n	8007da6 <Get_xyzVal_Blue+0x1c2>
  }
  board_config.Rockers.Rocker_X = (BLUE_BUF[2] << 8 | BLUE_BUF[3]);
 8007c10:	4b65      	ldr	r3, [pc, #404]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007c12:	789b      	ldrb	r3, [r3, #2]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	b21a      	sxth	r2, r3
 8007c18:	4b63      	ldr	r3, [pc, #396]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	b21b      	sxth	r3, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	b21b      	sxth	r3, r3
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	4b62      	ldr	r3, [pc, #392]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c26:	f8a3 23b8 	strh.w	r2, [r3, #952]	@ 0x3b8
  board_config.Rockers.Rocker_Y = (BLUE_BUF[4] << 8 | BLUE_BUF[5]);
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007c2c:	791b      	ldrb	r3, [r3, #4]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	b21a      	sxth	r2, r3
 8007c32:	4b5d      	ldr	r3, [pc, #372]	@ (8007da8 <Get_xyzVal_Blue+0x1c4>)
 8007c34:	795b      	ldrb	r3, [r3, #5]
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c40:	f8a3 23ba 	strh.w	r2, [r3, #954]	@ 0x3ba
  board_config.Rockers.Rocker_Y = abs(board_config.Rockers.Rocker_Y - 4096) ;
 8007c44:	4b5a      	ldr	r3, [pc, #360]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c46:	f8b3 33ba 	ldrh.w	r3, [r3, #954]	@ 0x3ba
 8007c4a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfb8      	it	lt
 8007c52:	425b      	neglt	r3, r3
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	4b56      	ldr	r3, [pc, #344]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c58:	f8a3 23ba 	strh.w	r2, [r3, #954]	@ 0x3ba
  g_iAdcx[0] = board_config.Rockers.Rocker_Y;
 8007c5c:	4b54      	ldr	r3, [pc, #336]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c5e:	f8b3 23ba 	ldrh.w	r2, [r3, #954]	@ 0x3ba
 8007c62:	4b54      	ldr	r3, [pc, #336]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c64:	801a      	strh	r2, [r3, #0]
  g_iAdcx[1] = board_config.Rockers.Rocker_X;
 8007c66:	4b52      	ldr	r3, [pc, #328]	@ (8007db0 <Get_xyzVal_Blue+0x1cc>)
 8007c68:	f8b3 23b8 	ldrh.w	r2, [r3, #952]	@ 0x3b8
 8007c6c:	4b51      	ldr	r3, [pc, #324]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c6e:	805a      	strh	r2, [r3, #2]
  printf("X = %d\r\n Y = %d\r\n", g_iAdcx[0], g_iAdcx[1]);
 8007c70:	4b50      	ldr	r3, [pc, #320]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	4619      	mov	r1, r3
 8007c76:	4b4f      	ldr	r3, [pc, #316]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	484e      	ldr	r0, [pc, #312]	@ (8007db8 <Get_xyzVal_Blue+0x1d4>)
 8007c7e:	f007 fc4d 	bl	800f51c <iprintf>
  if(g_iAdcx[0]<1000 && g_iAdcx[0]>0)          //y0
 8007c82:	4b4c      	ldr	r3, [pc, #304]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c8a:	d207      	bcs.n	8007c9c <Get_xyzVal_Blue+0xb8>
 8007c8c:	4b49      	ldr	r3, [pc, #292]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <Get_xyzVal_Blue+0xb8>
    xyzVal.Y = Yup;
 8007c94:	4b49      	ldr	r3, [pc, #292]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e03b      	b.n	8007d14 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<1800 && g_iAdcx[0]>1000)  //y1
 8007c9c:	4b45      	ldr	r3, [pc, #276]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007ca4:	d208      	bcs.n	8007cb8 <Get_xyzVal_Blue+0xd4>
 8007ca6:	4b43      	ldr	r3, [pc, #268]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cae:	d903      	bls.n	8007cb8 <Get_xyzVal_Blue+0xd4>
    xyzVal.Y = Ysup;
 8007cb0:	4b42      	ldr	r3, [pc, #264]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e02d      	b.n	8007d14 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<2200 && g_iAdcx[0]>1800)  //y2
 8007cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	f640 0297 	movw	r2, #2199	@ 0x897
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d808      	bhi.n	8007cd6 <Get_xyzVal_Blue+0xf2>
 8007cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007ccc:	d903      	bls.n	8007cd6 <Get_xyzVal_Blue+0xf2>
    xyzVal.Y = Ysp;
 8007cce:	4b3b      	ldr	r3, [pc, #236]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e01e      	b.n	8007d14 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<3000 && g_iAdcx[0]>2200)  //y3
 8007cd6:	4b37      	ldr	r3, [pc, #220]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d809      	bhi.n	8007cf6 <Get_xyzVal_Blue+0x112>
 8007ce2:	4b34      	ldr	r3, [pc, #208]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	f640 0298 	movw	r2, #2200	@ 0x898
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d903      	bls.n	8007cf6 <Get_xyzVal_Blue+0x112>
    xyzVal.Y = Ysdn;
 8007cee:	4b33      	ldr	r3, [pc, #204]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e00e      	b.n	8007d14 <Get_xyzVal_Blue+0x130>
  else if(g_iAdcx[0]<4200 && g_iAdcx[0]>3000)  //y4
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d808      	bhi.n	8007d14 <Get_xyzVal_Blue+0x130>
 8007d02:	4b2c      	ldr	r3, [pc, #176]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d902      	bls.n	8007d14 <Get_xyzVal_Blue+0x130>
    xyzVal.Y = Ydn;
 8007d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007d10:	2203      	movs	r2, #3
 8007d12:	601a      	str	r2, [r3, #0]


  if(g_iAdcx[1]<1000 && g_iAdcx[1]>0)          //x0
 8007d14:	4b27      	ldr	r3, [pc, #156]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d1c:	d207      	bcs.n	8007d2e <Get_xyzVal_Blue+0x14a>
 8007d1e:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <Get_xyzVal_Blue+0x14a>
    xyzVal.X = Xlf;
 8007d26:	4b25      	ldr	r3, [pc, #148]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	e03b      	b.n	8007da6 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<1800 && g_iAdcx[1]>1000)  //x1
 8007d2e:	4b21      	ldr	r3, [pc, #132]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007d36:	d208      	bcs.n	8007d4a <Get_xyzVal_Blue+0x166>
 8007d38:	4b1e      	ldr	r3, [pc, #120]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d40:	d903      	bls.n	8007d4a <Get_xyzVal_Blue+0x166>
    xyzVal.X = Xslf;
 8007d42:	4b1e      	ldr	r3, [pc, #120]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	605a      	str	r2, [r3, #4]
 8007d48:	e02d      	b.n	8007da6 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<2200 && g_iAdcx[1]>1800)  //x2
 8007d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	f640 0297 	movw	r2, #2199	@ 0x897
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d808      	bhi.n	8007d68 <Get_xyzVal_Blue+0x184>
 8007d56:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d58:	885b      	ldrh	r3, [r3, #2]
 8007d5a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8007d5e:	d903      	bls.n	8007d68 <Get_xyzVal_Blue+0x184>
    xyzVal.X = Xsp;
 8007d60:	4b16      	ldr	r3, [pc, #88]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007d62:	2202      	movs	r2, #2
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	e01e      	b.n	8007da6 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<3000 && g_iAdcx[1]>2200)  //x3
 8007d68:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d6a:	885b      	ldrh	r3, [r3, #2]
 8007d6c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d809      	bhi.n	8007d88 <Get_xyzVal_Blue+0x1a4>
 8007d74:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	f640 0298 	movw	r2, #2200	@ 0x898
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d903      	bls.n	8007d88 <Get_xyzVal_Blue+0x1a4>
    xyzVal.X = Xsri;
 8007d80:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007d82:	2204      	movs	r2, #4
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	e00e      	b.n	8007da6 <Get_xyzVal_Blue+0x1c2>
  else if(g_iAdcx[1]<4200 && g_iAdcx[1]>3000)  //x4
 8007d88:	4b0a      	ldr	r3, [pc, #40]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	f241 0267 	movw	r2, #4199	@ 0x1067
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d808      	bhi.n	8007da6 <Get_xyzVal_Blue+0x1c2>
 8007d94:	4b07      	ldr	r3, [pc, #28]	@ (8007db4 <Get_xyzVal_Blue+0x1d0>)
 8007d96:	885b      	ldrh	r3, [r3, #2]
 8007d98:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d902      	bls.n	8007da6 <Get_xyzVal_Blue+0x1c2>
    xyzVal.X = Xri;
 8007da0:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <Get_xyzVal_Blue+0x1d8>)
 8007da2:	2203      	movs	r2, #3
 8007da4:	605a      	str	r2, [r3, #4]

//  PrintfDebug("xyzVal.X = %d\r\nxyzVal.Y = %d\r\nxyzVal.Z = %d\r\n", xyzVal.X, xyzVal.Y, xyzVal.Z);
}
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200004c8 	.word	0x200004c8
 8007dac:	20000c20 	.word	0x20000c20
 8007db0:	200005d8 	.word	0x200005d8
 8007db4:	20000b8c 	.word	0x20000b8c
 8007db8:	08015a0c 	.word	0x08015a0c
 8007dbc:	20000b80 	.word	0x20000b80

08007dc0 <Get_KeyState>:
/*函数名称:获取摇杆的状态 */
/*形参:无                */
/*返回值:keystate        */
/*说明:keystate为E_RKEYState的变量，返回按键状态值*/
E_RKEYState Get_KeyState(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  E_RKEYState keystate;
  Get_xyzVal();
 8007dc6:	f7ff fe1f 	bl	8007a08 <Get_xyzVal>
//  PrintfDebug("%d %d\r\n", xyzVal.X, xyzVal.Y);                 //摇杆状态编码
  if((xyzVal.Y == Ysp) && (xyzVal.X == Xsp)) //x2 y2 z0 0
 8007dca:	4b81      	ldr	r3, [pc, #516]	@ (8007fd0 <Get_KeyState+0x210>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d106      	bne.n	8007de0 <Get_KeyState+0x20>
 8007dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8007fd0 <Get_KeyState+0x210>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d102      	bne.n	8007de0 <Get_KeyState+0x20>
    keystate = KEYSTOP;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	71fb      	strb	r3, [r7, #7]
 8007dde:	e0f1      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Yup) && (xyzVal.X == Xsp))                 //x2 y0 z0 1
 8007de0:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd0 <Get_KeyState+0x210>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <Get_KeyState+0x36>
 8007de8:	4b79      	ldr	r3, [pc, #484]	@ (8007fd0 <Get_KeyState+0x210>)
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d102      	bne.n	8007df6 <Get_KeyState+0x36>
    keystate = KEYUP;
 8007df0:	2301      	movs	r3, #1
 8007df2:	71fb      	strb	r3, [r7, #7]
 8007df4:	e0e6      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsp))                //x2 y1 z0 2
 8007df6:	4b76      	ldr	r3, [pc, #472]	@ (8007fd0 <Get_KeyState+0x210>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d106      	bne.n	8007e0c <Get_KeyState+0x4c>
 8007dfe:	4b74      	ldr	r3, [pc, #464]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d102      	bne.n	8007e0c <Get_KeyState+0x4c>
    keystate = KEYSUP;
 8007e06:	2302      	movs	r3, #2
 8007e08:	71fb      	strb	r3, [r7, #7]
 8007e0a:	e0db      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ydn) && (xyzVal.X == Xsp))                 //x2 y4 z0 3
 8007e0c:	4b70      	ldr	r3, [pc, #448]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d106      	bne.n	8007e22 <Get_KeyState+0x62>
 8007e14:	4b6e      	ldr	r3, [pc, #440]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d102      	bne.n	8007e22 <Get_KeyState+0x62>
    keystate = KEYDOWN;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	71fb      	strb	r3, [r7, #7]
 8007e20:	e0d0      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsp))                //x2 y3 z0 4
 8007e22:	4b6b      	ldr	r3, [pc, #428]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d106      	bne.n	8007e38 <Get_KeyState+0x78>
 8007e2a:	4b69      	ldr	r3, [pc, #420]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d102      	bne.n	8007e38 <Get_KeyState+0x78>
    keystate = KEYSDOWN;
 8007e32:	2304      	movs	r3, #4
 8007e34:	71fb      	strb	r3, [r7, #7]
 8007e36:	e0c5      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xlf))                 //x0 y2 z0 5
 8007e38:	4b65      	ldr	r3, [pc, #404]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d106      	bne.n	8007e4e <Get_KeyState+0x8e>
 8007e40:	4b63      	ldr	r3, [pc, #396]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <Get_KeyState+0x8e>
    keystate = KEYLEFT;
 8007e48:	2305      	movs	r3, #5
 8007e4a:	71fb      	strb	r3, [r7, #7]
 8007e4c:	e0ba      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xslf))                //x1 y2 z0 6
 8007e4e:	4b60      	ldr	r3, [pc, #384]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d106      	bne.n	8007e64 <Get_KeyState+0xa4>
 8007e56:	4b5e      	ldr	r3, [pc, #376]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d102      	bne.n	8007e64 <Get_KeyState+0xa4>
    keystate = KEYSLEFT;
 8007e5e:	2306      	movs	r3, #6
 8007e60:	71fb      	strb	r3, [r7, #7]
 8007e62:	e0af      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xri))                 //x4 y2 z0 7
 8007e64:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d106      	bne.n	8007e7a <Get_KeyState+0xba>
 8007e6c:	4b58      	ldr	r3, [pc, #352]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d102      	bne.n	8007e7a <Get_KeyState+0xba>
    keystate = KEYRIGHT;
 8007e74:	2307      	movs	r3, #7
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	e0a4      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysp) &&  (xyzVal.X == Xsri))                //x3 y2 z0 8
 8007e7a:	4b55      	ldr	r3, [pc, #340]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d106      	bne.n	8007e90 <Get_KeyState+0xd0>
 8007e82:	4b53      	ldr	r3, [pc, #332]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d102      	bne.n	8007e90 <Get_KeyState+0xd0>
    keystate = KEYSRIGHT;
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	71fb      	strb	r3, [r7, #7]
 8007e8e:	e099      	b.n	8007fc4 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xlf))||((xyzVal.Y==Yup)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xlf)))                 //x01 y01 z0 10
 8007e90:	4b4f      	ldr	r3, [pc, #316]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <Get_KeyState+0xe0>
 8007e98:	4b4d      	ldr	r3, [pc, #308]	@ (8007fd0 <Get_KeyState+0x210>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00f      	beq.n	8007ec0 <Get_KeyState+0x100>
 8007ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <Get_KeyState+0xf0>
 8007ea8:	4b49      	ldr	r3, [pc, #292]	@ (8007fd0 <Get_KeyState+0x210>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d007      	beq.n	8007ec0 <Get_KeyState+0x100>
 8007eb0:	4b47      	ldr	r3, [pc, #284]	@ (8007fd0 <Get_KeyState+0x210>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d106      	bne.n	8007ec6 <Get_KeyState+0x106>
 8007eb8:	4b45      	ldr	r3, [pc, #276]	@ (8007fd0 <Get_KeyState+0x210>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <Get_KeyState+0x106>
    keystate = KEYUPLF;
 8007ec0:	230a      	movs	r3, #10
 8007ec2:	71fb      	strb	r3, [r7, #7]
 8007ec4:	e07e      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xslf))               //x1 y1 z0 11
 8007ec6:	4b42      	ldr	r3, [pc, #264]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d106      	bne.n	8007edc <Get_KeyState+0x11c>
 8007ece:	4b40      	ldr	r3, [pc, #256]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <Get_KeyState+0x11c>
    keystate = KEYSUPLF;
 8007ed6:	230b      	movs	r3, #11
 8007ed8:	71fb      	strb	r3, [r7, #7]
 8007eda:	e073      	b.n	8007fc4 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xri))||((xyzVal.Y==Yup)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xri)))                 //x34 y01 z0 12
 8007edc:	4b3c      	ldr	r3, [pc, #240]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <Get_KeyState+0x12c>
 8007ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d00f      	beq.n	8007f0c <Get_KeyState+0x14c>
 8007eec:	4b38      	ldr	r3, [pc, #224]	@ (8007fd0 <Get_KeyState+0x210>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <Get_KeyState+0x13c>
 8007ef4:	4b36      	ldr	r3, [pc, #216]	@ (8007fd0 <Get_KeyState+0x210>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d007      	beq.n	8007f0c <Get_KeyState+0x14c>
 8007efc:	4b34      	ldr	r3, [pc, #208]	@ (8007fd0 <Get_KeyState+0x210>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d106      	bne.n	8007f12 <Get_KeyState+0x152>
 8007f04:	4b32      	ldr	r3, [pc, #200]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d102      	bne.n	8007f12 <Get_KeyState+0x152>
    keystate = KEYUPRI;
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	71fb      	strb	r3, [r7, #7]
 8007f10:	e058      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsri))               //x3 y1 z0 13
 8007f12:	4b2f      	ldr	r3, [pc, #188]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d106      	bne.n	8007f28 <Get_KeyState+0x168>
 8007f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d102      	bne.n	8007f28 <Get_KeyState+0x168>
    keystate = KEYSUPRI;
 8007f22:	230d      	movs	r3, #13
 8007f24:	71fb      	strb	r3, [r7, #7]
 8007f26:	e04d      	b.n	8007fc4 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xlf))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xlf)))                 //x01 y34 z0 14
 8007f28:	4b29      	ldr	r3, [pc, #164]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d103      	bne.n	8007f38 <Get_KeyState+0x178>
 8007f30:	4b27      	ldr	r3, [pc, #156]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00f      	beq.n	8007f58 <Get_KeyState+0x198>
 8007f38:	4b25      	ldr	r3, [pc, #148]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d103      	bne.n	8007f48 <Get_KeyState+0x188>
 8007f40:	4b23      	ldr	r3, [pc, #140]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d007      	beq.n	8007f58 <Get_KeyState+0x198>
 8007f48:	4b21      	ldr	r3, [pc, #132]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d106      	bne.n	8007f5e <Get_KeyState+0x19e>
 8007f50:	4b1f      	ldr	r3, [pc, #124]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <Get_KeyState+0x19e>
    keystate = KEYDOWNLF;
 8007f58:	230e      	movs	r3, #14
 8007f5a:	71fb      	strb	r3, [r7, #7]
 8007f5c:	e032      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xslf))               //x1 y3 z0 15
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d106      	bne.n	8007f74 <Get_KeyState+0x1b4>
 8007f66:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d102      	bne.n	8007f74 <Get_KeyState+0x1b4>
    keystate = KEYSDOWNLF;
 8007f6e:	230f      	movs	r3, #15
 8007f70:	71fb      	strb	r3, [r7, #7]
 8007f72:	e027      	b.n	8007fc4 <Get_KeyState+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xri))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xri)))                 //x34 y34 z0 16
 8007f74:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d103      	bne.n	8007f84 <Get_KeyState+0x1c4>
 8007f7c:	4b14      	ldr	r3, [pc, #80]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d00f      	beq.n	8007fa4 <Get_KeyState+0x1e4>
 8007f84:	4b12      	ldr	r3, [pc, #72]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d103      	bne.n	8007f94 <Get_KeyState+0x1d4>
 8007f8c:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d007      	beq.n	8007fa4 <Get_KeyState+0x1e4>
 8007f94:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d106      	bne.n	8007faa <Get_KeyState+0x1ea>
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd0 <Get_KeyState+0x210>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d102      	bne.n	8007faa <Get_KeyState+0x1ea>
    keystate = KEYDOWNRI;
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	71fb      	strb	r3, [r7, #7]
 8007fa8:	e00c      	b.n	8007fc4 <Get_KeyState+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsri))               //x3 y3 z0 17
 8007faa:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <Get_KeyState+0x210>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d106      	bne.n	8007fc0 <Get_KeyState+0x200>
 8007fb2:	4b07      	ldr	r3, [pc, #28]	@ (8007fd0 <Get_KeyState+0x210>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d102      	bne.n	8007fc0 <Get_KeyState+0x200>
    keystate = KEYSDOWNRI;
 8007fba:	2311      	movs	r3, #17
 8007fbc:	71fb      	strb	r3, [r7, #7]
 8007fbe:	e001      	b.n	8007fc4 <Get_KeyState+0x204>
  else
    keystate = KEYState_MAX;
 8007fc0:	2312      	movs	r3, #18
 8007fc2:	71fb      	strb	r3, [r7, #7]
//  PrintfDebug("keystate = %d\r\n", keystate);
  return keystate;
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000b80 	.word	0x20000b80

08007fd4 <Get_KeyState_Blue>:

E_RKEYState Get_KeyState_Blue(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  E_RKEYState keystate;
  Get_xyzVal_Blue();
 8007fda:	f7ff fe03 	bl	8007be4 <Get_xyzVal_Blue>
//  PrintfDebug("%d %d\r\n", xyzVal.X, xyzVal.Y);                 //摇杆状态编码
  if((xyzVal.Y == Ysp) && (xyzVal.X == Xsp)) //x2 y2 z0 0
 8007fde:	4b81      	ldr	r3, [pc, #516]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d106      	bne.n	8007ff4 <Get_KeyState_Blue+0x20>
 8007fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d102      	bne.n	8007ff4 <Get_KeyState_Blue+0x20>
    keystate = KEYSTOP;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	71fb      	strb	r3, [r7, #7]
 8007ff2:	e0f1      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Yup) && (xyzVal.X == Xsp))                 //x2 y0 z0 1
 8007ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <Get_KeyState_Blue+0x36>
 8007ffc:	4b79      	ldr	r3, [pc, #484]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d102      	bne.n	800800a <Get_KeyState_Blue+0x36>
    keystate = KEYUP;
 8008004:	2301      	movs	r3, #1
 8008006:	71fb      	strb	r3, [r7, #7]
 8008008:	e0e6      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsp))                //x2 y1 z0 2
 800800a:	4b76      	ldr	r3, [pc, #472]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d106      	bne.n	8008020 <Get_KeyState_Blue+0x4c>
 8008012:	4b74      	ldr	r3, [pc, #464]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d102      	bne.n	8008020 <Get_KeyState_Blue+0x4c>
    keystate = KEYSUP;
 800801a:	2302      	movs	r3, #2
 800801c:	71fb      	strb	r3, [r7, #7]
 800801e:	e0db      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ydn) && (xyzVal.X == Xsp))                 //x2 y4 z0 3
 8008020:	4b70      	ldr	r3, [pc, #448]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d106      	bne.n	8008036 <Get_KeyState_Blue+0x62>
 8008028:	4b6e      	ldr	r3, [pc, #440]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d102      	bne.n	8008036 <Get_KeyState_Blue+0x62>
    keystate = KEYDOWN;
 8008030:	2303      	movs	r3, #3
 8008032:	71fb      	strb	r3, [r7, #7]
 8008034:	e0d0      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsp))                //x2 y3 z0 4
 8008036:	4b6b      	ldr	r3, [pc, #428]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b04      	cmp	r3, #4
 800803c:	d106      	bne.n	800804c <Get_KeyState_Blue+0x78>
 800803e:	4b69      	ldr	r3, [pc, #420]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d102      	bne.n	800804c <Get_KeyState_Blue+0x78>
    keystate = KEYSDOWN;
 8008046:	2304      	movs	r3, #4
 8008048:	71fb      	strb	r3, [r7, #7]
 800804a:	e0c5      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xlf))                 //x0 y2 z0 5
 800804c:	4b65      	ldr	r3, [pc, #404]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d106      	bne.n	8008062 <Get_KeyState_Blue+0x8e>
 8008054:	4b63      	ldr	r3, [pc, #396]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <Get_KeyState_Blue+0x8e>
    keystate = KEYLEFT;
 800805c:	2305      	movs	r3, #5
 800805e:	71fb      	strb	r3, [r7, #7]
 8008060:	e0ba      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xslf))                //x1 y2 z0 6
 8008062:	4b60      	ldr	r3, [pc, #384]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d106      	bne.n	8008078 <Get_KeyState_Blue+0xa4>
 800806a:	4b5e      	ldr	r3, [pc, #376]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d102      	bne.n	8008078 <Get_KeyState_Blue+0xa4>
    keystate = KEYSLEFT;
 8008072:	2306      	movs	r3, #6
 8008074:	71fb      	strb	r3, [r7, #7]
 8008076:	e0af      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) && (xyzVal.X == Xri))                 //x4 y2 z0 7
 8008078:	4b5a      	ldr	r3, [pc, #360]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d106      	bne.n	800808e <Get_KeyState_Blue+0xba>
 8008080:	4b58      	ldr	r3, [pc, #352]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d102      	bne.n	800808e <Get_KeyState_Blue+0xba>
    keystate = KEYRIGHT;
 8008088:	2307      	movs	r3, #7
 800808a:	71fb      	strb	r3, [r7, #7]
 800808c:	e0a4      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysp) &&  (xyzVal.X == Xsri))                //x3 y2 z0 8
 800808e:	4b55      	ldr	r3, [pc, #340]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d106      	bne.n	80080a4 <Get_KeyState_Blue+0xd0>
 8008096:	4b53      	ldr	r3, [pc, #332]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b04      	cmp	r3, #4
 800809c:	d102      	bne.n	80080a4 <Get_KeyState_Blue+0xd0>
    keystate = KEYSRIGHT;
 800809e:	2308      	movs	r3, #8
 80080a0:	71fb      	strb	r3, [r7, #7]
 80080a2:	e099      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xlf))||((xyzVal.Y==Yup)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xlf)))                 //x01 y01 z0 10
 80080a4:	4b4f      	ldr	r3, [pc, #316]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d103      	bne.n	80080b4 <Get_KeyState_Blue+0xe0>
 80080ac:	4b4d      	ldr	r3, [pc, #308]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00f      	beq.n	80080d4 <Get_KeyState_Blue+0x100>
 80080b4:	4b4b      	ldr	r3, [pc, #300]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <Get_KeyState_Blue+0xf0>
 80080bc:	4b49      	ldr	r3, [pc, #292]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d007      	beq.n	80080d4 <Get_KeyState_Blue+0x100>
 80080c4:	4b47      	ldr	r3, [pc, #284]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d106      	bne.n	80080da <Get_KeyState_Blue+0x106>
 80080cc:	4b45      	ldr	r3, [pc, #276]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <Get_KeyState_Blue+0x106>
    keystate = KEYUPLF;
 80080d4:	230a      	movs	r3, #10
 80080d6:	71fb      	strb	r3, [r7, #7]
 80080d8:	e07e      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xslf))               //x1 y1 z0 11
 80080da:	4b42      	ldr	r3, [pc, #264]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d106      	bne.n	80080f0 <Get_KeyState_Blue+0x11c>
 80080e2:	4b40      	ldr	r3, [pc, #256]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d102      	bne.n	80080f0 <Get_KeyState_Blue+0x11c>
    keystate = KEYSUPLF;
 80080ea:	230b      	movs	r3, #11
 80080ec:	71fb      	strb	r3, [r7, #7]
 80080ee:	e073      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Yup)&&(xyzVal.X==Xri))||((xyzVal.Y==Yup)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysup)&&(xyzVal.X==Xri)))                 //x34 y01 z0 12
 80080f0:	4b3c      	ldr	r3, [pc, #240]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <Get_KeyState_Blue+0x12c>
 80080f8:	4b3a      	ldr	r3, [pc, #232]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d00f      	beq.n	8008120 <Get_KeyState_Blue+0x14c>
 8008100:	4b38      	ldr	r3, [pc, #224]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <Get_KeyState_Blue+0x13c>
 8008108:	4b36      	ldr	r3, [pc, #216]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b04      	cmp	r3, #4
 800810e:	d007      	beq.n	8008120 <Get_KeyState_Blue+0x14c>
 8008110:	4b34      	ldr	r3, [pc, #208]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d106      	bne.n	8008126 <Get_KeyState_Blue+0x152>
 8008118:	4b32      	ldr	r3, [pc, #200]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d102      	bne.n	8008126 <Get_KeyState_Blue+0x152>
    keystate = KEYUPRI;
 8008120:	230c      	movs	r3, #12
 8008122:	71fb      	strb	r3, [r7, #7]
 8008124:	e058      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysup) && (xyzVal.X == Xsri))               //x3 y1 z0 13
 8008126:	4b2f      	ldr	r3, [pc, #188]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d106      	bne.n	800813c <Get_KeyState_Blue+0x168>
 800812e:	4b2d      	ldr	r3, [pc, #180]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d102      	bne.n	800813c <Get_KeyState_Blue+0x168>
    keystate = KEYSUPRI;
 8008136:	230d      	movs	r3, #13
 8008138:	71fb      	strb	r3, [r7, #7]
 800813a:	e04d      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xlf))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xslf))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xlf)))                 //x01 y34 z0 14
 800813c:	4b29      	ldr	r3, [pc, #164]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d103      	bne.n	800814c <Get_KeyState_Blue+0x178>
 8008144:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <Get_KeyState_Blue+0x198>
 800814c:	4b25      	ldr	r3, [pc, #148]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d103      	bne.n	800815c <Get_KeyState_Blue+0x188>
 8008154:	4b23      	ldr	r3, [pc, #140]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d007      	beq.n	800816c <Get_KeyState_Blue+0x198>
 800815c:	4b21      	ldr	r3, [pc, #132]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b04      	cmp	r3, #4
 8008162:	d106      	bne.n	8008172 <Get_KeyState_Blue+0x19e>
 8008164:	4b1f      	ldr	r3, [pc, #124]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <Get_KeyState_Blue+0x19e>
    keystate = KEYDOWNLF;
 800816c:	230e      	movs	r3, #14
 800816e:	71fb      	strb	r3, [r7, #7]
 8008170:	e032      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xslf))               //x1 y3 z0 15
 8008172:	4b1c      	ldr	r3, [pc, #112]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b04      	cmp	r3, #4
 8008178:	d106      	bne.n	8008188 <Get_KeyState_Blue+0x1b4>
 800817a:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d102      	bne.n	8008188 <Get_KeyState_Blue+0x1b4>
    keystate = KEYSDOWNLF;
 8008182:	230f      	movs	r3, #15
 8008184:	71fb      	strb	r3, [r7, #7]
 8008186:	e027      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if(((xyzVal.Y==Ydn)&&(xyzVal.X==Xri))||((xyzVal.Y==Ydn)&&(xyzVal.X==Xsri))||((xyzVal.Y==Ysdn)&&(xyzVal.X==Xri)))                 //x34 y34 z0 16
 8008188:	4b16      	ldr	r3, [pc, #88]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d103      	bne.n	8008198 <Get_KeyState_Blue+0x1c4>
 8008190:	4b14      	ldr	r3, [pc, #80]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b03      	cmp	r3, #3
 8008196:	d00f      	beq.n	80081b8 <Get_KeyState_Blue+0x1e4>
 8008198:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d103      	bne.n	80081a8 <Get_KeyState_Blue+0x1d4>
 80081a0:	4b10      	ldr	r3, [pc, #64]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d007      	beq.n	80081b8 <Get_KeyState_Blue+0x1e4>
 80081a8:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d106      	bne.n	80081be <Get_KeyState_Blue+0x1ea>
 80081b0:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d102      	bne.n	80081be <Get_KeyState_Blue+0x1ea>
    keystate = KEYDOWNRI;
 80081b8:	2310      	movs	r3, #16
 80081ba:	71fb      	strb	r3, [r7, #7]
 80081bc:	e00c      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else if((xyzVal.Y == Ysdn) && (xyzVal.X == Xsri))               //x3 y3 z0 17
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d106      	bne.n	80081d4 <Get_KeyState_Blue+0x200>
 80081c6:	4b07      	ldr	r3, [pc, #28]	@ (80081e4 <Get_KeyState_Blue+0x210>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d102      	bne.n	80081d4 <Get_KeyState_Blue+0x200>
    keystate = KEYSDOWNRI;
 80081ce:	2311      	movs	r3, #17
 80081d0:	71fb      	strb	r3, [r7, #7]
 80081d2:	e001      	b.n	80081d8 <Get_KeyState_Blue+0x204>
  else
    keystate = KEYState_MAX;
 80081d4:	2312      	movs	r3, #18
 80081d6:	71fb      	strb	r3, [r7, #7]
//  PrintfDebug("keystate = %d\r\n", keystate);
  return keystate;
 80081d8:	79fb      	ldrb	r3, [r7, #7]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000b80 	.word	0x20000b80

080081e8 <Status_get_and_Powerset>:
#define GoDownleft 6
#define GoDownright 7
#define Mode_PWM 1
#define Mode_CAN 2
void Status_get_and_Powerset(E_RKEYState state)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	71fb      	strb	r3, [r7, #7]
  int status = Mode_PWM;
 80081f2:	2301      	movs	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
  if(status == Mode_PWM){
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	f040 8170 	bne.w	80084de <Status_get_and_Powerset+0x2f6>
	switch(state)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b12      	cmp	r3, #18
 8008202:	f200 825b 	bhi.w	80086bc <Status_get_and_Powerset+0x4d4>
 8008206:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <Status_get_and_Powerset+0x24>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008259 	.word	0x08008259
 8008210:	0800827f 	.word	0x0800827f
 8008214:	080082a5 	.word	0x080082a5
 8008218:	080082cb 	.word	0x080082cb
 800821c:	080082f1 	.word	0x080082f1
 8008220:	08008317 	.word	0x08008317
 8008224:	0800833d 	.word	0x0800833d
 8008228:	08008363 	.word	0x08008363
 800822c:	08008389 	.word	0x08008389
 8008230:	080086bd 	.word	0x080086bd
 8008234:	080083af 	.word	0x080083af
 8008238:	080083d5 	.word	0x080083d5
 800823c:	080083fb 	.word	0x080083fb
 8008240:	08008421 	.word	0x08008421
 8008244:	08008447 	.word	0x08008447
 8008248:	0800846d 	.word	0x0800846d
 800824c:	08008493 	.word	0x08008493
 8008250:	080084b9 	.word	0x080084b9
 8008254:	080086bd 	.word	0x080086bd
	{
	  case KEYSTOP://printf("No State\r\n");
	  Servo_Control(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 0;return;
 8008258:	4bca      	ldr	r3, [pc, #808]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800825a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800825e:	4ac9      	ldr	r2, [pc, #804]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008260:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008264:	4619      	mov	r1, r3
 8008266:	2001      	movs	r0, #1
 8008268:	f7fc f9aa 	bl	80045c0 <Servo_Control>
 800826c:	4bc5      	ldr	r3, [pc, #788]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008274:	4bc3      	ldr	r3, [pc, #780]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800827c:	e222      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUP://printf("Key Up\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 800827e:	4bc1      	ldr	r3, [pc, #772]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008280:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008284:	4abf      	ldr	r2, [pc, #764]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008286:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800828a:	4619      	mov	r1, r3
 800828c:	2002      	movs	r0, #2
 800828e:	f7fc f997 	bl	80045c0 <Servo_Control>
 8008292:	4bbc      	ldr	r3, [pc, #752]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008294:	2201      	movs	r2, #1
 8008296:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800829a:	4bba      	ldr	r3, [pc, #744]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80082a2:	e20f      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 80082a4:	4bb7      	ldr	r3, [pc, #732]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082a6:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80082aa:	4ab6      	ldr	r2, [pc, #728]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082ac:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80082b0:	4619      	mov	r1, r3
 80082b2:	2002      	movs	r0, #2
 80082b4:	f7fc f984 	bl	80045c0 <Servo_Control>
 80082b8:	4bb2      	ldr	r3, [pc, #712]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80082c0:	4bb0      	ldr	r3, [pc, #704]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80082c8:	e1fc      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWN://printf("Key Down\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 80082ca:	4bae      	ldr	r3, [pc, #696]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082cc:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80082d0:	4aac      	ldr	r2, [pc, #688]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082d2:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80082d6:	4619      	mov	r1, r3
 80082d8:	2002      	movs	r0, #2
 80082da:	f7fc f971 	bl	80045c0 <Servo_Control>
 80082de:	4ba9      	ldr	r3, [pc, #676]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082e0:	2202      	movs	r2, #2
 80082e2:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80082e6:	4ba7      	ldr	r3, [pc, #668]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80082ee:	e1e9      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
	  Servo_Control(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 80082f0:	4ba4      	ldr	r3, [pc, #656]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082f2:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80082f6:	4aa3      	ldr	r2, [pc, #652]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80082f8:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80082fc:	4619      	mov	r1, r3
 80082fe:	2002      	movs	r0, #2
 8008300:	f7fc f95e 	bl	80045c0 <Servo_Control>
 8008304:	4b9f      	ldr	r3, [pc, #636]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008306:	2202      	movs	r2, #2
 8008308:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800830c:	4b9d      	ldr	r3, [pc, #628]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008314:	e1d6      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008316:	4b9b      	ldr	r3, [pc, #620]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008318:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800831c:	4a99      	ldr	r2, [pc, #612]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800831e:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008322:	4619      	mov	r1, r3
 8008324:	2003      	movs	r0, #3
 8008326:	f7fc f94b 	bl	80045c0 <Servo_Control>
 800832a:	4b96      	ldr	r3, [pc, #600]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008332:	4b94      	ldr	r3, [pc, #592]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008334:	2201      	movs	r2, #1
 8008336:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800833a:	e1c3      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 800833c:	4b91      	ldr	r3, [pc, #580]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800833e:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008342:	4a90      	ldr	r2, [pc, #576]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008344:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008348:	4619      	mov	r1, r3
 800834a:	2003      	movs	r0, #3
 800834c:	f7fc f938 	bl	80045c0 <Servo_Control>
 8008350:	4b8c      	ldr	r3, [pc, #560]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008358:	4b8a      	ldr	r3, [pc, #552]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800835a:	2201      	movs	r2, #1
 800835c:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008360:	e1b0      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 2;return;
 8008362:	4b88      	ldr	r3, [pc, #544]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008364:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008368:	4a86      	ldr	r2, [pc, #536]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800836a:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800836e:	4619      	mov	r1, r3
 8008370:	2003      	movs	r0, #3
 8008372:	f7fc f925 	bl	80045c0 <Servo_Control>
 8008376:	4b83      	ldr	r3, [pc, #524]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008378:	2200      	movs	r2, #0
 800837a:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800837e:	4b81      	ldr	r3, [pc, #516]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008380:	2202      	movs	r2, #2
 8008382:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008386:	e19d      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
	  Servo_Control(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008388:	4b7e      	ldr	r3, [pc, #504]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800838a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800838e:	4a7d      	ldr	r2, [pc, #500]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008390:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008394:	4619      	mov	r1, r3
 8008396:	2003      	movs	r0, #3
 8008398:	f7fc f912 	bl	80045c0 <Servo_Control>
 800839c:	4b79      	ldr	r3, [pc, #484]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80083a4:	4b77      	ldr	r3, [pc, #476]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80083ac:	e18a      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
	  Servo_Control(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 80083ae:	4b75      	ldr	r3, [pc, #468]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083b0:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80083b4:	4a73      	ldr	r2, [pc, #460]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083b6:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80083ba:	4619      	mov	r1, r3
 80083bc:	2004      	movs	r0, #4
 80083be:	f7fc f8ff 	bl	80045c0 <Servo_Control>
 80083c2:	4b70      	ldr	r3, [pc, #448]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80083ca:	4b6e      	ldr	r3, [pc, #440]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80083d2:	e177      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
	  Servo_Control(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 80083d4:	4b6b      	ldr	r3, [pc, #428]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083d6:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80083da:	4a6a      	ldr	r2, [pc, #424]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083dc:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80083e0:	4619      	mov	r1, r3
 80083e2:	2004      	movs	r0, #4
 80083e4:	f7fc f8ec 	bl	80045c0 <Servo_Control>
 80083e8:	4b66      	ldr	r3, [pc, #408]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80083f0:	4b64      	ldr	r3, [pc, #400]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80083f8:	e164      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
	  Servo_Control(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 80083fa:	4b62      	ldr	r3, [pc, #392]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80083fc:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008400:	4a60      	ldr	r2, [pc, #384]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008402:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008406:	4619      	mov	r1, r3
 8008408:	2005      	movs	r0, #5
 800840a:	f7fc f8d9 	bl	80045c0 <Servo_Control>
 800840e:	4b5d      	ldr	r3, [pc, #372]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008410:	2201      	movs	r2, #1
 8008412:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008416:	4b5b      	ldr	r3, [pc, #364]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008418:	2202      	movs	r2, #2
 800841a:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800841e:	e151      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
	  Servo_Control(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 8008420:	4b58      	ldr	r3, [pc, #352]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008422:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008426:	4a57      	ldr	r2, [pc, #348]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008428:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800842c:	4619      	mov	r1, r3
 800842e:	2005      	movs	r0, #5
 8008430:	f7fc f8c6 	bl	80045c0 <Servo_Control>
 8008434:	4b53      	ldr	r3, [pc, #332]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008436:	2201      	movs	r2, #1
 8008438:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800843c:	4b51      	ldr	r3, [pc, #324]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800843e:	2202      	movs	r2, #2
 8008440:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008444:	e13e      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
	  Servo_Control(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 8008446:	4b4f      	ldr	r3, [pc, #316]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008448:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800844c:	4a4d      	ldr	r2, [pc, #308]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800844e:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008452:	4619      	mov	r1, r3
 8008454:	2006      	movs	r0, #6
 8008456:	f7fc f8b3 	bl	80045c0 <Servo_Control>
 800845a:	4b4a      	ldr	r3, [pc, #296]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800845c:	2202      	movs	r2, #2
 800845e:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008462:	4b48      	ldr	r3, [pc, #288]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800846a:	e12b      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
	  Servo_Control(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 800846c:	4b45      	ldr	r3, [pc, #276]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800846e:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008472:	4a44      	ldr	r2, [pc, #272]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008474:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008478:	4619      	mov	r1, r3
 800847a:	2006      	movs	r0, #6
 800847c:	f7fc f8a0 	bl	80045c0 <Servo_Control>
 8008480:	4b40      	ldr	r3, [pc, #256]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008482:	2202      	movs	r2, #2
 8008484:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008488:	4b3e      	ldr	r3, [pc, #248]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800848a:	2201      	movs	r2, #1
 800848c:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008490:	e118      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
	  Servo_Control(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008492:	4b3c      	ldr	r3, [pc, #240]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008494:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008498:	4a3a      	ldr	r2, [pc, #232]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800849a:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800849e:	4619      	mov	r1, r3
 80084a0:	2007      	movs	r0, #7
 80084a2:	f7fc f88d 	bl	80045c0 <Servo_Control>
 80084a6:	4b37      	ldr	r3, [pc, #220]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084a8:	2202      	movs	r2, #2
 80084aa:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80084ae:	4b35      	ldr	r3, [pc, #212]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084b0:	2202      	movs	r2, #2
 80084b2:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80084b6:	e105      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
	  Servo_Control(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 80084b8:	4b32      	ldr	r3, [pc, #200]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084ba:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80084be:	4a31      	ldr	r2, [pc, #196]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084c0:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80084c4:	4619      	mov	r1, r3
 80084c6:	2007      	movs	r0, #7
 80084c8:	f7fc f87a 	bl	80045c0 <Servo_Control>
 80084cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084ce:	2202      	movs	r2, #2
 80084d0:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80084d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80084dc:	e0f2      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  default:
		break;
	}
  }
  else if(status == Mode_CAN){
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	f040 80ee 	bne.w	80086c2 <Status_get_and_Powerset+0x4da>
	switch(state)
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	2b12      	cmp	r3, #18
 80084ea:	f200 80e9 	bhi.w	80086c0 <Status_get_and_Powerset+0x4d8>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <Status_get_and_Powerset+0x30c>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008541 	.word	0x08008541
 80084f8:	08008557 	.word	0x08008557
 80084fc:	0800856d 	.word	0x0800856d
 8008500:	08008589 	.word	0x08008589
 8008504:	0800859f 	.word	0x0800859f
 8008508:	080085b5 	.word	0x080085b5
 800850c:	080085cb 	.word	0x080085cb
 8008510:	080085e1 	.word	0x080085e1
 8008514:	080085f7 	.word	0x080085f7
 8008518:	080086c1 	.word	0x080086c1
 800851c:	0800860d 	.word	0x0800860d
 8008520:	08008623 	.word	0x08008623
 8008524:	08008639 	.word	0x08008639
 8008528:	0800864f 	.word	0x0800864f
 800852c:	08008665 	.word	0x08008665
 8008530:	0800867b 	.word	0x0800867b
 8008534:	08008691 	.word	0x08008691
 8008538:	080086a7 	.word	0x080086a7
 800853c:	080086c1 	.word	0x080086c1
	{
	  case KEYSTOP://printf("No State\r\n");
		  Servo_Control_CAN(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008540:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008542:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008546:	4a0f      	ldr	r2, [pc, #60]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008548:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800854c:	4619      	mov	r1, r3
 800854e:	2001      	movs	r0, #1
 8008550:	f7fd f898 	bl	8005684 <Servo_Control_CAN>
 8008554:	e0b6      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUP://printf("Key Up\r\n");
		  Servo_Control_CAN(2,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008556:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008558:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800855c:	4a09      	ldr	r2, [pc, #36]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800855e:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008562:	4619      	mov	r1, r3
 8008564:	2002      	movs	r0, #2
 8008566:	f7fd f88d 	bl	8005684 <Servo_Control_CAN>
 800856a:	e0ab      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
		  Servo_Control_CAN(2,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800856c:	4b05      	ldr	r3, [pc, #20]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 800856e:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008572:	4a04      	ldr	r2, [pc, #16]	@ (8008584 <Status_get_and_Powerset+0x39c>)
 8008574:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008578:	4619      	mov	r1, r3
 800857a:	2002      	movs	r0, #2
 800857c:	f7fd f882 	bl	8005684 <Servo_Control_CAN>
 8008580:	e0a0      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
 8008582:	bf00      	nop
 8008584:	200005d8 	.word	0x200005d8
		break;
	  case KEYDOWN://printf("Key Down\r\n");
		  Servo_Control_CAN(3,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008588:	4b50      	ldr	r3, [pc, #320]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800858a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800858e:	4a4f      	ldr	r2, [pc, #316]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008590:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008594:	4619      	mov	r1, r3
 8008596:	2003      	movs	r0, #3
 8008598:	f7fd f874 	bl	8005684 <Servo_Control_CAN>
 800859c:	e092      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
		  Servo_Control_CAN(3,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800859e:	4b4b      	ldr	r3, [pc, #300]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085a0:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80085a4:	4a49      	ldr	r2, [pc, #292]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085a6:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80085aa:	4619      	mov	r1, r3
 80085ac:	2003      	movs	r0, #3
 80085ae:	f7fd f869 	bl	8005684 <Servo_Control_CAN>
 80085b2:	e087      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
		  Servo_Control_CAN(4,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085b4:	4b45      	ldr	r3, [pc, #276]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085b6:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80085ba:	4a44      	ldr	r2, [pc, #272]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085bc:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80085c0:	4619      	mov	r1, r3
 80085c2:	2004      	movs	r0, #4
 80085c4:	f7fd f85e 	bl	8005684 <Servo_Control_CAN>
 80085c8:	e07c      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
		  Servo_Control_CAN(4,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085ca:	4b40      	ldr	r3, [pc, #256]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085cc:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80085d0:	4a3e      	ldr	r2, [pc, #248]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085d2:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80085d6:	4619      	mov	r1, r3
 80085d8:	2004      	movs	r0, #4
 80085da:	f7fd f853 	bl	8005684 <Servo_Control_CAN>
 80085de:	e071      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
		  Servo_Control_CAN(5,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085e0:	4b3a      	ldr	r3, [pc, #232]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085e2:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80085e6:	4a39      	ldr	r2, [pc, #228]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085e8:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80085ec:	4619      	mov	r1, r3
 80085ee:	2005      	movs	r0, #5
 80085f0:	f7fd f848 	bl	8005684 <Servo_Control_CAN>
 80085f4:	e066      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
		  Servo_Control_CAN(5,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80085f6:	4b35      	ldr	r3, [pc, #212]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085f8:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80085fc:	4a33      	ldr	r2, [pc, #204]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80085fe:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008602:	4619      	mov	r1, r3
 8008604:	2005      	movs	r0, #5
 8008606:	f7fd f83d 	bl	8005684 <Servo_Control_CAN>
 800860a:	e05b      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
		  Servo_Control_CAN(6,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800860c:	4b2f      	ldr	r3, [pc, #188]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800860e:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008612:	4a2e      	ldr	r2, [pc, #184]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008614:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008618:	4619      	mov	r1, r3
 800861a:	2006      	movs	r0, #6
 800861c:	f7fd f832 	bl	8005684 <Servo_Control_CAN>
 8008620:	e050      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
		  Servo_Control_CAN(6,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008622:	4b2a      	ldr	r3, [pc, #168]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008624:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008628:	4a28      	ldr	r2, [pc, #160]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800862a:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800862e:	4619      	mov	r1, r3
 8008630:	2006      	movs	r0, #6
 8008632:	f7fd f827 	bl	8005684 <Servo_Control_CAN>
 8008636:	e045      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
		  Servo_Control_CAN(7,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008638:	4b24      	ldr	r3, [pc, #144]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800863a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800863e:	4a23      	ldr	r2, [pc, #140]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008640:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008644:	4619      	mov	r1, r3
 8008646:	2007      	movs	r0, #7
 8008648:	f7fd f81c 	bl	8005684 <Servo_Control_CAN>
 800864c:	e03a      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
		  Servo_Control_CAN(7,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800864e:	4b1f      	ldr	r3, [pc, #124]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008650:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008654:	4a1d      	ldr	r2, [pc, #116]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008656:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800865a:	4619      	mov	r1, r3
 800865c:	2007      	movs	r0, #7
 800865e:	f7fd f811 	bl	8005684 <Servo_Control_CAN>
 8008662:	e02f      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
		  Servo_Control_CAN(8,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008664:	4b19      	ldr	r3, [pc, #100]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008666:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800866a:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800866c:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008670:	4619      	mov	r1, r3
 8008672:	2008      	movs	r0, #8
 8008674:	f7fd f806 	bl	8005684 <Servo_Control_CAN>
 8008678:	e024      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
		  Servo_Control_CAN(8,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 800867a:	4b14      	ldr	r3, [pc, #80]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 800867c:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008680:	4a12      	ldr	r2, [pc, #72]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008682:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008686:	4619      	mov	r1, r3
 8008688:	2008      	movs	r0, #8
 800868a:	f7fc fffb 	bl	8005684 <Servo_Control_CAN>
 800868e:	e019      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
		  Servo_Control_CAN(9,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 8008690:	4b0e      	ldr	r3, [pc, #56]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008692:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008696:	4a0d      	ldr	r2, [pc, #52]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 8008698:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800869c:	4619      	mov	r1, r3
 800869e:	2009      	movs	r0, #9
 80086a0:	f7fc fff0 	bl	8005684 <Servo_Control_CAN>
 80086a4:	e00e      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
		  Servo_Control_CAN(9,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);return;
 80086a6:	4b09      	ldr	r3, [pc, #36]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80086a8:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80086ac:	4a07      	ldr	r2, [pc, #28]	@ (80086cc <Status_get_and_Powerset+0x4e4>)
 80086ae:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80086b2:	4619      	mov	r1, r3
 80086b4:	2009      	movs	r0, #9
 80086b6:	f7fc ffe5 	bl	8005684 <Servo_Control_CAN>
 80086ba:	e003      	b.n	80086c4 <Status_get_and_Powerset+0x4dc>
		break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <Status_get_and_Powerset+0x4da>
		break;
	  case KEYState_MAX://printf("State\r\n");
		break;
	  default:
		break;
 80086c0:	bf00      	nop
	}
  }
  return;
 80086c2:	bf00      	nop
}
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200005d8 	.word	0x200005d8

080086d0 <Status_get_and_Powerset_Blue>:

void Status_get_and_Powerset_Blue(E_RKEYState state){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
	switch(state)
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	2b12      	cmp	r3, #18
 80086de:	f200 816c 	bhi.w	80089ba <Status_get_and_Powerset_Blue+0x2ea>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <Status_get_and_Powerset_Blue+0x18>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	08008735 	.word	0x08008735
 80086ec:	0800875b 	.word	0x0800875b
 80086f0:	08008781 	.word	0x08008781
 80086f4:	080087a7 	.word	0x080087a7
 80086f8:	080087cd 	.word	0x080087cd
 80086fc:	080087f3 	.word	0x080087f3
 8008700:	08008819 	.word	0x08008819
 8008704:	0800883f 	.word	0x0800883f
 8008708:	08008865 	.word	0x08008865
 800870c:	080089bb 	.word	0x080089bb
 8008710:	0800888b 	.word	0x0800888b
 8008714:	080088b1 	.word	0x080088b1
 8008718:	080088d7 	.word	0x080088d7
 800871c:	080088fd 	.word	0x080088fd
 8008720:	08008923 	.word	0x08008923
 8008724:	08008949 	.word	0x08008949
 8008728:	0800896f 	.word	0x0800896f
 800872c:	08008995 	.word	0x08008995
 8008730:	080089bb 	.word	0x080089bb
	{
	  case KEYSTOP://printf("No State\r\n");
	  Servo_Control_Blue(NoState,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 0;return;
 8008734:	4ba3      	ldr	r3, [pc, #652]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008736:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800873a:	4aa2      	ldr	r2, [pc, #648]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800873c:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008740:	4619      	mov	r1, r3
 8008742:	2001      	movs	r0, #1
 8008744:	f7fc fb6c 	bl	8004e20 <Servo_Control_Blue>
 8008748:	4b9e      	ldr	r3, [pc, #632]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800874a:	2200      	movs	r2, #0
 800874c:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008750:	4b9c      	ldr	r3, [pc, #624]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008758:	e131      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYUP://printf("Key Up\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 800875a:	4b9a      	ldr	r3, [pc, #616]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800875c:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008760:	4a98      	ldr	r2, [pc, #608]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008762:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008766:	4619      	mov	r1, r3
 8008768:	2002      	movs	r0, #2
 800876a:	f7fc fb59 	bl	8004e20 <Servo_Control_Blue>
 800876e:	4b95      	ldr	r3, [pc, #596]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008770:	2201      	movs	r2, #1
 8008772:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008776:	4b93      	ldr	r3, [pc, #588]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800877e:	e11e      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUP://printf("Key Slowly Up\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 0;return;
 8008780:	4b90      	ldr	r3, [pc, #576]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008782:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008786:	4a8f      	ldr	r2, [pc, #572]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008788:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800878c:	4619      	mov	r1, r3
 800878e:	2002      	movs	r0, #2
 8008790:	f7fc fb46 	bl	8004e20 <Servo_Control_Blue>
 8008794:	4b8b      	ldr	r3, [pc, #556]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008796:	2201      	movs	r2, #1
 8008798:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800879c:	4b89      	ldr	r3, [pc, #548]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80087a4:	e10b      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWN://printf("Key Down\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 80087a6:	4b87      	ldr	r3, [pc, #540]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087a8:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80087ac:	4a85      	ldr	r2, [pc, #532]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087ae:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80087b2:	4619      	mov	r1, r3
 80087b4:	2002      	movs	r0, #2
 80087b6:	f7fc fb33 	bl	8004e20 <Servo_Control_Blue>
 80087ba:	4b82      	ldr	r3, [pc, #520]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087bc:	2202      	movs	r2, #2
 80087be:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80087c2:	4b80      	ldr	r3, [pc, #512]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80087ca:	e0f8      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWN://printf("Key Slowly Down\r\n");
	  Servo_Control_Blue(Gostright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 0;return;
 80087cc:	4b7d      	ldr	r3, [pc, #500]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087ce:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80087d2:	4a7c      	ldr	r2, [pc, #496]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087d4:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80087d8:	4619      	mov	r1, r3
 80087da:	2002      	movs	r0, #2
 80087dc:	f7fc fb20 	bl	8004e20 <Servo_Control_Blue>
 80087e0:	4b78      	ldr	r3, [pc, #480]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087e2:	2202      	movs	r2, #2
 80087e4:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80087e8:	4b76      	ldr	r3, [pc, #472]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80087f0:	e0e5      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYLEFT://printf("Key Left\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 80087f2:	4b74      	ldr	r3, [pc, #464]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087f4:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80087f8:	4a72      	ldr	r2, [pc, #456]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80087fa:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80087fe:	4619      	mov	r1, r3
 8008800:	2003      	movs	r0, #3
 8008802:	f7fc fb0d 	bl	8004e20 <Servo_Control_Blue>
 8008806:	4b6f      	ldr	r3, [pc, #444]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800880e:	4b6d      	ldr	r3, [pc, #436]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008810:	2201      	movs	r2, #1
 8008812:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008816:	e0d2      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSLEFT://printf("Key Slowly Left\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008818:	4b6a      	ldr	r3, [pc, #424]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800881a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800881e:	4a69      	ldr	r2, [pc, #420]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008820:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008824:	4619      	mov	r1, r3
 8008826:	2003      	movs	r0, #3
 8008828:	f7fc fafa 	bl	8004e20 <Servo_Control_Blue>
 800882c:	4b65      	ldr	r3, [pc, #404]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008834:	4b63      	ldr	r3, [pc, #396]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008836:	2201      	movs	r2, #1
 8008838:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800883c:	e0bf      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYRIGHT://printf("Key Right\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 2;return;
 800883e:	4b61      	ldr	r3, [pc, #388]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008840:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008844:	4a5f      	ldr	r2, [pc, #380]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008846:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800884a:	4619      	mov	r1, r3
 800884c:	2003      	movs	r0, #3
 800884e:	f7fc fae7 	bl	8004e20 <Servo_Control_Blue>
 8008852:	4b5c      	ldr	r3, [pc, #368]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800885a:	4b5a      	ldr	r3, [pc, #360]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800885c:	2202      	movs	r2, #2
 800885e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008862:	e0ac      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSRIGHT://printf("Key Slowly Right\r\n");
	  Servo_Control_Blue(Gorightorleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 0;board_config.motor_status.Direction = 1;return;
 8008864:	4b57      	ldr	r3, [pc, #348]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008866:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800886a:	4a56      	ldr	r2, [pc, #344]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800886c:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008870:	4619      	mov	r1, r3
 8008872:	2003      	movs	r0, #3
 8008874:	f7fc fad4 	bl	8004e20 <Servo_Control_Blue>
 8008878:	4b52      	ldr	r3, [pc, #328]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008880:	4b50      	ldr	r3, [pc, #320]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008882:	2201      	movs	r2, #1
 8008884:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008888:	e099      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYPRESS:///printf("Press Key\r\n");
		break;

	  case KEYUPLF://printf("Key Up Left\r\n");
	  Servo_Control_Blue(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 800888a:	4b4e      	ldr	r3, [pc, #312]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800888c:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008890:	4a4c      	ldr	r2, [pc, #304]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008892:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008896:	4619      	mov	r1, r3
 8008898:	2004      	movs	r0, #4
 800889a:	f7fc fac1 	bl	8004e20 <Servo_Control_Blue>
 800889e:	4b49      	ldr	r3, [pc, #292]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80088a6:	4b47      	ldr	r3, [pc, #284]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80088ae:	e086      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUPLF://printf("Key Slowly Up Left\r\n");
	  Servo_Control_Blue(GoUpleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 1;return;
 80088b0:	4b44      	ldr	r3, [pc, #272]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088b2:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80088b6:	4a43      	ldr	r2, [pc, #268]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088b8:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80088bc:	4619      	mov	r1, r3
 80088be:	2004      	movs	r0, #4
 80088c0:	f7fc faae 	bl	8004e20 <Servo_Control_Blue>
 80088c4:	4b3f      	ldr	r3, [pc, #252]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80088cc:	4b3d      	ldr	r3, [pc, #244]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80088d4:	e073      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYUPRI://printf("Key Up Right\r\n");
	  Servo_Control_Blue(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 80088d6:	4b3b      	ldr	r3, [pc, #236]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088d8:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 80088dc:	4a39      	ldr	r2, [pc, #228]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088de:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80088e2:	4619      	mov	r1, r3
 80088e4:	2005      	movs	r0, #5
 80088e6:	f7fc fa9b 	bl	8004e20 <Servo_Control_Blue>
 80088ea:	4b36      	ldr	r3, [pc, #216]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80088f2:	4b34      	ldr	r3, [pc, #208]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088f4:	2202      	movs	r2, #2
 80088f6:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80088fa:	e060      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSUPRI://printf("Key Slowly Up Right\r\n");
	  Servo_Control_Blue(GoUpright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 1;board_config.motor_status.Direction = 2;return;
 80088fc:	4b31      	ldr	r3, [pc, #196]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80088fe:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008902:	4a30      	ldr	r2, [pc, #192]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008904:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008908:	4619      	mov	r1, r3
 800890a:	2005      	movs	r0, #5
 800890c:	f7fc fa88 	bl	8004e20 <Servo_Control_Blue>
 8008910:	4b2c      	ldr	r3, [pc, #176]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008912:	2201      	movs	r2, #1
 8008914:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008918:	4b2a      	ldr	r3, [pc, #168]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800891a:	2202      	movs	r2, #2
 800891c:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008920:	e04d      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWNLF://printf("Key Down Left\r\n");
	  Servo_Control_Blue(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 8008922:	4b28      	ldr	r3, [pc, #160]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008924:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008928:	4a26      	ldr	r2, [pc, #152]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800892a:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800892e:	4619      	mov	r1, r3
 8008930:	2006      	movs	r0, #6
 8008932:	f7fc fa75 	bl	8004e20 <Servo_Control_Blue>
 8008936:	4b23      	ldr	r3, [pc, #140]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008938:	2202      	movs	r2, #2
 800893a:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800893e:	4b21      	ldr	r3, [pc, #132]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008940:	2201      	movs	r2, #1
 8008942:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008946:	e03a      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWNLF://printf("Key Slowly Down Left\r\n");
	  Servo_Control_Blue(GoDownleft,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 1;return;
 8008948:	4b1e      	ldr	r3, [pc, #120]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800894a:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800894e:	4a1d      	ldr	r2, [pc, #116]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008950:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 8008954:	4619      	mov	r1, r3
 8008956:	2006      	movs	r0, #6
 8008958:	f7fc fa62 	bl	8004e20 <Servo_Control_Blue>
 800895c:	4b19      	ldr	r3, [pc, #100]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800895e:	2202      	movs	r2, #2
 8008960:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 8008964:	4b17      	ldr	r3, [pc, #92]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008966:	2201      	movs	r2, #1
 8008968:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 800896c:	e027      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYDOWNRI://printf("Key Down Right\r\n");
	  Servo_Control_Blue(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 800896e:	4b15      	ldr	r3, [pc, #84]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008970:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 8008974:	4a13      	ldr	r2, [pc, #76]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008976:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 800897a:	4619      	mov	r1, r3
 800897c:	2007      	movs	r0, #7
 800897e:	f7fc fa4f 	bl	8004e20 <Servo_Control_Blue>
 8008982:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008984:	2202      	movs	r2, #2
 8008986:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 800898a:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800898c:	2202      	movs	r2, #2
 800898e:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 8008992:	e014      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYSDOWNRI://printf("Key Slowly Down Right\r\n");
	  Servo_Control_Blue(GoDownright,board_config.Rockers.Rocker_X,board_config.Rockers.Rocker_Y);board_config.motor_status.Gear = 2;board_config.motor_status.Direction = 2;return;
 8008994:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 8008996:	f8b3 33b8 	ldrh.w	r3, [r3, #952]	@ 0x3b8
 800899a:	4a0a      	ldr	r2, [pc, #40]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 800899c:	f8b2 23ba 	ldrh.w	r2, [r2, #954]	@ 0x3ba
 80089a0:	4619      	mov	r1, r3
 80089a2:	2007      	movs	r0, #7
 80089a4:	f7fc fa3c 	bl	8004e20 <Servo_Control_Blue>
 80089a8:	4b06      	ldr	r3, [pc, #24]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80089aa:	2202      	movs	r2, #2
 80089ac:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <Status_get_and_Powerset_Blue+0x2f4>)
 80089b2:	2202      	movs	r2, #2
 80089b4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
 80089b8:	e001      	b.n	80089be <Status_get_and_Powerset_Blue+0x2ee>
		break;
	  case KEYState_MAX://printf("State\r\n");
		break;
	  default:
		break;
 80089ba:	bf00      	nop
	}
	return ;
 80089bc:	bf00      	nop
}
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200005d8 	.word	0x200005d8

080089c8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80089cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089ce:	4a1b      	ldr	r2, [pc, #108]	@ (8008a3c <MX_UART4_Init+0x74>)
 80089d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80089d2:	4b19      	ldr	r3, [pc, #100]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80089d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80089da:	4b17      	ldr	r3, [pc, #92]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089dc:	2200      	movs	r2, #0
 80089de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80089e0:	4b15      	ldr	r3, [pc, #84]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80089e6:	4b14      	ldr	r3, [pc, #80]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80089ec:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089ee:	220c      	movs	r2, #12
 80089f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80089f2:	4b11      	ldr	r3, [pc, #68]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80089f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a38 <MX_UART4_Init+0x70>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80089fe:	480e      	ldr	r0, [pc, #56]	@ (8008a38 <MX_UART4_Init+0x70>)
 8008a00:	f003 fc7a 	bl	800c2f8 <HAL_UART_Init>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008a0a:	f7fb fdd3 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
   __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);  // 启用IDLE中断
 8008a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <MX_UART4_Init+0x70>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	4b08      	ldr	r3, [pc, #32]	@ (8008a38 <MX_UART4_Init+0x70>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0210 	orr.w	r2, r2, #16
 8008a1c:	60da      	str	r2, [r3, #12]
   __HAL_UART_CLEAR_FLAG(&huart4, UART_FLAG_TC | UART_FLAG_RXNE | UART_FLAG_IDLE);  // 清除标志
 8008a1e:	4b06      	ldr	r3, [pc, #24]	@ (8008a38 <MX_UART4_Init+0x70>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f06f 0270 	mvn.w	r2, #112	@ 0x70
 8008a26:	601a      	str	r2, [r3, #0]
   HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxu4_buffer, RXU4_BUFFER_SIZE);
 8008a28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a2c:	4904      	ldr	r1, [pc, #16]	@ (8008a40 <MX_UART4_Init+0x78>)
 8008a2e:	4802      	ldr	r0, [pc, #8]	@ (8008a38 <MX_UART4_Init+0x70>)
 8008a30:	f003 fd62 	bl	800c4f8 <HAL_UART_Receive_DMA>
  /* USER CODE END UART4_Init 2 */

}
 8008a34:	bf00      	nop
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000b90 	.word	0x20000b90
 8008a3c:	40004c00 	.word	0x40004c00
 8008a40:	200009c4 	.word	0x200009c4

08008a44 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008a48:	4b11      	ldr	r3, [pc, #68]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a4a:	4a12      	ldr	r2, [pc, #72]	@ (8008a94 <MX_UART5_Init+0x50>)
 8008a4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8008a4e:	4b10      	ldr	r3, [pc, #64]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008a54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008a56:	4b0e      	ldr	r3, [pc, #56]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8008a62:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008a68:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a6a:	220c      	movs	r2, #12
 8008a6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a6e:	4b08      	ldr	r3, [pc, #32]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a74:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008a7a:	4805      	ldr	r0, [pc, #20]	@ (8008a90 <MX_UART5_Init+0x4c>)
 8008a7c:	f003 fc3c 	bl	800c2f8 <HAL_UART_Init>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8008a86:	f7fb fd95 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8008a8a:	bf00      	nop
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000bd8 	.word	0x20000bd8
 8008a94:	40005000 	.word	0x40005000

08008a98 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a9c:	4b11      	ldr	r3, [pc, #68]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008a9e:	4a12      	ldr	r2, [pc, #72]	@ (8008ae8 <MX_USART1_UART_Init+0x50>)
 8008aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8008aa2:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008aa4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008abc:	4b09      	ldr	r3, [pc, #36]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008abe:	220c      	movs	r2, #12
 8008ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ac2:	4b08      	ldr	r3, [pc, #32]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ac8:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008ace:	4805      	ldr	r0, [pc, #20]	@ (8008ae4 <MX_USART1_UART_Init+0x4c>)
 8008ad0:	f003 fc12 	bl	800c2f8 <HAL_UART_Init>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008ada:	f7fb fd6b 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008ade:	bf00      	nop
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000c20 	.word	0x20000c20
 8008ae8:	40011000 	.word	0x40011000

08008aec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008af0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008af2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b64 <MX_USART2_UART_Init+0x78>)
 8008af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008af6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008af8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008afe:	4b18      	ldr	r3, [pc, #96]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008b04:	4b16      	ldr	r3, [pc, #88]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008b0a:	4b15      	ldr	r3, [pc, #84]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008b10:	4b13      	ldr	r3, [pc, #76]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b12:	220c      	movs	r2, #12
 8008b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b16:	4b12      	ldr	r3, [pc, #72]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b1c:	4b10      	ldr	r3, [pc, #64]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008b22:	480f      	ldr	r0, [pc, #60]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b24:	f003 fbe8 	bl	800c2f8 <HAL_UART_Init>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008b2e:	f7fb fd41 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // 启用IDLE中断
 8008b32:	4b0b      	ldr	r3, [pc, #44]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f042 0210 	orr.w	r2, r2, #16
 8008b40:	60da      	str	r2, [r3, #12]
  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_TC | UART_FLAG_RXNE | UART_FLAG_IDLE);  // 清除标志
 8008b42:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f06f 0270 	mvn.w	r2, #112	@ 0x70
 8008b4a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)imu_buf, imu_buf);
 8008b4c:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <MX_USART2_UART_Init+0x7c>)
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	4905      	ldr	r1, [pc, #20]	@ (8008b68 <MX_USART2_UART_Init+0x7c>)
 8008b54:	4802      	ldr	r0, [pc, #8]	@ (8008b60 <MX_USART2_UART_Init+0x74>)
 8008b56:	f003 fccf 	bl	800c4f8 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000c68 	.word	0x20000c68
 8008b64:	40004400 	.word	0x40004400
 8008b68:	200004d4 	.word	0x200004d4

08008b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008b70:	4b11      	ldr	r3, [pc, #68]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b72:	4a12      	ldr	r2, [pc, #72]	@ (8008bbc <MX_USART3_UART_Init+0x50>)
 8008b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008b76:	4b10      	ldr	r3, [pc, #64]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008b90:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b92:	220c      	movs	r2, #12
 8008b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b96:	4b08      	ldr	r3, [pc, #32]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008ba2:	4805      	ldr	r0, [pc, #20]	@ (8008bb8 <MX_USART3_UART_Init+0x4c>)
 8008ba4:	f003 fba8 	bl	800c2f8 <HAL_UART_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008bae:	f7fb fd01 	bl	80045b4 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
//    HAL_UART_Receive_DMA(&huart3,RECV_4G_BUFF,sizeof(RECV_4G_BUFF));
  /* USER CODE END USART3_Init 2 */

}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000cb0 	.word	0x20000cb0
 8008bbc:	40004800 	.word	0x40004800

08008bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b092      	sub	sp, #72	@ 0x48
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008bcc:	2200      	movs	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	605a      	str	r2, [r3, #4]
 8008bd2:	609a      	str	r2, [r3, #8]
 8008bd4:	60da      	str	r2, [r3, #12]
 8008bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8008d08 <HAL_UART_MspInit+0x148>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	f040 80a0 	bne.w	8008d24 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008be4:	2300      	movs	r3, #0
 8008be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be8:	4b48      	ldr	r3, [pc, #288]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	4a47      	ldr	r2, [pc, #284]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008bee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8008bf4:	4b45      	ldr	r3, [pc, #276]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c00:	2300      	movs	r3, #0
 8008c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c04:	4b41      	ldr	r3, [pc, #260]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	4a40      	ldr	r2, [pc, #256]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008c0a:	f043 0304 	orr.w	r3, r3, #4
 8008c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c10:	4b3e      	ldr	r3, [pc, #248]	@ (8008d0c <HAL_UART_MspInit+0x14c>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008c1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c22:	2302      	movs	r3, #2
 8008c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008c2e:	2308      	movs	r3, #8
 8008c30:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008c36:	4619      	mov	r1, r3
 8008c38:	4835      	ldr	r0, [pc, #212]	@ (8008d10 <HAL_UART_MspInit+0x150>)
 8008c3a:	f001 fe13 	bl	800a864 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8008c3e:	4b35      	ldr	r3, [pc, #212]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c40:	4a35      	ldr	r2, [pc, #212]	@ (8008d18 <HAL_UART_MspInit+0x158>)
 8008c42:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8008c44:	4b33      	ldr	r3, [pc, #204]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008c4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008c4c:	4b31      	ldr	r3, [pc, #196]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c4e:	2240      	movs	r2, #64	@ 0x40
 8008c50:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c52:	4b30      	ldr	r3, [pc, #192]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008c58:	4b2e      	ldr	r3, [pc, #184]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008c5e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c60:	4b2c      	ldr	r3, [pc, #176]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c66:	4b2b      	ldr	r3, [pc, #172]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008c6c:	4b29      	ldr	r3, [pc, #164]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008c72:	4b28      	ldr	r3, [pc, #160]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c78:	4b26      	ldr	r3, [pc, #152]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008c7e:	4825      	ldr	r0, [pc, #148]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c80:	f001 f9ee 	bl	800a060 <HAL_DMA_Init>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8008c8a:	f7fb fc93 	bl	80045b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a20      	ldr	r2, [pc, #128]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c92:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c94:	4a1f      	ldr	r2, [pc, #124]	@ (8008d14 <HAL_UART_MspInit+0x154>)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008c9a:	4b20      	ldr	r3, [pc, #128]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008c9c:	4a20      	ldr	r2, [pc, #128]	@ (8008d20 <HAL_UART_MspInit+0x160>)
 8008c9e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8008ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008ca2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008ca6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cae:	4b1b      	ldr	r3, [pc, #108]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008cb4:	4b19      	ldr	r3, [pc, #100]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cba:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008cbc:	4b17      	ldr	r3, [pc, #92]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008cc2:	4b16      	ldr	r3, [pc, #88]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008cc8:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008cce:	4b13      	ldr	r3, [pc, #76]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008cd4:	4b11      	ldr	r3, [pc, #68]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008cda:	4810      	ldr	r0, [pc, #64]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cdc:	f001 f9c0 	bl	800a060 <HAL_DMA_Init>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008ce6:	f7fb fc65 	bl	80045b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a0b      	ldr	r2, [pc, #44]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d1c <HAL_UART_MspInit+0x15c>)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	2034      	movs	r0, #52	@ 0x34
 8008cfc:	f001 f979 	bl	8009ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008d00:	2034      	movs	r0, #52	@ 0x34
 8008d02:	f001 f992 	bl	800a02a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008d06:	e20d      	b.n	8009124 <HAL_UART_MspInit+0x564>
 8008d08:	40004c00 	.word	0x40004c00
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	40020800 	.word	0x40020800
 8008d14:	20000cf8 	.word	0x20000cf8
 8008d18:	40026070 	.word	0x40026070
 8008d1c:	20000d58 	.word	0x20000d58
 8008d20:	40026040 	.word	0x40026040
  else if(uartHandle->Instance==UART5)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a8a      	ldr	r2, [pc, #552]	@ (8008f54 <HAL_UART_MspInit+0x394>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	f040 80b0 	bne.w	8008e90 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008d30:	2300      	movs	r3, #0
 8008d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d34:	4b88      	ldr	r3, [pc, #544]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d38:	4a87      	ldr	r2, [pc, #540]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d40:	4b85      	ldr	r3, [pc, #532]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d50:	4b81      	ldr	r3, [pc, #516]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	4a80      	ldr	r2, [pc, #512]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d56:	f043 0304 	orr.w	r3, r3, #4
 8008d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d68:	2300      	movs	r3, #0
 8008d6a:	623b      	str	r3, [r7, #32]
 8008d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d70:	4a79      	ldr	r2, [pc, #484]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d72:	f043 0308 	orr.w	r3, r3, #8
 8008d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d78:	4b77      	ldr	r3, [pc, #476]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7c:	f003 0308 	and.w	r3, r3, #8
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d92:	2303      	movs	r3, #3
 8008d94:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008d96:	2308      	movs	r3, #8
 8008d98:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008d9e:	4619      	mov	r1, r3
 8008da0:	486e      	ldr	r0, [pc, #440]	@ (8008f5c <HAL_UART_MspInit+0x39c>)
 8008da2:	f001 fd5f 	bl	800a864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008da6:	2304      	movs	r3, #4
 8008da8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008daa:	2302      	movs	r3, #2
 8008dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008db2:	2303      	movs	r3, #3
 8008db4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008db6:	2308      	movs	r3, #8
 8008db8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008dba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4867      	ldr	r0, [pc, #412]	@ (8008f60 <HAL_UART_MspInit+0x3a0>)
 8008dc2:	f001 fd4f 	bl	800a864 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008dc6:	4b67      	ldr	r3, [pc, #412]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008dc8:	4a67      	ldr	r2, [pc, #412]	@ (8008f68 <HAL_UART_MspInit+0x3a8>)
 8008dca:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008dcc:	4b65      	ldr	r3, [pc, #404]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008dce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008dd2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008dd4:	4b63      	ldr	r3, [pc, #396]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008dda:	4b62      	ldr	r3, [pc, #392]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008de0:	4b60      	ldr	r3, [pc, #384]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008de6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008de8:	4b5e      	ldr	r3, [pc, #376]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008dee:	4b5d      	ldr	r3, [pc, #372]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8008df4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e00:	4b58      	ldr	r3, [pc, #352]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008e06:	4857      	ldr	r0, [pc, #348]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008e08:	f001 f92a 	bl	800a060 <HAL_DMA_Init>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8008e12:	f7fb fbcf 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a52      	ldr	r2, [pc, #328]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e1c:	4a51      	ldr	r2, [pc, #324]	@ (8008f64 <HAL_UART_MspInit+0x3a4>)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8008e22:	4b52      	ldr	r3, [pc, #328]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e24:	4a52      	ldr	r2, [pc, #328]	@ (8008f70 <HAL_UART_MspInit+0x3b0>)
 8008e26:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8008e28:	4b50      	ldr	r3, [pc, #320]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e2e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e30:	4b4e      	ldr	r3, [pc, #312]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e32:	2240      	movs	r2, #64	@ 0x40
 8008e34:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e36:	4b4d      	ldr	r3, [pc, #308]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e42:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e44:	4b49      	ldr	r3, [pc, #292]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e4a:	4b48      	ldr	r3, [pc, #288]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8008e50:	4b46      	ldr	r3, [pc, #280]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008e56:	4b45      	ldr	r3, [pc, #276]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e5c:	4b43      	ldr	r3, [pc, #268]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8008e62:	4842      	ldr	r0, [pc, #264]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e64:	f001 f8fc 	bl	800a060 <HAL_DMA_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8008e6e:	f7fb fba1 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a3d      	ldr	r2, [pc, #244]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e78:	4a3c      	ldr	r2, [pc, #240]	@ (8008f6c <HAL_UART_MspInit+0x3ac>)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2100      	movs	r1, #0
 8008e82:	2035      	movs	r0, #53	@ 0x35
 8008e84:	f001 f8b5 	bl	8009ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8008e88:	2035      	movs	r0, #53	@ 0x35
 8008e8a:	f001 f8ce 	bl	800a02a <HAL_NVIC_EnableIRQ>
}
 8008e8e:	e149      	b.n	8009124 <HAL_UART_MspInit+0x564>
  else if(uartHandle->Instance==USART1)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a37      	ldr	r2, [pc, #220]	@ (8008f74 <HAL_UART_MspInit+0x3b4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d174      	bne.n	8008f84 <HAL_UART_MspInit+0x3c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008ea4:	f043 0310 	orr.w	r3, r3, #16
 8008ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	4b27      	ldr	r3, [pc, #156]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebe:	4a26      	ldr	r2, [pc, #152]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ec6:	4b24      	ldr	r3, [pc, #144]	@ (8008f58 <HAL_UART_MspInit+0x398>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008ed2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008ed6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ee4:	2307      	movs	r3, #7
 8008ee6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008eec:	4619      	mov	r1, r3
 8008eee:	4822      	ldr	r0, [pc, #136]	@ (8008f78 <HAL_UART_MspInit+0x3b8>)
 8008ef0:	f001 fcb8 	bl	800a864 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008ef4:	4b21      	ldr	r3, [pc, #132]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008ef6:	4a22      	ldr	r2, [pc, #136]	@ (8008f80 <HAL_UART_MspInit+0x3c0>)
 8008ef8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008efa:	4b20      	ldr	r3, [pc, #128]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008efc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008f00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f02:	4b1e      	ldr	r3, [pc, #120]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f08:	4b1c      	ldr	r3, [pc, #112]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008f14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f16:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008f22:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f28:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f2e:	4b13      	ldr	r3, [pc, #76]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008f34:	4811      	ldr	r0, [pc, #68]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f36:	f001 f893 	bl	800a060 <HAL_DMA_Init>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <HAL_UART_MspInit+0x384>
      Error_Handler();
 8008f40:	f7fb fb38 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0d      	ldr	r2, [pc, #52]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f7c <HAL_UART_MspInit+0x3bc>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008f50:	e0e8      	b.n	8009124 <HAL_UART_MspInit+0x564>
 8008f52:	bf00      	nop
 8008f54:	40005000 	.word	0x40005000
 8008f58:	40023800 	.word	0x40023800
 8008f5c:	40020800 	.word	0x40020800
 8008f60:	40020c00 	.word	0x40020c00
 8008f64:	20000db8 	.word	0x20000db8
 8008f68:	40026010 	.word	0x40026010
 8008f6c:	20000e18 	.word	0x20000e18
 8008f70:	400260b8 	.word	0x400260b8
 8008f74:	40011000 	.word	0x40011000
 8008f78:	40020000 	.word	0x40020000
 8008f7c:	20000e78 	.word	0x20000e78
 8008f80:	40026440 	.word	0x40026440
  else if(uartHandle->Instance==USART2)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a68      	ldr	r2, [pc, #416]	@ (800912c <HAL_UART_MspInit+0x56c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d162      	bne.n	8009054 <HAL_UART_MspInit+0x494>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	4b67      	ldr	r3, [pc, #412]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f96:	4a66      	ldr	r2, [pc, #408]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f9e:	4b64      	ldr	r3, [pc, #400]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	4b60      	ldr	r3, [pc, #384]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008fb4:	f043 0301 	orr.w	r3, r3, #1
 8008fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fba:	4b5d      	ldr	r3, [pc, #372]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008fd6:	2307      	movs	r3, #7
 8008fd8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4854      	ldr	r0, [pc, #336]	@ (8009134 <HAL_UART_MspInit+0x574>)
 8008fe2:	f001 fc3f 	bl	800a864 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008fe6:	4b54      	ldr	r3, [pc, #336]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8008fe8:	4a54      	ldr	r2, [pc, #336]	@ (800913c <HAL_UART_MspInit+0x57c>)
 8008fea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008fec:	4b52      	ldr	r3, [pc, #328]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8008fee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008ff2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ff4:	4b50      	ldr	r3, [pc, #320]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009000:	4b4d      	ldr	r3, [pc, #308]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8009002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009006:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009008:	4b4b      	ldr	r3, [pc, #300]	@ (8009138 <HAL_UART_MspInit+0x578>)
 800900a:	2200      	movs	r2, #0
 800900c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800900e:	4b4a      	ldr	r3, [pc, #296]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8009010:	2200      	movs	r2, #0
 8009012:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009014:	4b48      	ldr	r3, [pc, #288]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8009016:	2200      	movs	r2, #0
 8009018:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800901a:	4b47      	ldr	r3, [pc, #284]	@ (8009138 <HAL_UART_MspInit+0x578>)
 800901c:	2200      	movs	r2, #0
 800901e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009020:	4b45      	ldr	r3, [pc, #276]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8009022:	2200      	movs	r2, #0
 8009024:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009026:	4844      	ldr	r0, [pc, #272]	@ (8009138 <HAL_UART_MspInit+0x578>)
 8009028:	f001 f81a 	bl	800a060 <HAL_DMA_Init>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_UART_MspInit+0x476>
      Error_Handler();
 8009032:	f7fb fabf 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a3f      	ldr	r2, [pc, #252]	@ (8009138 <HAL_UART_MspInit+0x578>)
 800903a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800903c:	4a3e      	ldr	r2, [pc, #248]	@ (8009138 <HAL_UART_MspInit+0x578>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	2026      	movs	r0, #38	@ 0x26
 8009048:	f000 ffd3 	bl	8009ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800904c:	2026      	movs	r0, #38	@ 0x26
 800904e:	f000 ffec 	bl	800a02a <HAL_NVIC_EnableIRQ>
}
 8009052:	e067      	b.n	8009124 <HAL_UART_MspInit+0x564>
  else if(uartHandle->Instance==USART3)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a39      	ldr	r2, [pc, #228]	@ (8009140 <HAL_UART_MspInit+0x580>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d162      	bne.n	8009124 <HAL_UART_MspInit+0x564>
    __HAL_RCC_USART3_CLK_ENABLE();
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	4b33      	ldr	r3, [pc, #204]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8009064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009066:	4a32      	ldr	r2, [pc, #200]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8009068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800906c:	6413      	str	r3, [r2, #64]	@ 0x40
 800906e:	4b30      	ldr	r3, [pc, #192]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800907a:	2300      	movs	r3, #0
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	4b2c      	ldr	r3, [pc, #176]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	4a2b      	ldr	r2, [pc, #172]	@ (8009130 <HAL_UART_MspInit+0x570>)
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	6313      	str	r3, [r2, #48]	@ 0x30
 800908a:	4b29      	ldr	r3, [pc, #164]	@ (8009130 <HAL_UART_MspInit+0x570>)
 800908c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	60bb      	str	r3, [r7, #8]
 8009094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009096:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800909c:	2302      	movs	r3, #2
 800909e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a4:	2303      	movs	r3, #3
 80090a6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80090a8:	2307      	movs	r3, #7
 80090aa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80090b0:	4619      	mov	r1, r3
 80090b2:	4824      	ldr	r0, [pc, #144]	@ (8009144 <HAL_UART_MspInit+0x584>)
 80090b4:	f001 fbd6 	bl	800a864 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80090b8:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090ba:	4a24      	ldr	r2, [pc, #144]	@ (800914c <HAL_UART_MspInit+0x58c>)
 80090bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80090be:	4b22      	ldr	r3, [pc, #136]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80090c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090c6:	4b20      	ldr	r3, [pc, #128]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090da:	4b1b      	ldr	r3, [pc, #108]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090dc:	2200      	movs	r2, #0
 80090de:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090e0:	4b19      	ldr	r3, [pc, #100]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80090ec:	4b16      	ldr	r3, [pc, #88]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80090f2:	4b15      	ldr	r3, [pc, #84]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80090f8:	4813      	ldr	r0, [pc, #76]	@ (8009148 <HAL_UART_MspInit+0x588>)
 80090fa:	f000 ffb1 	bl	800a060 <HAL_DMA_Init>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_UART_MspInit+0x548>
      Error_Handler();
 8009104:	f7fb fa56 	bl	80045b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a0f      	ldr	r2, [pc, #60]	@ (8009148 <HAL_UART_MspInit+0x588>)
 800910c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800910e:	4a0e      	ldr	r2, [pc, #56]	@ (8009148 <HAL_UART_MspInit+0x588>)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009114:	2200      	movs	r2, #0
 8009116:	2100      	movs	r1, #0
 8009118:	2027      	movs	r0, #39	@ 0x27
 800911a:	f000 ff6a 	bl	8009ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800911e:	2027      	movs	r0, #39	@ 0x27
 8009120:	f000 ff83 	bl	800a02a <HAL_NVIC_EnableIRQ>
}
 8009124:	bf00      	nop
 8009126:	3748      	adds	r7, #72	@ 0x48
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40004400 	.word	0x40004400
 8009130:	40023800 	.word	0x40023800
 8009134:	40020000 	.word	0x40020000
 8009138:	20000ed8 	.word	0x20000ed8
 800913c:	40026088 	.word	0x40026088
 8009140:	40004800 	.word	0x40004800
 8009144:	40020400 	.word	0x40020400
 8009148:	20000f38 	.word	0x20000f38
 800914c:	40026028 	.word	0x40026028

08009150 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
//同样USART3改为你的串口
	HAL_UART_Transmit(&huart5, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8009158:	1d39      	adds	r1, r7, #4
 800915a:	f04f 33ff 	mov.w	r3, #4294967295
 800915e:	2201      	movs	r2, #1
 8009160:	4803      	ldr	r0, [pc, #12]	@ (8009170 <__io_putchar+0x20>)
 8009162:	f003 f919 	bl	800c398 <HAL_UART_Transmit>
    return ch;
 8009166:	687b      	ldr	r3, [r7, #4]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000bd8 	.word	0x20000bd8

08009174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80091ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009178:	f7fe fa82 	bl	8007680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800917c:	480c      	ldr	r0, [pc, #48]	@ (80091b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800917e:	490d      	ldr	r1, [pc, #52]	@ (80091b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009180:	4a0d      	ldr	r2, [pc, #52]	@ (80091b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009184:	e002      	b.n	800918c <LoopCopyDataInit>

08009186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800918a:	3304      	adds	r3, #4

0800918c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800918c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800918e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009190:	d3f9      	bcc.n	8009186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009194:	4c0a      	ldr	r4, [pc, #40]	@ (80091c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009198:	e001      	b.n	800919e <LoopFillZerobss>

0800919a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800919a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800919c:	3204      	adds	r2, #4

0800919e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800919e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091a0:	d3fb      	bcc.n	800919a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80091a2:	f006 fc3b 	bl	800fa1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091a6:	f7fb f8bf 	bl	8004328 <main>
  bx  lr    
 80091aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80091ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80091b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091b4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80091b8:	08016180 	.word	0x08016180
  ldr r2, =_sbss
 80091bc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80091c0:	200010e8 	.word	0x200010e8

080091c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091c4:	e7fe      	b.n	80091c4 <ADC_IRQHandler>
	...

080091c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80091cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009208 <HAL_Init+0x40>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009208 <HAL_Init+0x40>)
 80091d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80091d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80091d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009208 <HAL_Init+0x40>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009208 <HAL_Init+0x40>)
 80091de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80091e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091e4:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <HAL_Init+0x40>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a07      	ldr	r2, [pc, #28]	@ (8009208 <HAL_Init+0x40>)
 80091ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091f0:	2003      	movs	r0, #3
 80091f2:	f000 fef3 	bl	8009fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091f6:	200f      	movs	r0, #15
 80091f8:	f000 f808 	bl	800920c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80091fc:	f7fd ff96 	bl	800712c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40023c00 	.word	0x40023c00

0800920c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <HAL_InitTick+0x54>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	4b12      	ldr	r3, [pc, #72]	@ (8009264 <HAL_InitTick+0x58>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009222:	fbb3 f3f1 	udiv	r3, r3, r1
 8009226:	fbb2 f3f3 	udiv	r3, r2, r3
 800922a:	4618      	mov	r0, r3
 800922c:	f000 ff0b 	bl	800a046 <HAL_SYSTICK_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e00e      	b.n	8009258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b0f      	cmp	r3, #15
 800923e:	d80a      	bhi.n	8009256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009240:	2200      	movs	r2, #0
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	f000 fed3 	bl	8009ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800924c:	4a06      	ldr	r2, [pc, #24]	@ (8009268 <HAL_InitTick+0x5c>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	e000      	b.n	8009258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000010 	.word	0x20000010
 8009264:	20000018 	.word	0x20000018
 8009268:	20000014 	.word	0x20000014

0800926c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009270:	4b06      	ldr	r3, [pc, #24]	@ (800928c <HAL_IncTick+0x20>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	4b06      	ldr	r3, [pc, #24]	@ (8009290 <HAL_IncTick+0x24>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4413      	add	r3, r2
 800927c:	4a04      	ldr	r2, [pc, #16]	@ (8009290 <HAL_IncTick+0x24>)
 800927e:	6013      	str	r3, [r2, #0]
}
 8009280:	bf00      	nop
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000018 	.word	0x20000018
 8009290:	20000f98 	.word	0x20000f98

08009294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  return uwTick;
 8009298:	4b03      	ldr	r3, [pc, #12]	@ (80092a8 <HAL_GetTick+0x14>)
 800929a:	681b      	ldr	r3, [r3, #0]
}
 800929c:	4618      	mov	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000f98 	.word	0x20000f98

080092ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092b4:	f7ff ffee 	bl	8009294 <HAL_GetTick>
 80092b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d005      	beq.n	80092d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092c6:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <HAL_Delay+0x44>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80092d2:	bf00      	nop
 80092d4:	f7ff ffde 	bl	8009294 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d8f7      	bhi.n	80092d4 <HAL_Delay+0x28>
  {
  }
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000018 	.word	0x20000018

080092f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e033      	b.n	8009372 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7f8 fd54 	bl	8001dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	f003 0310 	and.w	r3, r3, #16
 800932e:	2b00      	cmp	r3, #0
 8009330:	d118      	bne.n	8009364 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800933a:	f023 0302 	bic.w	r3, r3, #2
 800933e:	f043 0202 	orr.w	r2, r3, #2
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fab0 	bl	80098ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0201 	orr.w	r2, r3, #1
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	641a      	str	r2, [r3, #64]	@ 0x40
 8009362:	e001      	b.n	8009368 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_ADC_Start+0x1a>
 8009392:	2302      	movs	r3, #2
 8009394:	e0b2      	b.n	80094fc <HAL_ADC_Start+0x180>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d018      	beq.n	80093de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689a      	ldr	r2, [r3, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80093bc:	4b52      	ldr	r3, [pc, #328]	@ (8009508 <HAL_ADC_Start+0x18c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a52      	ldr	r2, [pc, #328]	@ (800950c <HAL_ADC_Start+0x190>)
 80093c2:	fba2 2303 	umull	r2, r3, r2, r3
 80093c6:	0c9a      	lsrs	r2, r3, #18
 80093c8:	4613      	mov	r3, r2
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	4413      	add	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80093d0:	e002      	b.n	80093d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f9      	bne.n	80093d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d17a      	bne.n	80094e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80093f4:	f023 0301 	bic.w	r3, r3, #1
 80093f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009412:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009416:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942a:	d106      	bne.n	800943a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009430:	f023 0206 	bic.w	r2, r3, #6
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	645a      	str	r2, [r3, #68]	@ 0x44
 8009438:	e002      	b.n	8009440 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009448:	4b31      	ldr	r3, [pc, #196]	@ (8009510 <HAL_ADC_Start+0x194>)
 800944a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8009454:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f003 031f 	and.w	r3, r3, #31
 800945e:	2b00      	cmp	r3, #0
 8009460:	d12a      	bne.n	80094b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a2b      	ldr	r2, [pc, #172]	@ (8009514 <HAL_ADC_Start+0x198>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d015      	beq.n	8009498 <HAL_ADC_Start+0x11c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a29      	ldr	r2, [pc, #164]	@ (8009518 <HAL_ADC_Start+0x19c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d105      	bne.n	8009482 <HAL_ADC_Start+0x106>
 8009476:	4b26      	ldr	r3, [pc, #152]	@ (8009510 <HAL_ADC_Start+0x194>)
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f003 031f 	and.w	r3, r3, #31
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a25      	ldr	r2, [pc, #148]	@ (800951c <HAL_ADC_Start+0x1a0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d136      	bne.n	80094fa <HAL_ADC_Start+0x17e>
 800948c:	4b20      	ldr	r3, [pc, #128]	@ (8009510 <HAL_ADC_Start+0x194>)
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f003 0310 	and.w	r3, r3, #16
 8009494:	2b00      	cmp	r3, #0
 8009496:	d130      	bne.n	80094fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d129      	bne.n	80094fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80094b4:	609a      	str	r2, [r3, #8]
 80094b6:	e020      	b.n	80094fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a15      	ldr	r2, [pc, #84]	@ (8009514 <HAL_ADC_Start+0x198>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d11b      	bne.n	80094fa <HAL_ADC_Start+0x17e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d114      	bne.n	80094fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	e00b      	b.n	80094fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e6:	f043 0210 	orr.w	r2, r3, #16
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094f2:	f043 0201 	orr.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20000010 	.word	0x20000010
 800950c:	431bde83 	.word	0x431bde83
 8009510:	40012300 	.word	0x40012300
 8009514:	40012000 	.word	0x40012000
 8009518:	40012100 	.word	0x40012100
 800951c:	40012200 	.word	0x40012200

08009520 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800953c:	d113      	bne.n	8009566 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954c:	d10b      	bne.n	8009566 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e063      	b.n	800962e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8009566:	f7ff fe95 	bl	8009294 <HAL_GetTick>
 800956a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800956c:	e021      	b.n	80095b2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009574:	d01d      	beq.n	80095b2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <HAL_ADC_PollForConversion+0x6c>
 800957c:	f7ff fe8a 	bl	8009294 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d212      	bcs.n	80095b2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b02      	cmp	r3, #2
 8009598:	d00b      	beq.n	80095b2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	f043 0204 	orr.w	r2, r3, #4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e03d      	b.n	800962e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d1d6      	bne.n	800956e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0212 	mvn.w	r2, #18
 80095c8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d123      	bne.n	800962c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d11f      	bne.n	800962c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009604:	2b00      	cmp	r3, #0
 8009606:	d111      	bne.n	800962c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d105      	bne.n	800962c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009624:	f043 0201 	orr.w	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_ADC_ConfigChannel+0x1c>
 8009668:	2302      	movs	r3, #2
 800966a:	e105      	b.n	8009878 <HAL_ADC_ConfigChannel+0x228>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b09      	cmp	r3, #9
 800967a:	d925      	bls.n	80096c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68d9      	ldr	r1, [r3, #12]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	b29b      	uxth	r3, r3
 8009688:	461a      	mov	r2, r3
 800968a:	4613      	mov	r3, r2
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	4413      	add	r3, r2
 8009690:	3b1e      	subs	r3, #30
 8009692:	2207      	movs	r2, #7
 8009694:	fa02 f303 	lsl.w	r3, r2, r3
 8009698:	43da      	mvns	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	400a      	ands	r2, r1
 80096a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68d9      	ldr	r1, [r3, #12]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4618      	mov	r0, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4403      	add	r3, r0
 80096ba:	3b1e      	subs	r3, #30
 80096bc:	409a      	lsls	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	60da      	str	r2, [r3, #12]
 80096c6:	e022      	b.n	800970e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6919      	ldr	r1, [r3, #16]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	461a      	mov	r2, r3
 80096d6:	4613      	mov	r3, r2
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	4413      	add	r3, r2
 80096dc:	2207      	movs	r2, #7
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	43da      	mvns	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	400a      	ands	r2, r1
 80096ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6919      	ldr	r1, [r3, #16]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4618      	mov	r0, r3
 80096fe:	4603      	mov	r3, r0
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4403      	add	r3, r0
 8009704:	409a      	lsls	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b06      	cmp	r3, #6
 8009714:	d824      	bhi.n	8009760 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	3b05      	subs	r3, #5
 8009728:	221f      	movs	r2, #31
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	43da      	mvns	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	400a      	ands	r2, r1
 8009736:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	4618      	mov	r0, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	3b05      	subs	r3, #5
 8009752:	fa00 f203 	lsl.w	r2, r0, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	635a      	str	r2, [r3, #52]	@ 0x34
 800975e:	e04c      	b.n	80097fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b0c      	cmp	r3, #12
 8009766:	d824      	bhi.n	80097b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	3b23      	subs	r3, #35	@ 0x23
 800977a:	221f      	movs	r2, #31
 800977c:	fa02 f303 	lsl.w	r3, r2, r3
 8009780:	43da      	mvns	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	400a      	ands	r2, r1
 8009788:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	4618      	mov	r0, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	3b23      	subs	r3, #35	@ 0x23
 80097a4:	fa00 f203 	lsl.w	r2, r0, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80097b0:	e023      	b.n	80097fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	3b41      	subs	r3, #65	@ 0x41
 80097c4:	221f      	movs	r2, #31
 80097c6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ca:	43da      	mvns	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	400a      	ands	r2, r1
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4618      	mov	r0, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	3b41      	subs	r3, #65	@ 0x41
 80097ee:	fa00 f203 	lsl.w	r2, r0, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80097fa:	4b22      	ldr	r3, [pc, #136]	@ (8009884 <HAL_ADC_ConfigChannel+0x234>)
 80097fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a21      	ldr	r2, [pc, #132]	@ (8009888 <HAL_ADC_ConfigChannel+0x238>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d109      	bne.n	800981c <HAL_ADC_ConfigChannel+0x1cc>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b12      	cmp	r3, #18
 800980e:	d105      	bne.n	800981c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a19      	ldr	r2, [pc, #100]	@ (8009888 <HAL_ADC_ConfigChannel+0x238>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d123      	bne.n	800986e <HAL_ADC_ConfigChannel+0x21e>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b10      	cmp	r3, #16
 800982c:	d003      	beq.n	8009836 <HAL_ADC_ConfigChannel+0x1e6>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b11      	cmp	r3, #17
 8009834:	d11b      	bne.n	800986e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b10      	cmp	r3, #16
 8009848:	d111      	bne.n	800986e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800984a:	4b10      	ldr	r3, [pc, #64]	@ (800988c <HAL_ADC_ConfigChannel+0x23c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a10      	ldr	r2, [pc, #64]	@ (8009890 <HAL_ADC_ConfigChannel+0x240>)
 8009850:	fba2 2303 	umull	r2, r3, r2, r3
 8009854:	0c9a      	lsrs	r2, r3, #18
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009860:	e002      	b.n	8009868 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3b01      	subs	r3, #1
 8009866:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f9      	bne.n	8009862 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	40012300 	.word	0x40012300
 8009888:	40012000 	.word	0x40012000
 800988c:	20000010 	.word	0x20000010
 8009890:	431bde83 	.word	0x431bde83

08009894 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80098b4:	4b79      	ldr	r3, [pc, #484]	@ (8009a9c <ADC_Init+0x1f0>)
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6859      	ldr	r1, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	021a      	lsls	r2, r3, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8009904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6859      	ldr	r1, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6899      	ldr	r1, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	4a58      	ldr	r2, [pc, #352]	@ (8009aa0 <ADC_Init+0x1f4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d022      	beq.n	800998a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6899      	ldr	r1, [r3, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6899      	ldr	r1, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	609a      	str	r2, [r3, #8]
 8009988:	e00f      	b.n	80099aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80099a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0202 	bic.w	r2, r2, #2
 80099b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6899      	ldr	r1, [r3, #8]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7e1b      	ldrb	r3, [r3, #24]
 80099c4:	005a      	lsls	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01b      	beq.n	8009a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80099f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6859      	ldr	r1, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	3b01      	subs	r3, #1
 8009a04:	035a      	lsls	r2, r3, #13
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	e007      	b.n	8009a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	051a      	lsls	r2, r3, #20
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6899      	ldr	r1, [r3, #8]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a62:	025a      	lsls	r2, r3, #9
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6899      	ldr	r1, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	029a      	lsls	r2, r3, #10
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	609a      	str	r2, [r3, #8]
}
 8009a90:	bf00      	nop
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	40012300 	.word	0x40012300
 8009aa0:	0f000001 	.word	0x0f000001

08009aa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e0ed      	b.n	8009c92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d102      	bne.n	8009ac8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7f9 fc40 	bl	8003348 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ad8:	f7ff fbdc 	bl	8009294 <HAL_GetTick>
 8009adc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009ade:	e012      	b.n	8009b06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009ae0:	f7ff fbd8 	bl	8009294 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b0a      	cmp	r3, #10
 8009aec:	d90b      	bls.n	8009b06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2205      	movs	r2, #5
 8009afe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e0c5      	b.n	8009c92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0e5      	beq.n	8009ae0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0202 	bic.w	r2, r2, #2
 8009b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b24:	f7ff fbb6 	bl	8009294 <HAL_GetTick>
 8009b28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b2a:	e012      	b.n	8009b52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b2c:	f7ff fbb2 	bl	8009294 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b0a      	cmp	r3, #10
 8009b38:	d90b      	bls.n	8009b52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2205      	movs	r2, #5
 8009b4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e09f      	b.n	8009c92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e5      	bne.n	8009b2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	7e1b      	ldrb	r3, [r3, #24]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d108      	bne.n	8009b7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	e007      	b.n	8009b8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	7e5b      	ldrb	r3, [r3, #25]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d108      	bne.n	8009ba4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e007      	b.n	8009bb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7e9b      	ldrb	r3, [r3, #26]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d108      	bne.n	8009bce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0220 	orr.w	r2, r2, #32
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	e007      	b.n	8009bde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0220 	bic.w	r2, r2, #32
 8009bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	7edb      	ldrb	r3, [r3, #27]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d108      	bne.n	8009bf8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0210 	bic.w	r2, r2, #16
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	e007      	b.n	8009c08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f042 0210 	orr.w	r2, r2, #16
 8009c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7f1b      	ldrb	r3, [r3, #28]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d108      	bne.n	8009c22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0208 	orr.w	r2, r2, #8
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e007      	b.n	8009c32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0208 	bic.w	r2, r2, #8
 8009c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7f5b      	ldrb	r3, [r3, #29]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d108      	bne.n	8009c4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0204 	orr.w	r2, r2, #4
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e007      	b.n	8009c5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 0204 	bic.w	r2, r2, #4
 8009c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	431a      	orrs	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	ea42 0103 	orr.w	r1, r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b089      	sub	sp, #36	@ 0x24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009cb8:	7ffb      	ldrb	r3, [r7, #31]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d003      	beq.n	8009cc6 <HAL_CAN_AddTxMessage+0x2c>
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	f040 80ad 	bne.w	8009e20 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8095 	beq.w	8009e10 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	0e1b      	lsrs	r3, r3, #24
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	409a      	lsls	r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10d      	bne.n	8009d1e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d0c:	68f9      	ldr	r1, [r7, #12]
 8009d0e:	6809      	ldr	r1, [r1, #0]
 8009d10:	431a      	orrs	r2, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	3318      	adds	r3, #24
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	440b      	add	r3, r1
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e00f      	b.n	8009d3e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d28:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009d32:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	3318      	adds	r3, #24
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	440b      	add	r3, r1
 8009d3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6819      	ldr	r1, [r3, #0]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	691a      	ldr	r2, [r3, #16]
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3318      	adds	r3, #24
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3304      	adds	r3, #4
 8009d50:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	7d1b      	ldrb	r3, [r3, #20]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d111      	bne.n	8009d7e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	3318      	adds	r3, #24
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	4413      	add	r3, r2
 8009d66:	3304      	adds	r3, #4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	6811      	ldr	r1, [r2, #0]
 8009d6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	3318      	adds	r3, #24
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	440b      	add	r3, r1
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3307      	adds	r3, #7
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	061a      	lsls	r2, r3, #24
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3306      	adds	r3, #6
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	041b      	lsls	r3, r3, #16
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3305      	adds	r3, #5
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	3204      	adds	r2, #4
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	4610      	mov	r0, r2
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	ea43 0200 	orr.w	r2, r3, r0
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	440b      	add	r3, r1
 8009db0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8009db4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3303      	adds	r3, #3
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	061a      	lsls	r2, r3, #24
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	021b      	lsls	r3, r3, #8
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	6811      	ldr	r1, [r2, #0]
 8009ddc:	ea43 0200 	orr.w	r2, r3, r0
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	440b      	add	r3, r1
 8009de6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8009dea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3318      	adds	r3, #24
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	6811      	ldr	r1, [r2, #0]
 8009dfe:	f043 0201 	orr.w	r2, r3, #1
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	3318      	adds	r3, #24
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	440b      	add	r3, r1
 8009e0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e00e      	b.n	8009e2e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e006      	b.n	8009e2e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
  }
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3724      	adds	r7, #36	@ 0x24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <__NVIC_SetPriorityGrouping+0x44>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009e58:	4013      	ands	r3, r2
 8009e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e6e:	4a04      	ldr	r2, [pc, #16]	@ (8009e80 <__NVIC_SetPriorityGrouping+0x44>)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	60d3      	str	r3, [r2, #12]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	e000ed00 	.word	0xe000ed00

08009e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e88:	4b04      	ldr	r3, [pc, #16]	@ (8009e9c <__NVIC_GetPriorityGrouping+0x18>)
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	f003 0307 	and.w	r3, r3, #7
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	e000ed00 	.word	0xe000ed00

08009ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	db0b      	blt.n	8009eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	f003 021f 	and.w	r2, r3, #31
 8009eb8:	4907      	ldr	r1, [pc, #28]	@ (8009ed8 <__NVIC_EnableIRQ+0x38>)
 8009eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	e000e100 	.word	0xe000e100

08009edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	db0a      	blt.n	8009f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	490c      	ldr	r1, [pc, #48]	@ (8009f28 <__NVIC_SetPriority+0x4c>)
 8009ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009efa:	0112      	lsls	r2, r2, #4
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	440b      	add	r3, r1
 8009f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f04:	e00a      	b.n	8009f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	4908      	ldr	r1, [pc, #32]	@ (8009f2c <__NVIC_SetPriority+0x50>)
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	f003 030f 	and.w	r3, r3, #15
 8009f12:	3b04      	subs	r3, #4
 8009f14:	0112      	lsls	r2, r2, #4
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	440b      	add	r3, r1
 8009f1a:	761a      	strb	r2, [r3, #24]
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	e000e100 	.word	0xe000e100
 8009f2c:	e000ed00 	.word	0xe000ed00

08009f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b089      	sub	sp, #36	@ 0x24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f1c3 0307 	rsb	r3, r3, #7
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	bf28      	it	cs
 8009f4e:	2304      	movcs	r3, #4
 8009f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3304      	adds	r3, #4
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	d902      	bls.n	8009f60 <NVIC_EncodePriority+0x30>
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	3b03      	subs	r3, #3
 8009f5e:	e000      	b.n	8009f62 <NVIC_EncodePriority+0x32>
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f64:	f04f 32ff 	mov.w	r2, #4294967295
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6e:	43da      	mvns	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	401a      	ands	r2, r3
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f78:	f04f 31ff 	mov.w	r1, #4294967295
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f82:	43d9      	mvns	r1, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f88:	4313      	orrs	r3, r2
         );
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3724      	adds	r7, #36	@ 0x24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
	...

08009f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fa8:	d301      	bcc.n	8009fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009faa:	2301      	movs	r3, #1
 8009fac:	e00f      	b.n	8009fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fae:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <SysTick_Config+0x40>)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fb6:	210f      	movs	r1, #15
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	f7ff ff8e 	bl	8009edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <SysTick_Config+0x40>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fc6:	4b04      	ldr	r3, [pc, #16]	@ (8009fd8 <SysTick_Config+0x40>)
 8009fc8:	2207      	movs	r2, #7
 8009fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	e000e010 	.word	0xe000e010

08009fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ff29 	bl	8009e3c <__NVIC_SetPriorityGrouping>
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b086      	sub	sp, #24
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a004:	f7ff ff3e 	bl	8009e84 <__NVIC_GetPriorityGrouping>
 800a008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	6978      	ldr	r0, [r7, #20]
 800a010:	f7ff ff8e 	bl	8009f30 <NVIC_EncodePriority>
 800a014:	4602      	mov	r2, r0
 800a016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff ff5d 	bl	8009edc <__NVIC_SetPriority>
}
 800a022:	bf00      	nop
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	4603      	mov	r3, r0
 800a032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff ff31 	bl	8009ea0 <__NVIC_EnableIRQ>
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff ffa2 	bl	8009f98 <SysTick_Config>
 800a054:	4603      	mov	r3, r0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a06c:	f7ff f912 	bl	8009294 <HAL_GetTick>
 800a070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e099      	b.n	800a1b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 0201 	bic.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a09c:	e00f      	b.n	800a0be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a09e:	f7ff f8f9 	bl	8009294 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b05      	cmp	r3, #5
 800a0aa:	d908      	bls.n	800a0be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2203      	movs	r2, #3
 800a0b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e078      	b.n	800a1b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e8      	bne.n	800a09e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	4b38      	ldr	r3, [pc, #224]	@ (800a1b8 <HAL_DMA_Init+0x158>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	2b04      	cmp	r3, #4
 800a116:	d107      	bne.n	800a128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	4313      	orrs	r3, r2
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d117      	bne.n	800a182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fb01 	bl	800a76c <DMA_CheckFifoParam>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d008      	beq.n	800a182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2240      	movs	r2, #64	@ 0x40
 800a174:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a17e:	2301      	movs	r3, #1
 800a180:	e016      	b.n	800a1b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fab8 	bl	800a700 <DMA_CalcBaseAndBitshift>
 800a190:	4603      	mov	r3, r0
 800a192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a198:	223f      	movs	r2, #63	@ 0x3f
 800a19a:	409a      	lsls	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	f010803f 	.word	0xf010803f

0800a1bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_DMA_Start_IT+0x26>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e040      	b.n	800a264 <HAL_DMA_Start_IT+0xa8>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d12f      	bne.n	800a256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fa4a 	bl	800a6a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a214:	223f      	movs	r2, #63	@ 0x3f
 800a216:	409a      	lsls	r2, r3
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0216 	orr.w	r2, r2, #22
 800a22a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d007      	beq.n	800a244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0208 	orr.w	r2, r2, #8
 800a242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	e005      	b.n	800a262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a25e:	2302      	movs	r3, #2
 800a260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a27a:	f7ff f80b 	bl	8009294 <HAL_GetTick>
 800a27e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d008      	beq.n	800a29e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2280      	movs	r2, #128	@ 0x80
 800a290:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e052      	b.n	800a344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0216 	bic.w	r2, r2, #22
 800a2ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	695a      	ldr	r2, [r3, #20]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <HAL_DMA_Abort+0x62>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0208 	bic.w	r2, r2, #8
 800a2dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0201 	bic.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a2ee:	e013      	b.n	800a318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a2f0:	f7fe ffd0 	bl	8009294 <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d90c      	bls.n	800a318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2203      	movs	r2, #3
 800a308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e015      	b.n	800a344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e4      	bne.n	800a2f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a32a:	223f      	movs	r2, #63	@ 0x3f
 800a32c:	409a      	lsls	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d004      	beq.n	800a36a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2280      	movs	r2, #128	@ 0x80
 800a364:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e00c      	b.n	800a384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2205      	movs	r2, #5
 800a36e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 0201 	bic.w	r2, r2, #1
 800a380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a39c:	4b8e      	ldr	r3, [pc, #568]	@ (800a5d8 <HAL_DMA_IRQHandler+0x248>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a8e      	ldr	r2, [pc, #568]	@ (800a5dc <HAL_DMA_IRQHandler+0x24c>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	0a9b      	lsrs	r3, r3, #10
 800a3a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	409a      	lsls	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01a      	beq.n	800a3fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d013      	beq.n	800a3fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0204 	bic.w	r2, r2, #4
 800a3e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	409a      	lsls	r2, r3
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3f4:	f043 0201 	orr.w	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a400:	2201      	movs	r2, #1
 800a402:	409a      	lsls	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4013      	ands	r3, r2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d012      	beq.n	800a432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a41e:	2201      	movs	r2, #1
 800a420:	409a      	lsls	r2, r3
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a42a:	f043 0202 	orr.w	r2, r3, #2
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a436:	2204      	movs	r2, #4
 800a438:	409a      	lsls	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4013      	ands	r3, r2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d012      	beq.n	800a468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a454:	2204      	movs	r2, #4
 800a456:	409a      	lsls	r2, r3
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a460:	f043 0204 	orr.w	r2, r3, #4
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a46c:	2210      	movs	r2, #16
 800a46e:	409a      	lsls	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4013      	ands	r3, r2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d043      	beq.n	800a500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d03c      	beq.n	800a500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a48a:	2210      	movs	r2, #16
 800a48c:	409a      	lsls	r2, r3
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d018      	beq.n	800a4d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d108      	bne.n	800a4c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d024      	beq.n	800a500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	4798      	blx	r3
 800a4be:	e01f      	b.n	800a500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01b      	beq.n	800a500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	4798      	blx	r3
 800a4d0:	e016      	b.n	800a500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d107      	bne.n	800a4f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0208 	bic.w	r2, r2, #8
 800a4ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a504:	2220      	movs	r2, #32
 800a506:	409a      	lsls	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 808f 	beq.w	800a630 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0310 	and.w	r3, r3, #16
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8087 	beq.w	800a630 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a526:	2220      	movs	r2, #32
 800a528:	409a      	lsls	r2, r3
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b05      	cmp	r3, #5
 800a538:	d136      	bne.n	800a5a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0216 	bic.w	r2, r2, #22
 800a548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	695a      	ldr	r2, [r3, #20]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <HAL_DMA_IRQHandler+0x1da>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0208 	bic.w	r2, r2, #8
 800a578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a57e:	223f      	movs	r2, #63	@ 0x3f
 800a580:	409a      	lsls	r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d07e      	beq.n	800a69c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
        }
        return;
 800a5a6:	e079      	b.n	800a69c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01d      	beq.n	800a5f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10d      	bne.n	800a5e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d031      	beq.n	800a630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
 800a5d4:	e02c      	b.n	800a630 <HAL_DMA_IRQHandler+0x2a0>
 800a5d6:	bf00      	nop
 800a5d8:	20000010 	.word	0x20000010
 800a5dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d023      	beq.n	800a630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
 800a5f0:	e01e      	b.n	800a630 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10f      	bne.n	800a620 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 0210 	bic.w	r2, r2, #16
 800a60e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a634:	2b00      	cmp	r3, #0
 800a636:	d032      	beq.n	800a69e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d022      	beq.n	800a68a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2205      	movs	r2, #5
 800a648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	3301      	adds	r3, #1
 800a660:	60bb      	str	r3, [r7, #8]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	429a      	cmp	r2, r3
 800a666:	d307      	bcc.n	800a678 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1f2      	bne.n	800a65c <HAL_DMA_IRQHandler+0x2cc>
 800a676:	e000      	b.n	800a67a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a678:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
 800a69a:	e000      	b.n	800a69e <HAL_DMA_IRQHandler+0x30e>
        return;
 800a69c:	bf00      	nop
    }
  }
}
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	2b40      	cmp	r3, #64	@ 0x40
 800a6d0:	d108      	bne.n	800a6e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a6e2:	e007      	b.n	800a6f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	60da      	str	r2, [r3, #12]
}
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	3b10      	subs	r3, #16
 800a710:	4a14      	ldr	r2, [pc, #80]	@ (800a764 <DMA_CalcBaseAndBitshift+0x64>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	091b      	lsrs	r3, r3, #4
 800a718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a71a:	4a13      	ldr	r2, [pc, #76]	@ (800a768 <DMA_CalcBaseAndBitshift+0x68>)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d909      	bls.n	800a742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	659a      	str	r2, [r3, #88]	@ 0x58
 800a740:	e007      	b.n	800a752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	aaaaaaab 	.word	0xaaaaaaab
 800a768:	08015a44 	.word	0x08015a44

0800a76c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d11f      	bne.n	800a7c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d856      	bhi.n	800a83a <DMA_CheckFifoParam+0xce>
 800a78c:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <DMA_CheckFifoParam+0x28>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a7a5 	.word	0x0800a7a5
 800a798:	0800a7b7 	.word	0x0800a7b7
 800a79c:	0800a7a5 	.word	0x0800a7a5
 800a7a0:	0800a83b 	.word	0x0800a83b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d046      	beq.n	800a83e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7b4:	e043      	b.n	800a83e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a7be:	d140      	bne.n	800a842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7c4:	e03d      	b.n	800a842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7ce:	d121      	bne.n	800a814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d837      	bhi.n	800a846 <DMA_CheckFifoParam+0xda>
 800a7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7dc <DMA_CheckFifoParam+0x70>)
 800a7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7dc:	0800a7ed 	.word	0x0800a7ed
 800a7e0:	0800a7f3 	.word	0x0800a7f3
 800a7e4:	0800a7ed 	.word	0x0800a7ed
 800a7e8:	0800a805 	.word	0x0800a805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f0:	e030      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d025      	beq.n	800a84a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a802:	e022      	b.n	800a84a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a808:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a80c:	d11f      	bne.n	800a84e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a812:	e01c      	b.n	800a84e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d903      	bls.n	800a822 <DMA_CheckFifoParam+0xb6>
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d003      	beq.n	800a828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a820:	e018      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
      break;
 800a826:	e015      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00e      	beq.n	800a852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	73fb      	strb	r3, [r7, #15]
      break;
 800a838:	e00b      	b.n	800a852 <DMA_CheckFifoParam+0xe6>
      break;
 800a83a:	bf00      	nop
 800a83c:	e00a      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;
 800a83e:	bf00      	nop
 800a840:	e008      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;
 800a842:	bf00      	nop
 800a844:	e006      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;
 800a846:	bf00      	nop
 800a848:	e004      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;
 800a84a:	bf00      	nop
 800a84c:	e002      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;   
 800a84e:	bf00      	nop
 800a850:	e000      	b.n	800a854 <DMA_CheckFifoParam+0xe8>
      break;
 800a852:	bf00      	nop
    }
  } 
  
  return status; 
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop

0800a864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a864:	b480      	push	{r7}
 800a866:	b089      	sub	sp, #36	@ 0x24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a876:	2300      	movs	r3, #0
 800a878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	e16b      	b.n	800ab58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a880:	2201      	movs	r2, #1
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	fa02 f303 	lsl.w	r3, r2, r3
 800a888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4013      	ands	r3, r2
 800a892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	429a      	cmp	r2, r3
 800a89a:	f040 815a 	bne.w	800ab52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d005      	beq.n	800a8b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d130      	bne.n	800a918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	2203      	movs	r2, #3
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	43db      	mvns	r3, r3
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	43db      	mvns	r3, r3
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	091b      	lsrs	r3, r3, #4
 800a902:	f003 0201 	and.w	r2, r3, #1
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	fa02 f303 	lsl.w	r3, r2, r3
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	4313      	orrs	r3, r2
 800a910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	2b03      	cmp	r3, #3
 800a922:	d017      	beq.n	800a954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	2203      	movs	r2, #3
 800a930:	fa02 f303 	lsl.w	r3, r2, r3
 800a934:	43db      	mvns	r3, r3
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	4013      	ands	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	fa02 f303 	lsl.w	r3, r2, r3
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	69ba      	ldr	r2, [r7, #24]
 800a952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d123      	bne.n	800a9a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	08da      	lsrs	r2, r3, #3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3208      	adds	r2, #8
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	220f      	movs	r2, #15
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	43db      	mvns	r3, r3
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	4013      	ands	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	69ba      	ldr	r2, [r7, #24]
 800a996:	4313      	orrs	r3, r2
 800a998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	08da      	lsrs	r2, r3, #3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3208      	adds	r2, #8
 800a9a2:	69b9      	ldr	r1, [r7, #24]
 800a9a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f003 0203 	and.w	r2, r3, #3
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	69ba      	ldr	r2, [r7, #24]
 800a9da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80b4 	beq.w	800ab52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	4b60      	ldr	r3, [pc, #384]	@ (800ab70 <HAL_GPIO_Init+0x30c>)
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f2:	4a5f      	ldr	r2, [pc, #380]	@ (800ab70 <HAL_GPIO_Init+0x30c>)
 800a9f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a9f8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9fa:	4b5d      	ldr	r3, [pc, #372]	@ (800ab70 <HAL_GPIO_Init+0x30c>)
 800a9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa06:	4a5b      	ldr	r2, [pc, #364]	@ (800ab74 <HAL_GPIO_Init+0x310>)
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	089b      	lsrs	r3, r3, #2
 800aa0c:	3302      	adds	r3, #2
 800aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	220f      	movs	r2, #15
 800aa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa22:	43db      	mvns	r3, r3
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	4013      	ands	r3, r2
 800aa28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a52      	ldr	r2, [pc, #328]	@ (800ab78 <HAL_GPIO_Init+0x314>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d02b      	beq.n	800aa8a <HAL_GPIO_Init+0x226>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a51      	ldr	r2, [pc, #324]	@ (800ab7c <HAL_GPIO_Init+0x318>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d025      	beq.n	800aa86 <HAL_GPIO_Init+0x222>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a50      	ldr	r2, [pc, #320]	@ (800ab80 <HAL_GPIO_Init+0x31c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d01f      	beq.n	800aa82 <HAL_GPIO_Init+0x21e>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a4f      	ldr	r2, [pc, #316]	@ (800ab84 <HAL_GPIO_Init+0x320>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d019      	beq.n	800aa7e <HAL_GPIO_Init+0x21a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a4e      	ldr	r2, [pc, #312]	@ (800ab88 <HAL_GPIO_Init+0x324>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d013      	beq.n	800aa7a <HAL_GPIO_Init+0x216>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a4d      	ldr	r2, [pc, #308]	@ (800ab8c <HAL_GPIO_Init+0x328>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d00d      	beq.n	800aa76 <HAL_GPIO_Init+0x212>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a4c      	ldr	r2, [pc, #304]	@ (800ab90 <HAL_GPIO_Init+0x32c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d007      	beq.n	800aa72 <HAL_GPIO_Init+0x20e>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a4b      	ldr	r2, [pc, #300]	@ (800ab94 <HAL_GPIO_Init+0x330>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d101      	bne.n	800aa6e <HAL_GPIO_Init+0x20a>
 800aa6a:	2307      	movs	r3, #7
 800aa6c:	e00e      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa6e:	2308      	movs	r3, #8
 800aa70:	e00c      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa72:	2306      	movs	r3, #6
 800aa74:	e00a      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa76:	2305      	movs	r3, #5
 800aa78:	e008      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa7a:	2304      	movs	r3, #4
 800aa7c:	e006      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e004      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e002      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa86:	2301      	movs	r3, #1
 800aa88:	e000      	b.n	800aa8c <HAL_GPIO_Init+0x228>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	f002 0203 	and.w	r2, r2, #3
 800aa92:	0092      	lsls	r2, r2, #2
 800aa94:	4093      	lsls	r3, r2
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa9c:	4935      	ldr	r1, [pc, #212]	@ (800ab74 <HAL_GPIO_Init+0x310>)
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	089b      	lsrs	r3, r3, #2
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aaaa:	4b3b      	ldr	r3, [pc, #236]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	43db      	mvns	r3, r3
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	4013      	ands	r3, r2
 800aab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aace:	4a32      	ldr	r2, [pc, #200]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aad4:	4b30      	ldr	r3, [pc, #192]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	43db      	mvns	r3, r3
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4013      	ands	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aaf8:	4a27      	ldr	r2, [pc, #156]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800aafe:	4b26      	ldr	r3, [pc, #152]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	43db      	mvns	r3, r3
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab22:	4a1d      	ldr	r2, [pc, #116]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab28:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	43db      	mvns	r3, r3
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	4013      	ands	r3, r2
 800ab36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab4c:	4a12      	ldr	r2, [pc, #72]	@ (800ab98 <HAL_GPIO_Init+0x334>)
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	3301      	adds	r3, #1
 800ab56:	61fb      	str	r3, [r7, #28]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	f67f ae90 	bls.w	800a880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	3724      	adds	r7, #36	@ 0x24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	40023800 	.word	0x40023800
 800ab74:	40013800 	.word	0x40013800
 800ab78:	40020000 	.word	0x40020000
 800ab7c:	40020400 	.word	0x40020400
 800ab80:	40020800 	.word	0x40020800
 800ab84:	40020c00 	.word	0x40020c00
 800ab88:	40021000 	.word	0x40021000
 800ab8c:	40021400 	.word	0x40021400
 800ab90:	40021800 	.word	0x40021800
 800ab94:	40021c00 	.word	0x40021c00
 800ab98:	40013c00 	.word	0x40013c00

0800ab9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691a      	ldr	r2, [r3, #16]
 800abac:	887b      	ldrh	r3, [r7, #2]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e001      	b.n	800abbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
 800abd8:	4613      	mov	r3, r2
 800abda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800abdc:	787b      	ldrb	r3, [r7, #1]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800abe2:	887a      	ldrh	r2, [r7, #2]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800abe8:	e003      	b.n	800abf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800abea:	887b      	ldrh	r3, [r7, #2]
 800abec:	041a      	lsls	r2, r3, #16
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	619a      	str	r2, [r3, #24]
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
	...

0800ac00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e267      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d075      	beq.n	800ad0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ac1e:	4b88      	ldr	r3, [pc, #544]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f003 030c 	and.w	r3, r3, #12
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d00c      	beq.n	800ac44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac2a:	4b85      	ldr	r3, [pc, #532]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ac32:	2b08      	cmp	r3, #8
 800ac34:	d112      	bne.n	800ac5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac36:	4b82      	ldr	r3, [pc, #520]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac42:	d10b      	bne.n	800ac5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac44:	4b7e      	ldr	r3, [pc, #504]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d05b      	beq.n	800ad08 <HAL_RCC_OscConfig+0x108>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d157      	bne.n	800ad08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e242      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac64:	d106      	bne.n	800ac74 <HAL_RCC_OscConfig+0x74>
 800ac66:	4b76      	ldr	r3, [pc, #472]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a75      	ldr	r2, [pc, #468]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	e01d      	b.n	800acb0 <HAL_RCC_OscConfig+0xb0>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac7c:	d10c      	bne.n	800ac98 <HAL_RCC_OscConfig+0x98>
 800ac7e:	4b70      	ldr	r3, [pc, #448]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a6f      	ldr	r2, [pc, #444]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	4b6d      	ldr	r3, [pc, #436]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a6c      	ldr	r2, [pc, #432]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e00b      	b.n	800acb0 <HAL_RCC_OscConfig+0xb0>
 800ac98:	4b69      	ldr	r3, [pc, #420]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a68      	ldr	r2, [pc, #416]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ac9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	4b66      	ldr	r3, [pc, #408]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a65      	ldr	r2, [pc, #404]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800acaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d013      	beq.n	800ace0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acb8:	f7fe faec 	bl	8009294 <HAL_GetTick>
 800acbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acbe:	e008      	b.n	800acd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acc0:	f7fe fae8 	bl	8009294 <HAL_GetTick>
 800acc4:	4602      	mov	r2, r0
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	2b64      	cmp	r3, #100	@ 0x64
 800accc:	d901      	bls.n	800acd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e207      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acd2:	4b5b      	ldr	r3, [pc, #364]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0f0      	beq.n	800acc0 <HAL_RCC_OscConfig+0xc0>
 800acde:	e014      	b.n	800ad0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace0:	f7fe fad8 	bl	8009294 <HAL_GetTick>
 800ace4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ace6:	e008      	b.n	800acfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ace8:	f7fe fad4 	bl	8009294 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b64      	cmp	r3, #100	@ 0x64
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e1f3      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acfa:	4b51      	ldr	r3, [pc, #324]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f0      	bne.n	800ace8 <HAL_RCC_OscConfig+0xe8>
 800ad06:	e000      	b.n	800ad0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d063      	beq.n	800adde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ad16:	4b4a      	ldr	r3, [pc, #296]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 030c 	and.w	r3, r3, #12
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad22:	4b47      	ldr	r3, [pc, #284]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ad2a:	2b08      	cmp	r3, #8
 800ad2c:	d11c      	bne.n	800ad68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad2e:	4b44      	ldr	r3, [pc, #272]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d116      	bne.n	800ad68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad3a:	4b41      	ldr	r3, [pc, #260]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_RCC_OscConfig+0x152>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d001      	beq.n	800ad52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e1c7      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad52:	4b3b      	ldr	r3, [pc, #236]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4937      	ldr	r1, [pc, #220]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad66:	e03a      	b.n	800adde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d020      	beq.n	800adb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad70:	4b34      	ldr	r3, [pc, #208]	@ (800ae44 <HAL_RCC_OscConfig+0x244>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad76:	f7fe fa8d 	bl	8009294 <HAL_GetTick>
 800ad7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad7c:	e008      	b.n	800ad90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad7e:	f7fe fa89 	bl	8009294 <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d901      	bls.n	800ad90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e1a8      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad90:	4b2b      	ldr	r3, [pc, #172]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0f0      	beq.n	800ad7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad9c:	4b28      	ldr	r3, [pc, #160]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	4925      	ldr	r1, [pc, #148]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800adac:	4313      	orrs	r3, r2
 800adae:	600b      	str	r3, [r1, #0]
 800adb0:	e015      	b.n	800adde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adb2:	4b24      	ldr	r3, [pc, #144]	@ (800ae44 <HAL_RCC_OscConfig+0x244>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb8:	f7fe fa6c 	bl	8009294 <HAL_GetTick>
 800adbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc0:	f7fe fa68 	bl	8009294 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e187      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800add2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f0      	bne.n	800adc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d036      	beq.n	800ae58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d016      	beq.n	800ae20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adf2:	4b15      	ldr	r3, [pc, #84]	@ (800ae48 <HAL_RCC_OscConfig+0x248>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adf8:	f7fe fa4c 	bl	8009294 <HAL_GetTick>
 800adfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800adfe:	e008      	b.n	800ae12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae00:	f7fe fa48 	bl	8009294 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e167      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae12:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <HAL_RCC_OscConfig+0x240>)
 800ae14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae16:	f003 0302 	and.w	r3, r3, #2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0f0      	beq.n	800ae00 <HAL_RCC_OscConfig+0x200>
 800ae1e:	e01b      	b.n	800ae58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae20:	4b09      	ldr	r3, [pc, #36]	@ (800ae48 <HAL_RCC_OscConfig+0x248>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae26:	f7fe fa35 	bl	8009294 <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae2c:	e00e      	b.n	800ae4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae2e:	f7fe fa31 	bl	8009294 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d907      	bls.n	800ae4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e150      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
 800ae40:	40023800 	.word	0x40023800
 800ae44:	42470000 	.word	0x42470000
 800ae48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae4c:	4b88      	ldr	r3, [pc, #544]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800ae4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1ea      	bne.n	800ae2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8097 	beq.w	800af94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae66:	2300      	movs	r3, #0
 800ae68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae6a:	4b81      	ldr	r3, [pc, #516]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10f      	bne.n	800ae96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]
 800ae7a:	4b7d      	ldr	r3, [pc, #500]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7e:	4a7c      	ldr	r2, [pc, #496]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800ae80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae84:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae86:	4b7a      	ldr	r3, [pc, #488]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800ae88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae8e:	60bb      	str	r3, [r7, #8]
 800ae90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae92:	2301      	movs	r3, #1
 800ae94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae96:	4b77      	ldr	r3, [pc, #476]	@ (800b074 <HAL_RCC_OscConfig+0x474>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d118      	bne.n	800aed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aea2:	4b74      	ldr	r3, [pc, #464]	@ (800b074 <HAL_RCC_OscConfig+0x474>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a73      	ldr	r2, [pc, #460]	@ (800b074 <HAL_RCC_OscConfig+0x474>)
 800aea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aeae:	f7fe f9f1 	bl	8009294 <HAL_GetTick>
 800aeb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aeb4:	e008      	b.n	800aec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeb6:	f7fe f9ed 	bl	8009294 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d901      	bls.n	800aec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e10c      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aec8:	4b6a      	ldr	r3, [pc, #424]	@ (800b074 <HAL_RCC_OscConfig+0x474>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0f0      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d106      	bne.n	800aeea <HAL_RCC_OscConfig+0x2ea>
 800aedc:	4b64      	ldr	r3, [pc, #400]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800aede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee0:	4a63      	ldr	r2, [pc, #396]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aee8:	e01c      	b.n	800af24 <HAL_RCC_OscConfig+0x324>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d10c      	bne.n	800af0c <HAL_RCC_OscConfig+0x30c>
 800aef2:	4b5f      	ldr	r3, [pc, #380]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800aef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef6:	4a5e      	ldr	r2, [pc, #376]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800aef8:	f043 0304 	orr.w	r3, r3, #4
 800aefc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aefe:	4b5c      	ldr	r3, [pc, #368]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af02:	4a5b      	ldr	r2, [pc, #364]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af04:	f043 0301 	orr.w	r3, r3, #1
 800af08:	6713      	str	r3, [r2, #112]	@ 0x70
 800af0a:	e00b      	b.n	800af24 <HAL_RCC_OscConfig+0x324>
 800af0c:	4b58      	ldr	r3, [pc, #352]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af10:	4a57      	ldr	r2, [pc, #348]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af12:	f023 0301 	bic.w	r3, r3, #1
 800af16:	6713      	str	r3, [r2, #112]	@ 0x70
 800af18:	4b55      	ldr	r3, [pc, #340]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af1c:	4a54      	ldr	r2, [pc, #336]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af1e:	f023 0304 	bic.w	r3, r3, #4
 800af22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d015      	beq.n	800af58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af2c:	f7fe f9b2 	bl	8009294 <HAL_GetTick>
 800af30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af32:	e00a      	b.n	800af4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af34:	f7fe f9ae 	bl	8009294 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af42:	4293      	cmp	r3, r2
 800af44:	d901      	bls.n	800af4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800af46:	2303      	movs	r3, #3
 800af48:	e0cb      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af4a:	4b49      	ldr	r3, [pc, #292]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0ee      	beq.n	800af34 <HAL_RCC_OscConfig+0x334>
 800af56:	e014      	b.n	800af82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af58:	f7fe f99c 	bl	8009294 <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af5e:	e00a      	b.n	800af76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af60:	f7fe f998 	bl	8009294 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af6e:	4293      	cmp	r3, r2
 800af70:	d901      	bls.n	800af76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e0b5      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af76:	4b3e      	ldr	r3, [pc, #248]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1ee      	bne.n	800af60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d105      	bne.n	800af94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af88:	4b39      	ldr	r3, [pc, #228]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8c:	4a38      	ldr	r2, [pc, #224]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800af8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 80a1 	beq.w	800b0e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af9e:	4b34      	ldr	r3, [pc, #208]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f003 030c 	and.w	r3, r3, #12
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d05c      	beq.n	800b064 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d141      	bne.n	800b036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afb2:	4b31      	ldr	r3, [pc, #196]	@ (800b078 <HAL_RCC_OscConfig+0x478>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afb8:	f7fe f96c 	bl	8009294 <HAL_GetTick>
 800afbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afbe:	e008      	b.n	800afd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afc0:	f7fe f968 	bl	8009294 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d901      	bls.n	800afd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e087      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afd2:	4b27      	ldr	r3, [pc, #156]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1f0      	bne.n	800afc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	69da      	ldr	r2, [r3, #28]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	431a      	orrs	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afec:	019b      	lsls	r3, r3, #6
 800afee:	431a      	orrs	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff4:	085b      	lsrs	r3, r3, #1
 800aff6:	3b01      	subs	r3, #1
 800aff8:	041b      	lsls	r3, r3, #16
 800affa:	431a      	orrs	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b000:	061b      	lsls	r3, r3, #24
 800b002:	491b      	ldr	r1, [pc, #108]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800b004:	4313      	orrs	r3, r2
 800b006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b008:	4b1b      	ldr	r3, [pc, #108]	@ (800b078 <HAL_RCC_OscConfig+0x478>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b00e:	f7fe f941 	bl	8009294 <HAL_GetTick>
 800b012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b014:	e008      	b.n	800b028 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b016:	f7fe f93d 	bl	8009294 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e05c      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b028:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0f0      	beq.n	800b016 <HAL_RCC_OscConfig+0x416>
 800b034:	e054      	b.n	800b0e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b036:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <HAL_RCC_OscConfig+0x478>)
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b03c:	f7fe f92a 	bl	8009294 <HAL_GetTick>
 800b040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b042:	e008      	b.n	800b056 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b044:	f7fe f926 	bl	8009294 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e045      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b056:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <HAL_RCC_OscConfig+0x470>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1f0      	bne.n	800b044 <HAL_RCC_OscConfig+0x444>
 800b062:	e03d      	b.n	800b0e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d107      	bne.n	800b07c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e038      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
 800b070:	40023800 	.word	0x40023800
 800b074:	40007000 	.word	0x40007000
 800b078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b07c:	4b1b      	ldr	r3, [pc, #108]	@ (800b0ec <HAL_RCC_OscConfig+0x4ec>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d028      	beq.n	800b0dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b094:	429a      	cmp	r2, r3
 800b096:	d121      	bne.n	800b0dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d11a      	bne.n	800b0dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b0b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d111      	bne.n	800b0dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c2:	085b      	lsrs	r3, r3, #1
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d107      	bne.n	800b0dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d001      	beq.n	800b0e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e000      	b.n	800b0e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	40023800 	.word	0x40023800

0800b0f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e0cc      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b104:	4b68      	ldr	r3, [pc, #416]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0307 	and.w	r3, r3, #7
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d90c      	bls.n	800b12c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b112:	4b65      	ldr	r3, [pc, #404]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b11a:	4b63      	ldr	r3, [pc, #396]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0307 	and.w	r3, r3, #7
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d001      	beq.n	800b12c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e0b8      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d020      	beq.n	800b17a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d005      	beq.n	800b150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b144:	4b59      	ldr	r3, [pc, #356]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	4a58      	ldr	r2, [pc, #352]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b14a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b14e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b15c:	4b53      	ldr	r3, [pc, #332]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	4a52      	ldr	r2, [pc, #328]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b168:	4b50      	ldr	r3, [pc, #320]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	494d      	ldr	r1, [pc, #308]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b176:	4313      	orrs	r3, r2
 800b178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d044      	beq.n	800b210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d107      	bne.n	800b19e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b18e:	4b47      	ldr	r3, [pc, #284]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d119      	bne.n	800b1ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e07f      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d003      	beq.n	800b1ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d107      	bne.n	800b1be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d109      	bne.n	800b1ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e06f      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1be:	4b3b      	ldr	r3, [pc, #236]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e067      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b1ce:	4b37      	ldr	r3, [pc, #220]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f023 0203 	bic.w	r2, r3, #3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4934      	ldr	r1, [pc, #208]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b1e0:	f7fe f858 	bl	8009294 <HAL_GetTick>
 800b1e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1e6:	e00a      	b.n	800b1fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1e8:	f7fe f854 	bl	8009294 <HAL_GetTick>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d901      	bls.n	800b1fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e04f      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 020c 	and.w	r2, r3, #12
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d1eb      	bne.n	800b1e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b210:	4b25      	ldr	r3, [pc, #148]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0307 	and.w	r3, r3, #7
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d20c      	bcs.n	800b238 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21e:	4b22      	ldr	r3, [pc, #136]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b226:	4b20      	ldr	r3, [pc, #128]	@ (800b2a8 <HAL_RCC_ClockConfig+0x1b8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d001      	beq.n	800b238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e032      	b.n	800b29e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d008      	beq.n	800b256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b244:	4b19      	ldr	r3, [pc, #100]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	4916      	ldr	r1, [pc, #88]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b252:	4313      	orrs	r3, r2
 800b254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0308 	and.w	r3, r3, #8
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d009      	beq.n	800b276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b262:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	490e      	ldr	r1, [pc, #56]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b272:	4313      	orrs	r3, r2
 800b274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b276:	f000 f821 	bl	800b2bc <HAL_RCC_GetSysClockFreq>
 800b27a:	4602      	mov	r2, r0
 800b27c:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ac <HAL_RCC_ClockConfig+0x1bc>)
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	490a      	ldr	r1, [pc, #40]	@ (800b2b0 <HAL_RCC_ClockConfig+0x1c0>)
 800b288:	5ccb      	ldrb	r3, [r1, r3]
 800b28a:	fa22 f303 	lsr.w	r3, r2, r3
 800b28e:	4a09      	ldr	r2, [pc, #36]	@ (800b2b4 <HAL_RCC_ClockConfig+0x1c4>)
 800b290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b292:	4b09      	ldr	r3, [pc, #36]	@ (800b2b8 <HAL_RCC_ClockConfig+0x1c8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7fd ffb8 	bl	800920c <HAL_InitTick>

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	40023c00 	.word	0x40023c00
 800b2ac:	40023800 	.word	0x40023800
 800b2b0:	08015a2c 	.word	0x08015a2c
 800b2b4:	20000010 	.word	0x20000010
 800b2b8:	20000014 	.word	0x20000014

0800b2bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c0:	b094      	sub	sp, #80	@ 0x50
 800b2c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2d4:	4b79      	ldr	r3, [pc, #484]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f003 030c 	and.w	r3, r3, #12
 800b2dc:	2b08      	cmp	r3, #8
 800b2de:	d00d      	beq.n	800b2fc <HAL_RCC_GetSysClockFreq+0x40>
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	f200 80e1 	bhi.w	800b4a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <HAL_RCC_GetSysClockFreq+0x34>
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	d003      	beq.n	800b2f6 <HAL_RCC_GetSysClockFreq+0x3a>
 800b2ee:	e0db      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b2f0:	4b73      	ldr	r3, [pc, #460]	@ (800b4c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b2f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b2f4:	e0db      	b.n	800b4ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b2f6:	4b73      	ldr	r3, [pc, #460]	@ (800b4c4 <HAL_RCC_GetSysClockFreq+0x208>)
 800b2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b2fa:	e0d8      	b.n	800b4ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b2fc:	4b6f      	ldr	r3, [pc, #444]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b304:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b306:	4b6d      	ldr	r3, [pc, #436]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d063      	beq.n	800b3da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b312:	4b6a      	ldr	r3, [pc, #424]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	099b      	lsrs	r3, r3, #6
 800b318:	2200      	movs	r2, #0
 800b31a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b31c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b324:	633b      	str	r3, [r7, #48]	@ 0x30
 800b326:	2300      	movs	r3, #0
 800b328:	637b      	str	r3, [r7, #52]	@ 0x34
 800b32a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b32e:	4622      	mov	r2, r4
 800b330:	462b      	mov	r3, r5
 800b332:	f04f 0000 	mov.w	r0, #0
 800b336:	f04f 0100 	mov.w	r1, #0
 800b33a:	0159      	lsls	r1, r3, #5
 800b33c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b340:	0150      	lsls	r0, r2, #5
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4621      	mov	r1, r4
 800b348:	1a51      	subs	r1, r2, r1
 800b34a:	6139      	str	r1, [r7, #16]
 800b34c:	4629      	mov	r1, r5
 800b34e:	eb63 0301 	sbc.w	r3, r3, r1
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b360:	4659      	mov	r1, fp
 800b362:	018b      	lsls	r3, r1, #6
 800b364:	4651      	mov	r1, sl
 800b366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b36a:	4651      	mov	r1, sl
 800b36c:	018a      	lsls	r2, r1, #6
 800b36e:	4651      	mov	r1, sl
 800b370:	ebb2 0801 	subs.w	r8, r2, r1
 800b374:	4659      	mov	r1, fp
 800b376:	eb63 0901 	sbc.w	r9, r3, r1
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	f04f 0300 	mov.w	r3, #0
 800b382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b38a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b38e:	4690      	mov	r8, r2
 800b390:	4699      	mov	r9, r3
 800b392:	4623      	mov	r3, r4
 800b394:	eb18 0303 	adds.w	r3, r8, r3
 800b398:	60bb      	str	r3, [r7, #8]
 800b39a:	462b      	mov	r3, r5
 800b39c:	eb49 0303 	adc.w	r3, r9, r3
 800b3a0:	60fb      	str	r3, [r7, #12]
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	024b      	lsls	r3, r1, #9
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	024a      	lsls	r2, r1, #9
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b3cc:	f7f5 fc6c 	bl	8000ca8 <__aeabi_uldivmod>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3d8:	e058      	b.n	800b48c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3da:	4b38      	ldr	r3, [pc, #224]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	099b      	lsrs	r3, r3, #6
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	f04f 0000 	mov.w	r0, #0
 800b3fc:	f04f 0100 	mov.w	r1, #0
 800b400:	0159      	lsls	r1, r3, #5
 800b402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b406:	0150      	lsls	r0, r2, #5
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4641      	mov	r1, r8
 800b40e:	ebb2 0a01 	subs.w	sl, r2, r1
 800b412:	4649      	mov	r1, r9
 800b414:	eb63 0b01 	sbc.w	fp, r3, r1
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b42c:	ebb2 040a 	subs.w	r4, r2, sl
 800b430:	eb63 050b 	sbc.w	r5, r3, fp
 800b434:	f04f 0200 	mov.w	r2, #0
 800b438:	f04f 0300 	mov.w	r3, #0
 800b43c:	00eb      	lsls	r3, r5, #3
 800b43e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b442:	00e2      	lsls	r2, r4, #3
 800b444:	4614      	mov	r4, r2
 800b446:	461d      	mov	r5, r3
 800b448:	4643      	mov	r3, r8
 800b44a:	18e3      	adds	r3, r4, r3
 800b44c:	603b      	str	r3, [r7, #0]
 800b44e:	464b      	mov	r3, r9
 800b450:	eb45 0303 	adc.w	r3, r5, r3
 800b454:	607b      	str	r3, [r7, #4]
 800b456:	f04f 0200 	mov.w	r2, #0
 800b45a:	f04f 0300 	mov.w	r3, #0
 800b45e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b462:	4629      	mov	r1, r5
 800b464:	028b      	lsls	r3, r1, #10
 800b466:	4621      	mov	r1, r4
 800b468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b46c:	4621      	mov	r1, r4
 800b46e:	028a      	lsls	r2, r1, #10
 800b470:	4610      	mov	r0, r2
 800b472:	4619      	mov	r1, r3
 800b474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b476:	2200      	movs	r2, #0
 800b478:	61bb      	str	r3, [r7, #24]
 800b47a:	61fa      	str	r2, [r7, #28]
 800b47c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b480:	f7f5 fc12 	bl	8000ca8 <__aeabi_uldivmod>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4613      	mov	r3, r2
 800b48a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b48c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4bc <HAL_RCC_GetSysClockFreq+0x200>)
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	0c1b      	lsrs	r3, r3, #16
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	3301      	adds	r3, #1
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b49c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b4a6:	e002      	b.n	800b4ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4a8:	4b05      	ldr	r3, [pc, #20]	@ (800b4c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800b4aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b4ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3750      	adds	r7, #80	@ 0x50
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	00f42400 	.word	0x00f42400
 800b4c4:	007a1200 	.word	0x007a1200

0800b4c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4cc:	4b03      	ldr	r3, [pc, #12]	@ (800b4dc <HAL_RCC_GetHCLKFreq+0x14>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20000010 	.word	0x20000010

0800b4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b4e4:	f7ff fff0 	bl	800b4c8 <HAL_RCC_GetHCLKFreq>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	4b05      	ldr	r3, [pc, #20]	@ (800b500 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	0a9b      	lsrs	r3, r3, #10
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	4903      	ldr	r1, [pc, #12]	@ (800b504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4f6:	5ccb      	ldrb	r3, [r1, r3]
 800b4f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	40023800 	.word	0x40023800
 800b504:	08015a3c 	.word	0x08015a3c

0800b508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b50c:	f7ff ffdc 	bl	800b4c8 <HAL_RCC_GetHCLKFreq>
 800b510:	4602      	mov	r2, r0
 800b512:	4b05      	ldr	r3, [pc, #20]	@ (800b528 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	0b5b      	lsrs	r3, r3, #13
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	4903      	ldr	r1, [pc, #12]	@ (800b52c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b51e:	5ccb      	ldrb	r3, [r1, r3]
 800b520:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b524:	4618      	mov	r0, r3
 800b526:	bd80      	pop	{r7, pc}
 800b528:	40023800 	.word	0x40023800
 800b52c:	08015a3c 	.word	0x08015a3c

0800b530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e041      	b.n	800b5c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d106      	bne.n	800b55c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fc f9ba 	bl	80078d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2202      	movs	r2, #2
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3304      	adds	r3, #4
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f000 fad8 	bl	800bb24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e041      	b.n	800b664 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f839 	bl	800b66c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3304      	adds	r3, #4
 800b60a:	4619      	mov	r1, r3
 800b60c:	4610      	mov	r0, r2
 800b60e:	f000 fa89 	bl	800bb24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d109      	bne.n	800b6a4 <HAL_TIM_PWM_Start+0x24>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b01      	cmp	r3, #1
 800b69a:	bf14      	ite	ne
 800b69c:	2301      	movne	r3, #1
 800b69e:	2300      	moveq	r3, #0
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	e022      	b.n	800b6ea <HAL_TIM_PWM_Start+0x6a>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d109      	bne.n	800b6be <HAL_TIM_PWM_Start+0x3e>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	bf14      	ite	ne
 800b6b6:	2301      	movne	r3, #1
 800b6b8:	2300      	moveq	r3, #0
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	e015      	b.n	800b6ea <HAL_TIM_PWM_Start+0x6a>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d109      	bne.n	800b6d8 <HAL_TIM_PWM_Start+0x58>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	bf14      	ite	ne
 800b6d0:	2301      	movne	r3, #1
 800b6d2:	2300      	moveq	r3, #0
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	e008      	b.n	800b6ea <HAL_TIM_PWM_Start+0x6a>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	bf14      	ite	ne
 800b6e4:	2301      	movne	r3, #1
 800b6e6:	2300      	moveq	r3, #0
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e07c      	b.n	800b7ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <HAL_TIM_PWM_Start+0x82>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b700:	e013      	b.n	800b72a <HAL_TIM_PWM_Start+0xaa>
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	2b04      	cmp	r3, #4
 800b706:	d104      	bne.n	800b712 <HAL_TIM_PWM_Start+0x92>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2202      	movs	r2, #2
 800b70c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b710:	e00b      	b.n	800b72a <HAL_TIM_PWM_Start+0xaa>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2b08      	cmp	r3, #8
 800b716:	d104      	bne.n	800b722 <HAL_TIM_PWM_Start+0xa2>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b720:	e003      	b.n	800b72a <HAL_TIM_PWM_Start+0xaa>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2202      	movs	r2, #2
 800b726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2201      	movs	r2, #1
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fcec 	bl	800c110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a2d      	ldr	r2, [pc, #180]	@ (800b7f4 <HAL_TIM_PWM_Start+0x174>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d004      	beq.n	800b74c <HAL_TIM_PWM_Start+0xcc>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a2c      	ldr	r2, [pc, #176]	@ (800b7f8 <HAL_TIM_PWM_Start+0x178>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d101      	bne.n	800b750 <HAL_TIM_PWM_Start+0xd0>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e000      	b.n	800b752 <HAL_TIM_PWM_Start+0xd2>
 800b750:	2300      	movs	r3, #0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b764:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a22      	ldr	r2, [pc, #136]	@ (800b7f4 <HAL_TIM_PWM_Start+0x174>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d022      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b778:	d01d      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7fc <HAL_TIM_PWM_Start+0x17c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d018      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1d      	ldr	r2, [pc, #116]	@ (800b800 <HAL_TIM_PWM_Start+0x180>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1c      	ldr	r2, [pc, #112]	@ (800b804 <HAL_TIM_PWM_Start+0x184>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00e      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a16      	ldr	r2, [pc, #88]	@ (800b7f8 <HAL_TIM_PWM_Start+0x178>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d009      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	@ (800b808 <HAL_TIM_PWM_Start+0x188>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_TIM_PWM_Start+0x136>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a16      	ldr	r2, [pc, #88]	@ (800b80c <HAL_TIM_PWM_Start+0x18c>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d111      	bne.n	800b7da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f003 0307 	and.w	r3, r3, #7
 800b7c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b06      	cmp	r3, #6
 800b7c6:	d010      	beq.n	800b7ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0201 	orr.w	r2, r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7d8:	e007      	b.n	800b7ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f042 0201 	orr.w	r2, r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40010400 	.word	0x40010400
 800b7fc:	40000400 	.word	0x40000400
 800b800:	40000800 	.word	0x40000800
 800b804:	40000c00 	.word	0x40000c00
 800b808:	40014000 	.word	0x40014000
 800b80c:	40001800 	.word	0x40001800

0800b810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b826:	2b01      	cmp	r3, #1
 800b828:	d101      	bne.n	800b82e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b82a:	2302      	movs	r3, #2
 800b82c:	e0ae      	b.n	800b98c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b0c      	cmp	r3, #12
 800b83a:	f200 809f 	bhi.w	800b97c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b83e:	a201      	add	r2, pc, #4	@ (adr r2, 800b844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b844:	0800b879 	.word	0x0800b879
 800b848:	0800b97d 	.word	0x0800b97d
 800b84c:	0800b97d 	.word	0x0800b97d
 800b850:	0800b97d 	.word	0x0800b97d
 800b854:	0800b8b9 	.word	0x0800b8b9
 800b858:	0800b97d 	.word	0x0800b97d
 800b85c:	0800b97d 	.word	0x0800b97d
 800b860:	0800b97d 	.word	0x0800b97d
 800b864:	0800b8fb 	.word	0x0800b8fb
 800b868:	0800b97d 	.word	0x0800b97d
 800b86c:	0800b97d 	.word	0x0800b97d
 800b870:	0800b97d 	.word	0x0800b97d
 800b874:	0800b93b 	.word	0x0800b93b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68b9      	ldr	r1, [r7, #8]
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 f9fc 	bl	800bc7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	699a      	ldr	r2, [r3, #24]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 0208 	orr.w	r2, r2, #8
 800b892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	699a      	ldr	r2, [r3, #24]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0204 	bic.w	r2, r2, #4
 800b8a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6999      	ldr	r1, [r3, #24]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	691a      	ldr	r2, [r3, #16]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	619a      	str	r2, [r3, #24]
      break;
 800b8b6:	e064      	b.n	800b982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 fa4c 	bl	800bd5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	699a      	ldr	r2, [r3, #24]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	699a      	ldr	r2, [r3, #24]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6999      	ldr	r1, [r3, #24]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	021a      	lsls	r2, r3, #8
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	619a      	str	r2, [r3, #24]
      break;
 800b8f8:	e043      	b.n	800b982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 faa1 	bl	800be48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69da      	ldr	r2, [r3, #28]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f042 0208 	orr.w	r2, r2, #8
 800b914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69da      	ldr	r2, [r3, #28]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f022 0204 	bic.w	r2, r2, #4
 800b924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	69d9      	ldr	r1, [r3, #28]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	691a      	ldr	r2, [r3, #16]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	61da      	str	r2, [r3, #28]
      break;
 800b938:	e023      	b.n	800b982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	4618      	mov	r0, r3
 800b942:	f000 faf5 	bl	800bf30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	69da      	ldr	r2, [r3, #28]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69da      	ldr	r2, [r3, #28]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69d9      	ldr	r1, [r3, #28]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	021a      	lsls	r2, r3, #8
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	61da      	str	r2, [r3, #28]
      break;
 800b97a:	e002      	b.n	800b982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
      break;
 800b980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d101      	bne.n	800b9b0 <HAL_TIM_ConfigClockSource+0x1c>
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	e0b4      	b.n	800bb1a <HAL_TIM_ConfigClockSource+0x186>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b9ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9e8:	d03e      	beq.n	800ba68 <HAL_TIM_ConfigClockSource+0xd4>
 800b9ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ee:	f200 8087 	bhi.w	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800b9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9f6:	f000 8086 	beq.w	800bb06 <HAL_TIM_ConfigClockSource+0x172>
 800b9fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9fe:	d87f      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba00:	2b70      	cmp	r3, #112	@ 0x70
 800ba02:	d01a      	beq.n	800ba3a <HAL_TIM_ConfigClockSource+0xa6>
 800ba04:	2b70      	cmp	r3, #112	@ 0x70
 800ba06:	d87b      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba08:	2b60      	cmp	r3, #96	@ 0x60
 800ba0a:	d050      	beq.n	800baae <HAL_TIM_ConfigClockSource+0x11a>
 800ba0c:	2b60      	cmp	r3, #96	@ 0x60
 800ba0e:	d877      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba10:	2b50      	cmp	r3, #80	@ 0x50
 800ba12:	d03c      	beq.n	800ba8e <HAL_TIM_ConfigClockSource+0xfa>
 800ba14:	2b50      	cmp	r3, #80	@ 0x50
 800ba16:	d873      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba18:	2b40      	cmp	r3, #64	@ 0x40
 800ba1a:	d058      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x13a>
 800ba1c:	2b40      	cmp	r3, #64	@ 0x40
 800ba1e:	d86f      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba20:	2b30      	cmp	r3, #48	@ 0x30
 800ba22:	d064      	beq.n	800baee <HAL_TIM_ConfigClockSource+0x15a>
 800ba24:	2b30      	cmp	r3, #48	@ 0x30
 800ba26:	d86b      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba28:	2b20      	cmp	r3, #32
 800ba2a:	d060      	beq.n	800baee <HAL_TIM_ConfigClockSource+0x15a>
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	d867      	bhi.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d05c      	beq.n	800baee <HAL_TIM_ConfigClockSource+0x15a>
 800ba34:	2b10      	cmp	r3, #16
 800ba36:	d05a      	beq.n	800baee <HAL_TIM_ConfigClockSource+0x15a>
 800ba38:	e062      	b.n	800bb00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba4a:	f000 fb41 	bl	800c0d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ba5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	609a      	str	r2, [r3, #8]
      break;
 800ba66:	e04f      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba78:	f000 fb2a 	bl	800c0d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba8a:	609a      	str	r2, [r3, #8]
      break;
 800ba8c:	e03c      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f000 fa9e 	bl	800bfdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2150      	movs	r1, #80	@ 0x50
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 faf7 	bl	800c09a <TIM_ITRx_SetConfig>
      break;
 800baac:	e02c      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800baba:	461a      	mov	r2, r3
 800babc:	f000 fabd 	bl	800c03a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2160      	movs	r1, #96	@ 0x60
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fae7 	bl	800c09a <TIM_ITRx_SetConfig>
      break;
 800bacc:	e01c      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bada:	461a      	mov	r2, r3
 800badc:	f000 fa7e 	bl	800bfdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2140      	movs	r1, #64	@ 0x40
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 fad7 	bl	800c09a <TIM_ITRx_SetConfig>
      break;
 800baec:	e00c      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4619      	mov	r1, r3
 800baf8:	4610      	mov	r0, r2
 800bafa:	f000 face 	bl	800c09a <TIM_ITRx_SetConfig>
      break;
 800bafe:	e003      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	73fb      	strb	r3, [r7, #15]
      break;
 800bb04:	e000      	b.n	800bb08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bb06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a46      	ldr	r2, [pc, #280]	@ (800bc50 <TIM_Base_SetConfig+0x12c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d013      	beq.n	800bb64 <TIM_Base_SetConfig+0x40>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb42:	d00f      	beq.n	800bb64 <TIM_Base_SetConfig+0x40>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a43      	ldr	r2, [pc, #268]	@ (800bc54 <TIM_Base_SetConfig+0x130>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d00b      	beq.n	800bb64 <TIM_Base_SetConfig+0x40>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a42      	ldr	r2, [pc, #264]	@ (800bc58 <TIM_Base_SetConfig+0x134>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d007      	beq.n	800bb64 <TIM_Base_SetConfig+0x40>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a41      	ldr	r2, [pc, #260]	@ (800bc5c <TIM_Base_SetConfig+0x138>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d003      	beq.n	800bb64 <TIM_Base_SetConfig+0x40>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a40      	ldr	r2, [pc, #256]	@ (800bc60 <TIM_Base_SetConfig+0x13c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d108      	bne.n	800bb76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a35      	ldr	r2, [pc, #212]	@ (800bc50 <TIM_Base_SetConfig+0x12c>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d02b      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb84:	d027      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a32      	ldr	r2, [pc, #200]	@ (800bc54 <TIM_Base_SetConfig+0x130>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d023      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a31      	ldr	r2, [pc, #196]	@ (800bc58 <TIM_Base_SetConfig+0x134>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d01f      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a30      	ldr	r2, [pc, #192]	@ (800bc5c <TIM_Base_SetConfig+0x138>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d01b      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a2f      	ldr	r2, [pc, #188]	@ (800bc60 <TIM_Base_SetConfig+0x13c>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d017      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a2e      	ldr	r2, [pc, #184]	@ (800bc64 <TIM_Base_SetConfig+0x140>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d013      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a2d      	ldr	r2, [pc, #180]	@ (800bc68 <TIM_Base_SetConfig+0x144>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d00f      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a2c      	ldr	r2, [pc, #176]	@ (800bc6c <TIM_Base_SetConfig+0x148>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00b      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a2b      	ldr	r2, [pc, #172]	@ (800bc70 <TIM_Base_SetConfig+0x14c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d007      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a2a      	ldr	r2, [pc, #168]	@ (800bc74 <TIM_Base_SetConfig+0x150>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d003      	beq.n	800bbd6 <TIM_Base_SetConfig+0xb2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a29      	ldr	r2, [pc, #164]	@ (800bc78 <TIM_Base_SetConfig+0x154>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d108      	bne.n	800bbe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a10      	ldr	r2, [pc, #64]	@ (800bc50 <TIM_Base_SetConfig+0x12c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d003      	beq.n	800bc1c <TIM_Base_SetConfig+0xf8>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a12      	ldr	r2, [pc, #72]	@ (800bc60 <TIM_Base_SetConfig+0x13c>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d103      	bne.n	800bc24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	691a      	ldr	r2, [r3, #16]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d105      	bne.n	800bc42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	f023 0201 	bic.w	r2, r3, #1
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	611a      	str	r2, [r3, #16]
  }
}
 800bc42:	bf00      	nop
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	40010000 	.word	0x40010000
 800bc54:	40000400 	.word	0x40000400
 800bc58:	40000800 	.word	0x40000800
 800bc5c:	40000c00 	.word	0x40000c00
 800bc60:	40010400 	.word	0x40010400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800
 800bc70:	40001800 	.word	0x40001800
 800bc74:	40001c00 	.word	0x40001c00
 800bc78:	40002000 	.word	0x40002000

0800bc7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	f023 0201 	bic.w	r2, r3, #1
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f023 0302 	bic.w	r3, r3, #2
 800bcc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a20      	ldr	r2, [pc, #128]	@ (800bd54 <TIM_OC1_SetConfig+0xd8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_OC1_SetConfig+0x64>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a1f      	ldr	r2, [pc, #124]	@ (800bd58 <TIM_OC1_SetConfig+0xdc>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d10c      	bne.n	800bcfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f023 0308 	bic.w	r3, r3, #8
 800bce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f023 0304 	bic.w	r3, r3, #4
 800bcf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a15      	ldr	r2, [pc, #84]	@ (800bd54 <TIM_OC1_SetConfig+0xd8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d003      	beq.n	800bd0a <TIM_OC1_SetConfig+0x8e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a14      	ldr	r2, [pc, #80]	@ (800bd58 <TIM_OC1_SetConfig+0xdc>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d111      	bne.n	800bd2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	621a      	str	r2, [r3, #32]
}
 800bd48:	bf00      	nop
 800bd4a:	371c      	adds	r7, #28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	40010000 	.word	0x40010000
 800bd58:	40010400 	.word	0x40010400

0800bd5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f023 0210 	bic.w	r2, r3, #16
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f023 0320 	bic.w	r3, r3, #32
 800bda6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a22      	ldr	r2, [pc, #136]	@ (800be40 <TIM_OC2_SetConfig+0xe4>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d003      	beq.n	800bdc4 <TIM_OC2_SetConfig+0x68>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a21      	ldr	r2, [pc, #132]	@ (800be44 <TIM_OC2_SetConfig+0xe8>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d10d      	bne.n	800bde0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	011b      	lsls	r3, r3, #4
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a17      	ldr	r2, [pc, #92]	@ (800be40 <TIM_OC2_SetConfig+0xe4>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d003      	beq.n	800bdf0 <TIM_OC2_SetConfig+0x94>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a16      	ldr	r2, [pc, #88]	@ (800be44 <TIM_OC2_SetConfig+0xe8>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d113      	bne.n	800be18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	4313      	orrs	r3, r2
 800be0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	4313      	orrs	r3, r2
 800be16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	621a      	str	r2, [r3, #32]
}
 800be32:	bf00      	nop
 800be34:	371c      	adds	r7, #28
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	40010000 	.word	0x40010000
 800be44:	40010400 	.word	0x40010400

0800be48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a1b      	ldr	r3, [r3, #32]
 800be5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	021b      	lsls	r3, r3, #8
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a21      	ldr	r2, [pc, #132]	@ (800bf28 <TIM_OC3_SetConfig+0xe0>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d003      	beq.n	800beae <TIM_OC3_SetConfig+0x66>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a20      	ldr	r2, [pc, #128]	@ (800bf2c <TIM_OC3_SetConfig+0xe4>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d10d      	bne.n	800beca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800beb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a16      	ldr	r2, [pc, #88]	@ (800bf28 <TIM_OC3_SetConfig+0xe0>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d003      	beq.n	800beda <TIM_OC3_SetConfig+0x92>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <TIM_OC3_SetConfig+0xe4>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d113      	bne.n	800bf02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	011b      	lsls	r3, r3, #4
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	621a      	str	r2, [r3, #32]
}
 800bf1c:	bf00      	nop
 800bf1e:	371c      	adds	r7, #28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	40010000 	.word	0x40010000
 800bf2c:	40010400 	.word	0x40010400

0800bf30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	031b      	lsls	r3, r3, #12
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a12      	ldr	r2, [pc, #72]	@ (800bfd4 <TIM_OC4_SetConfig+0xa4>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d003      	beq.n	800bf98 <TIM_OC4_SetConfig+0x68>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a11      	ldr	r2, [pc, #68]	@ (800bfd8 <TIM_OC4_SetConfig+0xa8>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d109      	bne.n	800bfac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	019b      	lsls	r3, r3, #6
 800bfa6:	697a      	ldr	r2, [r7, #20]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	621a      	str	r2, [r3, #32]
}
 800bfc6:	bf00      	nop
 800bfc8:	371c      	adds	r7, #28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	40010000 	.word	0x40010000
 800bfd8:	40010400 	.word	0x40010400

0800bfdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0201 	bic.w	r2, r3, #1
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	4313      	orrs	r3, r2
 800c010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	f023 030a 	bic.w	r3, r3, #10
 800c018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4313      	orrs	r3, r2
 800c020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	621a      	str	r2, [r3, #32]
}
 800c02e:	bf00      	nop
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	f023 0210 	bic.w	r2, r3, #16
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	031b      	lsls	r3, r3, #12
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	011b      	lsls	r3, r3, #4
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	4313      	orrs	r3, r2
 800c080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	621a      	str	r2, [r3, #32]
}
 800c08e:	bf00      	nop
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b085      	sub	sp, #20
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	f043 0307 	orr.w	r3, r3, #7
 800c0bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	609a      	str	r2, [r3, #8]
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
 800c0dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	021a      	lsls	r2, r3, #8
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	609a      	str	r2, [r3, #8]
}
 800c104:	bf00      	nop
 800c106:	371c      	adds	r7, #28
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c110:	b480      	push	{r7}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f003 031f 	and.w	r3, r3, #31
 800c122:	2201      	movs	r2, #1
 800c124:	fa02 f303 	lsl.w	r3, r2, r3
 800c128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6a1a      	ldr	r2, [r3, #32]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	43db      	mvns	r3, r3
 800c132:	401a      	ands	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a1a      	ldr	r2, [r3, #32]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	fa01 f303 	lsl.w	r3, r1, r3
 800c148:	431a      	orrs	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	621a      	str	r2, [r3, #32]
}
 800c14e:	bf00      	nop
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d101      	bne.n	800c174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c170:	2302      	movs	r3, #2
 800c172:	e05a      	b.n	800c22a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c19a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a21      	ldr	r2, [pc, #132]	@ (800c238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d022      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1c0:	d01d      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a1d      	ldr	r2, [pc, #116]	@ (800c23c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d018      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d013      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a1a      	ldr	r2, [pc, #104]	@ (800c244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d00e      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a18      	ldr	r2, [pc, #96]	@ (800c248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d009      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a17      	ldr	r2, [pc, #92]	@ (800c24c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d004      	beq.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a15      	ldr	r2, [pc, #84]	@ (800c250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d10c      	bne.n	800c218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	40010000 	.word	0x40010000
 800c23c:	40000400 	.word	0x40000400
 800c240:	40000800 	.word	0x40000800
 800c244:	40000c00 	.word	0x40000c00
 800c248:	40010400 	.word	0x40010400
 800c24c:	40014000 	.word	0x40014000
 800c250:	40001800 	.word	0x40001800

0800c254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e03d      	b.n	800c2ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	4313      	orrs	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e042      	b.n	800c390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7fc fc4e 	bl	8008bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2224      	movs	r2, #36	@ 0x24
 800c328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c33a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f001 f82d 	bl	800d39c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	691a      	ldr	r2, [r3, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	695a      	ldr	r2, [r3, #20]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2220      	movs	r2, #32
 800c37c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	@ 0x28
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b20      	cmp	r3, #32
 800c3b6:	d175      	bne.n	800c4a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <HAL_UART_Transmit+0x2c>
 800c3be:	88fb      	ldrh	r3, [r7, #6]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e06e      	b.n	800c4a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2221      	movs	r2, #33	@ 0x21
 800c3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c3d6:	f7fc ff5d 	bl	8009294 <HAL_GetTick>
 800c3da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	88fa      	ldrh	r2, [r7, #6]
 800c3e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	88fa      	ldrh	r2, [r7, #6]
 800c3e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3f0:	d108      	bne.n	800c404 <HAL_UART_Transmit+0x6c>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	61bb      	str	r3, [r7, #24]
 800c402:	e003      	b.n	800c40c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c40c:	e02e      	b.n	800c46c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2200      	movs	r2, #0
 800c416:	2180      	movs	r1, #128	@ 0x80
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 fccb 	bl	800cdb4 <UART_WaitOnFlagUntilTimeout>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2220      	movs	r2, #32
 800c428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	e03a      	b.n	800c4a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10b      	bne.n	800c44e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	3302      	adds	r3, #2
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	e007      	b.n	800c45e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	781a      	ldrb	r2, [r3, #0]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	3301      	adds	r3, #1
 800c45c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c462:	b29b      	uxth	r3, r3
 800c464:	3b01      	subs	r3, #1
 800c466:	b29a      	uxth	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c470:	b29b      	uxth	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1cb      	bne.n	800c40e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2200      	movs	r2, #0
 800c47e:	2140      	movs	r1, #64	@ 0x40
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f000 fc97 	bl	800cdb4 <UART_WaitOnFlagUntilTimeout>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2220      	movs	r2, #32
 800c490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e006      	b.n	800c4a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e000      	b.n	800c4a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c4a4:	2302      	movs	r3, #2
  }
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3720      	adds	r7, #32
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d112      	bne.n	800c4ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <HAL_UART_Receive_IT+0x26>
 800c4ce:	88fb      	ldrh	r3, [r7, #6]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e00b      	b.n	800c4f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c4de:	88fb      	ldrh	r3, [r7, #6]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fcbe 	bl	800ce66 <UART_Start_Receive_IT>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	e000      	b.n	800c4f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c4ee:	2302      	movs	r3, #2
  }
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	4613      	mov	r3, r2
 800c504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b20      	cmp	r3, #32
 800c510:	d112      	bne.n	800c538 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <HAL_UART_Receive_DMA+0x26>
 800c518:	88fb      	ldrh	r3, [r7, #6]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e00b      	b.n	800c53a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	461a      	mov	r2, r3
 800c52c:	68b9      	ldr	r1, [r7, #8]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fcd4 	bl	800cedc <UART_Start_Receive_DMA>
 800c534:	4603      	mov	r3, r0
 800c536:	e000      	b.n	800c53a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c538:	2302      	movs	r3, #2
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b090      	sub	sp, #64	@ 0x40
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c558:	2b80      	cmp	r3, #128	@ 0x80
 800c55a:	bf0c      	ite	eq
 800c55c:	2301      	moveq	r3, #1
 800c55e:	2300      	movne	r3, #0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b21      	cmp	r3, #33	@ 0x21
 800c56e:	d128      	bne.n	800c5c2 <HAL_UART_DMAStop+0x80>
 800c570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d025      	beq.n	800c5c2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3314      	adds	r3, #20
 800c57c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	623b      	str	r3, [r7, #32]
   return(result);
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c58c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3314      	adds	r3, #20
 800c594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c596:	633a      	str	r2, [r7, #48]	@ 0x30
 800c598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c59c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e5      	bne.n	800c576 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd fe58 	bl	800a26c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fd27 	bl	800d010 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5cc:	2b40      	cmp	r3, #64	@ 0x40
 800c5ce:	bf0c      	ite	eq
 800c5d0:	2301      	moveq	r3, #1
 800c5d2:	2300      	movne	r3, #0
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b22      	cmp	r3, #34	@ 0x22
 800c5e2:	d128      	bne.n	800c636 <HAL_UART_DMAStop+0xf4>
 800c5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d025      	beq.n	800c636 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3314      	adds	r3, #20
 800c5f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	e853 3f00 	ldrex	r3, [r3]
 800c5f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c600:	637b      	str	r3, [r7, #52]	@ 0x34
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3314      	adds	r3, #20
 800c608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c60a:	61fa      	str	r2, [r7, #28]
 800c60c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	69b9      	ldr	r1, [r7, #24]
 800c610:	69fa      	ldr	r2, [r7, #28]
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	617b      	str	r3, [r7, #20]
   return(result);
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e5      	bne.n	800c5ea <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d004      	beq.n	800c630 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fd fe1e 	bl	800a26c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fd15 	bl	800d060 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3740      	adds	r7, #64	@ 0x40
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b0ba      	sub	sp, #232	@ 0xe8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c666:	2300      	movs	r3, #0
 800c668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c676:	f003 030f 	and.w	r3, r3, #15
 800c67a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c67e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10f      	bne.n	800c6a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x66>
 800c692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c696:	f003 0320 	and.w	r3, r3, #32
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fdbd 	bl	800d21e <UART_Receive_IT>
      return;
 800c6a4:	e25b      	b.n	800cb5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c6a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 80de 	beq.w	800c86c <HAL_UART_IRQHandler+0x22c>
 800c6b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d106      	bne.n	800c6ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 80d1 	beq.w	800c86c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00b      	beq.n	800c6ee <HAL_UART_IRQHandler+0xae>
 800c6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d005      	beq.n	800c6ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6e6:	f043 0201 	orr.w	r2, r3, #1
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6f2:	f003 0304 	and.w	r3, r3, #4
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00b      	beq.n	800c712 <HAL_UART_IRQHandler+0xd2>
 800c6fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d005      	beq.n	800c712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c70a:	f043 0202 	orr.w	r2, r3, #2
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <HAL_UART_IRQHandler+0xf6>
 800c71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d005      	beq.n	800c736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c72e:	f043 0204 	orr.w	r2, r3, #4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c73a:	f003 0308 	and.w	r3, r3, #8
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d011      	beq.n	800c766 <HAL_UART_IRQHandler+0x126>
 800c742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d105      	bne.n	800c75a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c75e:	f043 0208 	orr.w	r2, r3, #8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 81f2 	beq.w	800cb54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c774:	f003 0320 	and.w	r3, r3, #32
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d008      	beq.n	800c78e <HAL_UART_IRQHandler+0x14e>
 800c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c780:	f003 0320 	and.w	r3, r3, #32
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fd48 	bl	800d21e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c798:	2b40      	cmp	r3, #64	@ 0x40
 800c79a:	bf0c      	ite	eq
 800c79c:	2301      	moveq	r3, #1
 800c79e:	2300      	movne	r3, #0
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7aa:	f003 0308 	and.w	r3, r3, #8
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <HAL_UART_IRQHandler+0x17a>
 800c7b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d04f      	beq.n	800c85a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fc50 	bl	800d060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ca:	2b40      	cmp	r3, #64	@ 0x40
 800c7cc:	d141      	bne.n	800c852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3314      	adds	r3, #20
 800c7d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c7e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c7fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c7fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c80a:	e841 2300 	strex	r3, r2, [r1]
 800c80e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1d9      	bne.n	800c7ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d013      	beq.n	800c84a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c826:	4a7e      	ldr	r2, [pc, #504]	@ (800ca20 <HAL_UART_IRQHandler+0x3e0>)
 800c828:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fd fd8c 	bl	800a34c <HAL_DMA_Abort_IT>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d016      	beq.n	800c868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c848:	e00e      	b.n	800c868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f99e 	bl	800cb8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c850:	e00a      	b.n	800c868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f99a 	bl	800cb8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c858:	e006      	b.n	800c868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f996 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c866:	e175      	b.n	800cb54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c868:	bf00      	nop
    return;
 800c86a:	e173      	b.n	800cb54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c870:	2b01      	cmp	r3, #1
 800c872:	f040 814f 	bne.w	800cb14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c87a:	f003 0310 	and.w	r3, r3, #16
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 8148 	beq.w	800cb14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8141 	beq.w	800cb14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c892:	2300      	movs	r3, #0
 800c894:	60bb      	str	r3, [r7, #8]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	60bb      	str	r3, [r7, #8]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	60bb      	str	r3, [r7, #8]
 800c8a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b2:	2b40      	cmp	r3, #64	@ 0x40
 800c8b4:	f040 80b6 	bne.w	800ca24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 8145 	beq.w	800cb58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c8d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	f080 813e 	bcs.w	800cb58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8ee:	f000 8088 	beq.w	800ca02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c900:	e853 3f00 	ldrex	r3, [r3]
 800c904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c90c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	330c      	adds	r3, #12
 800c91a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c91e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c926:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c92a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c92e:	e841 2300 	strex	r3, r2, [r1]
 800c932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1d9      	bne.n	800c8f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3314      	adds	r3, #20
 800c944:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c948:	e853 3f00 	ldrex	r3, [r3]
 800c94c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c94e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c950:	f023 0301 	bic.w	r3, r3, #1
 800c954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3314      	adds	r3, #20
 800c95e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c962:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c966:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c96a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e1      	bne.n	800c93e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3314      	adds	r3, #20
 800c980:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c984:	e853 3f00 	ldrex	r3, [r3]
 800c988:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c98a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c98c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3314      	adds	r3, #20
 800c99a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c99e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c9a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c9a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9a6:	e841 2300 	strex	r3, r2, [r1]
 800c9aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c9ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1e3      	bne.n	800c97a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	330c      	adds	r3, #12
 800c9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ca:	e853 3f00 	ldrex	r3, [r3]
 800c9ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9d2:	f023 0310 	bic.w	r3, r3, #16
 800c9d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	330c      	adds	r3, #12
 800c9e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c9e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c9e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e3      	bne.n	800c9c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd fc35 	bl	800a26c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2202      	movs	r2, #2
 800ca06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f8c1 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca1e:	e09b      	b.n	800cb58 <HAL_UART_IRQHandler+0x518>
 800ca20:	0800d127 	.word	0x0800d127
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 808e 	beq.w	800cb5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ca40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 8089 	beq.w	800cb5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	330c      	adds	r3, #12
 800ca50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca54:	e853 3f00 	ldrex	r3, [r3]
 800ca58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	330c      	adds	r3, #12
 800ca6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ca6e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca76:	e841 2300 	strex	r3, r2, [r1]
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1e3      	bne.n	800ca4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3314      	adds	r3, #20
 800ca88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8c:	e853 3f00 	ldrex	r3, [r3]
 800ca90:	623b      	str	r3, [r7, #32]
   return(result);
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	f023 0301 	bic.w	r3, r3, #1
 800ca98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3314      	adds	r3, #20
 800caa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800caa6:	633a      	str	r2, [r7, #48]	@ 0x30
 800caa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caae:	e841 2300 	strex	r3, r2, [r1]
 800cab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1e3      	bne.n	800ca82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2220      	movs	r2, #32
 800cabe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	330c      	adds	r3, #12
 800cace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	e853 3f00 	ldrex	r3, [r3]
 800cad6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f023 0310 	bic.w	r3, r3, #16
 800cade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	330c      	adds	r3, #12
 800cae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800caec:	61fa      	str	r2, [r7, #28]
 800caee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	69b9      	ldr	r1, [r7, #24]
 800caf2:	69fa      	ldr	r2, [r7, #28]
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	617b      	str	r3, [r7, #20]
   return(result);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e3      	bne.n	800cac8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f847 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb12:	e023      	b.n	800cb5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d009      	beq.n	800cb34 <HAL_UART_IRQHandler+0x4f4>
 800cb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fb0e 	bl	800d14e <UART_Transmit_IT>
    return;
 800cb32:	e014      	b.n	800cb5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <HAL_UART_IRQHandler+0x51e>
 800cb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d008      	beq.n	800cb5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fb4e 	bl	800d1ee <UART_EndTransmit_IT>
    return;
 800cb52:	e004      	b.n	800cb5e <HAL_UART_IRQHandler+0x51e>
    return;
 800cb54:	bf00      	nop
 800cb56:	e002      	b.n	800cb5e <HAL_UART_IRQHandler+0x51e>
      return;
 800cb58:	bf00      	nop
 800cb5a:	e000      	b.n	800cb5e <HAL_UART_IRQHandler+0x51e>
      return;
 800cb5c:	bf00      	nop
  }
}
 800cb5e:	37e8      	adds	r7, #232	@ 0xe8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b09c      	sub	sp, #112	@ 0x70
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d172      	bne.n	800ccba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cbd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	330c      	adds	r3, #12
 800cbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cbea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cbf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	330c      	adds	r3, #12
 800cbf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cbfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e5      	bne.n	800cbda <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3314      	adds	r3, #20
 800cc14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc20:	f023 0301 	bic.w	r3, r3, #1
 800cc24:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3314      	adds	r3, #20
 800cc2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cc2e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cc30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3314      	adds	r3, #20
 800cc48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	e853 3f00 	ldrex	r3, [r3]
 800cc50:	623b      	str	r3, [r7, #32]
   return(result);
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc58:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3314      	adds	r3, #20
 800cc60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cc62:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc6a:	e841 2300 	strex	r3, r2, [r1]
 800cc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e5      	bne.n	800cc42 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d119      	bne.n	800ccba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	330c      	adds	r3, #12
 800cc8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	e853 3f00 	ldrex	r3, [r3]
 800cc94:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f023 0310 	bic.w	r3, r3, #16
 800cc9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	330c      	adds	r3, #12
 800cca4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cca6:	61fa      	str	r2, [r7, #28]
 800cca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccaa:	69b9      	ldr	r1, [r7, #24]
 800ccac:	69fa      	ldr	r2, [r7, #28]
 800ccae:	e841 2300 	strex	r3, r2, [r1]
 800ccb2:	617b      	str	r3, [r7, #20]
   return(result);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1e5      	bne.n	800cc86 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d106      	bne.n	800ccd6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cccc:	4619      	mov	r1, r3
 800ccce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ccd0:	f7ff ff66 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccd4:	e002      	b.n	800ccdc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ccd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ccd8:	f7f7 fc2c 	bl	8004534 <HAL_UART_RxCpltCallback>
}
 800ccdc:	bf00      	nop
 800ccde:	3770      	adds	r7, #112	@ 0x70
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d108      	bne.n	800cd12 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd04:	085b      	lsrs	r3, r3, #1
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4619      	mov	r1, r3
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f7ff ff48 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd10:	e002      	b.n	800cd18 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f7ff ff30 	bl	800cb78 <HAL_UART_RxHalfCpltCallback>
}
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd3c:	2b80      	cmp	r3, #128	@ 0x80
 800cd3e:	bf0c      	ite	eq
 800cd40:	2301      	moveq	r3, #1
 800cd42:	2300      	movne	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b21      	cmp	r3, #33	@ 0x21
 800cd52:	d108      	bne.n	800cd66 <UART_DMAError+0x46>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800cd60:	68b8      	ldr	r0, [r7, #8]
 800cd62:	f000 f955 	bl	800d010 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd70:	2b40      	cmp	r3, #64	@ 0x40
 800cd72:	bf0c      	ite	eq
 800cd74:	2301      	moveq	r3, #1
 800cd76:	2300      	movne	r3, #0
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b22      	cmp	r3, #34	@ 0x22
 800cd86:	d108      	bne.n	800cd9a <UART_DMAError+0x7a>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d005      	beq.n	800cd9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2200      	movs	r2, #0
 800cd92:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cd94:	68b8      	ldr	r0, [r7, #8]
 800cd96:	f000 f963 	bl	800d060 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9e:	f043 0210 	orr.w	r2, r3, #16
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cda6:	68b8      	ldr	r0, [r7, #8]
 800cda8:	f7ff fef0 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdac:	bf00      	nop
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	603b      	str	r3, [r7, #0]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdc4:	e03b      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdcc:	d037      	beq.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdce:	f7fc fa61 	bl	8009294 <HAL_GetTick>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	6a3a      	ldr	r2, [r7, #32]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d302      	bcc.n	800cde4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e03a      	b.n	800ce5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d023      	beq.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b80      	cmp	r3, #128	@ 0x80
 800cdfa:	d020      	beq.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2b40      	cmp	r3, #64	@ 0x40
 800ce00:	d01d      	beq.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 0308 	and.w	r3, r3, #8
 800ce0c:	2b08      	cmp	r3, #8
 800ce0e:	d116      	bne.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ce10:	2300      	movs	r3, #0
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 f91a 	bl	800d060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2208      	movs	r2, #8
 800ce30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e00f      	b.n	800ce5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	4013      	ands	r3, r2
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	bf0c      	ite	eq
 800ce4e:	2301      	moveq	r3, #1
 800ce50:	2300      	movne	r3, #0
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d0b4      	beq.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b085      	sub	sp, #20
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	4613      	mov	r3, r2
 800ce72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	88fa      	ldrh	r2, [r7, #6]
 800ce7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	88fa      	ldrh	r2, [r7, #6]
 800ce84:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2222      	movs	r2, #34	@ 0x22
 800ce90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d007      	beq.n	800ceac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68da      	ldr	r2, [r3, #12]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ceaa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	695a      	ldr	r2, [r3, #20]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f042 0201 	orr.w	r2, r2, #1
 800ceba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f042 0220 	orr.w	r2, r2, #32
 800ceca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
	...

0800cedc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b098      	sub	sp, #96	@ 0x60
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	88fa      	ldrh	r2, [r7, #6]
 800cef4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2222      	movs	r2, #34	@ 0x22
 800cf00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf08:	4a3e      	ldr	r2, [pc, #248]	@ (800d004 <UART_Start_Receive_DMA+0x128>)
 800cf0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf10:	4a3d      	ldr	r2, [pc, #244]	@ (800d008 <UART_Start_Receive_DMA+0x12c>)
 800cf12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf18:	4a3c      	ldr	r2, [pc, #240]	@ (800d00c <UART_Start_Receive_DMA+0x130>)
 800cf1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf20:	2200      	movs	r2, #0
 800cf22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cf24:	f107 0308 	add.w	r3, r7, #8
 800cf28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4619      	mov	r1, r3
 800cf36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	88fb      	ldrh	r3, [r7, #6]
 800cf3c:	f7fd f93e 	bl	800a1bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800cf40:	2300      	movs	r3, #0
 800cf42:	613b      	str	r3, [r7, #16]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	613b      	str	r3, [r7, #16]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	613b      	str	r3, [r7, #16]
 800cf54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d019      	beq.n	800cf92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	330c      	adds	r3, #12
 800cf64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	330c      	adds	r3, #12
 800cf7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cf80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cf84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf86:	e841 2300 	strex	r3, r2, [r1]
 800cf8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1e5      	bne.n	800cf5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3314      	adds	r3, #20
 800cf98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa4:	f043 0301 	orr.w	r3, r3, #1
 800cfa8:	657b      	str	r3, [r7, #84]	@ 0x54
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3314      	adds	r3, #20
 800cfb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cfb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cfb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e5      	bne.n	800cf92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3314      	adds	r3, #20
 800cfcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfdc:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3314      	adds	r3, #20
 800cfe4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfe6:	627a      	str	r2, [r7, #36]	@ 0x24
 800cfe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	6a39      	ldr	r1, [r7, #32]
 800cfec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e5      	bne.n	800cfc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3760      	adds	r7, #96	@ 0x60
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	0800cbb9 	.word	0x0800cbb9
 800d008:	0800cce5 	.word	0x0800cce5
 800d00c:	0800cd21 	.word	0x0800cd21

0800d010 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d010:	b480      	push	{r7}
 800d012:	b089      	sub	sp, #36	@ 0x24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	330c      	adds	r3, #12
 800d01e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	e853 3f00 	ldrex	r3, [r3]
 800d026:	60bb      	str	r3, [r7, #8]
   return(result);
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d02e:	61fb      	str	r3, [r7, #28]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	330c      	adds	r3, #12
 800d036:	69fa      	ldr	r2, [r7, #28]
 800d038:	61ba      	str	r2, [r7, #24]
 800d03a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03c:	6979      	ldr	r1, [r7, #20]
 800d03e:	69ba      	ldr	r2, [r7, #24]
 800d040:	e841 2300 	strex	r3, r2, [r1]
 800d044:	613b      	str	r3, [r7, #16]
   return(result);
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e5      	bne.n	800d018 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d054:	bf00      	nop
 800d056:	3724      	adds	r7, #36	@ 0x24
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d060:	b480      	push	{r7}
 800d062:	b095      	sub	sp, #84	@ 0x54
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	330c      	adds	r3, #12
 800d06e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d072:	e853 3f00 	ldrex	r3, [r3]
 800d076:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d07e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	330c      	adds	r3, #12
 800d086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d088:	643a      	str	r2, [r7, #64]	@ 0x40
 800d08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d08e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d090:	e841 2300 	strex	r3, r2, [r1]
 800d094:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e5      	bne.n	800d068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3314      	adds	r3, #20
 800d0a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	e853 3f00 	ldrex	r3, [r3]
 800d0aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	f023 0301 	bic.w	r3, r3, #1
 800d0b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3314      	adds	r3, #20
 800d0ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0c4:	e841 2300 	strex	r3, r2, [r1]
 800d0c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e5      	bne.n	800d09c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d119      	bne.n	800d10c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	330c      	adds	r3, #12
 800d0de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	e853 3f00 	ldrex	r3, [r3]
 800d0e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f023 0310 	bic.w	r3, r3, #16
 800d0ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	330c      	adds	r3, #12
 800d0f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0f8:	61ba      	str	r2, [r7, #24]
 800d0fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fc:	6979      	ldr	r1, [r7, #20]
 800d0fe:	69ba      	ldr	r2, [r7, #24]
 800d100:	e841 2300 	strex	r3, r2, [r1]
 800d104:	613b      	str	r3, [r7, #16]
   return(result);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e5      	bne.n	800d0d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2220      	movs	r2, #32
 800d110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d11a:	bf00      	nop
 800d11c:	3754      	adds	r7, #84	@ 0x54
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7ff fd23 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d146:	bf00      	nop
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d14e:	b480      	push	{r7}
 800d150:	b085      	sub	sp, #20
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	2b21      	cmp	r3, #33	@ 0x21
 800d160:	d13e      	bne.n	800d1e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16a:	d114      	bne.n	800d196 <UART_Transmit_IT+0x48>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d110      	bne.n	800d196 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	1c9a      	adds	r2, r3, #2
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	621a      	str	r2, [r3, #32]
 800d194:	e008      	b.n	800d1a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	1c59      	adds	r1, r3, #1
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	6211      	str	r1, [r2, #32]
 800d1a0:	781a      	ldrb	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10f      	bne.n	800d1dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68da      	ldr	r2, [r3, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d1ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e000      	b.n	800d1e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d1e0:	2302      	movs	r3, #2
  }
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3714      	adds	r7, #20
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2220      	movs	r2, #32
 800d20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff fca8 	bl	800cb64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b08c      	sub	sp, #48	@ 0x30
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b22      	cmp	r3, #34	@ 0x22
 800d230:	f040 80ae 	bne.w	800d390 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d23c:	d117      	bne.n	800d26e <UART_Receive_IT+0x50>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d113      	bne.n	800d26e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d246:	2300      	movs	r3, #0
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	b29b      	uxth	r3, r3
 800d258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d266:	1c9a      	adds	r2, r3, #2
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d26c:	e026      	b.n	800d2bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d272:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d280:	d007      	beq.n	800d292 <UART_Receive_IT+0x74>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <UART_Receive_IT+0x82>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	e008      	b.n	800d2b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d15d      	bne.n	800d38c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68da      	ldr	r2, [r3, #12]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f022 0220 	bic.w	r2, r2, #32
 800d2de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d2ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	695a      	ldr	r2, [r3, #20]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f022 0201 	bic.w	r2, r2, #1
 800d2fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2220      	movs	r2, #32
 800d304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d312:	2b01      	cmp	r3, #1
 800d314:	d135      	bne.n	800d382 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	330c      	adds	r3, #12
 800d322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	e853 3f00 	ldrex	r3, [r3]
 800d32a:	613b      	str	r3, [r7, #16]
   return(result);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f023 0310 	bic.w	r3, r3, #16
 800d332:	627b      	str	r3, [r7, #36]	@ 0x24
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	330c      	adds	r3, #12
 800d33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d33c:	623a      	str	r2, [r7, #32]
 800d33e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d340:	69f9      	ldr	r1, [r7, #28]
 800d342:	6a3a      	ldr	r2, [r7, #32]
 800d344:	e841 2300 	strex	r3, r2, [r1]
 800d348:	61bb      	str	r3, [r7, #24]
   return(result);
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e5      	bne.n	800d31c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0310 	and.w	r3, r3, #16
 800d35a:	2b10      	cmp	r3, #16
 800d35c:	d10a      	bne.n	800d374 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d35e:	2300      	movs	r3, #0
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	60fb      	str	r3, [r7, #12]
 800d372:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff fc10 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
 800d380:	e002      	b.n	800d388 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f7 f8d6 	bl	8004534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	e002      	b.n	800d392 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e000      	b.n	800d392 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d390:	2302      	movs	r3, #2
  }
}
 800d392:	4618      	mov	r0, r3
 800d394:	3730      	adds	r7, #48	@ 0x30
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d39c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3a0:	b0c0      	sub	sp, #256	@ 0x100
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3b8:	68d9      	ldr	r1, [r3, #12]
 800d3ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	ea40 0301 	orr.w	r3, r0, r1
 800d3c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ca:	689a      	ldr	r2, [r3, #8]
 800d3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	431a      	orrs	r2, r3
 800d3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d3f4:	f021 010c 	bic.w	r1, r1, #12
 800d3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d402:	430b      	orrs	r3, r1
 800d404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d416:	6999      	ldr	r1, [r3, #24]
 800d418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	ea40 0301 	orr.w	r3, r0, r1
 800d422:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	4b8f      	ldr	r3, [pc, #572]	@ (800d668 <UART_SetConfig+0x2cc>)
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d005      	beq.n	800d43c <UART_SetConfig+0xa0>
 800d430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	4b8d      	ldr	r3, [pc, #564]	@ (800d66c <UART_SetConfig+0x2d0>)
 800d438:	429a      	cmp	r2, r3
 800d43a:	d104      	bne.n	800d446 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d43c:	f7fe f864 	bl	800b508 <HAL_RCC_GetPCLK2Freq>
 800d440:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d444:	e003      	b.n	800d44e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d446:	f7fe f84b 	bl	800b4e0 <HAL_RCC_GetPCLK1Freq>
 800d44a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d44e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d458:	f040 810c 	bne.w	800d674 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d45c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d460:	2200      	movs	r2, #0
 800d462:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d466:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d46a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d46e:	4622      	mov	r2, r4
 800d470:	462b      	mov	r3, r5
 800d472:	1891      	adds	r1, r2, r2
 800d474:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d476:	415b      	adcs	r3, r3
 800d478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d47a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d47e:	4621      	mov	r1, r4
 800d480:	eb12 0801 	adds.w	r8, r2, r1
 800d484:	4629      	mov	r1, r5
 800d486:	eb43 0901 	adc.w	r9, r3, r1
 800d48a:	f04f 0200 	mov.w	r2, #0
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d49a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d49e:	4690      	mov	r8, r2
 800d4a0:	4699      	mov	r9, r3
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	eb18 0303 	adds.w	r3, r8, r3
 800d4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d4ac:	462b      	mov	r3, r5
 800d4ae:	eb49 0303 	adc.w	r3, r9, r3
 800d4b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d4b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d4c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d4c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	18db      	adds	r3, r3, r3
 800d4ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	eb42 0303 	adc.w	r3, r2, r3
 800d4d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d4dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d4e0:	f7f3 fbe2 	bl	8000ca8 <__aeabi_uldivmod>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4b61      	ldr	r3, [pc, #388]	@ (800d670 <UART_SetConfig+0x2d4>)
 800d4ea:	fba3 2302 	umull	r2, r3, r3, r2
 800d4ee:	095b      	lsrs	r3, r3, #5
 800d4f0:	011c      	lsls	r4, r3, #4
 800d4f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d500:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d504:	4642      	mov	r2, r8
 800d506:	464b      	mov	r3, r9
 800d508:	1891      	adds	r1, r2, r2
 800d50a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d50c:	415b      	adcs	r3, r3
 800d50e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d510:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d514:	4641      	mov	r1, r8
 800d516:	eb12 0a01 	adds.w	sl, r2, r1
 800d51a:	4649      	mov	r1, r9
 800d51c:	eb43 0b01 	adc.w	fp, r3, r1
 800d520:	f04f 0200 	mov.w	r2, #0
 800d524:	f04f 0300 	mov.w	r3, #0
 800d528:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d52c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d534:	4692      	mov	sl, r2
 800d536:	469b      	mov	fp, r3
 800d538:	4643      	mov	r3, r8
 800d53a:	eb1a 0303 	adds.w	r3, sl, r3
 800d53e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d542:	464b      	mov	r3, r9
 800d544:	eb4b 0303 	adc.w	r3, fp, r3
 800d548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d558:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d55c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d560:	460b      	mov	r3, r1
 800d562:	18db      	adds	r3, r3, r3
 800d564:	643b      	str	r3, [r7, #64]	@ 0x40
 800d566:	4613      	mov	r3, r2
 800d568:	eb42 0303 	adc.w	r3, r2, r3
 800d56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d56e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d572:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d576:	f7f3 fb97 	bl	8000ca8 <__aeabi_uldivmod>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	4b3b      	ldr	r3, [pc, #236]	@ (800d670 <UART_SetConfig+0x2d4>)
 800d582:	fba3 2301 	umull	r2, r3, r3, r1
 800d586:	095b      	lsrs	r3, r3, #5
 800d588:	2264      	movs	r2, #100	@ 0x64
 800d58a:	fb02 f303 	mul.w	r3, r2, r3
 800d58e:	1acb      	subs	r3, r1, r3
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d596:	4b36      	ldr	r3, [pc, #216]	@ (800d670 <UART_SetConfig+0x2d4>)
 800d598:	fba3 2302 	umull	r2, r3, r3, r2
 800d59c:	095b      	lsrs	r3, r3, #5
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d5a4:	441c      	add	r4, r3
 800d5a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d5b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d5b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	464b      	mov	r3, r9
 800d5bc:	1891      	adds	r1, r2, r2
 800d5be:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d5c0:	415b      	adcs	r3, r3
 800d5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d5c8:	4641      	mov	r1, r8
 800d5ca:	1851      	adds	r1, r2, r1
 800d5cc:	6339      	str	r1, [r7, #48]	@ 0x30
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	414b      	adcs	r3, r1
 800d5d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	f04f 0300 	mov.w	r3, #0
 800d5dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d5e0:	4659      	mov	r1, fp
 800d5e2:	00cb      	lsls	r3, r1, #3
 800d5e4:	4651      	mov	r1, sl
 800d5e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d5ea:	4651      	mov	r1, sl
 800d5ec:	00ca      	lsls	r2, r1, #3
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4642      	mov	r2, r8
 800d5f6:	189b      	adds	r3, r3, r2
 800d5f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d5fc:	464b      	mov	r3, r9
 800d5fe:	460a      	mov	r2, r1
 800d600:	eb42 0303 	adc.w	r3, r2, r3
 800d604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d614:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d61c:	460b      	mov	r3, r1
 800d61e:	18db      	adds	r3, r3, r3
 800d620:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d622:	4613      	mov	r3, r2
 800d624:	eb42 0303 	adc.w	r3, r2, r3
 800d628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d62a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d62e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d632:	f7f3 fb39 	bl	8000ca8 <__aeabi_uldivmod>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <UART_SetConfig+0x2d4>)
 800d63c:	fba3 1302 	umull	r1, r3, r3, r2
 800d640:	095b      	lsrs	r3, r3, #5
 800d642:	2164      	movs	r1, #100	@ 0x64
 800d644:	fb01 f303 	mul.w	r3, r1, r3
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	3332      	adds	r3, #50	@ 0x32
 800d64e:	4a08      	ldr	r2, [pc, #32]	@ (800d670 <UART_SetConfig+0x2d4>)
 800d650:	fba2 2303 	umull	r2, r3, r2, r3
 800d654:	095b      	lsrs	r3, r3, #5
 800d656:	f003 0207 	and.w	r2, r3, #7
 800d65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4422      	add	r2, r4
 800d662:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d664:	e106      	b.n	800d874 <UART_SetConfig+0x4d8>
 800d666:	bf00      	nop
 800d668:	40011000 	.word	0x40011000
 800d66c:	40011400 	.word	0x40011400
 800d670:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d678:	2200      	movs	r2, #0
 800d67a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d67e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d682:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d686:	4642      	mov	r2, r8
 800d688:	464b      	mov	r3, r9
 800d68a:	1891      	adds	r1, r2, r2
 800d68c:	6239      	str	r1, [r7, #32]
 800d68e:	415b      	adcs	r3, r3
 800d690:	627b      	str	r3, [r7, #36]	@ 0x24
 800d692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d696:	4641      	mov	r1, r8
 800d698:	1854      	adds	r4, r2, r1
 800d69a:	4649      	mov	r1, r9
 800d69c:	eb43 0501 	adc.w	r5, r3, r1
 800d6a0:	f04f 0200 	mov.w	r2, #0
 800d6a4:	f04f 0300 	mov.w	r3, #0
 800d6a8:	00eb      	lsls	r3, r5, #3
 800d6aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d6ae:	00e2      	lsls	r2, r4, #3
 800d6b0:	4614      	mov	r4, r2
 800d6b2:	461d      	mov	r5, r3
 800d6b4:	4643      	mov	r3, r8
 800d6b6:	18e3      	adds	r3, r4, r3
 800d6b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d6bc:	464b      	mov	r3, r9
 800d6be:	eb45 0303 	adc.w	r3, r5, r3
 800d6c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d6d6:	f04f 0200 	mov.w	r2, #0
 800d6da:	f04f 0300 	mov.w	r3, #0
 800d6de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	008b      	lsls	r3, r1, #2
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	008a      	lsls	r2, r1, #2
 800d6f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d6f4:	f7f3 fad8 	bl	8000ca8 <__aeabi_uldivmod>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4b60      	ldr	r3, [pc, #384]	@ (800d880 <UART_SetConfig+0x4e4>)
 800d6fe:	fba3 2302 	umull	r2, r3, r3, r2
 800d702:	095b      	lsrs	r3, r3, #5
 800d704:	011c      	lsls	r4, r3, #4
 800d706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d70a:	2200      	movs	r2, #0
 800d70c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d710:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d714:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d718:	4642      	mov	r2, r8
 800d71a:	464b      	mov	r3, r9
 800d71c:	1891      	adds	r1, r2, r2
 800d71e:	61b9      	str	r1, [r7, #24]
 800d720:	415b      	adcs	r3, r3
 800d722:	61fb      	str	r3, [r7, #28]
 800d724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d728:	4641      	mov	r1, r8
 800d72a:	1851      	adds	r1, r2, r1
 800d72c:	6139      	str	r1, [r7, #16]
 800d72e:	4649      	mov	r1, r9
 800d730:	414b      	adcs	r3, r1
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	f04f 0300 	mov.w	r3, #0
 800d73c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d740:	4659      	mov	r1, fp
 800d742:	00cb      	lsls	r3, r1, #3
 800d744:	4651      	mov	r1, sl
 800d746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d74a:	4651      	mov	r1, sl
 800d74c:	00ca      	lsls	r2, r1, #3
 800d74e:	4610      	mov	r0, r2
 800d750:	4619      	mov	r1, r3
 800d752:	4603      	mov	r3, r0
 800d754:	4642      	mov	r2, r8
 800d756:	189b      	adds	r3, r3, r2
 800d758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d75c:	464b      	mov	r3, r9
 800d75e:	460a      	mov	r2, r1
 800d760:	eb42 0303 	adc.w	r3, r2, r3
 800d764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d772:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	f04f 0300 	mov.w	r3, #0
 800d77c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d780:	4649      	mov	r1, r9
 800d782:	008b      	lsls	r3, r1, #2
 800d784:	4641      	mov	r1, r8
 800d786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d78a:	4641      	mov	r1, r8
 800d78c:	008a      	lsls	r2, r1, #2
 800d78e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d792:	f7f3 fa89 	bl	8000ca8 <__aeabi_uldivmod>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	4611      	mov	r1, r2
 800d79c:	4b38      	ldr	r3, [pc, #224]	@ (800d880 <UART_SetConfig+0x4e4>)
 800d79e:	fba3 2301 	umull	r2, r3, r3, r1
 800d7a2:	095b      	lsrs	r3, r3, #5
 800d7a4:	2264      	movs	r2, #100	@ 0x64
 800d7a6:	fb02 f303 	mul.w	r3, r2, r3
 800d7aa:	1acb      	subs	r3, r1, r3
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	3332      	adds	r3, #50	@ 0x32
 800d7b0:	4a33      	ldr	r2, [pc, #204]	@ (800d880 <UART_SetConfig+0x4e4>)
 800d7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b6:	095b      	lsrs	r3, r3, #5
 800d7b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7bc:	441c      	add	r4, r3
 800d7be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d7c6:	677a      	str	r2, [r7, #116]	@ 0x74
 800d7c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d7cc:	4642      	mov	r2, r8
 800d7ce:	464b      	mov	r3, r9
 800d7d0:	1891      	adds	r1, r2, r2
 800d7d2:	60b9      	str	r1, [r7, #8]
 800d7d4:	415b      	adcs	r3, r3
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d7dc:	4641      	mov	r1, r8
 800d7de:	1851      	adds	r1, r2, r1
 800d7e0:	6039      	str	r1, [r7, #0]
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	414b      	adcs	r3, r1
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	f04f 0200 	mov.w	r2, #0
 800d7ec:	f04f 0300 	mov.w	r3, #0
 800d7f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d7f4:	4659      	mov	r1, fp
 800d7f6:	00cb      	lsls	r3, r1, #3
 800d7f8:	4651      	mov	r1, sl
 800d7fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d7fe:	4651      	mov	r1, sl
 800d800:	00ca      	lsls	r2, r1, #3
 800d802:	4610      	mov	r0, r2
 800d804:	4619      	mov	r1, r3
 800d806:	4603      	mov	r3, r0
 800d808:	4642      	mov	r2, r8
 800d80a:	189b      	adds	r3, r3, r2
 800d80c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d80e:	464b      	mov	r3, r9
 800d810:	460a      	mov	r2, r1
 800d812:	eb42 0303 	adc.w	r3, r2, r3
 800d816:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	663b      	str	r3, [r7, #96]	@ 0x60
 800d822:	667a      	str	r2, [r7, #100]	@ 0x64
 800d824:	f04f 0200 	mov.w	r2, #0
 800d828:	f04f 0300 	mov.w	r3, #0
 800d82c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d830:	4649      	mov	r1, r9
 800d832:	008b      	lsls	r3, r1, #2
 800d834:	4641      	mov	r1, r8
 800d836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d83a:	4641      	mov	r1, r8
 800d83c:	008a      	lsls	r2, r1, #2
 800d83e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d842:	f7f3 fa31 	bl	8000ca8 <__aeabi_uldivmod>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4b0d      	ldr	r3, [pc, #52]	@ (800d880 <UART_SetConfig+0x4e4>)
 800d84c:	fba3 1302 	umull	r1, r3, r3, r2
 800d850:	095b      	lsrs	r3, r3, #5
 800d852:	2164      	movs	r1, #100	@ 0x64
 800d854:	fb01 f303 	mul.w	r3, r1, r3
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	011b      	lsls	r3, r3, #4
 800d85c:	3332      	adds	r3, #50	@ 0x32
 800d85e:	4a08      	ldr	r2, [pc, #32]	@ (800d880 <UART_SetConfig+0x4e4>)
 800d860:	fba2 2303 	umull	r2, r3, r2, r3
 800d864:	095b      	lsrs	r3, r3, #5
 800d866:	f003 020f 	and.w	r2, r3, #15
 800d86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4422      	add	r2, r4
 800d872:	609a      	str	r2, [r3, #8]
}
 800d874:	bf00      	nop
 800d876:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d87a:	46bd      	mov	sp, r7
 800d87c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d880:	51eb851f 	.word	0x51eb851f

0800d884 <atof>:
 800d884:	2100      	movs	r1, #0
 800d886:	f000 befd 	b.w	800e684 <strtod>
	...

0800d88c <malloc>:
 800d88c:	4b02      	ldr	r3, [pc, #8]	@ (800d898 <malloc+0xc>)
 800d88e:	4601      	mov	r1, r0
 800d890:	6818      	ldr	r0, [r3, #0]
 800d892:	f000 b82d 	b.w	800d8f0 <_malloc_r>
 800d896:	bf00      	nop
 800d898:	20000194 	.word	0x20000194

0800d89c <free>:
 800d89c:	4b02      	ldr	r3, [pc, #8]	@ (800d8a8 <free+0xc>)
 800d89e:	4601      	mov	r1, r0
 800d8a0:	6818      	ldr	r0, [r3, #0]
 800d8a2:	f002 bf69 	b.w	8010778 <_free_r>
 800d8a6:	bf00      	nop
 800d8a8:	20000194 	.word	0x20000194

0800d8ac <sbrk_aligned>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d8ec <sbrk_aligned+0x40>)
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	6831      	ldr	r1, [r6, #0]
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	b911      	cbnz	r1, 800d8be <sbrk_aligned+0x12>
 800d8b8:	f002 f888 	bl	800f9cc <_sbrk_r>
 800d8bc:	6030      	str	r0, [r6, #0]
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f002 f883 	bl	800f9cc <_sbrk_r>
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	d103      	bne.n	800d8d2 <sbrk_aligned+0x26>
 800d8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	1cc4      	adds	r4, r0, #3
 800d8d4:	f024 0403 	bic.w	r4, r4, #3
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d0f8      	beq.n	800d8ce <sbrk_aligned+0x22>
 800d8dc:	1a21      	subs	r1, r4, r0
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f002 f874 	bl	800f9cc <_sbrk_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d1f2      	bne.n	800d8ce <sbrk_aligned+0x22>
 800d8e8:	e7ef      	b.n	800d8ca <sbrk_aligned+0x1e>
 800d8ea:	bf00      	nop
 800d8ec:	20000f9c 	.word	0x20000f9c

0800d8f0 <_malloc_r>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	1ccd      	adds	r5, r1, #3
 800d8f6:	f025 0503 	bic.w	r5, r5, #3
 800d8fa:	3508      	adds	r5, #8
 800d8fc:	2d0c      	cmp	r5, #12
 800d8fe:	bf38      	it	cc
 800d900:	250c      	movcc	r5, #12
 800d902:	2d00      	cmp	r5, #0
 800d904:	4606      	mov	r6, r0
 800d906:	db01      	blt.n	800d90c <_malloc_r+0x1c>
 800d908:	42a9      	cmp	r1, r5
 800d90a:	d904      	bls.n	800d916 <_malloc_r+0x26>
 800d90c:	230c      	movs	r3, #12
 800d90e:	6033      	str	r3, [r6, #0]
 800d910:	2000      	movs	r0, #0
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9ec <_malloc_r+0xfc>
 800d91a:	f000 f869 	bl	800d9f0 <__malloc_lock>
 800d91e:	f8d8 3000 	ldr.w	r3, [r8]
 800d922:	461c      	mov	r4, r3
 800d924:	bb44      	cbnz	r4, 800d978 <_malloc_r+0x88>
 800d926:	4629      	mov	r1, r5
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff ffbf 	bl	800d8ac <sbrk_aligned>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	4604      	mov	r4, r0
 800d932:	d158      	bne.n	800d9e6 <_malloc_r+0xf6>
 800d934:	f8d8 4000 	ldr.w	r4, [r8]
 800d938:	4627      	mov	r7, r4
 800d93a:	2f00      	cmp	r7, #0
 800d93c:	d143      	bne.n	800d9c6 <_malloc_r+0xd6>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d04b      	beq.n	800d9da <_malloc_r+0xea>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	4639      	mov	r1, r7
 800d946:	4630      	mov	r0, r6
 800d948:	eb04 0903 	add.w	r9, r4, r3
 800d94c:	f002 f83e 	bl	800f9cc <_sbrk_r>
 800d950:	4581      	cmp	r9, r0
 800d952:	d142      	bne.n	800d9da <_malloc_r+0xea>
 800d954:	6821      	ldr	r1, [r4, #0]
 800d956:	1a6d      	subs	r5, r5, r1
 800d958:	4629      	mov	r1, r5
 800d95a:	4630      	mov	r0, r6
 800d95c:	f7ff ffa6 	bl	800d8ac <sbrk_aligned>
 800d960:	3001      	adds	r0, #1
 800d962:	d03a      	beq.n	800d9da <_malloc_r+0xea>
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	442b      	add	r3, r5
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	f8d8 3000 	ldr.w	r3, [r8]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	bb62      	cbnz	r2, 800d9cc <_malloc_r+0xdc>
 800d972:	f8c8 7000 	str.w	r7, [r8]
 800d976:	e00f      	b.n	800d998 <_malloc_r+0xa8>
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	1b52      	subs	r2, r2, r5
 800d97c:	d420      	bmi.n	800d9c0 <_malloc_r+0xd0>
 800d97e:	2a0b      	cmp	r2, #11
 800d980:	d917      	bls.n	800d9b2 <_malloc_r+0xc2>
 800d982:	1961      	adds	r1, r4, r5
 800d984:	42a3      	cmp	r3, r4
 800d986:	6025      	str	r5, [r4, #0]
 800d988:	bf18      	it	ne
 800d98a:	6059      	strne	r1, [r3, #4]
 800d98c:	6863      	ldr	r3, [r4, #4]
 800d98e:	bf08      	it	eq
 800d990:	f8c8 1000 	streq.w	r1, [r8]
 800d994:	5162      	str	r2, [r4, r5]
 800d996:	604b      	str	r3, [r1, #4]
 800d998:	4630      	mov	r0, r6
 800d99a:	f000 f82f 	bl	800d9fc <__malloc_unlock>
 800d99e:	f104 000b 	add.w	r0, r4, #11
 800d9a2:	1d23      	adds	r3, r4, #4
 800d9a4:	f020 0007 	bic.w	r0, r0, #7
 800d9a8:	1ac2      	subs	r2, r0, r3
 800d9aa:	bf1c      	itt	ne
 800d9ac:	1a1b      	subne	r3, r3, r0
 800d9ae:	50a3      	strne	r3, [r4, r2]
 800d9b0:	e7af      	b.n	800d912 <_malloc_r+0x22>
 800d9b2:	6862      	ldr	r2, [r4, #4]
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	bf0c      	ite	eq
 800d9b8:	f8c8 2000 	streq.w	r2, [r8]
 800d9bc:	605a      	strne	r2, [r3, #4]
 800d9be:	e7eb      	b.n	800d998 <_malloc_r+0xa8>
 800d9c0:	4623      	mov	r3, r4
 800d9c2:	6864      	ldr	r4, [r4, #4]
 800d9c4:	e7ae      	b.n	800d924 <_malloc_r+0x34>
 800d9c6:	463c      	mov	r4, r7
 800d9c8:	687f      	ldr	r7, [r7, #4]
 800d9ca:	e7b6      	b.n	800d93a <_malloc_r+0x4a>
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	42a3      	cmp	r3, r4
 800d9d2:	d1fb      	bne.n	800d9cc <_malloc_r+0xdc>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	6053      	str	r3, [r2, #4]
 800d9d8:	e7de      	b.n	800d998 <_malloc_r+0xa8>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f000 f80c 	bl	800d9fc <__malloc_unlock>
 800d9e4:	e794      	b.n	800d910 <_malloc_r+0x20>
 800d9e6:	6005      	str	r5, [r0, #0]
 800d9e8:	e7d6      	b.n	800d998 <_malloc_r+0xa8>
 800d9ea:	bf00      	nop
 800d9ec:	20000fa0 	.word	0x20000fa0

0800d9f0 <__malloc_lock>:
 800d9f0:	4801      	ldr	r0, [pc, #4]	@ (800d9f8 <__malloc_lock+0x8>)
 800d9f2:	f002 b838 	b.w	800fa66 <__retarget_lock_acquire_recursive>
 800d9f6:	bf00      	nop
 800d9f8:	200010e4 	.word	0x200010e4

0800d9fc <__malloc_unlock>:
 800d9fc:	4801      	ldr	r0, [pc, #4]	@ (800da04 <__malloc_unlock+0x8>)
 800d9fe:	f002 b833 	b.w	800fa68 <__retarget_lock_release_recursive>
 800da02:	bf00      	nop
 800da04:	200010e4 	.word	0x200010e4

0800da08 <realloc>:
 800da08:	4b02      	ldr	r3, [pc, #8]	@ (800da14 <realloc+0xc>)
 800da0a:	460a      	mov	r2, r1
 800da0c:	4601      	mov	r1, r0
 800da0e:	6818      	ldr	r0, [r3, #0]
 800da10:	f000 b802 	b.w	800da18 <_realloc_r>
 800da14:	20000194 	.word	0x20000194

0800da18 <_realloc_r>:
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	4680      	mov	r8, r0
 800da1e:	4615      	mov	r5, r2
 800da20:	460c      	mov	r4, r1
 800da22:	b921      	cbnz	r1, 800da2e <_realloc_r+0x16>
 800da24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	4611      	mov	r1, r2
 800da2a:	f7ff bf61 	b.w	800d8f0 <_malloc_r>
 800da2e:	b92a      	cbnz	r2, 800da3c <_realloc_r+0x24>
 800da30:	f002 fea2 	bl	8010778 <_free_r>
 800da34:	2400      	movs	r4, #0
 800da36:	4620      	mov	r0, r4
 800da38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3c:	f003 fee4 	bl	8011808 <_malloc_usable_size_r>
 800da40:	4285      	cmp	r5, r0
 800da42:	4606      	mov	r6, r0
 800da44:	d802      	bhi.n	800da4c <_realloc_r+0x34>
 800da46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da4a:	d8f4      	bhi.n	800da36 <_realloc_r+0x1e>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4640      	mov	r0, r8
 800da50:	f7ff ff4e 	bl	800d8f0 <_malloc_r>
 800da54:	4607      	mov	r7, r0
 800da56:	2800      	cmp	r0, #0
 800da58:	d0ec      	beq.n	800da34 <_realloc_r+0x1c>
 800da5a:	42b5      	cmp	r5, r6
 800da5c:	462a      	mov	r2, r5
 800da5e:	4621      	mov	r1, r4
 800da60:	bf28      	it	cs
 800da62:	4632      	movcs	r2, r6
 800da64:	f002 f801 	bl	800fa6a <memcpy>
 800da68:	4621      	mov	r1, r4
 800da6a:	4640      	mov	r0, r8
 800da6c:	f002 fe84 	bl	8010778 <_free_r>
 800da70:	463c      	mov	r4, r7
 800da72:	e7e0      	b.n	800da36 <_realloc_r+0x1e>

0800da74 <sulp>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
 800da7a:	ec45 4b10 	vmov	d0, r4, r5
 800da7e:	4616      	mov	r6, r2
 800da80:	f003 fd84 	bl	801158c <__ulp>
 800da84:	ec51 0b10 	vmov	r0, r1, d0
 800da88:	b17e      	cbz	r6, 800daaa <sulp+0x36>
 800da8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da92:	2b00      	cmp	r3, #0
 800da94:	dd09      	ble.n	800daaa <sulp+0x36>
 800da96:	051b      	lsls	r3, r3, #20
 800da98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da9c:	2400      	movs	r4, #0
 800da9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800daa2:	4622      	mov	r2, r4
 800daa4:	462b      	mov	r3, r5
 800daa6:	f7f2 fdb7 	bl	8000618 <__aeabi_dmul>
 800daaa:	ec41 0b10 	vmov	d0, r0, r1
 800daae:	bd70      	pop	{r4, r5, r6, pc}

0800dab0 <_strtod_l>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	b09f      	sub	sp, #124	@ 0x7c
 800dab6:	460c      	mov	r4, r1
 800dab8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800daba:	2200      	movs	r2, #0
 800dabc:	921a      	str	r2, [sp, #104]	@ 0x68
 800dabe:	9005      	str	r0, [sp, #20]
 800dac0:	f04f 0a00 	mov.w	sl, #0
 800dac4:	f04f 0b00 	mov.w	fp, #0
 800dac8:	460a      	mov	r2, r1
 800daca:	9219      	str	r2, [sp, #100]	@ 0x64
 800dacc:	7811      	ldrb	r1, [r2, #0]
 800dace:	292b      	cmp	r1, #43	@ 0x2b
 800dad0:	d04a      	beq.n	800db68 <_strtod_l+0xb8>
 800dad2:	d838      	bhi.n	800db46 <_strtod_l+0x96>
 800dad4:	290d      	cmp	r1, #13
 800dad6:	d832      	bhi.n	800db3e <_strtod_l+0x8e>
 800dad8:	2908      	cmp	r1, #8
 800dada:	d832      	bhi.n	800db42 <_strtod_l+0x92>
 800dadc:	2900      	cmp	r1, #0
 800dade:	d03b      	beq.n	800db58 <_strtod_l+0xa8>
 800dae0:	2200      	movs	r2, #0
 800dae2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dae4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dae6:	782a      	ldrb	r2, [r5, #0]
 800dae8:	2a30      	cmp	r2, #48	@ 0x30
 800daea:	f040 80b3 	bne.w	800dc54 <_strtod_l+0x1a4>
 800daee:	786a      	ldrb	r2, [r5, #1]
 800daf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800daf4:	2a58      	cmp	r2, #88	@ 0x58
 800daf6:	d16e      	bne.n	800dbd6 <_strtod_l+0x126>
 800daf8:	9302      	str	r3, [sp, #8]
 800dafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	ab1a      	add	r3, sp, #104	@ 0x68
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	4a8e      	ldr	r2, [pc, #568]	@ (800dd3c <_strtod_l+0x28c>)
 800db04:	9805      	ldr	r0, [sp, #20]
 800db06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db08:	a919      	add	r1, sp, #100	@ 0x64
 800db0a:	f002 fee7 	bl	80108dc <__gethex>
 800db0e:	f010 060f 	ands.w	r6, r0, #15
 800db12:	4604      	mov	r4, r0
 800db14:	d005      	beq.n	800db22 <_strtod_l+0x72>
 800db16:	2e06      	cmp	r6, #6
 800db18:	d128      	bne.n	800db6c <_strtod_l+0xbc>
 800db1a:	3501      	adds	r5, #1
 800db1c:	2300      	movs	r3, #0
 800db1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800db20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db24:	2b00      	cmp	r3, #0
 800db26:	f040 858e 	bne.w	800e646 <_strtod_l+0xb96>
 800db2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db2c:	b1cb      	cbz	r3, 800db62 <_strtod_l+0xb2>
 800db2e:	4652      	mov	r2, sl
 800db30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db34:	ec43 2b10 	vmov	d0, r2, r3
 800db38:	b01f      	add	sp, #124	@ 0x7c
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	2920      	cmp	r1, #32
 800db40:	d1ce      	bne.n	800dae0 <_strtod_l+0x30>
 800db42:	3201      	adds	r2, #1
 800db44:	e7c1      	b.n	800daca <_strtod_l+0x1a>
 800db46:	292d      	cmp	r1, #45	@ 0x2d
 800db48:	d1ca      	bne.n	800dae0 <_strtod_l+0x30>
 800db4a:	2101      	movs	r1, #1
 800db4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800db4e:	1c51      	adds	r1, r2, #1
 800db50:	9119      	str	r1, [sp, #100]	@ 0x64
 800db52:	7852      	ldrb	r2, [r2, #1]
 800db54:	2a00      	cmp	r2, #0
 800db56:	d1c5      	bne.n	800dae4 <_strtod_l+0x34>
 800db58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8570 	bne.w	800e642 <_strtod_l+0xb92>
 800db62:	4652      	mov	r2, sl
 800db64:	465b      	mov	r3, fp
 800db66:	e7e5      	b.n	800db34 <_strtod_l+0x84>
 800db68:	2100      	movs	r1, #0
 800db6a:	e7ef      	b.n	800db4c <_strtod_l+0x9c>
 800db6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db6e:	b13a      	cbz	r2, 800db80 <_strtod_l+0xd0>
 800db70:	2135      	movs	r1, #53	@ 0x35
 800db72:	a81c      	add	r0, sp, #112	@ 0x70
 800db74:	f003 fe04 	bl	8011780 <__copybits>
 800db78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db7a:	9805      	ldr	r0, [sp, #20]
 800db7c:	f003 f9d2 	bl	8010f24 <_Bfree>
 800db80:	3e01      	subs	r6, #1
 800db82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db84:	2e04      	cmp	r6, #4
 800db86:	d806      	bhi.n	800db96 <_strtod_l+0xe6>
 800db88:	e8df f006 	tbb	[pc, r6]
 800db8c:	201d0314 	.word	0x201d0314
 800db90:	14          	.byte	0x14
 800db91:	00          	.byte	0x00
 800db92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db96:	05e1      	lsls	r1, r4, #23
 800db98:	bf48      	it	mi
 800db9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dba2:	0d1b      	lsrs	r3, r3, #20
 800dba4:	051b      	lsls	r3, r3, #20
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1bb      	bne.n	800db22 <_strtod_l+0x72>
 800dbaa:	f001 ff31 	bl	800fa10 <__errno>
 800dbae:	2322      	movs	r3, #34	@ 0x22
 800dbb0:	6003      	str	r3, [r0, #0]
 800dbb2:	e7b6      	b.n	800db22 <_strtod_l+0x72>
 800dbb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dbb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dbbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dbc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dbc4:	e7e7      	b.n	800db96 <_strtod_l+0xe6>
 800dbc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dd44 <_strtod_l+0x294>
 800dbca:	e7e4      	b.n	800db96 <_strtod_l+0xe6>
 800dbcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dbd0:	f04f 3aff 	mov.w	sl, #4294967295
 800dbd4:	e7df      	b.n	800db96 <_strtod_l+0xe6>
 800dbd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbdc:	785b      	ldrb	r3, [r3, #1]
 800dbde:	2b30      	cmp	r3, #48	@ 0x30
 800dbe0:	d0f9      	beq.n	800dbd6 <_strtod_l+0x126>
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d09d      	beq.n	800db22 <_strtod_l+0x72>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbec:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbee:	2300      	movs	r3, #0
 800dbf0:	9308      	str	r3, [sp, #32]
 800dbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf4:	461f      	mov	r7, r3
 800dbf6:	220a      	movs	r2, #10
 800dbf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dbfa:	7805      	ldrb	r5, [r0, #0]
 800dbfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dc00:	b2d9      	uxtb	r1, r3
 800dc02:	2909      	cmp	r1, #9
 800dc04:	d928      	bls.n	800dc58 <_strtod_l+0x1a8>
 800dc06:	494e      	ldr	r1, [pc, #312]	@ (800dd40 <_strtod_l+0x290>)
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f001 fe23 	bl	800f854 <strncmp>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d032      	beq.n	800dc78 <_strtod_l+0x1c8>
 800dc12:	2000      	movs	r0, #0
 800dc14:	462a      	mov	r2, r5
 800dc16:	4681      	mov	r9, r0
 800dc18:	463d      	mov	r5, r7
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2a65      	cmp	r2, #101	@ 0x65
 800dc1e:	d001      	beq.n	800dc24 <_strtod_l+0x174>
 800dc20:	2a45      	cmp	r2, #69	@ 0x45
 800dc22:	d114      	bne.n	800dc4e <_strtod_l+0x19e>
 800dc24:	b91d      	cbnz	r5, 800dc2e <_strtod_l+0x17e>
 800dc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc28:	4302      	orrs	r2, r0
 800dc2a:	d095      	beq.n	800db58 <_strtod_l+0xa8>
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc30:	1c62      	adds	r2, r4, #1
 800dc32:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc34:	7862      	ldrb	r2, [r4, #1]
 800dc36:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc38:	d077      	beq.n	800dd2a <_strtod_l+0x27a>
 800dc3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc3c:	d07b      	beq.n	800dd36 <_strtod_l+0x286>
 800dc3e:	f04f 0c00 	mov.w	ip, #0
 800dc42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc46:	2909      	cmp	r1, #9
 800dc48:	f240 8082 	bls.w	800dd50 <_strtod_l+0x2a0>
 800dc4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc4e:	f04f 0800 	mov.w	r8, #0
 800dc52:	e0a2      	b.n	800dd9a <_strtod_l+0x2ea>
 800dc54:	2300      	movs	r3, #0
 800dc56:	e7c7      	b.n	800dbe8 <_strtod_l+0x138>
 800dc58:	2f08      	cmp	r7, #8
 800dc5a:	bfd5      	itete	le
 800dc5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dc5e:	9908      	ldrgt	r1, [sp, #32]
 800dc60:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc68:	f100 0001 	add.w	r0, r0, #1
 800dc6c:	bfd4      	ite	le
 800dc6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dc70:	9308      	strgt	r3, [sp, #32]
 800dc72:	3701      	adds	r7, #1
 800dc74:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc76:	e7bf      	b.n	800dbf8 <_strtod_l+0x148>
 800dc78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc7e:	785a      	ldrb	r2, [r3, #1]
 800dc80:	b37f      	cbz	r7, 800dce2 <_strtod_l+0x232>
 800dc82:	4681      	mov	r9, r0
 800dc84:	463d      	mov	r5, r7
 800dc86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc8a:	2b09      	cmp	r3, #9
 800dc8c:	d912      	bls.n	800dcb4 <_strtod_l+0x204>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e7c4      	b.n	800dc1c <_strtod_l+0x16c>
 800dc92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc98:	785a      	ldrb	r2, [r3, #1]
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	2a30      	cmp	r2, #48	@ 0x30
 800dc9e:	d0f8      	beq.n	800dc92 <_strtod_l+0x1e2>
 800dca0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dca4:	2b08      	cmp	r3, #8
 800dca6:	f200 84d3 	bhi.w	800e650 <_strtod_l+0xba0>
 800dcaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcac:	930c      	str	r3, [sp, #48]	@ 0x30
 800dcae:	4681      	mov	r9, r0
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	3a30      	subs	r2, #48	@ 0x30
 800dcb6:	f100 0301 	add.w	r3, r0, #1
 800dcba:	d02a      	beq.n	800dd12 <_strtod_l+0x262>
 800dcbc:	4499      	add	r9, r3
 800dcbe:	eb00 0c05 	add.w	ip, r0, r5
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	210a      	movs	r1, #10
 800dcc6:	4563      	cmp	r3, ip
 800dcc8:	d10d      	bne.n	800dce6 <_strtod_l+0x236>
 800dcca:	1c69      	adds	r1, r5, #1
 800dccc:	4401      	add	r1, r0
 800dcce:	4428      	add	r0, r5
 800dcd0:	2808      	cmp	r0, #8
 800dcd2:	dc16      	bgt.n	800dd02 <_strtod_l+0x252>
 800dcd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dcd6:	230a      	movs	r3, #10
 800dcd8:	fb03 2300 	mla	r3, r3, r0, r2
 800dcdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcde:	2300      	movs	r3, #0
 800dce0:	e018      	b.n	800dd14 <_strtod_l+0x264>
 800dce2:	4638      	mov	r0, r7
 800dce4:	e7da      	b.n	800dc9c <_strtod_l+0x1ec>
 800dce6:	2b08      	cmp	r3, #8
 800dce8:	f103 0301 	add.w	r3, r3, #1
 800dcec:	dc03      	bgt.n	800dcf6 <_strtod_l+0x246>
 800dcee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dcf0:	434e      	muls	r6, r1
 800dcf2:	960a      	str	r6, [sp, #40]	@ 0x28
 800dcf4:	e7e7      	b.n	800dcc6 <_strtod_l+0x216>
 800dcf6:	2b10      	cmp	r3, #16
 800dcf8:	bfde      	ittt	le
 800dcfa:	9e08      	ldrle	r6, [sp, #32]
 800dcfc:	434e      	mulle	r6, r1
 800dcfe:	9608      	strle	r6, [sp, #32]
 800dd00:	e7e1      	b.n	800dcc6 <_strtod_l+0x216>
 800dd02:	280f      	cmp	r0, #15
 800dd04:	dceb      	bgt.n	800dcde <_strtod_l+0x22e>
 800dd06:	9808      	ldr	r0, [sp, #32]
 800dd08:	230a      	movs	r3, #10
 800dd0a:	fb03 2300 	mla	r3, r3, r0, r2
 800dd0e:	9308      	str	r3, [sp, #32]
 800dd10:	e7e5      	b.n	800dcde <_strtod_l+0x22e>
 800dd12:	4629      	mov	r1, r5
 800dd14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd16:	1c50      	adds	r0, r2, #1
 800dd18:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd1a:	7852      	ldrb	r2, [r2, #1]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	460d      	mov	r5, r1
 800dd20:	e7b1      	b.n	800dc86 <_strtod_l+0x1d6>
 800dd22:	f04f 0900 	mov.w	r9, #0
 800dd26:	2301      	movs	r3, #1
 800dd28:	e77d      	b.n	800dc26 <_strtod_l+0x176>
 800dd2a:	f04f 0c00 	mov.w	ip, #0
 800dd2e:	1ca2      	adds	r2, r4, #2
 800dd30:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd32:	78a2      	ldrb	r2, [r4, #2]
 800dd34:	e785      	b.n	800dc42 <_strtod_l+0x192>
 800dd36:	f04f 0c01 	mov.w	ip, #1
 800dd3a:	e7f8      	b.n	800dd2e <_strtod_l+0x27e>
 800dd3c:	08015a64 	.word	0x08015a64
 800dd40:	08015a4c 	.word	0x08015a4c
 800dd44:	7ff00000 	.word	0x7ff00000
 800dd48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd4a:	1c51      	adds	r1, r2, #1
 800dd4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd4e:	7852      	ldrb	r2, [r2, #1]
 800dd50:	2a30      	cmp	r2, #48	@ 0x30
 800dd52:	d0f9      	beq.n	800dd48 <_strtod_l+0x298>
 800dd54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd58:	2908      	cmp	r1, #8
 800dd5a:	f63f af78 	bhi.w	800dc4e <_strtod_l+0x19e>
 800dd5e:	3a30      	subs	r2, #48	@ 0x30
 800dd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd66:	f04f 080a 	mov.w	r8, #10
 800dd6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd6c:	1c56      	adds	r6, r2, #1
 800dd6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd70:	7852      	ldrb	r2, [r2, #1]
 800dd72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd76:	f1be 0f09 	cmp.w	lr, #9
 800dd7a:	d939      	bls.n	800ddf0 <_strtod_l+0x340>
 800dd7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd7e:	1a76      	subs	r6, r6, r1
 800dd80:	2e08      	cmp	r6, #8
 800dd82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd86:	dc03      	bgt.n	800dd90 <_strtod_l+0x2e0>
 800dd88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd8a:	4588      	cmp	r8, r1
 800dd8c:	bfa8      	it	ge
 800dd8e:	4688      	movge	r8, r1
 800dd90:	f1bc 0f00 	cmp.w	ip, #0
 800dd94:	d001      	beq.n	800dd9a <_strtod_l+0x2ea>
 800dd96:	f1c8 0800 	rsb	r8, r8, #0
 800dd9a:	2d00      	cmp	r5, #0
 800dd9c:	d14e      	bne.n	800de3c <_strtod_l+0x38c>
 800dd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dda0:	4308      	orrs	r0, r1
 800dda2:	f47f aebe 	bne.w	800db22 <_strtod_l+0x72>
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f47f aed6 	bne.w	800db58 <_strtod_l+0xa8>
 800ddac:	2a69      	cmp	r2, #105	@ 0x69
 800ddae:	d028      	beq.n	800de02 <_strtod_l+0x352>
 800ddb0:	dc25      	bgt.n	800ddfe <_strtod_l+0x34e>
 800ddb2:	2a49      	cmp	r2, #73	@ 0x49
 800ddb4:	d025      	beq.n	800de02 <_strtod_l+0x352>
 800ddb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ddb8:	f47f aece 	bne.w	800db58 <_strtod_l+0xa8>
 800ddbc:	499b      	ldr	r1, [pc, #620]	@ (800e02c <_strtod_l+0x57c>)
 800ddbe:	a819      	add	r0, sp, #100	@ 0x64
 800ddc0:	f002 ffae 	bl	8010d20 <__match>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f43f aec7 	beq.w	800db58 <_strtod_l+0xa8>
 800ddca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b28      	cmp	r3, #40	@ 0x28
 800ddd0:	d12e      	bne.n	800de30 <_strtod_l+0x380>
 800ddd2:	4997      	ldr	r1, [pc, #604]	@ (800e030 <_strtod_l+0x580>)
 800ddd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddd6:	a819      	add	r0, sp, #100	@ 0x64
 800ddd8:	f002 ffb6 	bl	8010d48 <__hexnan>
 800dddc:	2805      	cmp	r0, #5
 800ddde:	d127      	bne.n	800de30 <_strtod_l+0x380>
 800dde0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dde2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dde6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ddea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddee:	e698      	b.n	800db22 <_strtod_l+0x72>
 800ddf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddf2:	fb08 2101 	mla	r1, r8, r1, r2
 800ddf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ddfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddfc:	e7b5      	b.n	800dd6a <_strtod_l+0x2ba>
 800ddfe:	2a6e      	cmp	r2, #110	@ 0x6e
 800de00:	e7da      	b.n	800ddb8 <_strtod_l+0x308>
 800de02:	498c      	ldr	r1, [pc, #560]	@ (800e034 <_strtod_l+0x584>)
 800de04:	a819      	add	r0, sp, #100	@ 0x64
 800de06:	f002 ff8b 	bl	8010d20 <__match>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	f43f aea4 	beq.w	800db58 <_strtod_l+0xa8>
 800de10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de12:	4989      	ldr	r1, [pc, #548]	@ (800e038 <_strtod_l+0x588>)
 800de14:	3b01      	subs	r3, #1
 800de16:	a819      	add	r0, sp, #100	@ 0x64
 800de18:	9319      	str	r3, [sp, #100]	@ 0x64
 800de1a:	f002 ff81 	bl	8010d20 <__match>
 800de1e:	b910      	cbnz	r0, 800de26 <_strtod_l+0x376>
 800de20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de22:	3301      	adds	r3, #1
 800de24:	9319      	str	r3, [sp, #100]	@ 0x64
 800de26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e048 <_strtod_l+0x598>
 800de2a:	f04f 0a00 	mov.w	sl, #0
 800de2e:	e678      	b.n	800db22 <_strtod_l+0x72>
 800de30:	4882      	ldr	r0, [pc, #520]	@ (800e03c <_strtod_l+0x58c>)
 800de32:	f001 fe29 	bl	800fa88 <nan>
 800de36:	ec5b ab10 	vmov	sl, fp, d0
 800de3a:	e672      	b.n	800db22 <_strtod_l+0x72>
 800de3c:	eba8 0309 	sub.w	r3, r8, r9
 800de40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de42:	9309      	str	r3, [sp, #36]	@ 0x24
 800de44:	2f00      	cmp	r7, #0
 800de46:	bf08      	it	eq
 800de48:	462f      	moveq	r7, r5
 800de4a:	2d10      	cmp	r5, #16
 800de4c:	462c      	mov	r4, r5
 800de4e:	bfa8      	it	ge
 800de50:	2410      	movge	r4, #16
 800de52:	f7f2 fb67 	bl	8000524 <__aeabi_ui2d>
 800de56:	2d09      	cmp	r5, #9
 800de58:	4682      	mov	sl, r0
 800de5a:	468b      	mov	fp, r1
 800de5c:	dc13      	bgt.n	800de86 <_strtod_l+0x3d6>
 800de5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	f43f ae5e 	beq.w	800db22 <_strtod_l+0x72>
 800de66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de68:	dd78      	ble.n	800df5c <_strtod_l+0x4ac>
 800de6a:	2b16      	cmp	r3, #22
 800de6c:	dc5f      	bgt.n	800df2e <_strtod_l+0x47e>
 800de6e:	4974      	ldr	r1, [pc, #464]	@ (800e040 <_strtod_l+0x590>)
 800de70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de78:	4652      	mov	r2, sl
 800de7a:	465b      	mov	r3, fp
 800de7c:	f7f2 fbcc 	bl	8000618 <__aeabi_dmul>
 800de80:	4682      	mov	sl, r0
 800de82:	468b      	mov	fp, r1
 800de84:	e64d      	b.n	800db22 <_strtod_l+0x72>
 800de86:	4b6e      	ldr	r3, [pc, #440]	@ (800e040 <_strtod_l+0x590>)
 800de88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de90:	f7f2 fbc2 	bl	8000618 <__aeabi_dmul>
 800de94:	4682      	mov	sl, r0
 800de96:	9808      	ldr	r0, [sp, #32]
 800de98:	468b      	mov	fp, r1
 800de9a:	f7f2 fb43 	bl	8000524 <__aeabi_ui2d>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4650      	mov	r0, sl
 800dea4:	4659      	mov	r1, fp
 800dea6:	f7f2 fa01 	bl	80002ac <__adddf3>
 800deaa:	2d0f      	cmp	r5, #15
 800deac:	4682      	mov	sl, r0
 800deae:	468b      	mov	fp, r1
 800deb0:	ddd5      	ble.n	800de5e <_strtod_l+0x3ae>
 800deb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb4:	1b2c      	subs	r4, r5, r4
 800deb6:	441c      	add	r4, r3
 800deb8:	2c00      	cmp	r4, #0
 800deba:	f340 8096 	ble.w	800dfea <_strtod_l+0x53a>
 800debe:	f014 030f 	ands.w	r3, r4, #15
 800dec2:	d00a      	beq.n	800deda <_strtod_l+0x42a>
 800dec4:	495e      	ldr	r1, [pc, #376]	@ (800e040 <_strtod_l+0x590>)
 800dec6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800deca:	4652      	mov	r2, sl
 800decc:	465b      	mov	r3, fp
 800dece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ded2:	f7f2 fba1 	bl	8000618 <__aeabi_dmul>
 800ded6:	4682      	mov	sl, r0
 800ded8:	468b      	mov	fp, r1
 800deda:	f034 040f 	bics.w	r4, r4, #15
 800dede:	d073      	beq.n	800dfc8 <_strtod_l+0x518>
 800dee0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dee4:	dd48      	ble.n	800df78 <_strtod_l+0x4c8>
 800dee6:	2400      	movs	r4, #0
 800dee8:	46a0      	mov	r8, r4
 800deea:	940a      	str	r4, [sp, #40]	@ 0x28
 800deec:	46a1      	mov	r9, r4
 800deee:	9a05      	ldr	r2, [sp, #20]
 800def0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e048 <_strtod_l+0x598>
 800def4:	2322      	movs	r3, #34	@ 0x22
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	f04f 0a00 	mov.w	sl, #0
 800defc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800defe:	2b00      	cmp	r3, #0
 800df00:	f43f ae0f 	beq.w	800db22 <_strtod_l+0x72>
 800df04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df06:	9805      	ldr	r0, [sp, #20]
 800df08:	f003 f80c 	bl	8010f24 <_Bfree>
 800df0c:	9805      	ldr	r0, [sp, #20]
 800df0e:	4649      	mov	r1, r9
 800df10:	f003 f808 	bl	8010f24 <_Bfree>
 800df14:	9805      	ldr	r0, [sp, #20]
 800df16:	4641      	mov	r1, r8
 800df18:	f003 f804 	bl	8010f24 <_Bfree>
 800df1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df1e:	9805      	ldr	r0, [sp, #20]
 800df20:	f003 f800 	bl	8010f24 <_Bfree>
 800df24:	9805      	ldr	r0, [sp, #20]
 800df26:	4621      	mov	r1, r4
 800df28:	f002 fffc 	bl	8010f24 <_Bfree>
 800df2c:	e5f9      	b.n	800db22 <_strtod_l+0x72>
 800df2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df34:	4293      	cmp	r3, r2
 800df36:	dbbc      	blt.n	800deb2 <_strtod_l+0x402>
 800df38:	4c41      	ldr	r4, [pc, #260]	@ (800e040 <_strtod_l+0x590>)
 800df3a:	f1c5 050f 	rsb	r5, r5, #15
 800df3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df42:	4652      	mov	r2, sl
 800df44:	465b      	mov	r3, fp
 800df46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4a:	f7f2 fb65 	bl	8000618 <__aeabi_dmul>
 800df4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df50:	1b5d      	subs	r5, r3, r5
 800df52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df5a:	e78f      	b.n	800de7c <_strtod_l+0x3cc>
 800df5c:	3316      	adds	r3, #22
 800df5e:	dba8      	blt.n	800deb2 <_strtod_l+0x402>
 800df60:	4b37      	ldr	r3, [pc, #220]	@ (800e040 <_strtod_l+0x590>)
 800df62:	eba9 0808 	sub.w	r8, r9, r8
 800df66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df6e:	4650      	mov	r0, sl
 800df70:	4659      	mov	r1, fp
 800df72:	f7f2 fc7b 	bl	800086c <__aeabi_ddiv>
 800df76:	e783      	b.n	800de80 <_strtod_l+0x3d0>
 800df78:	4b32      	ldr	r3, [pc, #200]	@ (800e044 <_strtod_l+0x594>)
 800df7a:	9308      	str	r3, [sp, #32]
 800df7c:	2300      	movs	r3, #0
 800df7e:	1124      	asrs	r4, r4, #4
 800df80:	4650      	mov	r0, sl
 800df82:	4659      	mov	r1, fp
 800df84:	461e      	mov	r6, r3
 800df86:	2c01      	cmp	r4, #1
 800df88:	dc21      	bgt.n	800dfce <_strtod_l+0x51e>
 800df8a:	b10b      	cbz	r3, 800df90 <_strtod_l+0x4e0>
 800df8c:	4682      	mov	sl, r0
 800df8e:	468b      	mov	fp, r1
 800df90:	492c      	ldr	r1, [pc, #176]	@ (800e044 <_strtod_l+0x594>)
 800df92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df9a:	4652      	mov	r2, sl
 800df9c:	465b      	mov	r3, fp
 800df9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfa2:	f7f2 fb39 	bl	8000618 <__aeabi_dmul>
 800dfa6:	4b28      	ldr	r3, [pc, #160]	@ (800e048 <_strtod_l+0x598>)
 800dfa8:	460a      	mov	r2, r1
 800dfaa:	400b      	ands	r3, r1
 800dfac:	4927      	ldr	r1, [pc, #156]	@ (800e04c <_strtod_l+0x59c>)
 800dfae:	428b      	cmp	r3, r1
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	d898      	bhi.n	800dee6 <_strtod_l+0x436>
 800dfb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	bf86      	itte	hi
 800dfbc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e050 <_strtod_l+0x5a0>
 800dfc0:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9308      	str	r3, [sp, #32]
 800dfcc:	e07a      	b.n	800e0c4 <_strtod_l+0x614>
 800dfce:	07e2      	lsls	r2, r4, #31
 800dfd0:	d505      	bpl.n	800dfde <_strtod_l+0x52e>
 800dfd2:	9b08      	ldr	r3, [sp, #32]
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 fb1e 	bl	8000618 <__aeabi_dmul>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	9a08      	ldr	r2, [sp, #32]
 800dfe0:	3208      	adds	r2, #8
 800dfe2:	3601      	adds	r6, #1
 800dfe4:	1064      	asrs	r4, r4, #1
 800dfe6:	9208      	str	r2, [sp, #32]
 800dfe8:	e7cd      	b.n	800df86 <_strtod_l+0x4d6>
 800dfea:	d0ed      	beq.n	800dfc8 <_strtod_l+0x518>
 800dfec:	4264      	negs	r4, r4
 800dfee:	f014 020f 	ands.w	r2, r4, #15
 800dff2:	d00a      	beq.n	800e00a <_strtod_l+0x55a>
 800dff4:	4b12      	ldr	r3, [pc, #72]	@ (800e040 <_strtod_l+0x590>)
 800dff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dffa:	4650      	mov	r0, sl
 800dffc:	4659      	mov	r1, fp
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	f7f2 fc33 	bl	800086c <__aeabi_ddiv>
 800e006:	4682      	mov	sl, r0
 800e008:	468b      	mov	fp, r1
 800e00a:	1124      	asrs	r4, r4, #4
 800e00c:	d0dc      	beq.n	800dfc8 <_strtod_l+0x518>
 800e00e:	2c1f      	cmp	r4, #31
 800e010:	dd20      	ble.n	800e054 <_strtod_l+0x5a4>
 800e012:	2400      	movs	r4, #0
 800e014:	46a0      	mov	r8, r4
 800e016:	940a      	str	r4, [sp, #40]	@ 0x28
 800e018:	46a1      	mov	r9, r4
 800e01a:	9a05      	ldr	r2, [sp, #20]
 800e01c:	2322      	movs	r3, #34	@ 0x22
 800e01e:	f04f 0a00 	mov.w	sl, #0
 800e022:	f04f 0b00 	mov.w	fp, #0
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	e768      	b.n	800defc <_strtod_l+0x44c>
 800e02a:	bf00      	nop
 800e02c:	08015bae 	.word	0x08015bae
 800e030:	08015a50 	.word	0x08015a50
 800e034:	08015ba6 	.word	0x08015ba6
 800e038:	08015c90 	.word	0x08015c90
 800e03c:	08015c8c 	.word	0x08015c8c
 800e040:	08015df0 	.word	0x08015df0
 800e044:	08015dc8 	.word	0x08015dc8
 800e048:	7ff00000 	.word	0x7ff00000
 800e04c:	7ca00000 	.word	0x7ca00000
 800e050:	7fefffff 	.word	0x7fefffff
 800e054:	f014 0310 	ands.w	r3, r4, #16
 800e058:	bf18      	it	ne
 800e05a:	236a      	movne	r3, #106	@ 0x6a
 800e05c:	4ea9      	ldr	r6, [pc, #676]	@ (800e304 <_strtod_l+0x854>)
 800e05e:	9308      	str	r3, [sp, #32]
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	2300      	movs	r3, #0
 800e066:	07e2      	lsls	r2, r4, #31
 800e068:	d504      	bpl.n	800e074 <_strtod_l+0x5c4>
 800e06a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e06e:	f7f2 fad3 	bl	8000618 <__aeabi_dmul>
 800e072:	2301      	movs	r3, #1
 800e074:	1064      	asrs	r4, r4, #1
 800e076:	f106 0608 	add.w	r6, r6, #8
 800e07a:	d1f4      	bne.n	800e066 <_strtod_l+0x5b6>
 800e07c:	b10b      	cbz	r3, 800e082 <_strtod_l+0x5d2>
 800e07e:	4682      	mov	sl, r0
 800e080:	468b      	mov	fp, r1
 800e082:	9b08      	ldr	r3, [sp, #32]
 800e084:	b1b3      	cbz	r3, 800e0b4 <_strtod_l+0x604>
 800e086:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e08a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e08e:	2b00      	cmp	r3, #0
 800e090:	4659      	mov	r1, fp
 800e092:	dd0f      	ble.n	800e0b4 <_strtod_l+0x604>
 800e094:	2b1f      	cmp	r3, #31
 800e096:	dd55      	ble.n	800e144 <_strtod_l+0x694>
 800e098:	2b34      	cmp	r3, #52	@ 0x34
 800e09a:	bfde      	ittt	le
 800e09c:	f04f 33ff 	movle.w	r3, #4294967295
 800e0a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e0a4:	4093      	lslle	r3, r2
 800e0a6:	f04f 0a00 	mov.w	sl, #0
 800e0aa:	bfcc      	ite	gt
 800e0ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e0b0:	ea03 0b01 	andle.w	fp, r3, r1
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	4650      	mov	r0, sl
 800e0ba:	4659      	mov	r1, fp
 800e0bc:	f7f2 fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d1a6      	bne.n	800e012 <_strtod_l+0x562>
 800e0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0ca:	9805      	ldr	r0, [sp, #20]
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	463a      	mov	r2, r7
 800e0d0:	f002 ff90 	bl	8010ff4 <__s2b>
 800e0d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	f43f af05 	beq.w	800dee6 <_strtod_l+0x436>
 800e0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0de:	2a00      	cmp	r2, #0
 800e0e0:	eba9 0308 	sub.w	r3, r9, r8
 800e0e4:	bfa8      	it	ge
 800e0e6:	2300      	movge	r3, #0
 800e0e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0ea:	2400      	movs	r4, #0
 800e0ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0f2:	46a0      	mov	r8, r4
 800e0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0f6:	9805      	ldr	r0, [sp, #20]
 800e0f8:	6859      	ldr	r1, [r3, #4]
 800e0fa:	f002 fed3 	bl	8010ea4 <_Balloc>
 800e0fe:	4681      	mov	r9, r0
 800e100:	2800      	cmp	r0, #0
 800e102:	f43f aef4 	beq.w	800deee <_strtod_l+0x43e>
 800e106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e108:	691a      	ldr	r2, [r3, #16]
 800e10a:	3202      	adds	r2, #2
 800e10c:	f103 010c 	add.w	r1, r3, #12
 800e110:	0092      	lsls	r2, r2, #2
 800e112:	300c      	adds	r0, #12
 800e114:	f001 fca9 	bl	800fa6a <memcpy>
 800e118:	ec4b ab10 	vmov	d0, sl, fp
 800e11c:	9805      	ldr	r0, [sp, #20]
 800e11e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e120:	a91b      	add	r1, sp, #108	@ 0x6c
 800e122:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e126:	f003 faa1 	bl	801166c <__d2b>
 800e12a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e12c:	2800      	cmp	r0, #0
 800e12e:	f43f aede 	beq.w	800deee <_strtod_l+0x43e>
 800e132:	9805      	ldr	r0, [sp, #20]
 800e134:	2101      	movs	r1, #1
 800e136:	f002 fff3 	bl	8011120 <__i2b>
 800e13a:	4680      	mov	r8, r0
 800e13c:	b948      	cbnz	r0, 800e152 <_strtod_l+0x6a2>
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	e6d4      	b.n	800deee <_strtod_l+0x43e>
 800e144:	f04f 32ff 	mov.w	r2, #4294967295
 800e148:	fa02 f303 	lsl.w	r3, r2, r3
 800e14c:	ea03 0a0a 	and.w	sl, r3, sl
 800e150:	e7b0      	b.n	800e0b4 <_strtod_l+0x604>
 800e152:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e154:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e156:	2d00      	cmp	r5, #0
 800e158:	bfab      	itete	ge
 800e15a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e15c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e15e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e160:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e162:	bfac      	ite	ge
 800e164:	18ef      	addge	r7, r5, r3
 800e166:	1b5e      	sublt	r6, r3, r5
 800e168:	9b08      	ldr	r3, [sp, #32]
 800e16a:	1aed      	subs	r5, r5, r3
 800e16c:	4415      	add	r5, r2
 800e16e:	4b66      	ldr	r3, [pc, #408]	@ (800e308 <_strtod_l+0x858>)
 800e170:	3d01      	subs	r5, #1
 800e172:	429d      	cmp	r5, r3
 800e174:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e178:	da50      	bge.n	800e21c <_strtod_l+0x76c>
 800e17a:	1b5b      	subs	r3, r3, r5
 800e17c:	2b1f      	cmp	r3, #31
 800e17e:	eba2 0203 	sub.w	r2, r2, r3
 800e182:	f04f 0101 	mov.w	r1, #1
 800e186:	dc3d      	bgt.n	800e204 <_strtod_l+0x754>
 800e188:	fa01 f303 	lsl.w	r3, r1, r3
 800e18c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e18e:	2300      	movs	r3, #0
 800e190:	9310      	str	r3, [sp, #64]	@ 0x40
 800e192:	18bd      	adds	r5, r7, r2
 800e194:	9b08      	ldr	r3, [sp, #32]
 800e196:	42af      	cmp	r7, r5
 800e198:	4416      	add	r6, r2
 800e19a:	441e      	add	r6, r3
 800e19c:	463b      	mov	r3, r7
 800e19e:	bfa8      	it	ge
 800e1a0:	462b      	movge	r3, r5
 800e1a2:	42b3      	cmp	r3, r6
 800e1a4:	bfa8      	it	ge
 800e1a6:	4633      	movge	r3, r6
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	bfc2      	ittt	gt
 800e1ac:	1aed      	subgt	r5, r5, r3
 800e1ae:	1af6      	subgt	r6, r6, r3
 800e1b0:	1aff      	subgt	r7, r7, r3
 800e1b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dd16      	ble.n	800e1e6 <_strtod_l+0x736>
 800e1b8:	4641      	mov	r1, r8
 800e1ba:	9805      	ldr	r0, [sp, #20]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	f003 f86f 	bl	80112a0 <__pow5mult>
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d0ba      	beq.n	800e13e <_strtod_l+0x68e>
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1cc:	9805      	ldr	r0, [sp, #20]
 800e1ce:	f002 ffbd 	bl	801114c <__multiply>
 800e1d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f43f ae8a 	beq.w	800deee <_strtod_l+0x43e>
 800e1da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1dc:	9805      	ldr	r0, [sp, #20]
 800e1de:	f002 fea1 	bl	8010f24 <_Bfree>
 800e1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	dc1d      	bgt.n	800e226 <_strtod_l+0x776>
 800e1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dd23      	ble.n	800e238 <_strtod_l+0x788>
 800e1f0:	4649      	mov	r1, r9
 800e1f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1f4:	9805      	ldr	r0, [sp, #20]
 800e1f6:	f003 f853 	bl	80112a0 <__pow5mult>
 800e1fa:	4681      	mov	r9, r0
 800e1fc:	b9e0      	cbnz	r0, 800e238 <_strtod_l+0x788>
 800e1fe:	f04f 0900 	mov.w	r9, #0
 800e202:	e674      	b.n	800deee <_strtod_l+0x43e>
 800e204:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e208:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e20c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e210:	35e2      	adds	r5, #226	@ 0xe2
 800e212:	fa01 f305 	lsl.w	r3, r1, r5
 800e216:	9310      	str	r3, [sp, #64]	@ 0x40
 800e218:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e21a:	e7ba      	b.n	800e192 <_strtod_l+0x6e2>
 800e21c:	2300      	movs	r3, #0
 800e21e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e220:	2301      	movs	r3, #1
 800e222:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e224:	e7b5      	b.n	800e192 <_strtod_l+0x6e2>
 800e226:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e228:	9805      	ldr	r0, [sp, #20]
 800e22a:	462a      	mov	r2, r5
 800e22c:	f003 f892 	bl	8011354 <__lshift>
 800e230:	901a      	str	r0, [sp, #104]	@ 0x68
 800e232:	2800      	cmp	r0, #0
 800e234:	d1d9      	bne.n	800e1ea <_strtod_l+0x73a>
 800e236:	e65a      	b.n	800deee <_strtod_l+0x43e>
 800e238:	2e00      	cmp	r6, #0
 800e23a:	dd07      	ble.n	800e24c <_strtod_l+0x79c>
 800e23c:	4649      	mov	r1, r9
 800e23e:	9805      	ldr	r0, [sp, #20]
 800e240:	4632      	mov	r2, r6
 800e242:	f003 f887 	bl	8011354 <__lshift>
 800e246:	4681      	mov	r9, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	d0d8      	beq.n	800e1fe <_strtod_l+0x74e>
 800e24c:	2f00      	cmp	r7, #0
 800e24e:	dd08      	ble.n	800e262 <_strtod_l+0x7b2>
 800e250:	4641      	mov	r1, r8
 800e252:	9805      	ldr	r0, [sp, #20]
 800e254:	463a      	mov	r2, r7
 800e256:	f003 f87d 	bl	8011354 <__lshift>
 800e25a:	4680      	mov	r8, r0
 800e25c:	2800      	cmp	r0, #0
 800e25e:	f43f ae46 	beq.w	800deee <_strtod_l+0x43e>
 800e262:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e264:	9805      	ldr	r0, [sp, #20]
 800e266:	464a      	mov	r2, r9
 800e268:	f003 f8fc 	bl	8011464 <__mdiff>
 800e26c:	4604      	mov	r4, r0
 800e26e:	2800      	cmp	r0, #0
 800e270:	f43f ae3d 	beq.w	800deee <_strtod_l+0x43e>
 800e274:	68c3      	ldr	r3, [r0, #12]
 800e276:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e278:	2300      	movs	r3, #0
 800e27a:	60c3      	str	r3, [r0, #12]
 800e27c:	4641      	mov	r1, r8
 800e27e:	f003 f8d5 	bl	801142c <__mcmp>
 800e282:	2800      	cmp	r0, #0
 800e284:	da46      	bge.n	800e314 <_strtod_l+0x864>
 800e286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e288:	ea53 030a 	orrs.w	r3, r3, sl
 800e28c:	d16c      	bne.n	800e368 <_strtod_l+0x8b8>
 800e28e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e292:	2b00      	cmp	r3, #0
 800e294:	d168      	bne.n	800e368 <_strtod_l+0x8b8>
 800e296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e29a:	0d1b      	lsrs	r3, r3, #20
 800e29c:	051b      	lsls	r3, r3, #20
 800e29e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2a2:	d961      	bls.n	800e368 <_strtod_l+0x8b8>
 800e2a4:	6963      	ldr	r3, [r4, #20]
 800e2a6:	b913      	cbnz	r3, 800e2ae <_strtod_l+0x7fe>
 800e2a8:	6923      	ldr	r3, [r4, #16]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	dd5c      	ble.n	800e368 <_strtod_l+0x8b8>
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	9805      	ldr	r0, [sp, #20]
 800e2b4:	f003 f84e 	bl	8011354 <__lshift>
 800e2b8:	4641      	mov	r1, r8
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	f003 f8b6 	bl	801142c <__mcmp>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	dd51      	ble.n	800e368 <_strtod_l+0x8b8>
 800e2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2c8:	9a08      	ldr	r2, [sp, #32]
 800e2ca:	0d1b      	lsrs	r3, r3, #20
 800e2cc:	051b      	lsls	r3, r3, #20
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	d06b      	beq.n	800e3aa <_strtod_l+0x8fa>
 800e2d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2d6:	d868      	bhi.n	800e3aa <_strtod_l+0x8fa>
 800e2d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e2dc:	f67f ae9d 	bls.w	800e01a <_strtod_l+0x56a>
 800e2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e30c <_strtod_l+0x85c>)
 800e2e2:	4650      	mov	r0, sl
 800e2e4:	4659      	mov	r1, fp
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f7f2 f996 	bl	8000618 <__aeabi_dmul>
 800e2ec:	4b08      	ldr	r3, [pc, #32]	@ (800e310 <_strtod_l+0x860>)
 800e2ee:	400b      	ands	r3, r1
 800e2f0:	4682      	mov	sl, r0
 800e2f2:	468b      	mov	fp, r1
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f47f ae05 	bne.w	800df04 <_strtod_l+0x454>
 800e2fa:	9a05      	ldr	r2, [sp, #20]
 800e2fc:	2322      	movs	r3, #34	@ 0x22
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	e600      	b.n	800df04 <_strtod_l+0x454>
 800e302:	bf00      	nop
 800e304:	08015a78 	.word	0x08015a78
 800e308:	fffffc02 	.word	0xfffffc02
 800e30c:	39500000 	.word	0x39500000
 800e310:	7ff00000 	.word	0x7ff00000
 800e314:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e318:	d165      	bne.n	800e3e6 <_strtod_l+0x936>
 800e31a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e320:	b35a      	cbz	r2, 800e37a <_strtod_l+0x8ca>
 800e322:	4a9f      	ldr	r2, [pc, #636]	@ (800e5a0 <_strtod_l+0xaf0>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d12b      	bne.n	800e380 <_strtod_l+0x8d0>
 800e328:	9b08      	ldr	r3, [sp, #32]
 800e32a:	4651      	mov	r1, sl
 800e32c:	b303      	cbz	r3, 800e370 <_strtod_l+0x8c0>
 800e32e:	4b9d      	ldr	r3, [pc, #628]	@ (800e5a4 <_strtod_l+0xaf4>)
 800e330:	465a      	mov	r2, fp
 800e332:	4013      	ands	r3, r2
 800e334:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e338:	f04f 32ff 	mov.w	r2, #4294967295
 800e33c:	d81b      	bhi.n	800e376 <_strtod_l+0x8c6>
 800e33e:	0d1b      	lsrs	r3, r3, #20
 800e340:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e344:	fa02 f303 	lsl.w	r3, r2, r3
 800e348:	4299      	cmp	r1, r3
 800e34a:	d119      	bne.n	800e380 <_strtod_l+0x8d0>
 800e34c:	4b96      	ldr	r3, [pc, #600]	@ (800e5a8 <_strtod_l+0xaf8>)
 800e34e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e350:	429a      	cmp	r2, r3
 800e352:	d102      	bne.n	800e35a <_strtod_l+0x8aa>
 800e354:	3101      	adds	r1, #1
 800e356:	f43f adca 	beq.w	800deee <_strtod_l+0x43e>
 800e35a:	4b92      	ldr	r3, [pc, #584]	@ (800e5a4 <_strtod_l+0xaf4>)
 800e35c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e35e:	401a      	ands	r2, r3
 800e360:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e364:	f04f 0a00 	mov.w	sl, #0
 800e368:	9b08      	ldr	r3, [sp, #32]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1b8      	bne.n	800e2e0 <_strtod_l+0x830>
 800e36e:	e5c9      	b.n	800df04 <_strtod_l+0x454>
 800e370:	f04f 33ff 	mov.w	r3, #4294967295
 800e374:	e7e8      	b.n	800e348 <_strtod_l+0x898>
 800e376:	4613      	mov	r3, r2
 800e378:	e7e6      	b.n	800e348 <_strtod_l+0x898>
 800e37a:	ea53 030a 	orrs.w	r3, r3, sl
 800e37e:	d0a1      	beq.n	800e2c4 <_strtod_l+0x814>
 800e380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e382:	b1db      	cbz	r3, 800e3bc <_strtod_l+0x90c>
 800e384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e386:	4213      	tst	r3, r2
 800e388:	d0ee      	beq.n	800e368 <_strtod_l+0x8b8>
 800e38a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e38c:	9a08      	ldr	r2, [sp, #32]
 800e38e:	4650      	mov	r0, sl
 800e390:	4659      	mov	r1, fp
 800e392:	b1bb      	cbz	r3, 800e3c4 <_strtod_l+0x914>
 800e394:	f7ff fb6e 	bl	800da74 <sulp>
 800e398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e39c:	ec53 2b10 	vmov	r2, r3, d0
 800e3a0:	f7f1 ff84 	bl	80002ac <__adddf3>
 800e3a4:	4682      	mov	sl, r0
 800e3a6:	468b      	mov	fp, r1
 800e3a8:	e7de      	b.n	800e368 <_strtod_l+0x8b8>
 800e3aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e3ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e3ba:	e7d5      	b.n	800e368 <_strtod_l+0x8b8>
 800e3bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3be:	ea13 0f0a 	tst.w	r3, sl
 800e3c2:	e7e1      	b.n	800e388 <_strtod_l+0x8d8>
 800e3c4:	f7ff fb56 	bl	800da74 <sulp>
 800e3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3cc:	ec53 2b10 	vmov	r2, r3, d0
 800e3d0:	f7f1 ff6a 	bl	80002a8 <__aeabi_dsub>
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	4682      	mov	sl, r0
 800e3da:	468b      	mov	fp, r1
 800e3dc:	f7f2 fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d0c1      	beq.n	800e368 <_strtod_l+0x8b8>
 800e3e4:	e619      	b.n	800e01a <_strtod_l+0x56a>
 800e3e6:	4641      	mov	r1, r8
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f003 f997 	bl	801171c <__ratio>
 800e3ee:	ec57 6b10 	vmov	r6, r7, d0
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f7f2 fb88 	bl	8000b10 <__aeabi_dcmple>
 800e400:	2800      	cmp	r0, #0
 800e402:	d06f      	beq.n	800e4e4 <_strtod_l+0xa34>
 800e404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e406:	2b00      	cmp	r3, #0
 800e408:	d17a      	bne.n	800e500 <_strtod_l+0xa50>
 800e40a:	f1ba 0f00 	cmp.w	sl, #0
 800e40e:	d158      	bne.n	800e4c2 <_strtod_l+0xa12>
 800e410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e416:	2b00      	cmp	r3, #0
 800e418:	d15a      	bne.n	800e4d0 <_strtod_l+0xa20>
 800e41a:	4b64      	ldr	r3, [pc, #400]	@ (800e5ac <_strtod_l+0xafc>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	4630      	mov	r0, r6
 800e420:	4639      	mov	r1, r7
 800e422:	f7f2 fb6b 	bl	8000afc <__aeabi_dcmplt>
 800e426:	2800      	cmp	r0, #0
 800e428:	d159      	bne.n	800e4de <_strtod_l+0xa2e>
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	4b60      	ldr	r3, [pc, #384]	@ (800e5b0 <_strtod_l+0xb00>)
 800e430:	2200      	movs	r2, #0
 800e432:	f7f2 f8f1 	bl	8000618 <__aeabi_dmul>
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e43e:	9606      	str	r6, [sp, #24]
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e446:	4d57      	ldr	r5, [pc, #348]	@ (800e5a4 <_strtod_l+0xaf4>)
 800e448:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e44e:	401d      	ands	r5, r3
 800e450:	4b58      	ldr	r3, [pc, #352]	@ (800e5b4 <_strtod_l+0xb04>)
 800e452:	429d      	cmp	r5, r3
 800e454:	f040 80b2 	bne.w	800e5bc <_strtod_l+0xb0c>
 800e458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e45a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e45e:	ec4b ab10 	vmov	d0, sl, fp
 800e462:	f003 f893 	bl	801158c <__ulp>
 800e466:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e46a:	ec51 0b10 	vmov	r0, r1, d0
 800e46e:	f7f2 f8d3 	bl	8000618 <__aeabi_dmul>
 800e472:	4652      	mov	r2, sl
 800e474:	465b      	mov	r3, fp
 800e476:	f7f1 ff19 	bl	80002ac <__adddf3>
 800e47a:	460b      	mov	r3, r1
 800e47c:	4949      	ldr	r1, [pc, #292]	@ (800e5a4 <_strtod_l+0xaf4>)
 800e47e:	4a4e      	ldr	r2, [pc, #312]	@ (800e5b8 <_strtod_l+0xb08>)
 800e480:	4019      	ands	r1, r3
 800e482:	4291      	cmp	r1, r2
 800e484:	4682      	mov	sl, r0
 800e486:	d942      	bls.n	800e50e <_strtod_l+0xa5e>
 800e488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e48a:	4b47      	ldr	r3, [pc, #284]	@ (800e5a8 <_strtod_l+0xaf8>)
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d103      	bne.n	800e498 <_strtod_l+0x9e8>
 800e490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e492:	3301      	adds	r3, #1
 800e494:	f43f ad2b 	beq.w	800deee <_strtod_l+0x43e>
 800e498:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e5a8 <_strtod_l+0xaf8>
 800e49c:	f04f 3aff 	mov.w	sl, #4294967295
 800e4a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4a2:	9805      	ldr	r0, [sp, #20]
 800e4a4:	f002 fd3e 	bl	8010f24 <_Bfree>
 800e4a8:	9805      	ldr	r0, [sp, #20]
 800e4aa:	4649      	mov	r1, r9
 800e4ac:	f002 fd3a 	bl	8010f24 <_Bfree>
 800e4b0:	9805      	ldr	r0, [sp, #20]
 800e4b2:	4641      	mov	r1, r8
 800e4b4:	f002 fd36 	bl	8010f24 <_Bfree>
 800e4b8:	9805      	ldr	r0, [sp, #20]
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	f002 fd32 	bl	8010f24 <_Bfree>
 800e4c0:	e618      	b.n	800e0f4 <_strtod_l+0x644>
 800e4c2:	f1ba 0f01 	cmp.w	sl, #1
 800e4c6:	d103      	bne.n	800e4d0 <_strtod_l+0xa20>
 800e4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f43f ada5 	beq.w	800e01a <_strtod_l+0x56a>
 800e4d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e580 <_strtod_l+0xad0>
 800e4d4:	4f35      	ldr	r7, [pc, #212]	@ (800e5ac <_strtod_l+0xafc>)
 800e4d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4da:	2600      	movs	r6, #0
 800e4dc:	e7b1      	b.n	800e442 <_strtod_l+0x992>
 800e4de:	4f34      	ldr	r7, [pc, #208]	@ (800e5b0 <_strtod_l+0xb00>)
 800e4e0:	2600      	movs	r6, #0
 800e4e2:	e7aa      	b.n	800e43a <_strtod_l+0x98a>
 800e4e4:	4b32      	ldr	r3, [pc, #200]	@ (800e5b0 <_strtod_l+0xb00>)
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	4639      	mov	r1, r7
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f7f2 f894 	bl	8000618 <__aeabi_dmul>
 800e4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d09f      	beq.n	800e43a <_strtod_l+0x98a>
 800e4fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4fe:	e7a0      	b.n	800e442 <_strtod_l+0x992>
 800e500:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e588 <_strtod_l+0xad8>
 800e504:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e508:	ec57 6b17 	vmov	r6, r7, d7
 800e50c:	e799      	b.n	800e442 <_strtod_l+0x992>
 800e50e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e512:	9b08      	ldr	r3, [sp, #32]
 800e514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1c1      	bne.n	800e4a0 <_strtod_l+0x9f0>
 800e51c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e520:	0d1b      	lsrs	r3, r3, #20
 800e522:	051b      	lsls	r3, r3, #20
 800e524:	429d      	cmp	r5, r3
 800e526:	d1bb      	bne.n	800e4a0 <_strtod_l+0x9f0>
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f2 fbd4 	bl	8000cd8 <__aeabi_d2lz>
 800e530:	f7f2 f844 	bl	80005bc <__aeabi_l2d>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4630      	mov	r0, r6
 800e53a:	4639      	mov	r1, r7
 800e53c:	f7f1 feb4 	bl	80002a8 <__aeabi_dsub>
 800e540:	460b      	mov	r3, r1
 800e542:	4602      	mov	r2, r0
 800e544:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e548:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e54e:	ea46 060a 	orr.w	r6, r6, sl
 800e552:	431e      	orrs	r6, r3
 800e554:	d06f      	beq.n	800e636 <_strtod_l+0xb86>
 800e556:	a30e      	add	r3, pc, #56	@ (adr r3, 800e590 <_strtod_l+0xae0>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	f7f2 face 	bl	8000afc <__aeabi_dcmplt>
 800e560:	2800      	cmp	r0, #0
 800e562:	f47f accf 	bne.w	800df04 <_strtod_l+0x454>
 800e566:	a30c      	add	r3, pc, #48	@ (adr r3, 800e598 <_strtod_l+0xae8>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e570:	f7f2 fae2 	bl	8000b38 <__aeabi_dcmpgt>
 800e574:	2800      	cmp	r0, #0
 800e576:	d093      	beq.n	800e4a0 <_strtod_l+0x9f0>
 800e578:	e4c4      	b.n	800df04 <_strtod_l+0x454>
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w
 800e580:	00000000 	.word	0x00000000
 800e584:	bff00000 	.word	0xbff00000
 800e588:	00000000 	.word	0x00000000
 800e58c:	3ff00000 	.word	0x3ff00000
 800e590:	94a03595 	.word	0x94a03595
 800e594:	3fdfffff 	.word	0x3fdfffff
 800e598:	35afe535 	.word	0x35afe535
 800e59c:	3fe00000 	.word	0x3fe00000
 800e5a0:	000fffff 	.word	0x000fffff
 800e5a4:	7ff00000 	.word	0x7ff00000
 800e5a8:	7fefffff 	.word	0x7fefffff
 800e5ac:	3ff00000 	.word	0x3ff00000
 800e5b0:	3fe00000 	.word	0x3fe00000
 800e5b4:	7fe00000 	.word	0x7fe00000
 800e5b8:	7c9fffff 	.word	0x7c9fffff
 800e5bc:	9b08      	ldr	r3, [sp, #32]
 800e5be:	b323      	cbz	r3, 800e60a <_strtod_l+0xb5a>
 800e5c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e5c4:	d821      	bhi.n	800e60a <_strtod_l+0xb5a>
 800e5c6:	a328      	add	r3, pc, #160	@ (adr r3, 800e668 <_strtod_l+0xbb8>)
 800e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	f7f2 fa9e 	bl	8000b10 <__aeabi_dcmple>
 800e5d4:	b1a0      	cbz	r0, 800e600 <_strtod_l+0xb50>
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f7f2 faf5 	bl	8000bc8 <__aeabi_d2uiz>
 800e5de:	2801      	cmp	r0, #1
 800e5e0:	bf38      	it	cc
 800e5e2:	2001      	movcc	r0, #1
 800e5e4:	f7f1 ff9e 	bl	8000524 <__aeabi_ui2d>
 800e5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	b9fb      	cbnz	r3, 800e630 <_strtod_l+0xb80>
 800e5f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e5fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e600:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e602:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e606:	1b5b      	subs	r3, r3, r5
 800e608:	9311      	str	r3, [sp, #68]	@ 0x44
 800e60a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e60e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e612:	f002 ffbb 	bl	801158c <__ulp>
 800e616:	4650      	mov	r0, sl
 800e618:	ec53 2b10 	vmov	r2, r3, d0
 800e61c:	4659      	mov	r1, fp
 800e61e:	f7f1 fffb 	bl	8000618 <__aeabi_dmul>
 800e622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e626:	f7f1 fe41 	bl	80002ac <__adddf3>
 800e62a:	4682      	mov	sl, r0
 800e62c:	468b      	mov	fp, r1
 800e62e:	e770      	b.n	800e512 <_strtod_l+0xa62>
 800e630:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e634:	e7e0      	b.n	800e5f8 <_strtod_l+0xb48>
 800e636:	a30e      	add	r3, pc, #56	@ (adr r3, 800e670 <_strtod_l+0xbc0>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	f7f2 fa5e 	bl	8000afc <__aeabi_dcmplt>
 800e640:	e798      	b.n	800e574 <_strtod_l+0xac4>
 800e642:	2300      	movs	r3, #0
 800e644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e646:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	f7ff ba6d 	b.w	800db2a <_strtod_l+0x7a>
 800e650:	2a65      	cmp	r2, #101	@ 0x65
 800e652:	f43f ab66 	beq.w	800dd22 <_strtod_l+0x272>
 800e656:	2a45      	cmp	r2, #69	@ 0x45
 800e658:	f43f ab63 	beq.w	800dd22 <_strtod_l+0x272>
 800e65c:	2301      	movs	r3, #1
 800e65e:	f7ff bb9e 	b.w	800dd9e <_strtod_l+0x2ee>
 800e662:	bf00      	nop
 800e664:	f3af 8000 	nop.w
 800e668:	ffc00000 	.word	0xffc00000
 800e66c:	41dfffff 	.word	0x41dfffff
 800e670:	94a03595 	.word	0x94a03595
 800e674:	3fcfffff 	.word	0x3fcfffff

0800e678 <_strtod_r>:
 800e678:	4b01      	ldr	r3, [pc, #4]	@ (800e680 <_strtod_r+0x8>)
 800e67a:	f7ff ba19 	b.w	800dab0 <_strtod_l>
 800e67e:	bf00      	nop
 800e680:	20000028 	.word	0x20000028

0800e684 <strtod>:
 800e684:	460a      	mov	r2, r1
 800e686:	4601      	mov	r1, r0
 800e688:	4802      	ldr	r0, [pc, #8]	@ (800e694 <strtod+0x10>)
 800e68a:	4b03      	ldr	r3, [pc, #12]	@ (800e698 <strtod+0x14>)
 800e68c:	6800      	ldr	r0, [r0, #0]
 800e68e:	f7ff ba0f 	b.w	800dab0 <_strtod_l>
 800e692:	bf00      	nop
 800e694:	20000194 	.word	0x20000194
 800e698:	20000028 	.word	0x20000028

0800e69c <__cvt>:
 800e69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	ec57 6b10 	vmov	r6, r7, d0
 800e6a4:	2f00      	cmp	r7, #0
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	bfbb      	ittet	lt
 800e6ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e6b2:	461f      	movlt	r7, r3
 800e6b4:	2300      	movge	r3, #0
 800e6b6:	232d      	movlt	r3, #45	@ 0x2d
 800e6b8:	700b      	strb	r3, [r1, #0]
 800e6ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e6c0:	4691      	mov	r9, r2
 800e6c2:	f023 0820 	bic.w	r8, r3, #32
 800e6c6:	bfbc      	itt	lt
 800e6c8:	4632      	movlt	r2, r6
 800e6ca:	4616      	movlt	r6, r2
 800e6cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6d0:	d005      	beq.n	800e6de <__cvt+0x42>
 800e6d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e6d6:	d100      	bne.n	800e6da <__cvt+0x3e>
 800e6d8:	3401      	adds	r4, #1
 800e6da:	2102      	movs	r1, #2
 800e6dc:	e000      	b.n	800e6e0 <__cvt+0x44>
 800e6de:	2103      	movs	r1, #3
 800e6e0:	ab03      	add	r3, sp, #12
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	ab02      	add	r3, sp, #8
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	ec47 6b10 	vmov	d0, r6, r7
 800e6ec:	4653      	mov	r3, sl
 800e6ee:	4622      	mov	r2, r4
 800e6f0:	f001 fa7e 	bl	800fbf0 <_dtoa_r>
 800e6f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	d119      	bne.n	800e730 <__cvt+0x94>
 800e6fc:	f019 0f01 	tst.w	r9, #1
 800e700:	d00e      	beq.n	800e720 <__cvt+0x84>
 800e702:	eb00 0904 	add.w	r9, r0, r4
 800e706:	2200      	movs	r2, #0
 800e708:	2300      	movs	r3, #0
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f2 f9eb 	bl	8000ae8 <__aeabi_dcmpeq>
 800e712:	b108      	cbz	r0, 800e718 <__cvt+0x7c>
 800e714:	f8cd 900c 	str.w	r9, [sp, #12]
 800e718:	2230      	movs	r2, #48	@ 0x30
 800e71a:	9b03      	ldr	r3, [sp, #12]
 800e71c:	454b      	cmp	r3, r9
 800e71e:	d31e      	bcc.n	800e75e <__cvt+0xc2>
 800e720:	9b03      	ldr	r3, [sp, #12]
 800e722:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e724:	1b5b      	subs	r3, r3, r5
 800e726:	4628      	mov	r0, r5
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	b004      	add	sp, #16
 800e72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e730:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e734:	eb00 0904 	add.w	r9, r0, r4
 800e738:	d1e5      	bne.n	800e706 <__cvt+0x6a>
 800e73a:	7803      	ldrb	r3, [r0, #0]
 800e73c:	2b30      	cmp	r3, #48	@ 0x30
 800e73e:	d10a      	bne.n	800e756 <__cvt+0xba>
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	4630      	mov	r0, r6
 800e746:	4639      	mov	r1, r7
 800e748:	f7f2 f9ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800e74c:	b918      	cbnz	r0, 800e756 <__cvt+0xba>
 800e74e:	f1c4 0401 	rsb	r4, r4, #1
 800e752:	f8ca 4000 	str.w	r4, [sl]
 800e756:	f8da 3000 	ldr.w	r3, [sl]
 800e75a:	4499      	add	r9, r3
 800e75c:	e7d3      	b.n	800e706 <__cvt+0x6a>
 800e75e:	1c59      	adds	r1, r3, #1
 800e760:	9103      	str	r1, [sp, #12]
 800e762:	701a      	strb	r2, [r3, #0]
 800e764:	e7d9      	b.n	800e71a <__cvt+0x7e>

0800e766 <__exponent>:
 800e766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e768:	2900      	cmp	r1, #0
 800e76a:	bfba      	itte	lt
 800e76c:	4249      	neglt	r1, r1
 800e76e:	232d      	movlt	r3, #45	@ 0x2d
 800e770:	232b      	movge	r3, #43	@ 0x2b
 800e772:	2909      	cmp	r1, #9
 800e774:	7002      	strb	r2, [r0, #0]
 800e776:	7043      	strb	r3, [r0, #1]
 800e778:	dd29      	ble.n	800e7ce <__exponent+0x68>
 800e77a:	f10d 0307 	add.w	r3, sp, #7
 800e77e:	461d      	mov	r5, r3
 800e780:	270a      	movs	r7, #10
 800e782:	461a      	mov	r2, r3
 800e784:	fbb1 f6f7 	udiv	r6, r1, r7
 800e788:	fb07 1416 	mls	r4, r7, r6, r1
 800e78c:	3430      	adds	r4, #48	@ 0x30
 800e78e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e792:	460c      	mov	r4, r1
 800e794:	2c63      	cmp	r4, #99	@ 0x63
 800e796:	f103 33ff 	add.w	r3, r3, #4294967295
 800e79a:	4631      	mov	r1, r6
 800e79c:	dcf1      	bgt.n	800e782 <__exponent+0x1c>
 800e79e:	3130      	adds	r1, #48	@ 0x30
 800e7a0:	1e94      	subs	r4, r2, #2
 800e7a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7a6:	1c41      	adds	r1, r0, #1
 800e7a8:	4623      	mov	r3, r4
 800e7aa:	42ab      	cmp	r3, r5
 800e7ac:	d30a      	bcc.n	800e7c4 <__exponent+0x5e>
 800e7ae:	f10d 0309 	add.w	r3, sp, #9
 800e7b2:	1a9b      	subs	r3, r3, r2
 800e7b4:	42ac      	cmp	r4, r5
 800e7b6:	bf88      	it	hi
 800e7b8:	2300      	movhi	r3, #0
 800e7ba:	3302      	adds	r3, #2
 800e7bc:	4403      	add	r3, r0
 800e7be:	1a18      	subs	r0, r3, r0
 800e7c0:	b003      	add	sp, #12
 800e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7cc:	e7ed      	b.n	800e7aa <__exponent+0x44>
 800e7ce:	2330      	movs	r3, #48	@ 0x30
 800e7d0:	3130      	adds	r1, #48	@ 0x30
 800e7d2:	7083      	strb	r3, [r0, #2]
 800e7d4:	70c1      	strb	r1, [r0, #3]
 800e7d6:	1d03      	adds	r3, r0, #4
 800e7d8:	e7f1      	b.n	800e7be <__exponent+0x58>
	...

0800e7dc <_printf_float>:
 800e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	b08d      	sub	sp, #52	@ 0x34
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e7e8:	4616      	mov	r6, r2
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	f001 f8b5 	bl	800f95c <_localeconv_r>
 800e7f2:	6803      	ldr	r3, [r0, #0]
 800e7f4:	9304      	str	r3, [sp, #16]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7f1 fd4a 	bl	8000290 <strlen>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e800:	f8d8 3000 	ldr.w	r3, [r8]
 800e804:	9005      	str	r0, [sp, #20]
 800e806:	3307      	adds	r3, #7
 800e808:	f023 0307 	bic.w	r3, r3, #7
 800e80c:	f103 0208 	add.w	r2, r3, #8
 800e810:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e814:	f8d4 b000 	ldr.w	fp, [r4]
 800e818:	f8c8 2000 	str.w	r2, [r8]
 800e81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e820:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e824:	9307      	str	r3, [sp, #28]
 800e826:	f8cd 8018 	str.w	r8, [sp, #24]
 800e82a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e82e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e832:	4b9c      	ldr	r3, [pc, #624]	@ (800eaa4 <_printf_float+0x2c8>)
 800e834:	f04f 32ff 	mov.w	r2, #4294967295
 800e838:	f7f2 f988 	bl	8000b4c <__aeabi_dcmpun>
 800e83c:	bb70      	cbnz	r0, 800e89c <_printf_float+0xc0>
 800e83e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e842:	4b98      	ldr	r3, [pc, #608]	@ (800eaa4 <_printf_float+0x2c8>)
 800e844:	f04f 32ff 	mov.w	r2, #4294967295
 800e848:	f7f2 f962 	bl	8000b10 <__aeabi_dcmple>
 800e84c:	bb30      	cbnz	r0, 800e89c <_printf_float+0xc0>
 800e84e:	2200      	movs	r2, #0
 800e850:	2300      	movs	r3, #0
 800e852:	4640      	mov	r0, r8
 800e854:	4649      	mov	r1, r9
 800e856:	f7f2 f951 	bl	8000afc <__aeabi_dcmplt>
 800e85a:	b110      	cbz	r0, 800e862 <_printf_float+0x86>
 800e85c:	232d      	movs	r3, #45	@ 0x2d
 800e85e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e862:	4a91      	ldr	r2, [pc, #580]	@ (800eaa8 <_printf_float+0x2cc>)
 800e864:	4b91      	ldr	r3, [pc, #580]	@ (800eaac <_printf_float+0x2d0>)
 800e866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e86a:	bf94      	ite	ls
 800e86c:	4690      	movls	r8, r2
 800e86e:	4698      	movhi	r8, r3
 800e870:	2303      	movs	r3, #3
 800e872:	6123      	str	r3, [r4, #16]
 800e874:	f02b 0304 	bic.w	r3, fp, #4
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	f04f 0900 	mov.w	r9, #0
 800e87e:	9700      	str	r7, [sp, #0]
 800e880:	4633      	mov	r3, r6
 800e882:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e884:	4621      	mov	r1, r4
 800e886:	4628      	mov	r0, r5
 800e888:	f000 f9d2 	bl	800ec30 <_printf_common>
 800e88c:	3001      	adds	r0, #1
 800e88e:	f040 808d 	bne.w	800e9ac <_printf_float+0x1d0>
 800e892:	f04f 30ff 	mov.w	r0, #4294967295
 800e896:	b00d      	add	sp, #52	@ 0x34
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	4642      	mov	r2, r8
 800e89e:	464b      	mov	r3, r9
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	4649      	mov	r1, r9
 800e8a4:	f7f2 f952 	bl	8000b4c <__aeabi_dcmpun>
 800e8a8:	b140      	cbz	r0, 800e8bc <_printf_float+0xe0>
 800e8aa:	464b      	mov	r3, r9
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	bfbc      	itt	lt
 800e8b0:	232d      	movlt	r3, #45	@ 0x2d
 800e8b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e8b6:	4a7e      	ldr	r2, [pc, #504]	@ (800eab0 <_printf_float+0x2d4>)
 800e8b8:	4b7e      	ldr	r3, [pc, #504]	@ (800eab4 <_printf_float+0x2d8>)
 800e8ba:	e7d4      	b.n	800e866 <_printf_float+0x8a>
 800e8bc:	6863      	ldr	r3, [r4, #4]
 800e8be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e8c2:	9206      	str	r2, [sp, #24]
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	d13b      	bne.n	800e940 <_printf_float+0x164>
 800e8c8:	2306      	movs	r3, #6
 800e8ca:	6063      	str	r3, [r4, #4]
 800e8cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	6022      	str	r2, [r4, #0]
 800e8d4:	9303      	str	r3, [sp, #12]
 800e8d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e8d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e8dc:	ab09      	add	r3, sp, #36	@ 0x24
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	6861      	ldr	r1, [r4, #4]
 800e8e2:	ec49 8b10 	vmov	d0, r8, r9
 800e8e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f7ff fed6 	bl	800e69c <__cvt>
 800e8f0:	9b06      	ldr	r3, [sp, #24]
 800e8f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8f4:	2b47      	cmp	r3, #71	@ 0x47
 800e8f6:	4680      	mov	r8, r0
 800e8f8:	d129      	bne.n	800e94e <_printf_float+0x172>
 800e8fa:	1cc8      	adds	r0, r1, #3
 800e8fc:	db02      	blt.n	800e904 <_printf_float+0x128>
 800e8fe:	6863      	ldr	r3, [r4, #4]
 800e900:	4299      	cmp	r1, r3
 800e902:	dd41      	ble.n	800e988 <_printf_float+0x1ac>
 800e904:	f1aa 0a02 	sub.w	sl, sl, #2
 800e908:	fa5f fa8a 	uxtb.w	sl, sl
 800e90c:	3901      	subs	r1, #1
 800e90e:	4652      	mov	r2, sl
 800e910:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e914:	9109      	str	r1, [sp, #36]	@ 0x24
 800e916:	f7ff ff26 	bl	800e766 <__exponent>
 800e91a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e91c:	1813      	adds	r3, r2, r0
 800e91e:	2a01      	cmp	r2, #1
 800e920:	4681      	mov	r9, r0
 800e922:	6123      	str	r3, [r4, #16]
 800e924:	dc02      	bgt.n	800e92c <_printf_float+0x150>
 800e926:	6822      	ldr	r2, [r4, #0]
 800e928:	07d2      	lsls	r2, r2, #31
 800e92a:	d501      	bpl.n	800e930 <_printf_float+0x154>
 800e92c:	3301      	adds	r3, #1
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0a2      	beq.n	800e87e <_printf_float+0xa2>
 800e938:	232d      	movs	r3, #45	@ 0x2d
 800e93a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e93e:	e79e      	b.n	800e87e <_printf_float+0xa2>
 800e940:	9a06      	ldr	r2, [sp, #24]
 800e942:	2a47      	cmp	r2, #71	@ 0x47
 800e944:	d1c2      	bne.n	800e8cc <_printf_float+0xf0>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1c0      	bne.n	800e8cc <_printf_float+0xf0>
 800e94a:	2301      	movs	r3, #1
 800e94c:	e7bd      	b.n	800e8ca <_printf_float+0xee>
 800e94e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e952:	d9db      	bls.n	800e90c <_printf_float+0x130>
 800e954:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e958:	d118      	bne.n	800e98c <_printf_float+0x1b0>
 800e95a:	2900      	cmp	r1, #0
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	dd0b      	ble.n	800e978 <_printf_float+0x19c>
 800e960:	6121      	str	r1, [r4, #16]
 800e962:	b913      	cbnz	r3, 800e96a <_printf_float+0x18e>
 800e964:	6822      	ldr	r2, [r4, #0]
 800e966:	07d0      	lsls	r0, r2, #31
 800e968:	d502      	bpl.n	800e970 <_printf_float+0x194>
 800e96a:	3301      	adds	r3, #1
 800e96c:	440b      	add	r3, r1
 800e96e:	6123      	str	r3, [r4, #16]
 800e970:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e972:	f04f 0900 	mov.w	r9, #0
 800e976:	e7db      	b.n	800e930 <_printf_float+0x154>
 800e978:	b913      	cbnz	r3, 800e980 <_printf_float+0x1a4>
 800e97a:	6822      	ldr	r2, [r4, #0]
 800e97c:	07d2      	lsls	r2, r2, #31
 800e97e:	d501      	bpl.n	800e984 <_printf_float+0x1a8>
 800e980:	3302      	adds	r3, #2
 800e982:	e7f4      	b.n	800e96e <_printf_float+0x192>
 800e984:	2301      	movs	r3, #1
 800e986:	e7f2      	b.n	800e96e <_printf_float+0x192>
 800e988:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e98e:	4299      	cmp	r1, r3
 800e990:	db05      	blt.n	800e99e <_printf_float+0x1c2>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	6121      	str	r1, [r4, #16]
 800e996:	07d8      	lsls	r0, r3, #31
 800e998:	d5ea      	bpl.n	800e970 <_printf_float+0x194>
 800e99a:	1c4b      	adds	r3, r1, #1
 800e99c:	e7e7      	b.n	800e96e <_printf_float+0x192>
 800e99e:	2900      	cmp	r1, #0
 800e9a0:	bfd4      	ite	le
 800e9a2:	f1c1 0202 	rsble	r2, r1, #2
 800e9a6:	2201      	movgt	r2, #1
 800e9a8:	4413      	add	r3, r2
 800e9aa:	e7e0      	b.n	800e96e <_printf_float+0x192>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	055a      	lsls	r2, r3, #21
 800e9b0:	d407      	bmi.n	800e9c2 <_printf_float+0x1e6>
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	4642      	mov	r2, r8
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	47b8      	blx	r7
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d12b      	bne.n	800ea18 <_printf_float+0x23c>
 800e9c0:	e767      	b.n	800e892 <_printf_float+0xb6>
 800e9c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9c6:	f240 80dd 	bls.w	800eb84 <_printf_float+0x3a8>
 800e9ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f7f2 f889 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d033      	beq.n	800ea42 <_printf_float+0x266>
 800e9da:	4a37      	ldr	r2, [pc, #220]	@ (800eab8 <_printf_float+0x2dc>)
 800e9dc:	2301      	movs	r3, #1
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b8      	blx	r7
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	f43f af54 	beq.w	800e892 <_printf_float+0xb6>
 800e9ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e9ee:	4543      	cmp	r3, r8
 800e9f0:	db02      	blt.n	800e9f8 <_printf_float+0x21c>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	07d8      	lsls	r0, r3, #31
 800e9f6:	d50f      	bpl.n	800ea18 <_printf_float+0x23c>
 800e9f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9fc:	4631      	mov	r1, r6
 800e9fe:	4628      	mov	r0, r5
 800ea00:	47b8      	blx	r7
 800ea02:	3001      	adds	r0, #1
 800ea04:	f43f af45 	beq.w	800e892 <_printf_float+0xb6>
 800ea08:	f04f 0900 	mov.w	r9, #0
 800ea0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea10:	f104 0a1a 	add.w	sl, r4, #26
 800ea14:	45c8      	cmp	r8, r9
 800ea16:	dc09      	bgt.n	800ea2c <_printf_float+0x250>
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	079b      	lsls	r3, r3, #30
 800ea1c:	f100 8103 	bmi.w	800ec26 <_printf_float+0x44a>
 800ea20:	68e0      	ldr	r0, [r4, #12]
 800ea22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea24:	4298      	cmp	r0, r3
 800ea26:	bfb8      	it	lt
 800ea28:	4618      	movlt	r0, r3
 800ea2a:	e734      	b.n	800e896 <_printf_float+0xba>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	4652      	mov	r2, sl
 800ea30:	4631      	mov	r1, r6
 800ea32:	4628      	mov	r0, r5
 800ea34:	47b8      	blx	r7
 800ea36:	3001      	adds	r0, #1
 800ea38:	f43f af2b 	beq.w	800e892 <_printf_float+0xb6>
 800ea3c:	f109 0901 	add.w	r9, r9, #1
 800ea40:	e7e8      	b.n	800ea14 <_printf_float+0x238>
 800ea42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	dc39      	bgt.n	800eabc <_printf_float+0x2e0>
 800ea48:	4a1b      	ldr	r2, [pc, #108]	@ (800eab8 <_printf_float+0x2dc>)
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4628      	mov	r0, r5
 800ea50:	47b8      	blx	r7
 800ea52:	3001      	adds	r0, #1
 800ea54:	f43f af1d 	beq.w	800e892 <_printf_float+0xb6>
 800ea58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea5c:	ea59 0303 	orrs.w	r3, r9, r3
 800ea60:	d102      	bne.n	800ea68 <_printf_float+0x28c>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	07d9      	lsls	r1, r3, #31
 800ea66:	d5d7      	bpl.n	800ea18 <_printf_float+0x23c>
 800ea68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	4628      	mov	r0, r5
 800ea70:	47b8      	blx	r7
 800ea72:	3001      	adds	r0, #1
 800ea74:	f43f af0d 	beq.w	800e892 <_printf_float+0xb6>
 800ea78:	f04f 0a00 	mov.w	sl, #0
 800ea7c:	f104 0b1a 	add.w	fp, r4, #26
 800ea80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea82:	425b      	negs	r3, r3
 800ea84:	4553      	cmp	r3, sl
 800ea86:	dc01      	bgt.n	800ea8c <_printf_float+0x2b0>
 800ea88:	464b      	mov	r3, r9
 800ea8a:	e793      	b.n	800e9b4 <_printf_float+0x1d8>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	465a      	mov	r2, fp
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	f43f aefb 	beq.w	800e892 <_printf_float+0xb6>
 800ea9c:	f10a 0a01 	add.w	sl, sl, #1
 800eaa0:	e7ee      	b.n	800ea80 <_printf_float+0x2a4>
 800eaa2:	bf00      	nop
 800eaa4:	7fefffff 	.word	0x7fefffff
 800eaa8:	08015ba1 	.word	0x08015ba1
 800eaac:	08015ba5 	.word	0x08015ba5
 800eab0:	08015ba9 	.word	0x08015ba9
 800eab4:	08015bad 	.word	0x08015bad
 800eab8:	08015edf 	.word	0x08015edf
 800eabc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eabe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eac2:	4553      	cmp	r3, sl
 800eac4:	bfa8      	it	ge
 800eac6:	4653      	movge	r3, sl
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	4699      	mov	r9, r3
 800eacc:	dc36      	bgt.n	800eb3c <_printf_float+0x360>
 800eace:	f04f 0b00 	mov.w	fp, #0
 800ead2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ead6:	f104 021a 	add.w	r2, r4, #26
 800eada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eadc:	9306      	str	r3, [sp, #24]
 800eade:	eba3 0309 	sub.w	r3, r3, r9
 800eae2:	455b      	cmp	r3, fp
 800eae4:	dc31      	bgt.n	800eb4a <_printf_float+0x36e>
 800eae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae8:	459a      	cmp	sl, r3
 800eaea:	dc3a      	bgt.n	800eb62 <_printf_float+0x386>
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	07da      	lsls	r2, r3, #31
 800eaf0:	d437      	bmi.n	800eb62 <_printf_float+0x386>
 800eaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaf4:	ebaa 0903 	sub.w	r9, sl, r3
 800eaf8:	9b06      	ldr	r3, [sp, #24]
 800eafa:	ebaa 0303 	sub.w	r3, sl, r3
 800eafe:	4599      	cmp	r9, r3
 800eb00:	bfa8      	it	ge
 800eb02:	4699      	movge	r9, r3
 800eb04:	f1b9 0f00 	cmp.w	r9, #0
 800eb08:	dc33      	bgt.n	800eb72 <_printf_float+0x396>
 800eb0a:	f04f 0800 	mov.w	r8, #0
 800eb0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb12:	f104 0b1a 	add.w	fp, r4, #26
 800eb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb18:	ebaa 0303 	sub.w	r3, sl, r3
 800eb1c:	eba3 0309 	sub.w	r3, r3, r9
 800eb20:	4543      	cmp	r3, r8
 800eb22:	f77f af79 	ble.w	800ea18 <_printf_float+0x23c>
 800eb26:	2301      	movs	r3, #1
 800eb28:	465a      	mov	r2, fp
 800eb2a:	4631      	mov	r1, r6
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	47b8      	blx	r7
 800eb30:	3001      	adds	r0, #1
 800eb32:	f43f aeae 	beq.w	800e892 <_printf_float+0xb6>
 800eb36:	f108 0801 	add.w	r8, r8, #1
 800eb3a:	e7ec      	b.n	800eb16 <_printf_float+0x33a>
 800eb3c:	4642      	mov	r2, r8
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	d1c2      	bne.n	800eace <_printf_float+0x2f2>
 800eb48:	e6a3      	b.n	800e892 <_printf_float+0xb6>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4631      	mov	r1, r6
 800eb4e:	4628      	mov	r0, r5
 800eb50:	9206      	str	r2, [sp, #24]
 800eb52:	47b8      	blx	r7
 800eb54:	3001      	adds	r0, #1
 800eb56:	f43f ae9c 	beq.w	800e892 <_printf_float+0xb6>
 800eb5a:	9a06      	ldr	r2, [sp, #24]
 800eb5c:	f10b 0b01 	add.w	fp, fp, #1
 800eb60:	e7bb      	b.n	800eada <_printf_float+0x2fe>
 800eb62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb66:	4631      	mov	r1, r6
 800eb68:	4628      	mov	r0, r5
 800eb6a:	47b8      	blx	r7
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	d1c0      	bne.n	800eaf2 <_printf_float+0x316>
 800eb70:	e68f      	b.n	800e892 <_printf_float+0xb6>
 800eb72:	9a06      	ldr	r2, [sp, #24]
 800eb74:	464b      	mov	r3, r9
 800eb76:	4442      	add	r2, r8
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	d1c3      	bne.n	800eb0a <_printf_float+0x32e>
 800eb82:	e686      	b.n	800e892 <_printf_float+0xb6>
 800eb84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb88:	f1ba 0f01 	cmp.w	sl, #1
 800eb8c:	dc01      	bgt.n	800eb92 <_printf_float+0x3b6>
 800eb8e:	07db      	lsls	r3, r3, #31
 800eb90:	d536      	bpl.n	800ec00 <_printf_float+0x424>
 800eb92:	2301      	movs	r3, #1
 800eb94:	4642      	mov	r2, r8
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b8      	blx	r7
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	f43f ae78 	beq.w	800e892 <_printf_float+0xb6>
 800eba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b8      	blx	r7
 800ebac:	3001      	adds	r0, #1
 800ebae:	f43f ae70 	beq.w	800e892 <_printf_float+0xb6>
 800ebb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebbe:	f7f1 ff93 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebc2:	b9c0      	cbnz	r0, 800ebf6 <_printf_float+0x41a>
 800ebc4:	4653      	mov	r3, sl
 800ebc6:	f108 0201 	add.w	r2, r8, #1
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4628      	mov	r0, r5
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	d10c      	bne.n	800ebee <_printf_float+0x412>
 800ebd4:	e65d      	b.n	800e892 <_printf_float+0xb6>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	465a      	mov	r2, fp
 800ebda:	4631      	mov	r1, r6
 800ebdc:	4628      	mov	r0, r5
 800ebde:	47b8      	blx	r7
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	f43f ae56 	beq.w	800e892 <_printf_float+0xb6>
 800ebe6:	f108 0801 	add.w	r8, r8, #1
 800ebea:	45d0      	cmp	r8, sl
 800ebec:	dbf3      	blt.n	800ebd6 <_printf_float+0x3fa>
 800ebee:	464b      	mov	r3, r9
 800ebf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ebf4:	e6df      	b.n	800e9b6 <_printf_float+0x1da>
 800ebf6:	f04f 0800 	mov.w	r8, #0
 800ebfa:	f104 0b1a 	add.w	fp, r4, #26
 800ebfe:	e7f4      	b.n	800ebea <_printf_float+0x40e>
 800ec00:	2301      	movs	r3, #1
 800ec02:	4642      	mov	r2, r8
 800ec04:	e7e1      	b.n	800ebca <_printf_float+0x3ee>
 800ec06:	2301      	movs	r3, #1
 800ec08:	464a      	mov	r2, r9
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	47b8      	blx	r7
 800ec10:	3001      	adds	r0, #1
 800ec12:	f43f ae3e 	beq.w	800e892 <_printf_float+0xb6>
 800ec16:	f108 0801 	add.w	r8, r8, #1
 800ec1a:	68e3      	ldr	r3, [r4, #12]
 800ec1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec1e:	1a5b      	subs	r3, r3, r1
 800ec20:	4543      	cmp	r3, r8
 800ec22:	dcf0      	bgt.n	800ec06 <_printf_float+0x42a>
 800ec24:	e6fc      	b.n	800ea20 <_printf_float+0x244>
 800ec26:	f04f 0800 	mov.w	r8, #0
 800ec2a:	f104 0919 	add.w	r9, r4, #25
 800ec2e:	e7f4      	b.n	800ec1a <_printf_float+0x43e>

0800ec30 <_printf_common>:
 800ec30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec34:	4616      	mov	r6, r2
 800ec36:	4698      	mov	r8, r3
 800ec38:	688a      	ldr	r2, [r1, #8]
 800ec3a:	690b      	ldr	r3, [r1, #16]
 800ec3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec40:	4293      	cmp	r3, r2
 800ec42:	bfb8      	it	lt
 800ec44:	4613      	movlt	r3, r2
 800ec46:	6033      	str	r3, [r6, #0]
 800ec48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	b10a      	cbz	r2, 800ec56 <_printf_common+0x26>
 800ec52:	3301      	adds	r3, #1
 800ec54:	6033      	str	r3, [r6, #0]
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	0699      	lsls	r1, r3, #26
 800ec5a:	bf42      	ittt	mi
 800ec5c:	6833      	ldrmi	r3, [r6, #0]
 800ec5e:	3302      	addmi	r3, #2
 800ec60:	6033      	strmi	r3, [r6, #0]
 800ec62:	6825      	ldr	r5, [r4, #0]
 800ec64:	f015 0506 	ands.w	r5, r5, #6
 800ec68:	d106      	bne.n	800ec78 <_printf_common+0x48>
 800ec6a:	f104 0a19 	add.w	sl, r4, #25
 800ec6e:	68e3      	ldr	r3, [r4, #12]
 800ec70:	6832      	ldr	r2, [r6, #0]
 800ec72:	1a9b      	subs	r3, r3, r2
 800ec74:	42ab      	cmp	r3, r5
 800ec76:	dc26      	bgt.n	800ecc6 <_printf_common+0x96>
 800ec78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec7c:	6822      	ldr	r2, [r4, #0]
 800ec7e:	3b00      	subs	r3, #0
 800ec80:	bf18      	it	ne
 800ec82:	2301      	movne	r3, #1
 800ec84:	0692      	lsls	r2, r2, #26
 800ec86:	d42b      	bmi.n	800ece0 <_printf_common+0xb0>
 800ec88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec8c:	4641      	mov	r1, r8
 800ec8e:	4638      	mov	r0, r7
 800ec90:	47c8      	blx	r9
 800ec92:	3001      	adds	r0, #1
 800ec94:	d01e      	beq.n	800ecd4 <_printf_common+0xa4>
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	6922      	ldr	r2, [r4, #16]
 800ec9a:	f003 0306 	and.w	r3, r3, #6
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	bf02      	ittt	eq
 800eca2:	68e5      	ldreq	r5, [r4, #12]
 800eca4:	6833      	ldreq	r3, [r6, #0]
 800eca6:	1aed      	subeq	r5, r5, r3
 800eca8:	68a3      	ldr	r3, [r4, #8]
 800ecaa:	bf0c      	ite	eq
 800ecac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecb0:	2500      	movne	r5, #0
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	bfc4      	itt	gt
 800ecb6:	1a9b      	subgt	r3, r3, r2
 800ecb8:	18ed      	addgt	r5, r5, r3
 800ecba:	2600      	movs	r6, #0
 800ecbc:	341a      	adds	r4, #26
 800ecbe:	42b5      	cmp	r5, r6
 800ecc0:	d11a      	bne.n	800ecf8 <_printf_common+0xc8>
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	e008      	b.n	800ecd8 <_printf_common+0xa8>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	4652      	mov	r2, sl
 800ecca:	4641      	mov	r1, r8
 800eccc:	4638      	mov	r0, r7
 800ecce:	47c8      	blx	r9
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	d103      	bne.n	800ecdc <_printf_common+0xac>
 800ecd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecdc:	3501      	adds	r5, #1
 800ecde:	e7c6      	b.n	800ec6e <_printf_common+0x3e>
 800ece0:	18e1      	adds	r1, r4, r3
 800ece2:	1c5a      	adds	r2, r3, #1
 800ece4:	2030      	movs	r0, #48	@ 0x30
 800ece6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ecea:	4422      	add	r2, r4
 800ecec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ecf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecf4:	3302      	adds	r3, #2
 800ecf6:	e7c7      	b.n	800ec88 <_printf_common+0x58>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	4622      	mov	r2, r4
 800ecfc:	4641      	mov	r1, r8
 800ecfe:	4638      	mov	r0, r7
 800ed00:	47c8      	blx	r9
 800ed02:	3001      	adds	r0, #1
 800ed04:	d0e6      	beq.n	800ecd4 <_printf_common+0xa4>
 800ed06:	3601      	adds	r6, #1
 800ed08:	e7d9      	b.n	800ecbe <_printf_common+0x8e>
	...

0800ed0c <_printf_i>:
 800ed0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed10:	7e0f      	ldrb	r7, [r1, #24]
 800ed12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed14:	2f78      	cmp	r7, #120	@ 0x78
 800ed16:	4691      	mov	r9, r2
 800ed18:	4680      	mov	r8, r0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	469a      	mov	sl, r3
 800ed1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed22:	d807      	bhi.n	800ed34 <_printf_i+0x28>
 800ed24:	2f62      	cmp	r7, #98	@ 0x62
 800ed26:	d80a      	bhi.n	800ed3e <_printf_i+0x32>
 800ed28:	2f00      	cmp	r7, #0
 800ed2a:	f000 80d2 	beq.w	800eed2 <_printf_i+0x1c6>
 800ed2e:	2f58      	cmp	r7, #88	@ 0x58
 800ed30:	f000 80b9 	beq.w	800eea6 <_printf_i+0x19a>
 800ed34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed3c:	e03a      	b.n	800edb4 <_printf_i+0xa8>
 800ed3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed42:	2b15      	cmp	r3, #21
 800ed44:	d8f6      	bhi.n	800ed34 <_printf_i+0x28>
 800ed46:	a101      	add	r1, pc, #4	@ (adr r1, 800ed4c <_printf_i+0x40>)
 800ed48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed4c:	0800eda5 	.word	0x0800eda5
 800ed50:	0800edb9 	.word	0x0800edb9
 800ed54:	0800ed35 	.word	0x0800ed35
 800ed58:	0800ed35 	.word	0x0800ed35
 800ed5c:	0800ed35 	.word	0x0800ed35
 800ed60:	0800ed35 	.word	0x0800ed35
 800ed64:	0800edb9 	.word	0x0800edb9
 800ed68:	0800ed35 	.word	0x0800ed35
 800ed6c:	0800ed35 	.word	0x0800ed35
 800ed70:	0800ed35 	.word	0x0800ed35
 800ed74:	0800ed35 	.word	0x0800ed35
 800ed78:	0800eeb9 	.word	0x0800eeb9
 800ed7c:	0800ede3 	.word	0x0800ede3
 800ed80:	0800ee73 	.word	0x0800ee73
 800ed84:	0800ed35 	.word	0x0800ed35
 800ed88:	0800ed35 	.word	0x0800ed35
 800ed8c:	0800eedb 	.word	0x0800eedb
 800ed90:	0800ed35 	.word	0x0800ed35
 800ed94:	0800ede3 	.word	0x0800ede3
 800ed98:	0800ed35 	.word	0x0800ed35
 800ed9c:	0800ed35 	.word	0x0800ed35
 800eda0:	0800ee7b 	.word	0x0800ee7b
 800eda4:	6833      	ldr	r3, [r6, #0]
 800eda6:	1d1a      	adds	r2, r3, #4
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6032      	str	r2, [r6, #0]
 800edac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edb4:	2301      	movs	r3, #1
 800edb6:	e09d      	b.n	800eef4 <_printf_i+0x1e8>
 800edb8:	6833      	ldr	r3, [r6, #0]
 800edba:	6820      	ldr	r0, [r4, #0]
 800edbc:	1d19      	adds	r1, r3, #4
 800edbe:	6031      	str	r1, [r6, #0]
 800edc0:	0606      	lsls	r6, r0, #24
 800edc2:	d501      	bpl.n	800edc8 <_printf_i+0xbc>
 800edc4:	681d      	ldr	r5, [r3, #0]
 800edc6:	e003      	b.n	800edd0 <_printf_i+0xc4>
 800edc8:	0645      	lsls	r5, r0, #25
 800edca:	d5fb      	bpl.n	800edc4 <_printf_i+0xb8>
 800edcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	da03      	bge.n	800eddc <_printf_i+0xd0>
 800edd4:	232d      	movs	r3, #45	@ 0x2d
 800edd6:	426d      	negs	r5, r5
 800edd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eddc:	4859      	ldr	r0, [pc, #356]	@ (800ef44 <_printf_i+0x238>)
 800edde:	230a      	movs	r3, #10
 800ede0:	e011      	b.n	800ee06 <_printf_i+0xfa>
 800ede2:	6821      	ldr	r1, [r4, #0]
 800ede4:	6833      	ldr	r3, [r6, #0]
 800ede6:	0608      	lsls	r0, r1, #24
 800ede8:	f853 5b04 	ldr.w	r5, [r3], #4
 800edec:	d402      	bmi.n	800edf4 <_printf_i+0xe8>
 800edee:	0649      	lsls	r1, r1, #25
 800edf0:	bf48      	it	mi
 800edf2:	b2ad      	uxthmi	r5, r5
 800edf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800edf6:	4853      	ldr	r0, [pc, #332]	@ (800ef44 <_printf_i+0x238>)
 800edf8:	6033      	str	r3, [r6, #0]
 800edfa:	bf14      	ite	ne
 800edfc:	230a      	movne	r3, #10
 800edfe:	2308      	moveq	r3, #8
 800ee00:	2100      	movs	r1, #0
 800ee02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee06:	6866      	ldr	r6, [r4, #4]
 800ee08:	60a6      	str	r6, [r4, #8]
 800ee0a:	2e00      	cmp	r6, #0
 800ee0c:	bfa2      	ittt	ge
 800ee0e:	6821      	ldrge	r1, [r4, #0]
 800ee10:	f021 0104 	bicge.w	r1, r1, #4
 800ee14:	6021      	strge	r1, [r4, #0]
 800ee16:	b90d      	cbnz	r5, 800ee1c <_printf_i+0x110>
 800ee18:	2e00      	cmp	r6, #0
 800ee1a:	d04b      	beq.n	800eeb4 <_printf_i+0x1a8>
 800ee1c:	4616      	mov	r6, r2
 800ee1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee22:	fb03 5711 	mls	r7, r3, r1, r5
 800ee26:	5dc7      	ldrb	r7, [r0, r7]
 800ee28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee2c:	462f      	mov	r7, r5
 800ee2e:	42bb      	cmp	r3, r7
 800ee30:	460d      	mov	r5, r1
 800ee32:	d9f4      	bls.n	800ee1e <_printf_i+0x112>
 800ee34:	2b08      	cmp	r3, #8
 800ee36:	d10b      	bne.n	800ee50 <_printf_i+0x144>
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	07df      	lsls	r7, r3, #31
 800ee3c:	d508      	bpl.n	800ee50 <_printf_i+0x144>
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	6861      	ldr	r1, [r4, #4]
 800ee42:	4299      	cmp	r1, r3
 800ee44:	bfde      	ittt	le
 800ee46:	2330      	movle	r3, #48	@ 0x30
 800ee48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee50:	1b92      	subs	r2, r2, r6
 800ee52:	6122      	str	r2, [r4, #16]
 800ee54:	f8cd a000 	str.w	sl, [sp]
 800ee58:	464b      	mov	r3, r9
 800ee5a:	aa03      	add	r2, sp, #12
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4640      	mov	r0, r8
 800ee60:	f7ff fee6 	bl	800ec30 <_printf_common>
 800ee64:	3001      	adds	r0, #1
 800ee66:	d14a      	bne.n	800eefe <_printf_i+0x1f2>
 800ee68:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6c:	b004      	add	sp, #16
 800ee6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	f043 0320 	orr.w	r3, r3, #32
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	4833      	ldr	r0, [pc, #204]	@ (800ef48 <_printf_i+0x23c>)
 800ee7c:	2778      	movs	r7, #120	@ 0x78
 800ee7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	6831      	ldr	r1, [r6, #0]
 800ee86:	061f      	lsls	r7, r3, #24
 800ee88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee8c:	d402      	bmi.n	800ee94 <_printf_i+0x188>
 800ee8e:	065f      	lsls	r7, r3, #25
 800ee90:	bf48      	it	mi
 800ee92:	b2ad      	uxthmi	r5, r5
 800ee94:	6031      	str	r1, [r6, #0]
 800ee96:	07d9      	lsls	r1, r3, #31
 800ee98:	bf44      	itt	mi
 800ee9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee9e:	6023      	strmi	r3, [r4, #0]
 800eea0:	b11d      	cbz	r5, 800eeaa <_printf_i+0x19e>
 800eea2:	2310      	movs	r3, #16
 800eea4:	e7ac      	b.n	800ee00 <_printf_i+0xf4>
 800eea6:	4827      	ldr	r0, [pc, #156]	@ (800ef44 <_printf_i+0x238>)
 800eea8:	e7e9      	b.n	800ee7e <_printf_i+0x172>
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	f023 0320 	bic.w	r3, r3, #32
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	e7f6      	b.n	800eea2 <_printf_i+0x196>
 800eeb4:	4616      	mov	r6, r2
 800eeb6:	e7bd      	b.n	800ee34 <_printf_i+0x128>
 800eeb8:	6833      	ldr	r3, [r6, #0]
 800eeba:	6825      	ldr	r5, [r4, #0]
 800eebc:	6961      	ldr	r1, [r4, #20]
 800eebe:	1d18      	adds	r0, r3, #4
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	062e      	lsls	r6, r5, #24
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	d501      	bpl.n	800eecc <_printf_i+0x1c0>
 800eec8:	6019      	str	r1, [r3, #0]
 800eeca:	e002      	b.n	800eed2 <_printf_i+0x1c6>
 800eecc:	0668      	lsls	r0, r5, #25
 800eece:	d5fb      	bpl.n	800eec8 <_printf_i+0x1bc>
 800eed0:	8019      	strh	r1, [r3, #0]
 800eed2:	2300      	movs	r3, #0
 800eed4:	6123      	str	r3, [r4, #16]
 800eed6:	4616      	mov	r6, r2
 800eed8:	e7bc      	b.n	800ee54 <_printf_i+0x148>
 800eeda:	6833      	ldr	r3, [r6, #0]
 800eedc:	1d1a      	adds	r2, r3, #4
 800eede:	6032      	str	r2, [r6, #0]
 800eee0:	681e      	ldr	r6, [r3, #0]
 800eee2:	6862      	ldr	r2, [r4, #4]
 800eee4:	2100      	movs	r1, #0
 800eee6:	4630      	mov	r0, r6
 800eee8:	f7f1 f982 	bl	80001f0 <memchr>
 800eeec:	b108      	cbz	r0, 800eef2 <_printf_i+0x1e6>
 800eeee:	1b80      	subs	r0, r0, r6
 800eef0:	6060      	str	r0, [r4, #4]
 800eef2:	6863      	ldr	r3, [r4, #4]
 800eef4:	6123      	str	r3, [r4, #16]
 800eef6:	2300      	movs	r3, #0
 800eef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eefc:	e7aa      	b.n	800ee54 <_printf_i+0x148>
 800eefe:	6923      	ldr	r3, [r4, #16]
 800ef00:	4632      	mov	r2, r6
 800ef02:	4649      	mov	r1, r9
 800ef04:	4640      	mov	r0, r8
 800ef06:	47d0      	blx	sl
 800ef08:	3001      	adds	r0, #1
 800ef0a:	d0ad      	beq.n	800ee68 <_printf_i+0x15c>
 800ef0c:	6823      	ldr	r3, [r4, #0]
 800ef0e:	079b      	lsls	r3, r3, #30
 800ef10:	d413      	bmi.n	800ef3a <_printf_i+0x22e>
 800ef12:	68e0      	ldr	r0, [r4, #12]
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	4298      	cmp	r0, r3
 800ef18:	bfb8      	it	lt
 800ef1a:	4618      	movlt	r0, r3
 800ef1c:	e7a6      	b.n	800ee6c <_printf_i+0x160>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	4632      	mov	r2, r6
 800ef22:	4649      	mov	r1, r9
 800ef24:	4640      	mov	r0, r8
 800ef26:	47d0      	blx	sl
 800ef28:	3001      	adds	r0, #1
 800ef2a:	d09d      	beq.n	800ee68 <_printf_i+0x15c>
 800ef2c:	3501      	adds	r5, #1
 800ef2e:	68e3      	ldr	r3, [r4, #12]
 800ef30:	9903      	ldr	r1, [sp, #12]
 800ef32:	1a5b      	subs	r3, r3, r1
 800ef34:	42ab      	cmp	r3, r5
 800ef36:	dcf2      	bgt.n	800ef1e <_printf_i+0x212>
 800ef38:	e7eb      	b.n	800ef12 <_printf_i+0x206>
 800ef3a:	2500      	movs	r5, #0
 800ef3c:	f104 0619 	add.w	r6, r4, #25
 800ef40:	e7f5      	b.n	800ef2e <_printf_i+0x222>
 800ef42:	bf00      	nop
 800ef44:	08015bb1 	.word	0x08015bb1
 800ef48:	08015bc2 	.word	0x08015bc2

0800ef4c <_scanf_float>:
 800ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef50:	b087      	sub	sp, #28
 800ef52:	4617      	mov	r7, r2
 800ef54:	9303      	str	r3, [sp, #12]
 800ef56:	688b      	ldr	r3, [r1, #8]
 800ef58:	1e5a      	subs	r2, r3, #1
 800ef5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ef5e:	bf81      	itttt	hi
 800ef60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ef64:	eb03 0b05 	addhi.w	fp, r3, r5
 800ef68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ef6c:	608b      	strhi	r3, [r1, #8]
 800ef6e:	680b      	ldr	r3, [r1, #0]
 800ef70:	460a      	mov	r2, r1
 800ef72:	f04f 0500 	mov.w	r5, #0
 800ef76:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ef7a:	f842 3b1c 	str.w	r3, [r2], #28
 800ef7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef82:	4680      	mov	r8, r0
 800ef84:	460c      	mov	r4, r1
 800ef86:	bf98      	it	ls
 800ef88:	f04f 0b00 	movls.w	fp, #0
 800ef8c:	9201      	str	r2, [sp, #4]
 800ef8e:	4616      	mov	r6, r2
 800ef90:	46aa      	mov	sl, r5
 800ef92:	46a9      	mov	r9, r5
 800ef94:	9502      	str	r5, [sp, #8]
 800ef96:	68a2      	ldr	r2, [r4, #8]
 800ef98:	b152      	cbz	r2, 800efb0 <_scanf_float+0x64>
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	2b4e      	cmp	r3, #78	@ 0x4e
 800efa0:	d864      	bhi.n	800f06c <_scanf_float+0x120>
 800efa2:	2b40      	cmp	r3, #64	@ 0x40
 800efa4:	d83c      	bhi.n	800f020 <_scanf_float+0xd4>
 800efa6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800efaa:	b2c8      	uxtb	r0, r1
 800efac:	280e      	cmp	r0, #14
 800efae:	d93a      	bls.n	800f026 <_scanf_float+0xda>
 800efb0:	f1b9 0f00 	cmp.w	r9, #0
 800efb4:	d003      	beq.n	800efbe <_scanf_float+0x72>
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efbc:	6023      	str	r3, [r4, #0]
 800efbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efc2:	f1ba 0f01 	cmp.w	sl, #1
 800efc6:	f200 8117 	bhi.w	800f1f8 <_scanf_float+0x2ac>
 800efca:	9b01      	ldr	r3, [sp, #4]
 800efcc:	429e      	cmp	r6, r3
 800efce:	f200 8108 	bhi.w	800f1e2 <_scanf_float+0x296>
 800efd2:	2001      	movs	r0, #1
 800efd4:	b007      	add	sp, #28
 800efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efda:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800efde:	2a0d      	cmp	r2, #13
 800efe0:	d8e6      	bhi.n	800efb0 <_scanf_float+0x64>
 800efe2:	a101      	add	r1, pc, #4	@ (adr r1, 800efe8 <_scanf_float+0x9c>)
 800efe4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800efe8:	0800f12f 	.word	0x0800f12f
 800efec:	0800efb1 	.word	0x0800efb1
 800eff0:	0800efb1 	.word	0x0800efb1
 800eff4:	0800efb1 	.word	0x0800efb1
 800eff8:	0800f18f 	.word	0x0800f18f
 800effc:	0800f167 	.word	0x0800f167
 800f000:	0800efb1 	.word	0x0800efb1
 800f004:	0800efb1 	.word	0x0800efb1
 800f008:	0800f13d 	.word	0x0800f13d
 800f00c:	0800efb1 	.word	0x0800efb1
 800f010:	0800efb1 	.word	0x0800efb1
 800f014:	0800efb1 	.word	0x0800efb1
 800f018:	0800efb1 	.word	0x0800efb1
 800f01c:	0800f0f5 	.word	0x0800f0f5
 800f020:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f024:	e7db      	b.n	800efde <_scanf_float+0x92>
 800f026:	290e      	cmp	r1, #14
 800f028:	d8c2      	bhi.n	800efb0 <_scanf_float+0x64>
 800f02a:	a001      	add	r0, pc, #4	@ (adr r0, 800f030 <_scanf_float+0xe4>)
 800f02c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f030:	0800f0e5 	.word	0x0800f0e5
 800f034:	0800efb1 	.word	0x0800efb1
 800f038:	0800f0e5 	.word	0x0800f0e5
 800f03c:	0800f17b 	.word	0x0800f17b
 800f040:	0800efb1 	.word	0x0800efb1
 800f044:	0800f08d 	.word	0x0800f08d
 800f048:	0800f0cb 	.word	0x0800f0cb
 800f04c:	0800f0cb 	.word	0x0800f0cb
 800f050:	0800f0cb 	.word	0x0800f0cb
 800f054:	0800f0cb 	.word	0x0800f0cb
 800f058:	0800f0cb 	.word	0x0800f0cb
 800f05c:	0800f0cb 	.word	0x0800f0cb
 800f060:	0800f0cb 	.word	0x0800f0cb
 800f064:	0800f0cb 	.word	0x0800f0cb
 800f068:	0800f0cb 	.word	0x0800f0cb
 800f06c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f06e:	d809      	bhi.n	800f084 <_scanf_float+0x138>
 800f070:	2b60      	cmp	r3, #96	@ 0x60
 800f072:	d8b2      	bhi.n	800efda <_scanf_float+0x8e>
 800f074:	2b54      	cmp	r3, #84	@ 0x54
 800f076:	d07b      	beq.n	800f170 <_scanf_float+0x224>
 800f078:	2b59      	cmp	r3, #89	@ 0x59
 800f07a:	d199      	bne.n	800efb0 <_scanf_float+0x64>
 800f07c:	2d07      	cmp	r5, #7
 800f07e:	d197      	bne.n	800efb0 <_scanf_float+0x64>
 800f080:	2508      	movs	r5, #8
 800f082:	e02c      	b.n	800f0de <_scanf_float+0x192>
 800f084:	2b74      	cmp	r3, #116	@ 0x74
 800f086:	d073      	beq.n	800f170 <_scanf_float+0x224>
 800f088:	2b79      	cmp	r3, #121	@ 0x79
 800f08a:	e7f6      	b.n	800f07a <_scanf_float+0x12e>
 800f08c:	6821      	ldr	r1, [r4, #0]
 800f08e:	05c8      	lsls	r0, r1, #23
 800f090:	d51b      	bpl.n	800f0ca <_scanf_float+0x17e>
 800f092:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f096:	6021      	str	r1, [r4, #0]
 800f098:	f109 0901 	add.w	r9, r9, #1
 800f09c:	f1bb 0f00 	cmp.w	fp, #0
 800f0a0:	d003      	beq.n	800f0aa <_scanf_float+0x15e>
 800f0a2:	3201      	adds	r2, #1
 800f0a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0a8:	60a2      	str	r2, [r4, #8]
 800f0aa:	68a3      	ldr	r3, [r4, #8]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	60a3      	str	r3, [r4, #8]
 800f0b0:	6923      	ldr	r3, [r4, #16]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	f340 8087 	ble.w	800f1d0 <_scanf_float+0x284>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	603b      	str	r3, [r7, #0]
 800f0c8:	e765      	b.n	800ef96 <_scanf_float+0x4a>
 800f0ca:	eb1a 0105 	adds.w	r1, sl, r5
 800f0ce:	f47f af6f 	bne.w	800efb0 <_scanf_float+0x64>
 800f0d2:	6822      	ldr	r2, [r4, #0]
 800f0d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f0d8:	6022      	str	r2, [r4, #0]
 800f0da:	460d      	mov	r5, r1
 800f0dc:	468a      	mov	sl, r1
 800f0de:	f806 3b01 	strb.w	r3, [r6], #1
 800f0e2:	e7e2      	b.n	800f0aa <_scanf_float+0x15e>
 800f0e4:	6822      	ldr	r2, [r4, #0]
 800f0e6:	0610      	lsls	r0, r2, #24
 800f0e8:	f57f af62 	bpl.w	800efb0 <_scanf_float+0x64>
 800f0ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f0f0:	6022      	str	r2, [r4, #0]
 800f0f2:	e7f4      	b.n	800f0de <_scanf_float+0x192>
 800f0f4:	f1ba 0f00 	cmp.w	sl, #0
 800f0f8:	d10e      	bne.n	800f118 <_scanf_float+0x1cc>
 800f0fa:	f1b9 0f00 	cmp.w	r9, #0
 800f0fe:	d10e      	bne.n	800f11e <_scanf_float+0x1d2>
 800f100:	6822      	ldr	r2, [r4, #0]
 800f102:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f106:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f10a:	d108      	bne.n	800f11e <_scanf_float+0x1d2>
 800f10c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f110:	6022      	str	r2, [r4, #0]
 800f112:	f04f 0a01 	mov.w	sl, #1
 800f116:	e7e2      	b.n	800f0de <_scanf_float+0x192>
 800f118:	f1ba 0f02 	cmp.w	sl, #2
 800f11c:	d055      	beq.n	800f1ca <_scanf_float+0x27e>
 800f11e:	2d01      	cmp	r5, #1
 800f120:	d002      	beq.n	800f128 <_scanf_float+0x1dc>
 800f122:	2d04      	cmp	r5, #4
 800f124:	f47f af44 	bne.w	800efb0 <_scanf_float+0x64>
 800f128:	3501      	adds	r5, #1
 800f12a:	b2ed      	uxtb	r5, r5
 800f12c:	e7d7      	b.n	800f0de <_scanf_float+0x192>
 800f12e:	f1ba 0f01 	cmp.w	sl, #1
 800f132:	f47f af3d 	bne.w	800efb0 <_scanf_float+0x64>
 800f136:	f04f 0a02 	mov.w	sl, #2
 800f13a:	e7d0      	b.n	800f0de <_scanf_float+0x192>
 800f13c:	b97d      	cbnz	r5, 800f15e <_scanf_float+0x212>
 800f13e:	f1b9 0f00 	cmp.w	r9, #0
 800f142:	f47f af38 	bne.w	800efb6 <_scanf_float+0x6a>
 800f146:	6822      	ldr	r2, [r4, #0]
 800f148:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f14c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f150:	f040 8108 	bne.w	800f364 <_scanf_float+0x418>
 800f154:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f158:	6022      	str	r2, [r4, #0]
 800f15a:	2501      	movs	r5, #1
 800f15c:	e7bf      	b.n	800f0de <_scanf_float+0x192>
 800f15e:	2d03      	cmp	r5, #3
 800f160:	d0e2      	beq.n	800f128 <_scanf_float+0x1dc>
 800f162:	2d05      	cmp	r5, #5
 800f164:	e7de      	b.n	800f124 <_scanf_float+0x1d8>
 800f166:	2d02      	cmp	r5, #2
 800f168:	f47f af22 	bne.w	800efb0 <_scanf_float+0x64>
 800f16c:	2503      	movs	r5, #3
 800f16e:	e7b6      	b.n	800f0de <_scanf_float+0x192>
 800f170:	2d06      	cmp	r5, #6
 800f172:	f47f af1d 	bne.w	800efb0 <_scanf_float+0x64>
 800f176:	2507      	movs	r5, #7
 800f178:	e7b1      	b.n	800f0de <_scanf_float+0x192>
 800f17a:	6822      	ldr	r2, [r4, #0]
 800f17c:	0591      	lsls	r1, r2, #22
 800f17e:	f57f af17 	bpl.w	800efb0 <_scanf_float+0x64>
 800f182:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	f8cd 9008 	str.w	r9, [sp, #8]
 800f18c:	e7a7      	b.n	800f0de <_scanf_float+0x192>
 800f18e:	6822      	ldr	r2, [r4, #0]
 800f190:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f194:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f198:	d006      	beq.n	800f1a8 <_scanf_float+0x25c>
 800f19a:	0550      	lsls	r0, r2, #21
 800f19c:	f57f af08 	bpl.w	800efb0 <_scanf_float+0x64>
 800f1a0:	f1b9 0f00 	cmp.w	r9, #0
 800f1a4:	f000 80de 	beq.w	800f364 <_scanf_float+0x418>
 800f1a8:	0591      	lsls	r1, r2, #22
 800f1aa:	bf58      	it	pl
 800f1ac:	9902      	ldrpl	r1, [sp, #8]
 800f1ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1b2:	bf58      	it	pl
 800f1b4:	eba9 0101 	subpl.w	r1, r9, r1
 800f1b8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f1bc:	bf58      	it	pl
 800f1be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f1c2:	6022      	str	r2, [r4, #0]
 800f1c4:	f04f 0900 	mov.w	r9, #0
 800f1c8:	e789      	b.n	800f0de <_scanf_float+0x192>
 800f1ca:	f04f 0a03 	mov.w	sl, #3
 800f1ce:	e786      	b.n	800f0de <_scanf_float+0x192>
 800f1d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	4798      	blx	r3
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f43f aedb 	beq.w	800ef96 <_scanf_float+0x4a>
 800f1e0:	e6e6      	b.n	800efb0 <_scanf_float+0x64>
 800f1e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1ea:	463a      	mov	r2, r7
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4798      	blx	r3
 800f1f0:	6923      	ldr	r3, [r4, #16]
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	6123      	str	r3, [r4, #16]
 800f1f6:	e6e8      	b.n	800efca <_scanf_float+0x7e>
 800f1f8:	1e6b      	subs	r3, r5, #1
 800f1fa:	2b06      	cmp	r3, #6
 800f1fc:	d824      	bhi.n	800f248 <_scanf_float+0x2fc>
 800f1fe:	2d02      	cmp	r5, #2
 800f200:	d836      	bhi.n	800f270 <_scanf_float+0x324>
 800f202:	9b01      	ldr	r3, [sp, #4]
 800f204:	429e      	cmp	r6, r3
 800f206:	f67f aee4 	bls.w	800efd2 <_scanf_float+0x86>
 800f20a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f20e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f212:	463a      	mov	r2, r7
 800f214:	4640      	mov	r0, r8
 800f216:	4798      	blx	r3
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	6123      	str	r3, [r4, #16]
 800f21e:	e7f0      	b.n	800f202 <_scanf_float+0x2b6>
 800f220:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f224:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f228:	463a      	mov	r2, r7
 800f22a:	4640      	mov	r0, r8
 800f22c:	4798      	blx	r3
 800f22e:	6923      	ldr	r3, [r4, #16]
 800f230:	3b01      	subs	r3, #1
 800f232:	6123      	str	r3, [r4, #16]
 800f234:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f238:	fa5f fa8a 	uxtb.w	sl, sl
 800f23c:	f1ba 0f02 	cmp.w	sl, #2
 800f240:	d1ee      	bne.n	800f220 <_scanf_float+0x2d4>
 800f242:	3d03      	subs	r5, #3
 800f244:	b2ed      	uxtb	r5, r5
 800f246:	1b76      	subs	r6, r6, r5
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	05da      	lsls	r2, r3, #23
 800f24c:	d530      	bpl.n	800f2b0 <_scanf_float+0x364>
 800f24e:	055b      	lsls	r3, r3, #21
 800f250:	d511      	bpl.n	800f276 <_scanf_float+0x32a>
 800f252:	9b01      	ldr	r3, [sp, #4]
 800f254:	429e      	cmp	r6, r3
 800f256:	f67f aebc 	bls.w	800efd2 <_scanf_float+0x86>
 800f25a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f25e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f262:	463a      	mov	r2, r7
 800f264:	4640      	mov	r0, r8
 800f266:	4798      	blx	r3
 800f268:	6923      	ldr	r3, [r4, #16]
 800f26a:	3b01      	subs	r3, #1
 800f26c:	6123      	str	r3, [r4, #16]
 800f26e:	e7f0      	b.n	800f252 <_scanf_float+0x306>
 800f270:	46aa      	mov	sl, r5
 800f272:	46b3      	mov	fp, r6
 800f274:	e7de      	b.n	800f234 <_scanf_float+0x2e8>
 800f276:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f27a:	6923      	ldr	r3, [r4, #16]
 800f27c:	2965      	cmp	r1, #101	@ 0x65
 800f27e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f282:	f106 35ff 	add.w	r5, r6, #4294967295
 800f286:	6123      	str	r3, [r4, #16]
 800f288:	d00c      	beq.n	800f2a4 <_scanf_float+0x358>
 800f28a:	2945      	cmp	r1, #69	@ 0x45
 800f28c:	d00a      	beq.n	800f2a4 <_scanf_float+0x358>
 800f28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f292:	463a      	mov	r2, r7
 800f294:	4640      	mov	r0, r8
 800f296:	4798      	blx	r3
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	1eb5      	subs	r5, r6, #2
 800f2a2:	6123      	str	r3, [r4, #16]
 800f2a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2a8:	463a      	mov	r2, r7
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	4798      	blx	r3
 800f2ae:	462e      	mov	r6, r5
 800f2b0:	6822      	ldr	r2, [r4, #0]
 800f2b2:	f012 0210 	ands.w	r2, r2, #16
 800f2b6:	d001      	beq.n	800f2bc <_scanf_float+0x370>
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	e68b      	b.n	800efd4 <_scanf_float+0x88>
 800f2bc:	7032      	strb	r2, [r6, #0]
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2c8:	d11c      	bne.n	800f304 <_scanf_float+0x3b8>
 800f2ca:	9b02      	ldr	r3, [sp, #8]
 800f2cc:	454b      	cmp	r3, r9
 800f2ce:	eba3 0209 	sub.w	r2, r3, r9
 800f2d2:	d123      	bne.n	800f31c <_scanf_float+0x3d0>
 800f2d4:	9901      	ldr	r1, [sp, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4640      	mov	r0, r8
 800f2da:	f7ff f9cd 	bl	800e678 <_strtod_r>
 800f2de:	9b03      	ldr	r3, [sp, #12]
 800f2e0:	6821      	ldr	r1, [r4, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f011 0f02 	tst.w	r1, #2
 800f2e8:	ec57 6b10 	vmov	r6, r7, d0
 800f2ec:	f103 0204 	add.w	r2, r3, #4
 800f2f0:	d01f      	beq.n	800f332 <_scanf_float+0x3e6>
 800f2f2:	9903      	ldr	r1, [sp, #12]
 800f2f4:	600a      	str	r2, [r1, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	e9c3 6700 	strd	r6, r7, [r3]
 800f2fc:	68e3      	ldr	r3, [r4, #12]
 800f2fe:	3301      	adds	r3, #1
 800f300:	60e3      	str	r3, [r4, #12]
 800f302:	e7d9      	b.n	800f2b8 <_scanf_float+0x36c>
 800f304:	9b04      	ldr	r3, [sp, #16]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d0e4      	beq.n	800f2d4 <_scanf_float+0x388>
 800f30a:	9905      	ldr	r1, [sp, #20]
 800f30c:	230a      	movs	r3, #10
 800f30e:	3101      	adds	r1, #1
 800f310:	4640      	mov	r0, r8
 800f312:	f002 fafb 	bl	801190c <_strtol_r>
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	9e05      	ldr	r6, [sp, #20]
 800f31a:	1ac2      	subs	r2, r0, r3
 800f31c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f320:	429e      	cmp	r6, r3
 800f322:	bf28      	it	cs
 800f324:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f328:	4910      	ldr	r1, [pc, #64]	@ (800f36c <_scanf_float+0x420>)
 800f32a:	4630      	mov	r0, r6
 800f32c:	f000 f966 	bl	800f5fc <siprintf>
 800f330:	e7d0      	b.n	800f2d4 <_scanf_float+0x388>
 800f332:	f011 0f04 	tst.w	r1, #4
 800f336:	9903      	ldr	r1, [sp, #12]
 800f338:	600a      	str	r2, [r1, #0]
 800f33a:	d1dc      	bne.n	800f2f6 <_scanf_float+0x3aa>
 800f33c:	681d      	ldr	r5, [r3, #0]
 800f33e:	4632      	mov	r2, r6
 800f340:	463b      	mov	r3, r7
 800f342:	4630      	mov	r0, r6
 800f344:	4639      	mov	r1, r7
 800f346:	f7f1 fc01 	bl	8000b4c <__aeabi_dcmpun>
 800f34a:	b128      	cbz	r0, 800f358 <_scanf_float+0x40c>
 800f34c:	4808      	ldr	r0, [pc, #32]	@ (800f370 <_scanf_float+0x424>)
 800f34e:	f000 fba3 	bl	800fa98 <nanf>
 800f352:	ed85 0a00 	vstr	s0, [r5]
 800f356:	e7d1      	b.n	800f2fc <_scanf_float+0x3b0>
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f1 fc54 	bl	8000c08 <__aeabi_d2f>
 800f360:	6028      	str	r0, [r5, #0]
 800f362:	e7cb      	b.n	800f2fc <_scanf_float+0x3b0>
 800f364:	f04f 0900 	mov.w	r9, #0
 800f368:	e629      	b.n	800efbe <_scanf_float+0x72>
 800f36a:	bf00      	nop
 800f36c:	08015bd3 	.word	0x08015bd3
 800f370:	08015c8c 	.word	0x08015c8c

0800f374 <std>:
 800f374:	2300      	movs	r3, #0
 800f376:	b510      	push	{r4, lr}
 800f378:	4604      	mov	r4, r0
 800f37a:	e9c0 3300 	strd	r3, r3, [r0]
 800f37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f382:	6083      	str	r3, [r0, #8]
 800f384:	8181      	strh	r1, [r0, #12]
 800f386:	6643      	str	r3, [r0, #100]	@ 0x64
 800f388:	81c2      	strh	r2, [r0, #14]
 800f38a:	6183      	str	r3, [r0, #24]
 800f38c:	4619      	mov	r1, r3
 800f38e:	2208      	movs	r2, #8
 800f390:	305c      	adds	r0, #92	@ 0x5c
 800f392:	f000 fa57 	bl	800f844 <memset>
 800f396:	4b0d      	ldr	r3, [pc, #52]	@ (800f3cc <std+0x58>)
 800f398:	6263      	str	r3, [r4, #36]	@ 0x24
 800f39a:	4b0d      	ldr	r3, [pc, #52]	@ (800f3d0 <std+0x5c>)
 800f39c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f39e:	4b0d      	ldr	r3, [pc, #52]	@ (800f3d4 <std+0x60>)
 800f3a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f3d8 <std+0x64>)
 800f3a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3dc <std+0x68>)
 800f3a8:	6224      	str	r4, [r4, #32]
 800f3aa:	429c      	cmp	r4, r3
 800f3ac:	d006      	beq.n	800f3bc <std+0x48>
 800f3ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3b2:	4294      	cmp	r4, r2
 800f3b4:	d002      	beq.n	800f3bc <std+0x48>
 800f3b6:	33d0      	adds	r3, #208	@ 0xd0
 800f3b8:	429c      	cmp	r4, r3
 800f3ba:	d105      	bne.n	800f3c8 <std+0x54>
 800f3bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c4:	f000 bb4e 	b.w	800fa64 <__retarget_lock_init_recursive>
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	bf00      	nop
 800f3cc:	0800f691 	.word	0x0800f691
 800f3d0:	0800f6b7 	.word	0x0800f6b7
 800f3d4:	0800f6ef 	.word	0x0800f6ef
 800f3d8:	0800f713 	.word	0x0800f713
 800f3dc:	20000fa4 	.word	0x20000fa4

0800f3e0 <stdio_exit_handler>:
 800f3e0:	4a02      	ldr	r2, [pc, #8]	@ (800f3ec <stdio_exit_handler+0xc>)
 800f3e2:	4903      	ldr	r1, [pc, #12]	@ (800f3f0 <stdio_exit_handler+0x10>)
 800f3e4:	4803      	ldr	r0, [pc, #12]	@ (800f3f4 <stdio_exit_handler+0x14>)
 800f3e6:	f000 b87b 	b.w	800f4e0 <_fwalk_sglue>
 800f3ea:	bf00      	nop
 800f3ec:	2000001c 	.word	0x2000001c
 800f3f0:	08012599 	.word	0x08012599
 800f3f4:	20000198 	.word	0x20000198

0800f3f8 <cleanup_stdio>:
 800f3f8:	6841      	ldr	r1, [r0, #4]
 800f3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f42c <cleanup_stdio+0x34>)
 800f3fc:	4299      	cmp	r1, r3
 800f3fe:	b510      	push	{r4, lr}
 800f400:	4604      	mov	r4, r0
 800f402:	d001      	beq.n	800f408 <cleanup_stdio+0x10>
 800f404:	f003 f8c8 	bl	8012598 <_fflush_r>
 800f408:	68a1      	ldr	r1, [r4, #8]
 800f40a:	4b09      	ldr	r3, [pc, #36]	@ (800f430 <cleanup_stdio+0x38>)
 800f40c:	4299      	cmp	r1, r3
 800f40e:	d002      	beq.n	800f416 <cleanup_stdio+0x1e>
 800f410:	4620      	mov	r0, r4
 800f412:	f003 f8c1 	bl	8012598 <_fflush_r>
 800f416:	68e1      	ldr	r1, [r4, #12]
 800f418:	4b06      	ldr	r3, [pc, #24]	@ (800f434 <cleanup_stdio+0x3c>)
 800f41a:	4299      	cmp	r1, r3
 800f41c:	d004      	beq.n	800f428 <cleanup_stdio+0x30>
 800f41e:	4620      	mov	r0, r4
 800f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f424:	f003 b8b8 	b.w	8012598 <_fflush_r>
 800f428:	bd10      	pop	{r4, pc}
 800f42a:	bf00      	nop
 800f42c:	20000fa4 	.word	0x20000fa4
 800f430:	2000100c 	.word	0x2000100c
 800f434:	20001074 	.word	0x20001074

0800f438 <global_stdio_init.part.0>:
 800f438:	b510      	push	{r4, lr}
 800f43a:	4b0b      	ldr	r3, [pc, #44]	@ (800f468 <global_stdio_init.part.0+0x30>)
 800f43c:	4c0b      	ldr	r4, [pc, #44]	@ (800f46c <global_stdio_init.part.0+0x34>)
 800f43e:	4a0c      	ldr	r2, [pc, #48]	@ (800f470 <global_stdio_init.part.0+0x38>)
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	4620      	mov	r0, r4
 800f444:	2200      	movs	r2, #0
 800f446:	2104      	movs	r1, #4
 800f448:	f7ff ff94 	bl	800f374 <std>
 800f44c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f450:	2201      	movs	r2, #1
 800f452:	2109      	movs	r1, #9
 800f454:	f7ff ff8e 	bl	800f374 <std>
 800f458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f45c:	2202      	movs	r2, #2
 800f45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f462:	2112      	movs	r1, #18
 800f464:	f7ff bf86 	b.w	800f374 <std>
 800f468:	200010dc 	.word	0x200010dc
 800f46c:	20000fa4 	.word	0x20000fa4
 800f470:	0800f3e1 	.word	0x0800f3e1

0800f474 <__sfp_lock_acquire>:
 800f474:	4801      	ldr	r0, [pc, #4]	@ (800f47c <__sfp_lock_acquire+0x8>)
 800f476:	f000 baf6 	b.w	800fa66 <__retarget_lock_acquire_recursive>
 800f47a:	bf00      	nop
 800f47c:	200010e5 	.word	0x200010e5

0800f480 <__sfp_lock_release>:
 800f480:	4801      	ldr	r0, [pc, #4]	@ (800f488 <__sfp_lock_release+0x8>)
 800f482:	f000 baf1 	b.w	800fa68 <__retarget_lock_release_recursive>
 800f486:	bf00      	nop
 800f488:	200010e5 	.word	0x200010e5

0800f48c <__sinit>:
 800f48c:	b510      	push	{r4, lr}
 800f48e:	4604      	mov	r4, r0
 800f490:	f7ff fff0 	bl	800f474 <__sfp_lock_acquire>
 800f494:	6a23      	ldr	r3, [r4, #32]
 800f496:	b11b      	cbz	r3, 800f4a0 <__sinit+0x14>
 800f498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f49c:	f7ff bff0 	b.w	800f480 <__sfp_lock_release>
 800f4a0:	4b04      	ldr	r3, [pc, #16]	@ (800f4b4 <__sinit+0x28>)
 800f4a2:	6223      	str	r3, [r4, #32]
 800f4a4:	4b04      	ldr	r3, [pc, #16]	@ (800f4b8 <__sinit+0x2c>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1f5      	bne.n	800f498 <__sinit+0xc>
 800f4ac:	f7ff ffc4 	bl	800f438 <global_stdio_init.part.0>
 800f4b0:	e7f2      	b.n	800f498 <__sinit+0xc>
 800f4b2:	bf00      	nop
 800f4b4:	0800f3f9 	.word	0x0800f3f9
 800f4b8:	200010dc 	.word	0x200010dc

0800f4bc <fiprintf>:
 800f4bc:	b40e      	push	{r1, r2, r3}
 800f4be:	b503      	push	{r0, r1, lr}
 800f4c0:	4601      	mov	r1, r0
 800f4c2:	ab03      	add	r3, sp, #12
 800f4c4:	4805      	ldr	r0, [pc, #20]	@ (800f4dc <fiprintf+0x20>)
 800f4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ca:	6800      	ldr	r0, [r0, #0]
 800f4cc:	9301      	str	r3, [sp, #4]
 800f4ce:	f002 fd79 	bl	8011fc4 <_vfiprintf_r>
 800f4d2:	b002      	add	sp, #8
 800f4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4d8:	b003      	add	sp, #12
 800f4da:	4770      	bx	lr
 800f4dc:	20000194 	.word	0x20000194

0800f4e0 <_fwalk_sglue>:
 800f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e4:	4607      	mov	r7, r0
 800f4e6:	4688      	mov	r8, r1
 800f4e8:	4614      	mov	r4, r2
 800f4ea:	2600      	movs	r6, #0
 800f4ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4f0:	f1b9 0901 	subs.w	r9, r9, #1
 800f4f4:	d505      	bpl.n	800f502 <_fwalk_sglue+0x22>
 800f4f6:	6824      	ldr	r4, [r4, #0]
 800f4f8:	2c00      	cmp	r4, #0
 800f4fa:	d1f7      	bne.n	800f4ec <_fwalk_sglue+0xc>
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f502:	89ab      	ldrh	r3, [r5, #12]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d907      	bls.n	800f518 <_fwalk_sglue+0x38>
 800f508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f50c:	3301      	adds	r3, #1
 800f50e:	d003      	beq.n	800f518 <_fwalk_sglue+0x38>
 800f510:	4629      	mov	r1, r5
 800f512:	4638      	mov	r0, r7
 800f514:	47c0      	blx	r8
 800f516:	4306      	orrs	r6, r0
 800f518:	3568      	adds	r5, #104	@ 0x68
 800f51a:	e7e9      	b.n	800f4f0 <_fwalk_sglue+0x10>

0800f51c <iprintf>:
 800f51c:	b40f      	push	{r0, r1, r2, r3}
 800f51e:	b507      	push	{r0, r1, r2, lr}
 800f520:	4906      	ldr	r1, [pc, #24]	@ (800f53c <iprintf+0x20>)
 800f522:	ab04      	add	r3, sp, #16
 800f524:	6808      	ldr	r0, [r1, #0]
 800f526:	f853 2b04 	ldr.w	r2, [r3], #4
 800f52a:	6881      	ldr	r1, [r0, #8]
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	f002 fd49 	bl	8011fc4 <_vfiprintf_r>
 800f532:	b003      	add	sp, #12
 800f534:	f85d eb04 	ldr.w	lr, [sp], #4
 800f538:	b004      	add	sp, #16
 800f53a:	4770      	bx	lr
 800f53c:	20000194 	.word	0x20000194

0800f540 <_puts_r>:
 800f540:	6a03      	ldr	r3, [r0, #32]
 800f542:	b570      	push	{r4, r5, r6, lr}
 800f544:	6884      	ldr	r4, [r0, #8]
 800f546:	4605      	mov	r5, r0
 800f548:	460e      	mov	r6, r1
 800f54a:	b90b      	cbnz	r3, 800f550 <_puts_r+0x10>
 800f54c:	f7ff ff9e 	bl	800f48c <__sinit>
 800f550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f552:	07db      	lsls	r3, r3, #31
 800f554:	d405      	bmi.n	800f562 <_puts_r+0x22>
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	0598      	lsls	r0, r3, #22
 800f55a:	d402      	bmi.n	800f562 <_puts_r+0x22>
 800f55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f55e:	f000 fa82 	bl	800fa66 <__retarget_lock_acquire_recursive>
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	0719      	lsls	r1, r3, #28
 800f566:	d502      	bpl.n	800f56e <_puts_r+0x2e>
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d135      	bne.n	800f5da <_puts_r+0x9a>
 800f56e:	4621      	mov	r1, r4
 800f570:	4628      	mov	r0, r5
 800f572:	f000 f911 	bl	800f798 <__swsetup_r>
 800f576:	b380      	cbz	r0, 800f5da <_puts_r+0x9a>
 800f578:	f04f 35ff 	mov.w	r5, #4294967295
 800f57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f57e:	07da      	lsls	r2, r3, #31
 800f580:	d405      	bmi.n	800f58e <_puts_r+0x4e>
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	059b      	lsls	r3, r3, #22
 800f586:	d402      	bmi.n	800f58e <_puts_r+0x4e>
 800f588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f58a:	f000 fa6d 	bl	800fa68 <__retarget_lock_release_recursive>
 800f58e:	4628      	mov	r0, r5
 800f590:	bd70      	pop	{r4, r5, r6, pc}
 800f592:	2b00      	cmp	r3, #0
 800f594:	da04      	bge.n	800f5a0 <_puts_r+0x60>
 800f596:	69a2      	ldr	r2, [r4, #24]
 800f598:	429a      	cmp	r2, r3
 800f59a:	dc17      	bgt.n	800f5cc <_puts_r+0x8c>
 800f59c:	290a      	cmp	r1, #10
 800f59e:	d015      	beq.n	800f5cc <_puts_r+0x8c>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	6022      	str	r2, [r4, #0]
 800f5a6:	7019      	strb	r1, [r3, #0]
 800f5a8:	68a3      	ldr	r3, [r4, #8]
 800f5aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	60a3      	str	r3, [r4, #8]
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d1ed      	bne.n	800f592 <_puts_r+0x52>
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	da11      	bge.n	800f5de <_puts_r+0x9e>
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	210a      	movs	r1, #10
 800f5be:	4628      	mov	r0, r5
 800f5c0:	f000 f8ab 	bl	800f71a <__swbuf_r>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d0d7      	beq.n	800f578 <_puts_r+0x38>
 800f5c8:	250a      	movs	r5, #10
 800f5ca:	e7d7      	b.n	800f57c <_puts_r+0x3c>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f000 f8a3 	bl	800f71a <__swbuf_r>
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	d1e7      	bne.n	800f5a8 <_puts_r+0x68>
 800f5d8:	e7ce      	b.n	800f578 <_puts_r+0x38>
 800f5da:	3e01      	subs	r6, #1
 800f5dc:	e7e4      	b.n	800f5a8 <_puts_r+0x68>
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	6022      	str	r2, [r4, #0]
 800f5e4:	220a      	movs	r2, #10
 800f5e6:	701a      	strb	r2, [r3, #0]
 800f5e8:	e7ee      	b.n	800f5c8 <_puts_r+0x88>
	...

0800f5ec <puts>:
 800f5ec:	4b02      	ldr	r3, [pc, #8]	@ (800f5f8 <puts+0xc>)
 800f5ee:	4601      	mov	r1, r0
 800f5f0:	6818      	ldr	r0, [r3, #0]
 800f5f2:	f7ff bfa5 	b.w	800f540 <_puts_r>
 800f5f6:	bf00      	nop
 800f5f8:	20000194 	.word	0x20000194

0800f5fc <siprintf>:
 800f5fc:	b40e      	push	{r1, r2, r3}
 800f5fe:	b500      	push	{lr}
 800f600:	b09c      	sub	sp, #112	@ 0x70
 800f602:	ab1d      	add	r3, sp, #116	@ 0x74
 800f604:	9002      	str	r0, [sp, #8]
 800f606:	9006      	str	r0, [sp, #24]
 800f608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f60c:	4809      	ldr	r0, [pc, #36]	@ (800f634 <siprintf+0x38>)
 800f60e:	9107      	str	r1, [sp, #28]
 800f610:	9104      	str	r1, [sp, #16]
 800f612:	4909      	ldr	r1, [pc, #36]	@ (800f638 <siprintf+0x3c>)
 800f614:	f853 2b04 	ldr.w	r2, [r3], #4
 800f618:	9105      	str	r1, [sp, #20]
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	a902      	add	r1, sp, #8
 800f620:	f002 f9de 	bl	80119e0 <_svfiprintf_r>
 800f624:	9b02      	ldr	r3, [sp, #8]
 800f626:	2200      	movs	r2, #0
 800f628:	701a      	strb	r2, [r3, #0]
 800f62a:	b01c      	add	sp, #112	@ 0x70
 800f62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f630:	b003      	add	sp, #12
 800f632:	4770      	bx	lr
 800f634:	20000194 	.word	0x20000194
 800f638:	ffff0208 	.word	0xffff0208

0800f63c <siscanf>:
 800f63c:	b40e      	push	{r1, r2, r3}
 800f63e:	b530      	push	{r4, r5, lr}
 800f640:	b09c      	sub	sp, #112	@ 0x70
 800f642:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f644:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f648:	f854 5b04 	ldr.w	r5, [r4], #4
 800f64c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f650:	9002      	str	r0, [sp, #8]
 800f652:	9006      	str	r0, [sp, #24]
 800f654:	f7f0 fe1c 	bl	8000290 <strlen>
 800f658:	4b0b      	ldr	r3, [pc, #44]	@ (800f688 <siscanf+0x4c>)
 800f65a:	9003      	str	r0, [sp, #12]
 800f65c:	9007      	str	r0, [sp, #28]
 800f65e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f660:	480a      	ldr	r0, [pc, #40]	@ (800f68c <siscanf+0x50>)
 800f662:	9401      	str	r4, [sp, #4]
 800f664:	2300      	movs	r3, #0
 800f666:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f668:	9314      	str	r3, [sp, #80]	@ 0x50
 800f66a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f66e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f672:	462a      	mov	r2, r5
 800f674:	4623      	mov	r3, r4
 800f676:	a902      	add	r1, sp, #8
 800f678:	6800      	ldr	r0, [r0, #0]
 800f67a:	f002 fb05 	bl	8011c88 <__ssvfiscanf_r>
 800f67e:	b01c      	add	sp, #112	@ 0x70
 800f680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f684:	b003      	add	sp, #12
 800f686:	4770      	bx	lr
 800f688:	0800f6b3 	.word	0x0800f6b3
 800f68c:	20000194 	.word	0x20000194

0800f690 <__sread>:
 800f690:	b510      	push	{r4, lr}
 800f692:	460c      	mov	r4, r1
 800f694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f698:	f000 f986 	bl	800f9a8 <_read_r>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	bfab      	itete	ge
 800f6a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a4:	181b      	addge	r3, r3, r0
 800f6a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6aa:	bfac      	ite	ge
 800f6ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6ae:	81a3      	strhlt	r3, [r4, #12]
 800f6b0:	bd10      	pop	{r4, pc}

0800f6b2 <__seofread>:
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	4770      	bx	lr

0800f6b6 <__swrite>:
 800f6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ba:	461f      	mov	r7, r3
 800f6bc:	898b      	ldrh	r3, [r1, #12]
 800f6be:	05db      	lsls	r3, r3, #23
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	4616      	mov	r6, r2
 800f6c6:	d505      	bpl.n	800f6d4 <__swrite+0x1e>
 800f6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f000 f958 	bl	800f984 <_lseek_r>
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6de:	81a3      	strh	r3, [r4, #12]
 800f6e0:	4632      	mov	r2, r6
 800f6e2:	463b      	mov	r3, r7
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ea:	f000 b97f 	b.w	800f9ec <_write_r>

0800f6ee <__sseek>:
 800f6ee:	b510      	push	{r4, lr}
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f6:	f000 f945 	bl	800f984 <_lseek_r>
 800f6fa:	1c43      	adds	r3, r0, #1
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	bf15      	itete	ne
 800f700:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f70a:	81a3      	strheq	r3, [r4, #12]
 800f70c:	bf18      	it	ne
 800f70e:	81a3      	strhne	r3, [r4, #12]
 800f710:	bd10      	pop	{r4, pc}

0800f712 <__sclose>:
 800f712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f716:	f000 b925 	b.w	800f964 <_close_r>

0800f71a <__swbuf_r>:
 800f71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71c:	460e      	mov	r6, r1
 800f71e:	4614      	mov	r4, r2
 800f720:	4605      	mov	r5, r0
 800f722:	b118      	cbz	r0, 800f72c <__swbuf_r+0x12>
 800f724:	6a03      	ldr	r3, [r0, #32]
 800f726:	b90b      	cbnz	r3, 800f72c <__swbuf_r+0x12>
 800f728:	f7ff feb0 	bl	800f48c <__sinit>
 800f72c:	69a3      	ldr	r3, [r4, #24]
 800f72e:	60a3      	str	r3, [r4, #8]
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	071a      	lsls	r2, r3, #28
 800f734:	d501      	bpl.n	800f73a <__swbuf_r+0x20>
 800f736:	6923      	ldr	r3, [r4, #16]
 800f738:	b943      	cbnz	r3, 800f74c <__swbuf_r+0x32>
 800f73a:	4621      	mov	r1, r4
 800f73c:	4628      	mov	r0, r5
 800f73e:	f000 f82b 	bl	800f798 <__swsetup_r>
 800f742:	b118      	cbz	r0, 800f74c <__swbuf_r+0x32>
 800f744:	f04f 37ff 	mov.w	r7, #4294967295
 800f748:	4638      	mov	r0, r7
 800f74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f74c:	6823      	ldr	r3, [r4, #0]
 800f74e:	6922      	ldr	r2, [r4, #16]
 800f750:	1a98      	subs	r0, r3, r2
 800f752:	6963      	ldr	r3, [r4, #20]
 800f754:	b2f6      	uxtb	r6, r6
 800f756:	4283      	cmp	r3, r0
 800f758:	4637      	mov	r7, r6
 800f75a:	dc05      	bgt.n	800f768 <__swbuf_r+0x4e>
 800f75c:	4621      	mov	r1, r4
 800f75e:	4628      	mov	r0, r5
 800f760:	f002 ff1a 	bl	8012598 <_fflush_r>
 800f764:	2800      	cmp	r0, #0
 800f766:	d1ed      	bne.n	800f744 <__swbuf_r+0x2a>
 800f768:	68a3      	ldr	r3, [r4, #8]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	60a3      	str	r3, [r4, #8]
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	6022      	str	r2, [r4, #0]
 800f774:	701e      	strb	r6, [r3, #0]
 800f776:	6962      	ldr	r2, [r4, #20]
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d004      	beq.n	800f788 <__swbuf_r+0x6e>
 800f77e:	89a3      	ldrh	r3, [r4, #12]
 800f780:	07db      	lsls	r3, r3, #31
 800f782:	d5e1      	bpl.n	800f748 <__swbuf_r+0x2e>
 800f784:	2e0a      	cmp	r6, #10
 800f786:	d1df      	bne.n	800f748 <__swbuf_r+0x2e>
 800f788:	4621      	mov	r1, r4
 800f78a:	4628      	mov	r0, r5
 800f78c:	f002 ff04 	bl	8012598 <_fflush_r>
 800f790:	2800      	cmp	r0, #0
 800f792:	d0d9      	beq.n	800f748 <__swbuf_r+0x2e>
 800f794:	e7d6      	b.n	800f744 <__swbuf_r+0x2a>
	...

0800f798 <__swsetup_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4b29      	ldr	r3, [pc, #164]	@ (800f840 <__swsetup_r+0xa8>)
 800f79c:	4605      	mov	r5, r0
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	460c      	mov	r4, r1
 800f7a2:	b118      	cbz	r0, 800f7ac <__swsetup_r+0x14>
 800f7a4:	6a03      	ldr	r3, [r0, #32]
 800f7a6:	b90b      	cbnz	r3, 800f7ac <__swsetup_r+0x14>
 800f7a8:	f7ff fe70 	bl	800f48c <__sinit>
 800f7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b0:	0719      	lsls	r1, r3, #28
 800f7b2:	d422      	bmi.n	800f7fa <__swsetup_r+0x62>
 800f7b4:	06da      	lsls	r2, r3, #27
 800f7b6:	d407      	bmi.n	800f7c8 <__swsetup_r+0x30>
 800f7b8:	2209      	movs	r2, #9
 800f7ba:	602a      	str	r2, [r5, #0]
 800f7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c6:	e033      	b.n	800f830 <__swsetup_r+0x98>
 800f7c8:	0758      	lsls	r0, r3, #29
 800f7ca:	d512      	bpl.n	800f7f2 <__swsetup_r+0x5a>
 800f7cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7ce:	b141      	cbz	r1, 800f7e2 <__swsetup_r+0x4a>
 800f7d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7d4:	4299      	cmp	r1, r3
 800f7d6:	d002      	beq.n	800f7de <__swsetup_r+0x46>
 800f7d8:	4628      	mov	r0, r5
 800f7da:	f000 ffcd 	bl	8010778 <_free_r>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	6063      	str	r3, [r4, #4]
 800f7ee:	6923      	ldr	r3, [r4, #16]
 800f7f0:	6023      	str	r3, [r4, #0]
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	f043 0308 	orr.w	r3, r3, #8
 800f7f8:	81a3      	strh	r3, [r4, #12]
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	b94b      	cbnz	r3, 800f812 <__swsetup_r+0x7a>
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f808:	d003      	beq.n	800f812 <__swsetup_r+0x7a>
 800f80a:	4621      	mov	r1, r4
 800f80c:	4628      	mov	r0, r5
 800f80e:	f002 ff11 	bl	8012634 <__smakebuf_r>
 800f812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f816:	f013 0201 	ands.w	r2, r3, #1
 800f81a:	d00a      	beq.n	800f832 <__swsetup_r+0x9a>
 800f81c:	2200      	movs	r2, #0
 800f81e:	60a2      	str	r2, [r4, #8]
 800f820:	6962      	ldr	r2, [r4, #20]
 800f822:	4252      	negs	r2, r2
 800f824:	61a2      	str	r2, [r4, #24]
 800f826:	6922      	ldr	r2, [r4, #16]
 800f828:	b942      	cbnz	r2, 800f83c <__swsetup_r+0xa4>
 800f82a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f82e:	d1c5      	bne.n	800f7bc <__swsetup_r+0x24>
 800f830:	bd38      	pop	{r3, r4, r5, pc}
 800f832:	0799      	lsls	r1, r3, #30
 800f834:	bf58      	it	pl
 800f836:	6962      	ldrpl	r2, [r4, #20]
 800f838:	60a2      	str	r2, [r4, #8]
 800f83a:	e7f4      	b.n	800f826 <__swsetup_r+0x8e>
 800f83c:	2000      	movs	r0, #0
 800f83e:	e7f7      	b.n	800f830 <__swsetup_r+0x98>
 800f840:	20000194 	.word	0x20000194

0800f844 <memset>:
 800f844:	4402      	add	r2, r0
 800f846:	4603      	mov	r3, r0
 800f848:	4293      	cmp	r3, r2
 800f84a:	d100      	bne.n	800f84e <memset+0xa>
 800f84c:	4770      	bx	lr
 800f84e:	f803 1b01 	strb.w	r1, [r3], #1
 800f852:	e7f9      	b.n	800f848 <memset+0x4>

0800f854 <strncmp>:
 800f854:	b510      	push	{r4, lr}
 800f856:	b16a      	cbz	r2, 800f874 <strncmp+0x20>
 800f858:	3901      	subs	r1, #1
 800f85a:	1884      	adds	r4, r0, r2
 800f85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f860:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f864:	429a      	cmp	r2, r3
 800f866:	d103      	bne.n	800f870 <strncmp+0x1c>
 800f868:	42a0      	cmp	r0, r4
 800f86a:	d001      	beq.n	800f870 <strncmp+0x1c>
 800f86c:	2a00      	cmp	r2, #0
 800f86e:	d1f5      	bne.n	800f85c <strncmp+0x8>
 800f870:	1ad0      	subs	r0, r2, r3
 800f872:	bd10      	pop	{r4, pc}
 800f874:	4610      	mov	r0, r2
 800f876:	e7fc      	b.n	800f872 <strncmp+0x1e>

0800f878 <strtok>:
 800f878:	4b16      	ldr	r3, [pc, #88]	@ (800f8d4 <strtok+0x5c>)
 800f87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87e:	681f      	ldr	r7, [r3, #0]
 800f880:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f882:	4605      	mov	r5, r0
 800f884:	460e      	mov	r6, r1
 800f886:	b9ec      	cbnz	r4, 800f8c4 <strtok+0x4c>
 800f888:	2050      	movs	r0, #80	@ 0x50
 800f88a:	f7fd ffff 	bl	800d88c <malloc>
 800f88e:	4602      	mov	r2, r0
 800f890:	6478      	str	r0, [r7, #68]	@ 0x44
 800f892:	b920      	cbnz	r0, 800f89e <strtok+0x26>
 800f894:	4b10      	ldr	r3, [pc, #64]	@ (800f8d8 <strtok+0x60>)
 800f896:	4811      	ldr	r0, [pc, #68]	@ (800f8dc <strtok+0x64>)
 800f898:	215b      	movs	r1, #91	@ 0x5b
 800f89a:	f000 f903 	bl	800faa4 <__assert_func>
 800f89e:	e9c0 4400 	strd	r4, r4, [r0]
 800f8a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f8a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f8aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f8ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f8b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f8b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f8ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f8be:	6184      	str	r4, [r0, #24]
 800f8c0:	7704      	strb	r4, [r0, #28]
 800f8c2:	6244      	str	r4, [r0, #36]	@ 0x24
 800f8c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8c6:	4631      	mov	r1, r6
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	f000 b806 	b.w	800f8e0 <__strtok_r>
 800f8d4:	20000194 	.word	0x20000194
 800f8d8:	08015bd8 	.word	0x08015bd8
 800f8dc:	08015bef 	.word	0x08015bef

0800f8e0 <__strtok_r>:
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	b908      	cbnz	r0, 800f8ea <__strtok_r+0xa>
 800f8e6:	6814      	ldr	r4, [r2, #0]
 800f8e8:	b144      	cbz	r4, 800f8fc <__strtok_r+0x1c>
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f8f6:	b91e      	cbnz	r6, 800f900 <__strtok_r+0x20>
 800f8f8:	b965      	cbnz	r5, 800f914 <__strtok_r+0x34>
 800f8fa:	6015      	str	r5, [r2, #0]
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	e005      	b.n	800f90c <__strtok_r+0x2c>
 800f900:	42b5      	cmp	r5, r6
 800f902:	d1f6      	bne.n	800f8f2 <__strtok_r+0x12>
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f0      	bne.n	800f8ea <__strtok_r+0xa>
 800f908:	6014      	str	r4, [r2, #0]
 800f90a:	7003      	strb	r3, [r0, #0]
 800f90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90e:	461c      	mov	r4, r3
 800f910:	e00c      	b.n	800f92c <__strtok_r+0x4c>
 800f912:	b915      	cbnz	r5, 800f91a <__strtok_r+0x3a>
 800f914:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f918:	460e      	mov	r6, r1
 800f91a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f91e:	42ab      	cmp	r3, r5
 800f920:	d1f7      	bne.n	800f912 <__strtok_r+0x32>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0f3      	beq.n	800f90e <__strtok_r+0x2e>
 800f926:	2300      	movs	r3, #0
 800f928:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f92c:	6014      	str	r4, [r2, #0]
 800f92e:	e7ed      	b.n	800f90c <__strtok_r+0x2c>

0800f930 <strstr>:
 800f930:	780a      	ldrb	r2, [r1, #0]
 800f932:	b570      	push	{r4, r5, r6, lr}
 800f934:	b96a      	cbnz	r2, 800f952 <strstr+0x22>
 800f936:	bd70      	pop	{r4, r5, r6, pc}
 800f938:	429a      	cmp	r2, r3
 800f93a:	d109      	bne.n	800f950 <strstr+0x20>
 800f93c:	460c      	mov	r4, r1
 800f93e:	4605      	mov	r5, r0
 800f940:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0f6      	beq.n	800f936 <strstr+0x6>
 800f948:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f94c:	429e      	cmp	r6, r3
 800f94e:	d0f7      	beq.n	800f940 <strstr+0x10>
 800f950:	3001      	adds	r0, #1
 800f952:	7803      	ldrb	r3, [r0, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d1ef      	bne.n	800f938 <strstr+0x8>
 800f958:	4618      	mov	r0, r3
 800f95a:	e7ec      	b.n	800f936 <strstr+0x6>

0800f95c <_localeconv_r>:
 800f95c:	4800      	ldr	r0, [pc, #0]	@ (800f960 <_localeconv_r+0x4>)
 800f95e:	4770      	bx	lr
 800f960:	20000118 	.word	0x20000118

0800f964 <_close_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	4d06      	ldr	r5, [pc, #24]	@ (800f980 <_close_r+0x1c>)
 800f968:	2300      	movs	r3, #0
 800f96a:	4604      	mov	r4, r0
 800f96c:	4608      	mov	r0, r1
 800f96e:	602b      	str	r3, [r5, #0]
 800f970:	f7f7 fe1c 	bl	80075ac <_close>
 800f974:	1c43      	adds	r3, r0, #1
 800f976:	d102      	bne.n	800f97e <_close_r+0x1a>
 800f978:	682b      	ldr	r3, [r5, #0]
 800f97a:	b103      	cbz	r3, 800f97e <_close_r+0x1a>
 800f97c:	6023      	str	r3, [r4, #0]
 800f97e:	bd38      	pop	{r3, r4, r5, pc}
 800f980:	200010e0 	.word	0x200010e0

0800f984 <_lseek_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	4d07      	ldr	r5, [pc, #28]	@ (800f9a4 <_lseek_r+0x20>)
 800f988:	4604      	mov	r4, r0
 800f98a:	4608      	mov	r0, r1
 800f98c:	4611      	mov	r1, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	602a      	str	r2, [r5, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	f7f7 fe31 	bl	80075fa <_lseek>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d102      	bne.n	800f9a2 <_lseek_r+0x1e>
 800f99c:	682b      	ldr	r3, [r5, #0]
 800f99e:	b103      	cbz	r3, 800f9a2 <_lseek_r+0x1e>
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	bd38      	pop	{r3, r4, r5, pc}
 800f9a4:	200010e0 	.word	0x200010e0

0800f9a8 <_read_r>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4d07      	ldr	r5, [pc, #28]	@ (800f9c8 <_read_r+0x20>)
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	4608      	mov	r0, r1
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	602a      	str	r2, [r5, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	f7f7 fdbf 	bl	800753a <_read>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d102      	bne.n	800f9c6 <_read_r+0x1e>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	b103      	cbz	r3, 800f9c6 <_read_r+0x1e>
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	200010e0 	.word	0x200010e0

0800f9cc <_sbrk_r>:
 800f9cc:	b538      	push	{r3, r4, r5, lr}
 800f9ce:	4d06      	ldr	r5, [pc, #24]	@ (800f9e8 <_sbrk_r+0x1c>)
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	4608      	mov	r0, r1
 800f9d6:	602b      	str	r3, [r5, #0]
 800f9d8:	f7f7 fe1c 	bl	8007614 <_sbrk>
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	d102      	bne.n	800f9e6 <_sbrk_r+0x1a>
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	b103      	cbz	r3, 800f9e6 <_sbrk_r+0x1a>
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	bd38      	pop	{r3, r4, r5, pc}
 800f9e8:	200010e0 	.word	0x200010e0

0800f9ec <_write_r>:
 800f9ec:	b538      	push	{r3, r4, r5, lr}
 800f9ee:	4d07      	ldr	r5, [pc, #28]	@ (800fa0c <_write_r+0x20>)
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	4608      	mov	r0, r1
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	602a      	str	r2, [r5, #0]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	f7f7 fdba 	bl	8007574 <_write>
 800fa00:	1c43      	adds	r3, r0, #1
 800fa02:	d102      	bne.n	800fa0a <_write_r+0x1e>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	b103      	cbz	r3, 800fa0a <_write_r+0x1e>
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	bd38      	pop	{r3, r4, r5, pc}
 800fa0c:	200010e0 	.word	0x200010e0

0800fa10 <__errno>:
 800fa10:	4b01      	ldr	r3, [pc, #4]	@ (800fa18 <__errno+0x8>)
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	20000194 	.word	0x20000194

0800fa1c <__libc_init_array>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	4d0d      	ldr	r5, [pc, #52]	@ (800fa54 <__libc_init_array+0x38>)
 800fa20:	4c0d      	ldr	r4, [pc, #52]	@ (800fa58 <__libc_init_array+0x3c>)
 800fa22:	1b64      	subs	r4, r4, r5
 800fa24:	10a4      	asrs	r4, r4, #2
 800fa26:	2600      	movs	r6, #0
 800fa28:	42a6      	cmp	r6, r4
 800fa2a:	d109      	bne.n	800fa40 <__libc_init_array+0x24>
 800fa2c:	4d0b      	ldr	r5, [pc, #44]	@ (800fa5c <__libc_init_array+0x40>)
 800fa2e:	4c0c      	ldr	r4, [pc, #48]	@ (800fa60 <__libc_init_array+0x44>)
 800fa30:	f005 fd5a 	bl	80154e8 <_init>
 800fa34:	1b64      	subs	r4, r4, r5
 800fa36:	10a4      	asrs	r4, r4, #2
 800fa38:	2600      	movs	r6, #0
 800fa3a:	42a6      	cmp	r6, r4
 800fa3c:	d105      	bne.n	800fa4a <__libc_init_array+0x2e>
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
 800fa40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa44:	4798      	blx	r3
 800fa46:	3601      	adds	r6, #1
 800fa48:	e7ee      	b.n	800fa28 <__libc_init_array+0xc>
 800fa4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa4e:	4798      	blx	r3
 800fa50:	3601      	adds	r6, #1
 800fa52:	e7f2      	b.n	800fa3a <__libc_init_array+0x1e>
 800fa54:	08016178 	.word	0x08016178
 800fa58:	08016178 	.word	0x08016178
 800fa5c:	08016178 	.word	0x08016178
 800fa60:	0801617c 	.word	0x0801617c

0800fa64 <__retarget_lock_init_recursive>:
 800fa64:	4770      	bx	lr

0800fa66 <__retarget_lock_acquire_recursive>:
 800fa66:	4770      	bx	lr

0800fa68 <__retarget_lock_release_recursive>:
 800fa68:	4770      	bx	lr

0800fa6a <memcpy>:
 800fa6a:	440a      	add	r2, r1
 800fa6c:	4291      	cmp	r1, r2
 800fa6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa72:	d100      	bne.n	800fa76 <memcpy+0xc>
 800fa74:	4770      	bx	lr
 800fa76:	b510      	push	{r4, lr}
 800fa78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa80:	4291      	cmp	r1, r2
 800fa82:	d1f9      	bne.n	800fa78 <memcpy+0xe>
 800fa84:	bd10      	pop	{r4, pc}
	...

0800fa88 <nan>:
 800fa88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa90 <nan+0x8>
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	00000000 	.word	0x00000000
 800fa94:	7ff80000 	.word	0x7ff80000

0800fa98 <nanf>:
 800fa98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800faa0 <nanf+0x8>
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	7fc00000 	.word	0x7fc00000

0800faa4 <__assert_func>:
 800faa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faa6:	4614      	mov	r4, r2
 800faa8:	461a      	mov	r2, r3
 800faaa:	4b09      	ldr	r3, [pc, #36]	@ (800fad0 <__assert_func+0x2c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4605      	mov	r5, r0
 800fab0:	68d8      	ldr	r0, [r3, #12]
 800fab2:	b954      	cbnz	r4, 800faca <__assert_func+0x26>
 800fab4:	4b07      	ldr	r3, [pc, #28]	@ (800fad4 <__assert_func+0x30>)
 800fab6:	461c      	mov	r4, r3
 800fab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fabc:	9100      	str	r1, [sp, #0]
 800fabe:	462b      	mov	r3, r5
 800fac0:	4905      	ldr	r1, [pc, #20]	@ (800fad8 <__assert_func+0x34>)
 800fac2:	f7ff fcfb 	bl	800f4bc <fiprintf>
 800fac6:	f002 fea1 	bl	801280c <abort>
 800faca:	4b04      	ldr	r3, [pc, #16]	@ (800fadc <__assert_func+0x38>)
 800facc:	e7f4      	b.n	800fab8 <__assert_func+0x14>
 800face:	bf00      	nop
 800fad0:	20000194 	.word	0x20000194
 800fad4:	08015c8c 	.word	0x08015c8c
 800fad8:	08015c5e 	.word	0x08015c5e
 800fadc:	08015c51 	.word	0x08015c51

0800fae0 <quorem>:
 800fae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	6903      	ldr	r3, [r0, #16]
 800fae6:	690c      	ldr	r4, [r1, #16]
 800fae8:	42a3      	cmp	r3, r4
 800faea:	4607      	mov	r7, r0
 800faec:	db7e      	blt.n	800fbec <quorem+0x10c>
 800faee:	3c01      	subs	r4, #1
 800faf0:	f101 0814 	add.w	r8, r1, #20
 800faf4:	00a3      	lsls	r3, r4, #2
 800faf6:	f100 0514 	add.w	r5, r0, #20
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb12:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb16:	d32e      	bcc.n	800fb76 <quorem+0x96>
 800fb18:	f04f 0a00 	mov.w	sl, #0
 800fb1c:	46c4      	mov	ip, r8
 800fb1e:	46ae      	mov	lr, r5
 800fb20:	46d3      	mov	fp, sl
 800fb22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb26:	b298      	uxth	r0, r3
 800fb28:	fb06 a000 	mla	r0, r6, r0, sl
 800fb2c:	0c02      	lsrs	r2, r0, #16
 800fb2e:	0c1b      	lsrs	r3, r3, #16
 800fb30:	fb06 2303 	mla	r3, r6, r3, r2
 800fb34:	f8de 2000 	ldr.w	r2, [lr]
 800fb38:	b280      	uxth	r0, r0
 800fb3a:	b292      	uxth	r2, r2
 800fb3c:	1a12      	subs	r2, r2, r0
 800fb3e:	445a      	add	r2, fp
 800fb40:	f8de 0000 	ldr.w	r0, [lr]
 800fb44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fb4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fb52:	b292      	uxth	r2, r2
 800fb54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fb58:	45e1      	cmp	r9, ip
 800fb5a:	f84e 2b04 	str.w	r2, [lr], #4
 800fb5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb62:	d2de      	bcs.n	800fb22 <quorem+0x42>
 800fb64:	9b00      	ldr	r3, [sp, #0]
 800fb66:	58eb      	ldr	r3, [r5, r3]
 800fb68:	b92b      	cbnz	r3, 800fb76 <quorem+0x96>
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	3b04      	subs	r3, #4
 800fb6e:	429d      	cmp	r5, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	d32f      	bcc.n	800fbd4 <quorem+0xf4>
 800fb74:	613c      	str	r4, [r7, #16]
 800fb76:	4638      	mov	r0, r7
 800fb78:	f001 fc58 	bl	801142c <__mcmp>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	db25      	blt.n	800fbcc <quorem+0xec>
 800fb80:	4629      	mov	r1, r5
 800fb82:	2000      	movs	r0, #0
 800fb84:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb88:	f8d1 c000 	ldr.w	ip, [r1]
 800fb8c:	fa1f fe82 	uxth.w	lr, r2
 800fb90:	fa1f f38c 	uxth.w	r3, ip
 800fb94:	eba3 030e 	sub.w	r3, r3, lr
 800fb98:	4403      	add	r3, r0
 800fb9a:	0c12      	lsrs	r2, r2, #16
 800fb9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fba0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbaa:	45c1      	cmp	r9, r8
 800fbac:	f841 3b04 	str.w	r3, [r1], #4
 800fbb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fbb4:	d2e6      	bcs.n	800fb84 <quorem+0xa4>
 800fbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbbe:	b922      	cbnz	r2, 800fbca <quorem+0xea>
 800fbc0:	3b04      	subs	r3, #4
 800fbc2:	429d      	cmp	r5, r3
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	d30b      	bcc.n	800fbe0 <quorem+0x100>
 800fbc8:	613c      	str	r4, [r7, #16]
 800fbca:	3601      	adds	r6, #1
 800fbcc:	4630      	mov	r0, r6
 800fbce:	b003      	add	sp, #12
 800fbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd4:	6812      	ldr	r2, [r2, #0]
 800fbd6:	3b04      	subs	r3, #4
 800fbd8:	2a00      	cmp	r2, #0
 800fbda:	d1cb      	bne.n	800fb74 <quorem+0x94>
 800fbdc:	3c01      	subs	r4, #1
 800fbde:	e7c6      	b.n	800fb6e <quorem+0x8e>
 800fbe0:	6812      	ldr	r2, [r2, #0]
 800fbe2:	3b04      	subs	r3, #4
 800fbe4:	2a00      	cmp	r2, #0
 800fbe6:	d1ef      	bne.n	800fbc8 <quorem+0xe8>
 800fbe8:	3c01      	subs	r4, #1
 800fbea:	e7ea      	b.n	800fbc2 <quorem+0xe2>
 800fbec:	2000      	movs	r0, #0
 800fbee:	e7ee      	b.n	800fbce <quorem+0xee>

0800fbf0 <_dtoa_r>:
 800fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	69c7      	ldr	r7, [r0, #28]
 800fbf6:	b099      	sub	sp, #100	@ 0x64
 800fbf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fbfc:	ec55 4b10 	vmov	r4, r5, d0
 800fc00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fc02:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc04:	4683      	mov	fp, r0
 800fc06:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc0a:	b97f      	cbnz	r7, 800fc2c <_dtoa_r+0x3c>
 800fc0c:	2010      	movs	r0, #16
 800fc0e:	f7fd fe3d 	bl	800d88c <malloc>
 800fc12:	4602      	mov	r2, r0
 800fc14:	f8cb 001c 	str.w	r0, [fp, #28]
 800fc18:	b920      	cbnz	r0, 800fc24 <_dtoa_r+0x34>
 800fc1a:	4ba7      	ldr	r3, [pc, #668]	@ (800feb8 <_dtoa_r+0x2c8>)
 800fc1c:	21ef      	movs	r1, #239	@ 0xef
 800fc1e:	48a7      	ldr	r0, [pc, #668]	@ (800febc <_dtoa_r+0x2cc>)
 800fc20:	f7ff ff40 	bl	800faa4 <__assert_func>
 800fc24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc28:	6007      	str	r7, [r0, #0]
 800fc2a:	60c7      	str	r7, [r0, #12]
 800fc2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc30:	6819      	ldr	r1, [r3, #0]
 800fc32:	b159      	cbz	r1, 800fc4c <_dtoa_r+0x5c>
 800fc34:	685a      	ldr	r2, [r3, #4]
 800fc36:	604a      	str	r2, [r1, #4]
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4093      	lsls	r3, r2
 800fc3c:	608b      	str	r3, [r1, #8]
 800fc3e:	4658      	mov	r0, fp
 800fc40:	f001 f970 	bl	8010f24 <_Bfree>
 800fc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	1e2b      	subs	r3, r5, #0
 800fc4e:	bfb9      	ittee	lt
 800fc50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc54:	9303      	strlt	r3, [sp, #12]
 800fc56:	2300      	movge	r3, #0
 800fc58:	6033      	strge	r3, [r6, #0]
 800fc5a:	9f03      	ldr	r7, [sp, #12]
 800fc5c:	4b98      	ldr	r3, [pc, #608]	@ (800fec0 <_dtoa_r+0x2d0>)
 800fc5e:	bfbc      	itt	lt
 800fc60:	2201      	movlt	r2, #1
 800fc62:	6032      	strlt	r2, [r6, #0]
 800fc64:	43bb      	bics	r3, r7
 800fc66:	d112      	bne.n	800fc8e <_dtoa_r+0x9e>
 800fc68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fc6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc74:	4323      	orrs	r3, r4
 800fc76:	f000 854d 	beq.w	8010714 <_dtoa_r+0xb24>
 800fc7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fed4 <_dtoa_r+0x2e4>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f000 854f 	beq.w	8010724 <_dtoa_r+0xb34>
 800fc86:	f10a 0303 	add.w	r3, sl, #3
 800fc8a:	f000 bd49 	b.w	8010720 <_dtoa_r+0xb30>
 800fc8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc92:	2200      	movs	r2, #0
 800fc94:	ec51 0b17 	vmov	r0, r1, d7
 800fc98:	2300      	movs	r3, #0
 800fc9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fc9e:	f7f0 ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 800fca2:	4680      	mov	r8, r0
 800fca4:	b158      	cbz	r0, 800fcbe <_dtoa_r+0xce>
 800fca6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fca8:	2301      	movs	r3, #1
 800fcaa:	6013      	str	r3, [r2, #0]
 800fcac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fcae:	b113      	cbz	r3, 800fcb6 <_dtoa_r+0xc6>
 800fcb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fcb2:	4b84      	ldr	r3, [pc, #528]	@ (800fec4 <_dtoa_r+0x2d4>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fed8 <_dtoa_r+0x2e8>
 800fcba:	f000 bd33 	b.w	8010724 <_dtoa_r+0xb34>
 800fcbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fcc2:	aa16      	add	r2, sp, #88	@ 0x58
 800fcc4:	a917      	add	r1, sp, #92	@ 0x5c
 800fcc6:	4658      	mov	r0, fp
 800fcc8:	f001 fcd0 	bl	801166c <__d2b>
 800fccc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fcd0:	4681      	mov	r9, r0
 800fcd2:	2e00      	cmp	r6, #0
 800fcd4:	d077      	beq.n	800fdc6 <_dtoa_r+0x1d6>
 800fcd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fcdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fce4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fce8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fcec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	4b74      	ldr	r3, [pc, #464]	@ (800fec8 <_dtoa_r+0x2d8>)
 800fcf6:	f7f0 fad7 	bl	80002a8 <__aeabi_dsub>
 800fcfa:	a369      	add	r3, pc, #420	@ (adr r3, 800fea0 <_dtoa_r+0x2b0>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 fc8a 	bl	8000618 <__aeabi_dmul>
 800fd04:	a368      	add	r3, pc, #416	@ (adr r3, 800fea8 <_dtoa_r+0x2b8>)
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f7f0 facf 	bl	80002ac <__adddf3>
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4630      	mov	r0, r6
 800fd12:	460d      	mov	r5, r1
 800fd14:	f7f0 fc16 	bl	8000544 <__aeabi_i2d>
 800fd18:	a365      	add	r3, pc, #404	@ (adr r3, 800feb0 <_dtoa_r+0x2c0>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fc7b 	bl	8000618 <__aeabi_dmul>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4620      	mov	r0, r4
 800fd28:	4629      	mov	r1, r5
 800fd2a:	f7f0 fabf 	bl	80002ac <__adddf3>
 800fd2e:	4604      	mov	r4, r0
 800fd30:	460d      	mov	r5, r1
 800fd32:	f7f0 ff21 	bl	8000b78 <__aeabi_d2iz>
 800fd36:	2200      	movs	r2, #0
 800fd38:	4607      	mov	r7, r0
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 fedc 	bl	8000afc <__aeabi_dcmplt>
 800fd44:	b140      	cbz	r0, 800fd58 <_dtoa_r+0x168>
 800fd46:	4638      	mov	r0, r7
 800fd48:	f7f0 fbfc 	bl	8000544 <__aeabi_i2d>
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	462b      	mov	r3, r5
 800fd50:	f7f0 feca 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd54:	b900      	cbnz	r0, 800fd58 <_dtoa_r+0x168>
 800fd56:	3f01      	subs	r7, #1
 800fd58:	2f16      	cmp	r7, #22
 800fd5a:	d851      	bhi.n	800fe00 <_dtoa_r+0x210>
 800fd5c:	4b5b      	ldr	r3, [pc, #364]	@ (800fecc <_dtoa_r+0x2dc>)
 800fd5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd6a:	f7f0 fec7 	bl	8000afc <__aeabi_dcmplt>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d048      	beq.n	800fe04 <_dtoa_r+0x214>
 800fd72:	3f01      	subs	r7, #1
 800fd74:	2300      	movs	r3, #0
 800fd76:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd7a:	1b9b      	subs	r3, r3, r6
 800fd7c:	1e5a      	subs	r2, r3, #1
 800fd7e:	bf44      	itt	mi
 800fd80:	f1c3 0801 	rsbmi	r8, r3, #1
 800fd84:	2300      	movmi	r3, #0
 800fd86:	9208      	str	r2, [sp, #32]
 800fd88:	bf54      	ite	pl
 800fd8a:	f04f 0800 	movpl.w	r8, #0
 800fd8e:	9308      	strmi	r3, [sp, #32]
 800fd90:	2f00      	cmp	r7, #0
 800fd92:	db39      	blt.n	800fe08 <_dtoa_r+0x218>
 800fd94:	9b08      	ldr	r3, [sp, #32]
 800fd96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fd98:	443b      	add	r3, r7
 800fd9a:	9308      	str	r3, [sp, #32]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fda0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fda2:	2b09      	cmp	r3, #9
 800fda4:	d864      	bhi.n	800fe70 <_dtoa_r+0x280>
 800fda6:	2b05      	cmp	r3, #5
 800fda8:	bfc4      	itt	gt
 800fdaa:	3b04      	subgt	r3, #4
 800fdac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb0:	f1a3 0302 	sub.w	r3, r3, #2
 800fdb4:	bfcc      	ite	gt
 800fdb6:	2400      	movgt	r4, #0
 800fdb8:	2401      	movle	r4, #1
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d863      	bhi.n	800fe86 <_dtoa_r+0x296>
 800fdbe:	e8df f003 	tbb	[pc, r3]
 800fdc2:	372a      	.short	0x372a
 800fdc4:	5535      	.short	0x5535
 800fdc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fdca:	441e      	add	r6, r3
 800fdcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	bfc1      	itttt	gt
 800fdd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fdd8:	409f      	lslgt	r7, r3
 800fdda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fdde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fde2:	bfd6      	itet	le
 800fde4:	f1c3 0320 	rsble	r3, r3, #32
 800fde8:	ea47 0003 	orrgt.w	r0, r7, r3
 800fdec:	fa04 f003 	lslle.w	r0, r4, r3
 800fdf0:	f7f0 fb98 	bl	8000524 <__aeabi_ui2d>
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fdfa:	3e01      	subs	r6, #1
 800fdfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800fdfe:	e777      	b.n	800fcf0 <_dtoa_r+0x100>
 800fe00:	2301      	movs	r3, #1
 800fe02:	e7b8      	b.n	800fd76 <_dtoa_r+0x186>
 800fe04:	9012      	str	r0, [sp, #72]	@ 0x48
 800fe06:	e7b7      	b.n	800fd78 <_dtoa_r+0x188>
 800fe08:	427b      	negs	r3, r7
 800fe0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	eba8 0807 	sub.w	r8, r8, r7
 800fe12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe14:	e7c4      	b.n	800fda0 <_dtoa_r+0x1b0>
 800fe16:	2300      	movs	r3, #0
 800fe18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dc35      	bgt.n	800fe8c <_dtoa_r+0x29c>
 800fe20:	2301      	movs	r3, #1
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	9307      	str	r3, [sp, #28]
 800fe26:	461a      	mov	r2, r3
 800fe28:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe2a:	e00b      	b.n	800fe44 <_dtoa_r+0x254>
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e7f3      	b.n	800fe18 <_dtoa_r+0x228>
 800fe30:	2300      	movs	r3, #0
 800fe32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe36:	18fb      	adds	r3, r7, r3
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	9307      	str	r3, [sp, #28]
 800fe40:	bfb8      	it	lt
 800fe42:	2301      	movlt	r3, #1
 800fe44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fe48:	2100      	movs	r1, #0
 800fe4a:	2204      	movs	r2, #4
 800fe4c:	f102 0514 	add.w	r5, r2, #20
 800fe50:	429d      	cmp	r5, r3
 800fe52:	d91f      	bls.n	800fe94 <_dtoa_r+0x2a4>
 800fe54:	6041      	str	r1, [r0, #4]
 800fe56:	4658      	mov	r0, fp
 800fe58:	f001 f824 	bl	8010ea4 <_Balloc>
 800fe5c:	4682      	mov	sl, r0
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d13c      	bne.n	800fedc <_dtoa_r+0x2ec>
 800fe62:	4b1b      	ldr	r3, [pc, #108]	@ (800fed0 <_dtoa_r+0x2e0>)
 800fe64:	4602      	mov	r2, r0
 800fe66:	f240 11af 	movw	r1, #431	@ 0x1af
 800fe6a:	e6d8      	b.n	800fc1e <_dtoa_r+0x2e>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e7e0      	b.n	800fe32 <_dtoa_r+0x242>
 800fe70:	2401      	movs	r4, #1
 800fe72:	2300      	movs	r3, #0
 800fe74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fe78:	f04f 33ff 	mov.w	r3, #4294967295
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	9307      	str	r3, [sp, #28]
 800fe80:	2200      	movs	r2, #0
 800fe82:	2312      	movs	r3, #18
 800fe84:	e7d0      	b.n	800fe28 <_dtoa_r+0x238>
 800fe86:	2301      	movs	r3, #1
 800fe88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe8a:	e7f5      	b.n	800fe78 <_dtoa_r+0x288>
 800fe8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	9307      	str	r3, [sp, #28]
 800fe92:	e7d7      	b.n	800fe44 <_dtoa_r+0x254>
 800fe94:	3101      	adds	r1, #1
 800fe96:	0052      	lsls	r2, r2, #1
 800fe98:	e7d8      	b.n	800fe4c <_dtoa_r+0x25c>
 800fe9a:	bf00      	nop
 800fe9c:	f3af 8000 	nop.w
 800fea0:	636f4361 	.word	0x636f4361
 800fea4:	3fd287a7 	.word	0x3fd287a7
 800fea8:	8b60c8b3 	.word	0x8b60c8b3
 800feac:	3fc68a28 	.word	0x3fc68a28
 800feb0:	509f79fb 	.word	0x509f79fb
 800feb4:	3fd34413 	.word	0x3fd34413
 800feb8:	08015bd8 	.word	0x08015bd8
 800febc:	08015c9a 	.word	0x08015c9a
 800fec0:	7ff00000 	.word	0x7ff00000
 800fec4:	08015ee0 	.word	0x08015ee0
 800fec8:	3ff80000 	.word	0x3ff80000
 800fecc:	08015df0 	.word	0x08015df0
 800fed0:	08015cf2 	.word	0x08015cf2
 800fed4:	08015c96 	.word	0x08015c96
 800fed8:	08015edf 	.word	0x08015edf
 800fedc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fee0:	6018      	str	r0, [r3, #0]
 800fee2:	9b07      	ldr	r3, [sp, #28]
 800fee4:	2b0e      	cmp	r3, #14
 800fee6:	f200 80a4 	bhi.w	8010032 <_dtoa_r+0x442>
 800feea:	2c00      	cmp	r4, #0
 800feec:	f000 80a1 	beq.w	8010032 <_dtoa_r+0x442>
 800fef0:	2f00      	cmp	r7, #0
 800fef2:	dd33      	ble.n	800ff5c <_dtoa_r+0x36c>
 800fef4:	4bad      	ldr	r3, [pc, #692]	@ (80101ac <_dtoa_r+0x5bc>)
 800fef6:	f007 020f 	and.w	r2, r7, #15
 800fefa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fefe:	ed93 7b00 	vldr	d7, [r3]
 800ff02:	05f8      	lsls	r0, r7, #23
 800ff04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ff08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ff0c:	d516      	bpl.n	800ff3c <_dtoa_r+0x34c>
 800ff0e:	4ba8      	ldr	r3, [pc, #672]	@ (80101b0 <_dtoa_r+0x5c0>)
 800ff10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff18:	f7f0 fca8 	bl	800086c <__aeabi_ddiv>
 800ff1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff20:	f004 040f 	and.w	r4, r4, #15
 800ff24:	2603      	movs	r6, #3
 800ff26:	4da2      	ldr	r5, [pc, #648]	@ (80101b0 <_dtoa_r+0x5c0>)
 800ff28:	b954      	cbnz	r4, 800ff40 <_dtoa_r+0x350>
 800ff2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff32:	f7f0 fc9b 	bl	800086c <__aeabi_ddiv>
 800ff36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff3a:	e028      	b.n	800ff8e <_dtoa_r+0x39e>
 800ff3c:	2602      	movs	r6, #2
 800ff3e:	e7f2      	b.n	800ff26 <_dtoa_r+0x336>
 800ff40:	07e1      	lsls	r1, r4, #31
 800ff42:	d508      	bpl.n	800ff56 <_dtoa_r+0x366>
 800ff44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff4c:	f7f0 fb64 	bl	8000618 <__aeabi_dmul>
 800ff50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff54:	3601      	adds	r6, #1
 800ff56:	1064      	asrs	r4, r4, #1
 800ff58:	3508      	adds	r5, #8
 800ff5a:	e7e5      	b.n	800ff28 <_dtoa_r+0x338>
 800ff5c:	f000 80d2 	beq.w	8010104 <_dtoa_r+0x514>
 800ff60:	427c      	negs	r4, r7
 800ff62:	4b92      	ldr	r3, [pc, #584]	@ (80101ac <_dtoa_r+0x5bc>)
 800ff64:	4d92      	ldr	r5, [pc, #584]	@ (80101b0 <_dtoa_r+0x5c0>)
 800ff66:	f004 020f 	and.w	r2, r4, #15
 800ff6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff76:	f7f0 fb4f 	bl	8000618 <__aeabi_dmul>
 800ff7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff7e:	1124      	asrs	r4, r4, #4
 800ff80:	2300      	movs	r3, #0
 800ff82:	2602      	movs	r6, #2
 800ff84:	2c00      	cmp	r4, #0
 800ff86:	f040 80b2 	bne.w	80100ee <_dtoa_r+0x4fe>
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1d3      	bne.n	800ff36 <_dtoa_r+0x346>
 800ff8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 80b7 	beq.w	8010108 <_dtoa_r+0x518>
 800ff9a:	4b86      	ldr	r3, [pc, #536]	@ (80101b4 <_dtoa_r+0x5c4>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7f0 fdab 	bl	8000afc <__aeabi_dcmplt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f000 80ae 	beq.w	8010108 <_dtoa_r+0x518>
 800ffac:	9b07      	ldr	r3, [sp, #28]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	f000 80aa 	beq.w	8010108 <_dtoa_r+0x518>
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	dd37      	ble.n	801002a <_dtoa_r+0x43a>
 800ffba:	1e7b      	subs	r3, r7, #1
 800ffbc:	9304      	str	r3, [sp, #16]
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4b7d      	ldr	r3, [pc, #500]	@ (80101b8 <_dtoa_r+0x5c8>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	f7f0 fb27 	bl	8000618 <__aeabi_dmul>
 800ffca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffce:	9c00      	ldr	r4, [sp, #0]
 800ffd0:	3601      	adds	r6, #1
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7f0 fab6 	bl	8000544 <__aeabi_i2d>
 800ffd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffdc:	f7f0 fb1c 	bl	8000618 <__aeabi_dmul>
 800ffe0:	4b76      	ldr	r3, [pc, #472]	@ (80101bc <_dtoa_r+0x5cc>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f7f0 f962 	bl	80002ac <__adddf3>
 800ffe8:	4605      	mov	r5, r0
 800ffea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ffee:	2c00      	cmp	r4, #0
 800fff0:	f040 808d 	bne.w	801010e <_dtoa_r+0x51e>
 800fff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fff8:	4b71      	ldr	r3, [pc, #452]	@ (80101c0 <_dtoa_r+0x5d0>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	f7f0 f954 	bl	80002a8 <__aeabi_dsub>
 8010000:	4602      	mov	r2, r0
 8010002:	460b      	mov	r3, r1
 8010004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010008:	462a      	mov	r2, r5
 801000a:	4633      	mov	r3, r6
 801000c:	f7f0 fd94 	bl	8000b38 <__aeabi_dcmpgt>
 8010010:	2800      	cmp	r0, #0
 8010012:	f040 828b 	bne.w	801052c <_dtoa_r+0x93c>
 8010016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001a:	462a      	mov	r2, r5
 801001c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010020:	f7f0 fd6c 	bl	8000afc <__aeabi_dcmplt>
 8010024:	2800      	cmp	r0, #0
 8010026:	f040 8128 	bne.w	801027a <_dtoa_r+0x68a>
 801002a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801002e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010034:	2b00      	cmp	r3, #0
 8010036:	f2c0 815a 	blt.w	80102ee <_dtoa_r+0x6fe>
 801003a:	2f0e      	cmp	r7, #14
 801003c:	f300 8157 	bgt.w	80102ee <_dtoa_r+0x6fe>
 8010040:	4b5a      	ldr	r3, [pc, #360]	@ (80101ac <_dtoa_r+0x5bc>)
 8010042:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010046:	ed93 7b00 	vldr	d7, [r3]
 801004a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801004c:	2b00      	cmp	r3, #0
 801004e:	ed8d 7b00 	vstr	d7, [sp]
 8010052:	da03      	bge.n	801005c <_dtoa_r+0x46c>
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	2b00      	cmp	r3, #0
 8010058:	f340 8101 	ble.w	801025e <_dtoa_r+0x66e>
 801005c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010060:	4656      	mov	r6, sl
 8010062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010066:	4620      	mov	r0, r4
 8010068:	4629      	mov	r1, r5
 801006a:	f7f0 fbff 	bl	800086c <__aeabi_ddiv>
 801006e:	f7f0 fd83 	bl	8000b78 <__aeabi_d2iz>
 8010072:	4680      	mov	r8, r0
 8010074:	f7f0 fa66 	bl	8000544 <__aeabi_i2d>
 8010078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801007c:	f7f0 facc 	bl	8000618 <__aeabi_dmul>
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	4620      	mov	r0, r4
 8010086:	4629      	mov	r1, r5
 8010088:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801008c:	f7f0 f90c 	bl	80002a8 <__aeabi_dsub>
 8010090:	f806 4b01 	strb.w	r4, [r6], #1
 8010094:	9d07      	ldr	r5, [sp, #28]
 8010096:	eba6 040a 	sub.w	r4, r6, sl
 801009a:	42a5      	cmp	r5, r4
 801009c:	4602      	mov	r2, r0
 801009e:	460b      	mov	r3, r1
 80100a0:	f040 8117 	bne.w	80102d2 <_dtoa_r+0x6e2>
 80100a4:	f7f0 f902 	bl	80002ac <__adddf3>
 80100a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	f7f0 fd42 	bl	8000b38 <__aeabi_dcmpgt>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	f040 80f9 	bne.w	80102ac <_dtoa_r+0x6bc>
 80100ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100be:	4620      	mov	r0, r4
 80100c0:	4629      	mov	r1, r5
 80100c2:	f7f0 fd11 	bl	8000ae8 <__aeabi_dcmpeq>
 80100c6:	b118      	cbz	r0, 80100d0 <_dtoa_r+0x4e0>
 80100c8:	f018 0f01 	tst.w	r8, #1
 80100cc:	f040 80ee 	bne.w	80102ac <_dtoa_r+0x6bc>
 80100d0:	4649      	mov	r1, r9
 80100d2:	4658      	mov	r0, fp
 80100d4:	f000 ff26 	bl	8010f24 <_Bfree>
 80100d8:	2300      	movs	r3, #0
 80100da:	7033      	strb	r3, [r6, #0]
 80100dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100de:	3701      	adds	r7, #1
 80100e0:	601f      	str	r7, [r3, #0]
 80100e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	f000 831d 	beq.w	8010724 <_dtoa_r+0xb34>
 80100ea:	601e      	str	r6, [r3, #0]
 80100ec:	e31a      	b.n	8010724 <_dtoa_r+0xb34>
 80100ee:	07e2      	lsls	r2, r4, #31
 80100f0:	d505      	bpl.n	80100fe <_dtoa_r+0x50e>
 80100f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100f6:	f7f0 fa8f 	bl	8000618 <__aeabi_dmul>
 80100fa:	3601      	adds	r6, #1
 80100fc:	2301      	movs	r3, #1
 80100fe:	1064      	asrs	r4, r4, #1
 8010100:	3508      	adds	r5, #8
 8010102:	e73f      	b.n	800ff84 <_dtoa_r+0x394>
 8010104:	2602      	movs	r6, #2
 8010106:	e742      	b.n	800ff8e <_dtoa_r+0x39e>
 8010108:	9c07      	ldr	r4, [sp, #28]
 801010a:	9704      	str	r7, [sp, #16]
 801010c:	e761      	b.n	800ffd2 <_dtoa_r+0x3e2>
 801010e:	4b27      	ldr	r3, [pc, #156]	@ (80101ac <_dtoa_r+0x5bc>)
 8010110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010116:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801011a:	4454      	add	r4, sl
 801011c:	2900      	cmp	r1, #0
 801011e:	d053      	beq.n	80101c8 <_dtoa_r+0x5d8>
 8010120:	4928      	ldr	r1, [pc, #160]	@ (80101c4 <_dtoa_r+0x5d4>)
 8010122:	2000      	movs	r0, #0
 8010124:	f7f0 fba2 	bl	800086c <__aeabi_ddiv>
 8010128:	4633      	mov	r3, r6
 801012a:	462a      	mov	r2, r5
 801012c:	f7f0 f8bc 	bl	80002a8 <__aeabi_dsub>
 8010130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010134:	4656      	mov	r6, sl
 8010136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801013a:	f7f0 fd1d 	bl	8000b78 <__aeabi_d2iz>
 801013e:	4605      	mov	r5, r0
 8010140:	f7f0 fa00 	bl	8000544 <__aeabi_i2d>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801014c:	f7f0 f8ac 	bl	80002a8 <__aeabi_dsub>
 8010150:	3530      	adds	r5, #48	@ 0x30
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801015a:	f806 5b01 	strb.w	r5, [r6], #1
 801015e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010162:	f7f0 fccb 	bl	8000afc <__aeabi_dcmplt>
 8010166:	2800      	cmp	r0, #0
 8010168:	d171      	bne.n	801024e <_dtoa_r+0x65e>
 801016a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801016e:	4911      	ldr	r1, [pc, #68]	@ (80101b4 <_dtoa_r+0x5c4>)
 8010170:	2000      	movs	r0, #0
 8010172:	f7f0 f899 	bl	80002a8 <__aeabi_dsub>
 8010176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801017a:	f7f0 fcbf 	bl	8000afc <__aeabi_dcmplt>
 801017e:	2800      	cmp	r0, #0
 8010180:	f040 8095 	bne.w	80102ae <_dtoa_r+0x6be>
 8010184:	42a6      	cmp	r6, r4
 8010186:	f43f af50 	beq.w	801002a <_dtoa_r+0x43a>
 801018a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801018e:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <_dtoa_r+0x5c8>)
 8010190:	2200      	movs	r2, #0
 8010192:	f7f0 fa41 	bl	8000618 <__aeabi_dmul>
 8010196:	4b08      	ldr	r3, [pc, #32]	@ (80101b8 <_dtoa_r+0x5c8>)
 8010198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801019c:	2200      	movs	r2, #0
 801019e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101a2:	f7f0 fa39 	bl	8000618 <__aeabi_dmul>
 80101a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101aa:	e7c4      	b.n	8010136 <_dtoa_r+0x546>
 80101ac:	08015df0 	.word	0x08015df0
 80101b0:	08015dc8 	.word	0x08015dc8
 80101b4:	3ff00000 	.word	0x3ff00000
 80101b8:	40240000 	.word	0x40240000
 80101bc:	401c0000 	.word	0x401c0000
 80101c0:	40140000 	.word	0x40140000
 80101c4:	3fe00000 	.word	0x3fe00000
 80101c8:	4631      	mov	r1, r6
 80101ca:	4628      	mov	r0, r5
 80101cc:	f7f0 fa24 	bl	8000618 <__aeabi_dmul>
 80101d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80101d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80101d6:	4656      	mov	r6, sl
 80101d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101dc:	f7f0 fccc 	bl	8000b78 <__aeabi_d2iz>
 80101e0:	4605      	mov	r5, r0
 80101e2:	f7f0 f9af 	bl	8000544 <__aeabi_i2d>
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ee:	f7f0 f85b 	bl	80002a8 <__aeabi_dsub>
 80101f2:	3530      	adds	r5, #48	@ 0x30
 80101f4:	f806 5b01 	strb.w	r5, [r6], #1
 80101f8:	4602      	mov	r2, r0
 80101fa:	460b      	mov	r3, r1
 80101fc:	42a6      	cmp	r6, r4
 80101fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010202:	f04f 0200 	mov.w	r2, #0
 8010206:	d124      	bne.n	8010252 <_dtoa_r+0x662>
 8010208:	4bac      	ldr	r3, [pc, #688]	@ (80104bc <_dtoa_r+0x8cc>)
 801020a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801020e:	f7f0 f84d 	bl	80002ac <__adddf3>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801021a:	f7f0 fc8d 	bl	8000b38 <__aeabi_dcmpgt>
 801021e:	2800      	cmp	r0, #0
 8010220:	d145      	bne.n	80102ae <_dtoa_r+0x6be>
 8010222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010226:	49a5      	ldr	r1, [pc, #660]	@ (80104bc <_dtoa_r+0x8cc>)
 8010228:	2000      	movs	r0, #0
 801022a:	f7f0 f83d 	bl	80002a8 <__aeabi_dsub>
 801022e:	4602      	mov	r2, r0
 8010230:	460b      	mov	r3, r1
 8010232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010236:	f7f0 fc61 	bl	8000afc <__aeabi_dcmplt>
 801023a:	2800      	cmp	r0, #0
 801023c:	f43f aef5 	beq.w	801002a <_dtoa_r+0x43a>
 8010240:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010242:	1e73      	subs	r3, r6, #1
 8010244:	9315      	str	r3, [sp, #84]	@ 0x54
 8010246:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801024a:	2b30      	cmp	r3, #48	@ 0x30
 801024c:	d0f8      	beq.n	8010240 <_dtoa_r+0x650>
 801024e:	9f04      	ldr	r7, [sp, #16]
 8010250:	e73e      	b.n	80100d0 <_dtoa_r+0x4e0>
 8010252:	4b9b      	ldr	r3, [pc, #620]	@ (80104c0 <_dtoa_r+0x8d0>)
 8010254:	f7f0 f9e0 	bl	8000618 <__aeabi_dmul>
 8010258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801025c:	e7bc      	b.n	80101d8 <_dtoa_r+0x5e8>
 801025e:	d10c      	bne.n	801027a <_dtoa_r+0x68a>
 8010260:	4b98      	ldr	r3, [pc, #608]	@ (80104c4 <_dtoa_r+0x8d4>)
 8010262:	2200      	movs	r2, #0
 8010264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010268:	f7f0 f9d6 	bl	8000618 <__aeabi_dmul>
 801026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010270:	f7f0 fc58 	bl	8000b24 <__aeabi_dcmpge>
 8010274:	2800      	cmp	r0, #0
 8010276:	f000 8157 	beq.w	8010528 <_dtoa_r+0x938>
 801027a:	2400      	movs	r4, #0
 801027c:	4625      	mov	r5, r4
 801027e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010280:	43db      	mvns	r3, r3
 8010282:	9304      	str	r3, [sp, #16]
 8010284:	4656      	mov	r6, sl
 8010286:	2700      	movs	r7, #0
 8010288:	4621      	mov	r1, r4
 801028a:	4658      	mov	r0, fp
 801028c:	f000 fe4a 	bl	8010f24 <_Bfree>
 8010290:	2d00      	cmp	r5, #0
 8010292:	d0dc      	beq.n	801024e <_dtoa_r+0x65e>
 8010294:	b12f      	cbz	r7, 80102a2 <_dtoa_r+0x6b2>
 8010296:	42af      	cmp	r7, r5
 8010298:	d003      	beq.n	80102a2 <_dtoa_r+0x6b2>
 801029a:	4639      	mov	r1, r7
 801029c:	4658      	mov	r0, fp
 801029e:	f000 fe41 	bl	8010f24 <_Bfree>
 80102a2:	4629      	mov	r1, r5
 80102a4:	4658      	mov	r0, fp
 80102a6:	f000 fe3d 	bl	8010f24 <_Bfree>
 80102aa:	e7d0      	b.n	801024e <_dtoa_r+0x65e>
 80102ac:	9704      	str	r7, [sp, #16]
 80102ae:	4633      	mov	r3, r6
 80102b0:	461e      	mov	r6, r3
 80102b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102b6:	2a39      	cmp	r2, #57	@ 0x39
 80102b8:	d107      	bne.n	80102ca <_dtoa_r+0x6da>
 80102ba:	459a      	cmp	sl, r3
 80102bc:	d1f8      	bne.n	80102b0 <_dtoa_r+0x6c0>
 80102be:	9a04      	ldr	r2, [sp, #16]
 80102c0:	3201      	adds	r2, #1
 80102c2:	9204      	str	r2, [sp, #16]
 80102c4:	2230      	movs	r2, #48	@ 0x30
 80102c6:	f88a 2000 	strb.w	r2, [sl]
 80102ca:	781a      	ldrb	r2, [r3, #0]
 80102cc:	3201      	adds	r2, #1
 80102ce:	701a      	strb	r2, [r3, #0]
 80102d0:	e7bd      	b.n	801024e <_dtoa_r+0x65e>
 80102d2:	4b7b      	ldr	r3, [pc, #492]	@ (80104c0 <_dtoa_r+0x8d0>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	f7f0 f99f 	bl	8000618 <__aeabi_dmul>
 80102da:	2200      	movs	r2, #0
 80102dc:	2300      	movs	r3, #0
 80102de:	4604      	mov	r4, r0
 80102e0:	460d      	mov	r5, r1
 80102e2:	f7f0 fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	f43f aebb 	beq.w	8010062 <_dtoa_r+0x472>
 80102ec:	e6f0      	b.n	80100d0 <_dtoa_r+0x4e0>
 80102ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102f0:	2a00      	cmp	r2, #0
 80102f2:	f000 80db 	beq.w	80104ac <_dtoa_r+0x8bc>
 80102f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102f8:	2a01      	cmp	r2, #1
 80102fa:	f300 80bf 	bgt.w	801047c <_dtoa_r+0x88c>
 80102fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010300:	2a00      	cmp	r2, #0
 8010302:	f000 80b7 	beq.w	8010474 <_dtoa_r+0x884>
 8010306:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801030a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801030c:	4646      	mov	r6, r8
 801030e:	9a08      	ldr	r2, [sp, #32]
 8010310:	2101      	movs	r1, #1
 8010312:	441a      	add	r2, r3
 8010314:	4658      	mov	r0, fp
 8010316:	4498      	add	r8, r3
 8010318:	9208      	str	r2, [sp, #32]
 801031a:	f000 ff01 	bl	8011120 <__i2b>
 801031e:	4605      	mov	r5, r0
 8010320:	b15e      	cbz	r6, 801033a <_dtoa_r+0x74a>
 8010322:	9b08      	ldr	r3, [sp, #32]
 8010324:	2b00      	cmp	r3, #0
 8010326:	dd08      	ble.n	801033a <_dtoa_r+0x74a>
 8010328:	42b3      	cmp	r3, r6
 801032a:	9a08      	ldr	r2, [sp, #32]
 801032c:	bfa8      	it	ge
 801032e:	4633      	movge	r3, r6
 8010330:	eba8 0803 	sub.w	r8, r8, r3
 8010334:	1af6      	subs	r6, r6, r3
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	9308      	str	r3, [sp, #32]
 801033a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801033c:	b1f3      	cbz	r3, 801037c <_dtoa_r+0x78c>
 801033e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010340:	2b00      	cmp	r3, #0
 8010342:	f000 80b7 	beq.w	80104b4 <_dtoa_r+0x8c4>
 8010346:	b18c      	cbz	r4, 801036c <_dtoa_r+0x77c>
 8010348:	4629      	mov	r1, r5
 801034a:	4622      	mov	r2, r4
 801034c:	4658      	mov	r0, fp
 801034e:	f000 ffa7 	bl	80112a0 <__pow5mult>
 8010352:	464a      	mov	r2, r9
 8010354:	4601      	mov	r1, r0
 8010356:	4605      	mov	r5, r0
 8010358:	4658      	mov	r0, fp
 801035a:	f000 fef7 	bl	801114c <__multiply>
 801035e:	4649      	mov	r1, r9
 8010360:	9004      	str	r0, [sp, #16]
 8010362:	4658      	mov	r0, fp
 8010364:	f000 fdde 	bl	8010f24 <_Bfree>
 8010368:	9b04      	ldr	r3, [sp, #16]
 801036a:	4699      	mov	r9, r3
 801036c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801036e:	1b1a      	subs	r2, r3, r4
 8010370:	d004      	beq.n	801037c <_dtoa_r+0x78c>
 8010372:	4649      	mov	r1, r9
 8010374:	4658      	mov	r0, fp
 8010376:	f000 ff93 	bl	80112a0 <__pow5mult>
 801037a:	4681      	mov	r9, r0
 801037c:	2101      	movs	r1, #1
 801037e:	4658      	mov	r0, fp
 8010380:	f000 fece 	bl	8011120 <__i2b>
 8010384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010386:	4604      	mov	r4, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 81cf 	beq.w	801072c <_dtoa_r+0xb3c>
 801038e:	461a      	mov	r2, r3
 8010390:	4601      	mov	r1, r0
 8010392:	4658      	mov	r0, fp
 8010394:	f000 ff84 	bl	80112a0 <__pow5mult>
 8010398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039a:	2b01      	cmp	r3, #1
 801039c:	4604      	mov	r4, r0
 801039e:	f300 8095 	bgt.w	80104cc <_dtoa_r+0x8dc>
 80103a2:	9b02      	ldr	r3, [sp, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f040 8087 	bne.w	80104b8 <_dtoa_r+0x8c8>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f040 8089 	bne.w	80104c8 <_dtoa_r+0x8d8>
 80103b6:	9b03      	ldr	r3, [sp, #12]
 80103b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80103bc:	0d1b      	lsrs	r3, r3, #20
 80103be:	051b      	lsls	r3, r3, #20
 80103c0:	b12b      	cbz	r3, 80103ce <_dtoa_r+0x7de>
 80103c2:	9b08      	ldr	r3, [sp, #32]
 80103c4:	3301      	adds	r3, #1
 80103c6:	9308      	str	r3, [sp, #32]
 80103c8:	f108 0801 	add.w	r8, r8, #1
 80103cc:	2301      	movs	r3, #1
 80103ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80103d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 81b0 	beq.w	8010738 <_dtoa_r+0xb48>
 80103d8:	6923      	ldr	r3, [r4, #16]
 80103da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103de:	6918      	ldr	r0, [r3, #16]
 80103e0:	f000 fe52 	bl	8011088 <__hi0bits>
 80103e4:	f1c0 0020 	rsb	r0, r0, #32
 80103e8:	9b08      	ldr	r3, [sp, #32]
 80103ea:	4418      	add	r0, r3
 80103ec:	f010 001f 	ands.w	r0, r0, #31
 80103f0:	d077      	beq.n	80104e2 <_dtoa_r+0x8f2>
 80103f2:	f1c0 0320 	rsb	r3, r0, #32
 80103f6:	2b04      	cmp	r3, #4
 80103f8:	dd6b      	ble.n	80104d2 <_dtoa_r+0x8e2>
 80103fa:	9b08      	ldr	r3, [sp, #32]
 80103fc:	f1c0 001c 	rsb	r0, r0, #28
 8010400:	4403      	add	r3, r0
 8010402:	4480      	add	r8, r0
 8010404:	4406      	add	r6, r0
 8010406:	9308      	str	r3, [sp, #32]
 8010408:	f1b8 0f00 	cmp.w	r8, #0
 801040c:	dd05      	ble.n	801041a <_dtoa_r+0x82a>
 801040e:	4649      	mov	r1, r9
 8010410:	4642      	mov	r2, r8
 8010412:	4658      	mov	r0, fp
 8010414:	f000 ff9e 	bl	8011354 <__lshift>
 8010418:	4681      	mov	r9, r0
 801041a:	9b08      	ldr	r3, [sp, #32]
 801041c:	2b00      	cmp	r3, #0
 801041e:	dd05      	ble.n	801042c <_dtoa_r+0x83c>
 8010420:	4621      	mov	r1, r4
 8010422:	461a      	mov	r2, r3
 8010424:	4658      	mov	r0, fp
 8010426:	f000 ff95 	bl	8011354 <__lshift>
 801042a:	4604      	mov	r4, r0
 801042c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801042e:	2b00      	cmp	r3, #0
 8010430:	d059      	beq.n	80104e6 <_dtoa_r+0x8f6>
 8010432:	4621      	mov	r1, r4
 8010434:	4648      	mov	r0, r9
 8010436:	f000 fff9 	bl	801142c <__mcmp>
 801043a:	2800      	cmp	r0, #0
 801043c:	da53      	bge.n	80104e6 <_dtoa_r+0x8f6>
 801043e:	1e7b      	subs	r3, r7, #1
 8010440:	9304      	str	r3, [sp, #16]
 8010442:	4649      	mov	r1, r9
 8010444:	2300      	movs	r3, #0
 8010446:	220a      	movs	r2, #10
 8010448:	4658      	mov	r0, fp
 801044a:	f000 fd8d 	bl	8010f68 <__multadd>
 801044e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010450:	4681      	mov	r9, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 8172 	beq.w	801073c <_dtoa_r+0xb4c>
 8010458:	2300      	movs	r3, #0
 801045a:	4629      	mov	r1, r5
 801045c:	220a      	movs	r2, #10
 801045e:	4658      	mov	r0, fp
 8010460:	f000 fd82 	bl	8010f68 <__multadd>
 8010464:	9b00      	ldr	r3, [sp, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	4605      	mov	r5, r0
 801046a:	dc67      	bgt.n	801053c <_dtoa_r+0x94c>
 801046c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801046e:	2b02      	cmp	r3, #2
 8010470:	dc41      	bgt.n	80104f6 <_dtoa_r+0x906>
 8010472:	e063      	b.n	801053c <_dtoa_r+0x94c>
 8010474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801047a:	e746      	b.n	801030a <_dtoa_r+0x71a>
 801047c:	9b07      	ldr	r3, [sp, #28]
 801047e:	1e5c      	subs	r4, r3, #1
 8010480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010482:	42a3      	cmp	r3, r4
 8010484:	bfbf      	itttt	lt
 8010486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010488:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801048a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801048c:	1ae3      	sublt	r3, r4, r3
 801048e:	bfb4      	ite	lt
 8010490:	18d2      	addlt	r2, r2, r3
 8010492:	1b1c      	subge	r4, r3, r4
 8010494:	9b07      	ldr	r3, [sp, #28]
 8010496:	bfbc      	itt	lt
 8010498:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801049a:	2400      	movlt	r4, #0
 801049c:	2b00      	cmp	r3, #0
 801049e:	bfb5      	itete	lt
 80104a0:	eba8 0603 	sublt.w	r6, r8, r3
 80104a4:	9b07      	ldrge	r3, [sp, #28]
 80104a6:	2300      	movlt	r3, #0
 80104a8:	4646      	movge	r6, r8
 80104aa:	e730      	b.n	801030e <_dtoa_r+0x71e>
 80104ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80104ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80104b0:	4646      	mov	r6, r8
 80104b2:	e735      	b.n	8010320 <_dtoa_r+0x730>
 80104b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104b6:	e75c      	b.n	8010372 <_dtoa_r+0x782>
 80104b8:	2300      	movs	r3, #0
 80104ba:	e788      	b.n	80103ce <_dtoa_r+0x7de>
 80104bc:	3fe00000 	.word	0x3fe00000
 80104c0:	40240000 	.word	0x40240000
 80104c4:	40140000 	.word	0x40140000
 80104c8:	9b02      	ldr	r3, [sp, #8]
 80104ca:	e780      	b.n	80103ce <_dtoa_r+0x7de>
 80104cc:	2300      	movs	r3, #0
 80104ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d0:	e782      	b.n	80103d8 <_dtoa_r+0x7e8>
 80104d2:	d099      	beq.n	8010408 <_dtoa_r+0x818>
 80104d4:	9a08      	ldr	r2, [sp, #32]
 80104d6:	331c      	adds	r3, #28
 80104d8:	441a      	add	r2, r3
 80104da:	4498      	add	r8, r3
 80104dc:	441e      	add	r6, r3
 80104de:	9208      	str	r2, [sp, #32]
 80104e0:	e792      	b.n	8010408 <_dtoa_r+0x818>
 80104e2:	4603      	mov	r3, r0
 80104e4:	e7f6      	b.n	80104d4 <_dtoa_r+0x8e4>
 80104e6:	9b07      	ldr	r3, [sp, #28]
 80104e8:	9704      	str	r7, [sp, #16]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	dc20      	bgt.n	8010530 <_dtoa_r+0x940>
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	dd1e      	ble.n	8010534 <_dtoa_r+0x944>
 80104f6:	9b00      	ldr	r3, [sp, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f47f aec0 	bne.w	801027e <_dtoa_r+0x68e>
 80104fe:	4621      	mov	r1, r4
 8010500:	2205      	movs	r2, #5
 8010502:	4658      	mov	r0, fp
 8010504:	f000 fd30 	bl	8010f68 <__multadd>
 8010508:	4601      	mov	r1, r0
 801050a:	4604      	mov	r4, r0
 801050c:	4648      	mov	r0, r9
 801050e:	f000 ff8d 	bl	801142c <__mcmp>
 8010512:	2800      	cmp	r0, #0
 8010514:	f77f aeb3 	ble.w	801027e <_dtoa_r+0x68e>
 8010518:	4656      	mov	r6, sl
 801051a:	2331      	movs	r3, #49	@ 0x31
 801051c:	f806 3b01 	strb.w	r3, [r6], #1
 8010520:	9b04      	ldr	r3, [sp, #16]
 8010522:	3301      	adds	r3, #1
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	e6ae      	b.n	8010286 <_dtoa_r+0x696>
 8010528:	9c07      	ldr	r4, [sp, #28]
 801052a:	9704      	str	r7, [sp, #16]
 801052c:	4625      	mov	r5, r4
 801052e:	e7f3      	b.n	8010518 <_dtoa_r+0x928>
 8010530:	9b07      	ldr	r3, [sp, #28]
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 8104 	beq.w	8010744 <_dtoa_r+0xb54>
 801053c:	2e00      	cmp	r6, #0
 801053e:	dd05      	ble.n	801054c <_dtoa_r+0x95c>
 8010540:	4629      	mov	r1, r5
 8010542:	4632      	mov	r2, r6
 8010544:	4658      	mov	r0, fp
 8010546:	f000 ff05 	bl	8011354 <__lshift>
 801054a:	4605      	mov	r5, r0
 801054c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801054e:	2b00      	cmp	r3, #0
 8010550:	d05a      	beq.n	8010608 <_dtoa_r+0xa18>
 8010552:	6869      	ldr	r1, [r5, #4]
 8010554:	4658      	mov	r0, fp
 8010556:	f000 fca5 	bl	8010ea4 <_Balloc>
 801055a:	4606      	mov	r6, r0
 801055c:	b928      	cbnz	r0, 801056a <_dtoa_r+0x97a>
 801055e:	4b84      	ldr	r3, [pc, #528]	@ (8010770 <_dtoa_r+0xb80>)
 8010560:	4602      	mov	r2, r0
 8010562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010566:	f7ff bb5a 	b.w	800fc1e <_dtoa_r+0x2e>
 801056a:	692a      	ldr	r2, [r5, #16]
 801056c:	3202      	adds	r2, #2
 801056e:	0092      	lsls	r2, r2, #2
 8010570:	f105 010c 	add.w	r1, r5, #12
 8010574:	300c      	adds	r0, #12
 8010576:	f7ff fa78 	bl	800fa6a <memcpy>
 801057a:	2201      	movs	r2, #1
 801057c:	4631      	mov	r1, r6
 801057e:	4658      	mov	r0, fp
 8010580:	f000 fee8 	bl	8011354 <__lshift>
 8010584:	f10a 0301 	add.w	r3, sl, #1
 8010588:	9307      	str	r3, [sp, #28]
 801058a:	9b00      	ldr	r3, [sp, #0]
 801058c:	4453      	add	r3, sl
 801058e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010590:	9b02      	ldr	r3, [sp, #8]
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	462f      	mov	r7, r5
 8010598:	930a      	str	r3, [sp, #40]	@ 0x28
 801059a:	4605      	mov	r5, r0
 801059c:	9b07      	ldr	r3, [sp, #28]
 801059e:	4621      	mov	r1, r4
 80105a0:	3b01      	subs	r3, #1
 80105a2:	4648      	mov	r0, r9
 80105a4:	9300      	str	r3, [sp, #0]
 80105a6:	f7ff fa9b 	bl	800fae0 <quorem>
 80105aa:	4639      	mov	r1, r7
 80105ac:	9002      	str	r0, [sp, #8]
 80105ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80105b2:	4648      	mov	r0, r9
 80105b4:	f000 ff3a 	bl	801142c <__mcmp>
 80105b8:	462a      	mov	r2, r5
 80105ba:	9008      	str	r0, [sp, #32]
 80105bc:	4621      	mov	r1, r4
 80105be:	4658      	mov	r0, fp
 80105c0:	f000 ff50 	bl	8011464 <__mdiff>
 80105c4:	68c2      	ldr	r2, [r0, #12]
 80105c6:	4606      	mov	r6, r0
 80105c8:	bb02      	cbnz	r2, 801060c <_dtoa_r+0xa1c>
 80105ca:	4601      	mov	r1, r0
 80105cc:	4648      	mov	r0, r9
 80105ce:	f000 ff2d 	bl	801142c <__mcmp>
 80105d2:	4602      	mov	r2, r0
 80105d4:	4631      	mov	r1, r6
 80105d6:	4658      	mov	r0, fp
 80105d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80105da:	f000 fca3 	bl	8010f24 <_Bfree>
 80105de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105e2:	9e07      	ldr	r6, [sp, #28]
 80105e4:	ea43 0102 	orr.w	r1, r3, r2
 80105e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105ea:	4319      	orrs	r1, r3
 80105ec:	d110      	bne.n	8010610 <_dtoa_r+0xa20>
 80105ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80105f2:	d029      	beq.n	8010648 <_dtoa_r+0xa58>
 80105f4:	9b08      	ldr	r3, [sp, #32]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dd02      	ble.n	8010600 <_dtoa_r+0xa10>
 80105fa:	9b02      	ldr	r3, [sp, #8]
 80105fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010600:	9b00      	ldr	r3, [sp, #0]
 8010602:	f883 8000 	strb.w	r8, [r3]
 8010606:	e63f      	b.n	8010288 <_dtoa_r+0x698>
 8010608:	4628      	mov	r0, r5
 801060a:	e7bb      	b.n	8010584 <_dtoa_r+0x994>
 801060c:	2201      	movs	r2, #1
 801060e:	e7e1      	b.n	80105d4 <_dtoa_r+0x9e4>
 8010610:	9b08      	ldr	r3, [sp, #32]
 8010612:	2b00      	cmp	r3, #0
 8010614:	db04      	blt.n	8010620 <_dtoa_r+0xa30>
 8010616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010618:	430b      	orrs	r3, r1
 801061a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801061c:	430b      	orrs	r3, r1
 801061e:	d120      	bne.n	8010662 <_dtoa_r+0xa72>
 8010620:	2a00      	cmp	r2, #0
 8010622:	dded      	ble.n	8010600 <_dtoa_r+0xa10>
 8010624:	4649      	mov	r1, r9
 8010626:	2201      	movs	r2, #1
 8010628:	4658      	mov	r0, fp
 801062a:	f000 fe93 	bl	8011354 <__lshift>
 801062e:	4621      	mov	r1, r4
 8010630:	4681      	mov	r9, r0
 8010632:	f000 fefb 	bl	801142c <__mcmp>
 8010636:	2800      	cmp	r0, #0
 8010638:	dc03      	bgt.n	8010642 <_dtoa_r+0xa52>
 801063a:	d1e1      	bne.n	8010600 <_dtoa_r+0xa10>
 801063c:	f018 0f01 	tst.w	r8, #1
 8010640:	d0de      	beq.n	8010600 <_dtoa_r+0xa10>
 8010642:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010646:	d1d8      	bne.n	80105fa <_dtoa_r+0xa0a>
 8010648:	9a00      	ldr	r2, [sp, #0]
 801064a:	2339      	movs	r3, #57	@ 0x39
 801064c:	7013      	strb	r3, [r2, #0]
 801064e:	4633      	mov	r3, r6
 8010650:	461e      	mov	r6, r3
 8010652:	3b01      	subs	r3, #1
 8010654:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010658:	2a39      	cmp	r2, #57	@ 0x39
 801065a:	d052      	beq.n	8010702 <_dtoa_r+0xb12>
 801065c:	3201      	adds	r2, #1
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e612      	b.n	8010288 <_dtoa_r+0x698>
 8010662:	2a00      	cmp	r2, #0
 8010664:	dd07      	ble.n	8010676 <_dtoa_r+0xa86>
 8010666:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801066a:	d0ed      	beq.n	8010648 <_dtoa_r+0xa58>
 801066c:	9a00      	ldr	r2, [sp, #0]
 801066e:	f108 0301 	add.w	r3, r8, #1
 8010672:	7013      	strb	r3, [r2, #0]
 8010674:	e608      	b.n	8010288 <_dtoa_r+0x698>
 8010676:	9b07      	ldr	r3, [sp, #28]
 8010678:	9a07      	ldr	r2, [sp, #28]
 801067a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801067e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010680:	4293      	cmp	r3, r2
 8010682:	d028      	beq.n	80106d6 <_dtoa_r+0xae6>
 8010684:	4649      	mov	r1, r9
 8010686:	2300      	movs	r3, #0
 8010688:	220a      	movs	r2, #10
 801068a:	4658      	mov	r0, fp
 801068c:	f000 fc6c 	bl	8010f68 <__multadd>
 8010690:	42af      	cmp	r7, r5
 8010692:	4681      	mov	r9, r0
 8010694:	f04f 0300 	mov.w	r3, #0
 8010698:	f04f 020a 	mov.w	r2, #10
 801069c:	4639      	mov	r1, r7
 801069e:	4658      	mov	r0, fp
 80106a0:	d107      	bne.n	80106b2 <_dtoa_r+0xac2>
 80106a2:	f000 fc61 	bl	8010f68 <__multadd>
 80106a6:	4607      	mov	r7, r0
 80106a8:	4605      	mov	r5, r0
 80106aa:	9b07      	ldr	r3, [sp, #28]
 80106ac:	3301      	adds	r3, #1
 80106ae:	9307      	str	r3, [sp, #28]
 80106b0:	e774      	b.n	801059c <_dtoa_r+0x9ac>
 80106b2:	f000 fc59 	bl	8010f68 <__multadd>
 80106b6:	4629      	mov	r1, r5
 80106b8:	4607      	mov	r7, r0
 80106ba:	2300      	movs	r3, #0
 80106bc:	220a      	movs	r2, #10
 80106be:	4658      	mov	r0, fp
 80106c0:	f000 fc52 	bl	8010f68 <__multadd>
 80106c4:	4605      	mov	r5, r0
 80106c6:	e7f0      	b.n	80106aa <_dtoa_r+0xaba>
 80106c8:	9b00      	ldr	r3, [sp, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	bfcc      	ite	gt
 80106ce:	461e      	movgt	r6, r3
 80106d0:	2601      	movle	r6, #1
 80106d2:	4456      	add	r6, sl
 80106d4:	2700      	movs	r7, #0
 80106d6:	4649      	mov	r1, r9
 80106d8:	2201      	movs	r2, #1
 80106da:	4658      	mov	r0, fp
 80106dc:	f000 fe3a 	bl	8011354 <__lshift>
 80106e0:	4621      	mov	r1, r4
 80106e2:	4681      	mov	r9, r0
 80106e4:	f000 fea2 	bl	801142c <__mcmp>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	dcb0      	bgt.n	801064e <_dtoa_r+0xa5e>
 80106ec:	d102      	bne.n	80106f4 <_dtoa_r+0xb04>
 80106ee:	f018 0f01 	tst.w	r8, #1
 80106f2:	d1ac      	bne.n	801064e <_dtoa_r+0xa5e>
 80106f4:	4633      	mov	r3, r6
 80106f6:	461e      	mov	r6, r3
 80106f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106fc:	2a30      	cmp	r2, #48	@ 0x30
 80106fe:	d0fa      	beq.n	80106f6 <_dtoa_r+0xb06>
 8010700:	e5c2      	b.n	8010288 <_dtoa_r+0x698>
 8010702:	459a      	cmp	sl, r3
 8010704:	d1a4      	bne.n	8010650 <_dtoa_r+0xa60>
 8010706:	9b04      	ldr	r3, [sp, #16]
 8010708:	3301      	adds	r3, #1
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	2331      	movs	r3, #49	@ 0x31
 801070e:	f88a 3000 	strb.w	r3, [sl]
 8010712:	e5b9      	b.n	8010288 <_dtoa_r+0x698>
 8010714:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010716:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010774 <_dtoa_r+0xb84>
 801071a:	b11b      	cbz	r3, 8010724 <_dtoa_r+0xb34>
 801071c:	f10a 0308 	add.w	r3, sl, #8
 8010720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010722:	6013      	str	r3, [r2, #0]
 8010724:	4650      	mov	r0, sl
 8010726:	b019      	add	sp, #100	@ 0x64
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801072e:	2b01      	cmp	r3, #1
 8010730:	f77f ae37 	ble.w	80103a2 <_dtoa_r+0x7b2>
 8010734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010736:	930a      	str	r3, [sp, #40]	@ 0x28
 8010738:	2001      	movs	r0, #1
 801073a:	e655      	b.n	80103e8 <_dtoa_r+0x7f8>
 801073c:	9b00      	ldr	r3, [sp, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	f77f aed6 	ble.w	80104f0 <_dtoa_r+0x900>
 8010744:	4656      	mov	r6, sl
 8010746:	4621      	mov	r1, r4
 8010748:	4648      	mov	r0, r9
 801074a:	f7ff f9c9 	bl	800fae0 <quorem>
 801074e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010752:	f806 8b01 	strb.w	r8, [r6], #1
 8010756:	9b00      	ldr	r3, [sp, #0]
 8010758:	eba6 020a 	sub.w	r2, r6, sl
 801075c:	4293      	cmp	r3, r2
 801075e:	ddb3      	ble.n	80106c8 <_dtoa_r+0xad8>
 8010760:	4649      	mov	r1, r9
 8010762:	2300      	movs	r3, #0
 8010764:	220a      	movs	r2, #10
 8010766:	4658      	mov	r0, fp
 8010768:	f000 fbfe 	bl	8010f68 <__multadd>
 801076c:	4681      	mov	r9, r0
 801076e:	e7ea      	b.n	8010746 <_dtoa_r+0xb56>
 8010770:	08015cf2 	.word	0x08015cf2
 8010774:	08015c8d 	.word	0x08015c8d

08010778 <_free_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4605      	mov	r5, r0
 801077c:	2900      	cmp	r1, #0
 801077e:	d041      	beq.n	8010804 <_free_r+0x8c>
 8010780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010784:	1f0c      	subs	r4, r1, #4
 8010786:	2b00      	cmp	r3, #0
 8010788:	bfb8      	it	lt
 801078a:	18e4      	addlt	r4, r4, r3
 801078c:	f7fd f930 	bl	800d9f0 <__malloc_lock>
 8010790:	4a1d      	ldr	r2, [pc, #116]	@ (8010808 <_free_r+0x90>)
 8010792:	6813      	ldr	r3, [r2, #0]
 8010794:	b933      	cbnz	r3, 80107a4 <_free_r+0x2c>
 8010796:	6063      	str	r3, [r4, #4]
 8010798:	6014      	str	r4, [r2, #0]
 801079a:	4628      	mov	r0, r5
 801079c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107a0:	f7fd b92c 	b.w	800d9fc <__malloc_unlock>
 80107a4:	42a3      	cmp	r3, r4
 80107a6:	d908      	bls.n	80107ba <_free_r+0x42>
 80107a8:	6820      	ldr	r0, [r4, #0]
 80107aa:	1821      	adds	r1, r4, r0
 80107ac:	428b      	cmp	r3, r1
 80107ae:	bf01      	itttt	eq
 80107b0:	6819      	ldreq	r1, [r3, #0]
 80107b2:	685b      	ldreq	r3, [r3, #4]
 80107b4:	1809      	addeq	r1, r1, r0
 80107b6:	6021      	streq	r1, [r4, #0]
 80107b8:	e7ed      	b.n	8010796 <_free_r+0x1e>
 80107ba:	461a      	mov	r2, r3
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	b10b      	cbz	r3, 80107c4 <_free_r+0x4c>
 80107c0:	42a3      	cmp	r3, r4
 80107c2:	d9fa      	bls.n	80107ba <_free_r+0x42>
 80107c4:	6811      	ldr	r1, [r2, #0]
 80107c6:	1850      	adds	r0, r2, r1
 80107c8:	42a0      	cmp	r0, r4
 80107ca:	d10b      	bne.n	80107e4 <_free_r+0x6c>
 80107cc:	6820      	ldr	r0, [r4, #0]
 80107ce:	4401      	add	r1, r0
 80107d0:	1850      	adds	r0, r2, r1
 80107d2:	4283      	cmp	r3, r0
 80107d4:	6011      	str	r1, [r2, #0]
 80107d6:	d1e0      	bne.n	801079a <_free_r+0x22>
 80107d8:	6818      	ldr	r0, [r3, #0]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	6053      	str	r3, [r2, #4]
 80107de:	4408      	add	r0, r1
 80107e0:	6010      	str	r0, [r2, #0]
 80107e2:	e7da      	b.n	801079a <_free_r+0x22>
 80107e4:	d902      	bls.n	80107ec <_free_r+0x74>
 80107e6:	230c      	movs	r3, #12
 80107e8:	602b      	str	r3, [r5, #0]
 80107ea:	e7d6      	b.n	801079a <_free_r+0x22>
 80107ec:	6820      	ldr	r0, [r4, #0]
 80107ee:	1821      	adds	r1, r4, r0
 80107f0:	428b      	cmp	r3, r1
 80107f2:	bf04      	itt	eq
 80107f4:	6819      	ldreq	r1, [r3, #0]
 80107f6:	685b      	ldreq	r3, [r3, #4]
 80107f8:	6063      	str	r3, [r4, #4]
 80107fa:	bf04      	itt	eq
 80107fc:	1809      	addeq	r1, r1, r0
 80107fe:	6021      	streq	r1, [r4, #0]
 8010800:	6054      	str	r4, [r2, #4]
 8010802:	e7ca      	b.n	801079a <_free_r+0x22>
 8010804:	bd38      	pop	{r3, r4, r5, pc}
 8010806:	bf00      	nop
 8010808:	20000fa0 	.word	0x20000fa0

0801080c <rshift>:
 801080c:	6903      	ldr	r3, [r0, #16]
 801080e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010816:	ea4f 1261 	mov.w	r2, r1, asr #5
 801081a:	f100 0414 	add.w	r4, r0, #20
 801081e:	dd45      	ble.n	80108ac <rshift+0xa0>
 8010820:	f011 011f 	ands.w	r1, r1, #31
 8010824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801082c:	d10c      	bne.n	8010848 <rshift+0x3c>
 801082e:	f100 0710 	add.w	r7, r0, #16
 8010832:	4629      	mov	r1, r5
 8010834:	42b1      	cmp	r1, r6
 8010836:	d334      	bcc.n	80108a2 <rshift+0x96>
 8010838:	1a9b      	subs	r3, r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	1eea      	subs	r2, r5, #3
 801083e:	4296      	cmp	r6, r2
 8010840:	bf38      	it	cc
 8010842:	2300      	movcc	r3, #0
 8010844:	4423      	add	r3, r4
 8010846:	e015      	b.n	8010874 <rshift+0x68>
 8010848:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801084c:	f1c1 0820 	rsb	r8, r1, #32
 8010850:	40cf      	lsrs	r7, r1
 8010852:	f105 0e04 	add.w	lr, r5, #4
 8010856:	46a1      	mov	r9, r4
 8010858:	4576      	cmp	r6, lr
 801085a:	46f4      	mov	ip, lr
 801085c:	d815      	bhi.n	801088a <rshift+0x7e>
 801085e:	1a9a      	subs	r2, r3, r2
 8010860:	0092      	lsls	r2, r2, #2
 8010862:	3a04      	subs	r2, #4
 8010864:	3501      	adds	r5, #1
 8010866:	42ae      	cmp	r6, r5
 8010868:	bf38      	it	cc
 801086a:	2200      	movcc	r2, #0
 801086c:	18a3      	adds	r3, r4, r2
 801086e:	50a7      	str	r7, [r4, r2]
 8010870:	b107      	cbz	r7, 8010874 <rshift+0x68>
 8010872:	3304      	adds	r3, #4
 8010874:	1b1a      	subs	r2, r3, r4
 8010876:	42a3      	cmp	r3, r4
 8010878:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801087c:	bf08      	it	eq
 801087e:	2300      	moveq	r3, #0
 8010880:	6102      	str	r2, [r0, #16]
 8010882:	bf08      	it	eq
 8010884:	6143      	streq	r3, [r0, #20]
 8010886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801088a:	f8dc c000 	ldr.w	ip, [ip]
 801088e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010892:	ea4c 0707 	orr.w	r7, ip, r7
 8010896:	f849 7b04 	str.w	r7, [r9], #4
 801089a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801089e:	40cf      	lsrs	r7, r1
 80108a0:	e7da      	b.n	8010858 <rshift+0x4c>
 80108a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80108a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80108aa:	e7c3      	b.n	8010834 <rshift+0x28>
 80108ac:	4623      	mov	r3, r4
 80108ae:	e7e1      	b.n	8010874 <rshift+0x68>

080108b0 <__hexdig_fun>:
 80108b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80108b4:	2b09      	cmp	r3, #9
 80108b6:	d802      	bhi.n	80108be <__hexdig_fun+0xe>
 80108b8:	3820      	subs	r0, #32
 80108ba:	b2c0      	uxtb	r0, r0
 80108bc:	4770      	bx	lr
 80108be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80108c2:	2b05      	cmp	r3, #5
 80108c4:	d801      	bhi.n	80108ca <__hexdig_fun+0x1a>
 80108c6:	3847      	subs	r0, #71	@ 0x47
 80108c8:	e7f7      	b.n	80108ba <__hexdig_fun+0xa>
 80108ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80108ce:	2b05      	cmp	r3, #5
 80108d0:	d801      	bhi.n	80108d6 <__hexdig_fun+0x26>
 80108d2:	3827      	subs	r0, #39	@ 0x27
 80108d4:	e7f1      	b.n	80108ba <__hexdig_fun+0xa>
 80108d6:	2000      	movs	r0, #0
 80108d8:	4770      	bx	lr
	...

080108dc <__gethex>:
 80108dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e0:	b085      	sub	sp, #20
 80108e2:	468a      	mov	sl, r1
 80108e4:	9302      	str	r3, [sp, #8]
 80108e6:	680b      	ldr	r3, [r1, #0]
 80108e8:	9001      	str	r0, [sp, #4]
 80108ea:	4690      	mov	r8, r2
 80108ec:	1c9c      	adds	r4, r3, #2
 80108ee:	46a1      	mov	r9, r4
 80108f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80108f4:	2830      	cmp	r0, #48	@ 0x30
 80108f6:	d0fa      	beq.n	80108ee <__gethex+0x12>
 80108f8:	eba9 0303 	sub.w	r3, r9, r3
 80108fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010900:	f7ff ffd6 	bl	80108b0 <__hexdig_fun>
 8010904:	4605      	mov	r5, r0
 8010906:	2800      	cmp	r0, #0
 8010908:	d168      	bne.n	80109dc <__gethex+0x100>
 801090a:	49a0      	ldr	r1, [pc, #640]	@ (8010b8c <__gethex+0x2b0>)
 801090c:	2201      	movs	r2, #1
 801090e:	4648      	mov	r0, r9
 8010910:	f7fe ffa0 	bl	800f854 <strncmp>
 8010914:	4607      	mov	r7, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	d167      	bne.n	80109ea <__gethex+0x10e>
 801091a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801091e:	4626      	mov	r6, r4
 8010920:	f7ff ffc6 	bl	80108b0 <__hexdig_fun>
 8010924:	2800      	cmp	r0, #0
 8010926:	d062      	beq.n	80109ee <__gethex+0x112>
 8010928:	4623      	mov	r3, r4
 801092a:	7818      	ldrb	r0, [r3, #0]
 801092c:	2830      	cmp	r0, #48	@ 0x30
 801092e:	4699      	mov	r9, r3
 8010930:	f103 0301 	add.w	r3, r3, #1
 8010934:	d0f9      	beq.n	801092a <__gethex+0x4e>
 8010936:	f7ff ffbb 	bl	80108b0 <__hexdig_fun>
 801093a:	fab0 f580 	clz	r5, r0
 801093e:	096d      	lsrs	r5, r5, #5
 8010940:	f04f 0b01 	mov.w	fp, #1
 8010944:	464a      	mov	r2, r9
 8010946:	4616      	mov	r6, r2
 8010948:	3201      	adds	r2, #1
 801094a:	7830      	ldrb	r0, [r6, #0]
 801094c:	f7ff ffb0 	bl	80108b0 <__hexdig_fun>
 8010950:	2800      	cmp	r0, #0
 8010952:	d1f8      	bne.n	8010946 <__gethex+0x6a>
 8010954:	498d      	ldr	r1, [pc, #564]	@ (8010b8c <__gethex+0x2b0>)
 8010956:	2201      	movs	r2, #1
 8010958:	4630      	mov	r0, r6
 801095a:	f7fe ff7b 	bl	800f854 <strncmp>
 801095e:	2800      	cmp	r0, #0
 8010960:	d13f      	bne.n	80109e2 <__gethex+0x106>
 8010962:	b944      	cbnz	r4, 8010976 <__gethex+0x9a>
 8010964:	1c74      	adds	r4, r6, #1
 8010966:	4622      	mov	r2, r4
 8010968:	4616      	mov	r6, r2
 801096a:	3201      	adds	r2, #1
 801096c:	7830      	ldrb	r0, [r6, #0]
 801096e:	f7ff ff9f 	bl	80108b0 <__hexdig_fun>
 8010972:	2800      	cmp	r0, #0
 8010974:	d1f8      	bne.n	8010968 <__gethex+0x8c>
 8010976:	1ba4      	subs	r4, r4, r6
 8010978:	00a7      	lsls	r7, r4, #2
 801097a:	7833      	ldrb	r3, [r6, #0]
 801097c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010980:	2b50      	cmp	r3, #80	@ 0x50
 8010982:	d13e      	bne.n	8010a02 <__gethex+0x126>
 8010984:	7873      	ldrb	r3, [r6, #1]
 8010986:	2b2b      	cmp	r3, #43	@ 0x2b
 8010988:	d033      	beq.n	80109f2 <__gethex+0x116>
 801098a:	2b2d      	cmp	r3, #45	@ 0x2d
 801098c:	d034      	beq.n	80109f8 <__gethex+0x11c>
 801098e:	1c71      	adds	r1, r6, #1
 8010990:	2400      	movs	r4, #0
 8010992:	7808      	ldrb	r0, [r1, #0]
 8010994:	f7ff ff8c 	bl	80108b0 <__hexdig_fun>
 8010998:	1e43      	subs	r3, r0, #1
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b18      	cmp	r3, #24
 801099e:	d830      	bhi.n	8010a02 <__gethex+0x126>
 80109a0:	f1a0 0210 	sub.w	r2, r0, #16
 80109a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80109a8:	f7ff ff82 	bl	80108b0 <__hexdig_fun>
 80109ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80109b0:	fa5f fc8c 	uxtb.w	ip, ip
 80109b4:	f1bc 0f18 	cmp.w	ip, #24
 80109b8:	f04f 030a 	mov.w	r3, #10
 80109bc:	d91e      	bls.n	80109fc <__gethex+0x120>
 80109be:	b104      	cbz	r4, 80109c2 <__gethex+0xe6>
 80109c0:	4252      	negs	r2, r2
 80109c2:	4417      	add	r7, r2
 80109c4:	f8ca 1000 	str.w	r1, [sl]
 80109c8:	b1ed      	cbz	r5, 8010a06 <__gethex+0x12a>
 80109ca:	f1bb 0f00 	cmp.w	fp, #0
 80109ce:	bf0c      	ite	eq
 80109d0:	2506      	moveq	r5, #6
 80109d2:	2500      	movne	r5, #0
 80109d4:	4628      	mov	r0, r5
 80109d6:	b005      	add	sp, #20
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109dc:	2500      	movs	r5, #0
 80109de:	462c      	mov	r4, r5
 80109e0:	e7b0      	b.n	8010944 <__gethex+0x68>
 80109e2:	2c00      	cmp	r4, #0
 80109e4:	d1c7      	bne.n	8010976 <__gethex+0x9a>
 80109e6:	4627      	mov	r7, r4
 80109e8:	e7c7      	b.n	801097a <__gethex+0x9e>
 80109ea:	464e      	mov	r6, r9
 80109ec:	462f      	mov	r7, r5
 80109ee:	2501      	movs	r5, #1
 80109f0:	e7c3      	b.n	801097a <__gethex+0x9e>
 80109f2:	2400      	movs	r4, #0
 80109f4:	1cb1      	adds	r1, r6, #2
 80109f6:	e7cc      	b.n	8010992 <__gethex+0xb6>
 80109f8:	2401      	movs	r4, #1
 80109fa:	e7fb      	b.n	80109f4 <__gethex+0x118>
 80109fc:	fb03 0002 	mla	r0, r3, r2, r0
 8010a00:	e7ce      	b.n	80109a0 <__gethex+0xc4>
 8010a02:	4631      	mov	r1, r6
 8010a04:	e7de      	b.n	80109c4 <__gethex+0xe8>
 8010a06:	eba6 0309 	sub.w	r3, r6, r9
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	2b07      	cmp	r3, #7
 8010a10:	dc0a      	bgt.n	8010a28 <__gethex+0x14c>
 8010a12:	9801      	ldr	r0, [sp, #4]
 8010a14:	f000 fa46 	bl	8010ea4 <_Balloc>
 8010a18:	4604      	mov	r4, r0
 8010a1a:	b940      	cbnz	r0, 8010a2e <__gethex+0x152>
 8010a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8010b90 <__gethex+0x2b4>)
 8010a1e:	4602      	mov	r2, r0
 8010a20:	21e4      	movs	r1, #228	@ 0xe4
 8010a22:	485c      	ldr	r0, [pc, #368]	@ (8010b94 <__gethex+0x2b8>)
 8010a24:	f7ff f83e 	bl	800faa4 <__assert_func>
 8010a28:	3101      	adds	r1, #1
 8010a2a:	105b      	asrs	r3, r3, #1
 8010a2c:	e7ef      	b.n	8010a0e <__gethex+0x132>
 8010a2e:	f100 0a14 	add.w	sl, r0, #20
 8010a32:	2300      	movs	r3, #0
 8010a34:	4655      	mov	r5, sl
 8010a36:	469b      	mov	fp, r3
 8010a38:	45b1      	cmp	r9, r6
 8010a3a:	d337      	bcc.n	8010aac <__gethex+0x1d0>
 8010a3c:	f845 bb04 	str.w	fp, [r5], #4
 8010a40:	eba5 050a 	sub.w	r5, r5, sl
 8010a44:	10ad      	asrs	r5, r5, #2
 8010a46:	6125      	str	r5, [r4, #16]
 8010a48:	4658      	mov	r0, fp
 8010a4a:	f000 fb1d 	bl	8011088 <__hi0bits>
 8010a4e:	016d      	lsls	r5, r5, #5
 8010a50:	f8d8 6000 	ldr.w	r6, [r8]
 8010a54:	1a2d      	subs	r5, r5, r0
 8010a56:	42b5      	cmp	r5, r6
 8010a58:	dd54      	ble.n	8010b04 <__gethex+0x228>
 8010a5a:	1bad      	subs	r5, r5, r6
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f000 feb1 	bl	80117c6 <__any_on>
 8010a64:	4681      	mov	r9, r0
 8010a66:	b178      	cbz	r0, 8010a88 <__gethex+0x1ac>
 8010a68:	1e6b      	subs	r3, r5, #1
 8010a6a:	1159      	asrs	r1, r3, #5
 8010a6c:	f003 021f 	and.w	r2, r3, #31
 8010a70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010a74:	f04f 0901 	mov.w	r9, #1
 8010a78:	fa09 f202 	lsl.w	r2, r9, r2
 8010a7c:	420a      	tst	r2, r1
 8010a7e:	d003      	beq.n	8010a88 <__gethex+0x1ac>
 8010a80:	454b      	cmp	r3, r9
 8010a82:	dc36      	bgt.n	8010af2 <__gethex+0x216>
 8010a84:	f04f 0902 	mov.w	r9, #2
 8010a88:	4629      	mov	r1, r5
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f7ff febe 	bl	801080c <rshift>
 8010a90:	442f      	add	r7, r5
 8010a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a96:	42bb      	cmp	r3, r7
 8010a98:	da42      	bge.n	8010b20 <__gethex+0x244>
 8010a9a:	9801      	ldr	r0, [sp, #4]
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	f000 fa41 	bl	8010f24 <_Bfree>
 8010aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	25a3      	movs	r5, #163	@ 0xa3
 8010aaa:	e793      	b.n	80109d4 <__gethex+0xf8>
 8010aac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010ab0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010ab2:	d012      	beq.n	8010ada <__gethex+0x1fe>
 8010ab4:	2b20      	cmp	r3, #32
 8010ab6:	d104      	bne.n	8010ac2 <__gethex+0x1e6>
 8010ab8:	f845 bb04 	str.w	fp, [r5], #4
 8010abc:	f04f 0b00 	mov.w	fp, #0
 8010ac0:	465b      	mov	r3, fp
 8010ac2:	7830      	ldrb	r0, [r6, #0]
 8010ac4:	9303      	str	r3, [sp, #12]
 8010ac6:	f7ff fef3 	bl	80108b0 <__hexdig_fun>
 8010aca:	9b03      	ldr	r3, [sp, #12]
 8010acc:	f000 000f 	and.w	r0, r0, #15
 8010ad0:	4098      	lsls	r0, r3
 8010ad2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	e7ae      	b.n	8010a38 <__gethex+0x15c>
 8010ada:	45b1      	cmp	r9, r6
 8010adc:	d8ea      	bhi.n	8010ab4 <__gethex+0x1d8>
 8010ade:	492b      	ldr	r1, [pc, #172]	@ (8010b8c <__gethex+0x2b0>)
 8010ae0:	9303      	str	r3, [sp, #12]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	f7fe feb5 	bl	800f854 <strncmp>
 8010aea:	9b03      	ldr	r3, [sp, #12]
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d1e1      	bne.n	8010ab4 <__gethex+0x1d8>
 8010af0:	e7a2      	b.n	8010a38 <__gethex+0x15c>
 8010af2:	1ea9      	subs	r1, r5, #2
 8010af4:	4620      	mov	r0, r4
 8010af6:	f000 fe66 	bl	80117c6 <__any_on>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d0c2      	beq.n	8010a84 <__gethex+0x1a8>
 8010afe:	f04f 0903 	mov.w	r9, #3
 8010b02:	e7c1      	b.n	8010a88 <__gethex+0x1ac>
 8010b04:	da09      	bge.n	8010b1a <__gethex+0x23e>
 8010b06:	1b75      	subs	r5, r6, r5
 8010b08:	4621      	mov	r1, r4
 8010b0a:	9801      	ldr	r0, [sp, #4]
 8010b0c:	462a      	mov	r2, r5
 8010b0e:	f000 fc21 	bl	8011354 <__lshift>
 8010b12:	1b7f      	subs	r7, r7, r5
 8010b14:	4604      	mov	r4, r0
 8010b16:	f100 0a14 	add.w	sl, r0, #20
 8010b1a:	f04f 0900 	mov.w	r9, #0
 8010b1e:	e7b8      	b.n	8010a92 <__gethex+0x1b6>
 8010b20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b24:	42bd      	cmp	r5, r7
 8010b26:	dd6f      	ble.n	8010c08 <__gethex+0x32c>
 8010b28:	1bed      	subs	r5, r5, r7
 8010b2a:	42ae      	cmp	r6, r5
 8010b2c:	dc34      	bgt.n	8010b98 <__gethex+0x2bc>
 8010b2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b32:	2b02      	cmp	r3, #2
 8010b34:	d022      	beq.n	8010b7c <__gethex+0x2a0>
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	d024      	beq.n	8010b84 <__gethex+0x2a8>
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d115      	bne.n	8010b6a <__gethex+0x28e>
 8010b3e:	42ae      	cmp	r6, r5
 8010b40:	d113      	bne.n	8010b6a <__gethex+0x28e>
 8010b42:	2e01      	cmp	r6, #1
 8010b44:	d10b      	bne.n	8010b5e <__gethex+0x282>
 8010b46:	9a02      	ldr	r2, [sp, #8]
 8010b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b4c:	6013      	str	r3, [r2, #0]
 8010b4e:	2301      	movs	r3, #1
 8010b50:	6123      	str	r3, [r4, #16]
 8010b52:	f8ca 3000 	str.w	r3, [sl]
 8010b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b58:	2562      	movs	r5, #98	@ 0x62
 8010b5a:	601c      	str	r4, [r3, #0]
 8010b5c:	e73a      	b.n	80109d4 <__gethex+0xf8>
 8010b5e:	1e71      	subs	r1, r6, #1
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fe30 	bl	80117c6 <__any_on>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d1ed      	bne.n	8010b46 <__gethex+0x26a>
 8010b6a:	9801      	ldr	r0, [sp, #4]
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	f000 f9d9 	bl	8010f24 <_Bfree>
 8010b72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b74:	2300      	movs	r3, #0
 8010b76:	6013      	str	r3, [r2, #0]
 8010b78:	2550      	movs	r5, #80	@ 0x50
 8010b7a:	e72b      	b.n	80109d4 <__gethex+0xf8>
 8010b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1f3      	bne.n	8010b6a <__gethex+0x28e>
 8010b82:	e7e0      	b.n	8010b46 <__gethex+0x26a>
 8010b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1dd      	bne.n	8010b46 <__gethex+0x26a>
 8010b8a:	e7ee      	b.n	8010b6a <__gethex+0x28e>
 8010b8c:	08015a4c 	.word	0x08015a4c
 8010b90:	08015cf2 	.word	0x08015cf2
 8010b94:	08015d03 	.word	0x08015d03
 8010b98:	1e6f      	subs	r7, r5, #1
 8010b9a:	f1b9 0f00 	cmp.w	r9, #0
 8010b9e:	d130      	bne.n	8010c02 <__gethex+0x326>
 8010ba0:	b127      	cbz	r7, 8010bac <__gethex+0x2d0>
 8010ba2:	4639      	mov	r1, r7
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f000 fe0e 	bl	80117c6 <__any_on>
 8010baa:	4681      	mov	r9, r0
 8010bac:	117a      	asrs	r2, r7, #5
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010bb4:	f007 071f 	and.w	r7, r7, #31
 8010bb8:	40bb      	lsls	r3, r7
 8010bba:	4213      	tst	r3, r2
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	bf18      	it	ne
 8010bc2:	f049 0902 	orrne.w	r9, r9, #2
 8010bc6:	f7ff fe21 	bl	801080c <rshift>
 8010bca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010bce:	1b76      	subs	r6, r6, r5
 8010bd0:	2502      	movs	r5, #2
 8010bd2:	f1b9 0f00 	cmp.w	r9, #0
 8010bd6:	d047      	beq.n	8010c68 <__gethex+0x38c>
 8010bd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d015      	beq.n	8010c0c <__gethex+0x330>
 8010be0:	2b03      	cmp	r3, #3
 8010be2:	d017      	beq.n	8010c14 <__gethex+0x338>
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d109      	bne.n	8010bfc <__gethex+0x320>
 8010be8:	f019 0f02 	tst.w	r9, #2
 8010bec:	d006      	beq.n	8010bfc <__gethex+0x320>
 8010bee:	f8da 3000 	ldr.w	r3, [sl]
 8010bf2:	ea49 0903 	orr.w	r9, r9, r3
 8010bf6:	f019 0f01 	tst.w	r9, #1
 8010bfa:	d10e      	bne.n	8010c1a <__gethex+0x33e>
 8010bfc:	f045 0510 	orr.w	r5, r5, #16
 8010c00:	e032      	b.n	8010c68 <__gethex+0x38c>
 8010c02:	f04f 0901 	mov.w	r9, #1
 8010c06:	e7d1      	b.n	8010bac <__gethex+0x2d0>
 8010c08:	2501      	movs	r5, #1
 8010c0a:	e7e2      	b.n	8010bd2 <__gethex+0x2f6>
 8010c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c0e:	f1c3 0301 	rsb	r3, r3, #1
 8010c12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d0f0      	beq.n	8010bfc <__gethex+0x320>
 8010c1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c1e:	f104 0314 	add.w	r3, r4, #20
 8010c22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c2a:	f04f 0c00 	mov.w	ip, #0
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010c38:	d01b      	beq.n	8010c72 <__gethex+0x396>
 8010c3a:	3201      	adds	r2, #1
 8010c3c:	6002      	str	r2, [r0, #0]
 8010c3e:	2d02      	cmp	r5, #2
 8010c40:	f104 0314 	add.w	r3, r4, #20
 8010c44:	d13c      	bne.n	8010cc0 <__gethex+0x3e4>
 8010c46:	f8d8 2000 	ldr.w	r2, [r8]
 8010c4a:	3a01      	subs	r2, #1
 8010c4c:	42b2      	cmp	r2, r6
 8010c4e:	d109      	bne.n	8010c64 <__gethex+0x388>
 8010c50:	1171      	asrs	r1, r6, #5
 8010c52:	2201      	movs	r2, #1
 8010c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c58:	f006 061f 	and.w	r6, r6, #31
 8010c5c:	fa02 f606 	lsl.w	r6, r2, r6
 8010c60:	421e      	tst	r6, r3
 8010c62:	d13a      	bne.n	8010cda <__gethex+0x3fe>
 8010c64:	f045 0520 	orr.w	r5, r5, #32
 8010c68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c6a:	601c      	str	r4, [r3, #0]
 8010c6c:	9b02      	ldr	r3, [sp, #8]
 8010c6e:	601f      	str	r7, [r3, #0]
 8010c70:	e6b0      	b.n	80109d4 <__gethex+0xf8>
 8010c72:	4299      	cmp	r1, r3
 8010c74:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c78:	d8d9      	bhi.n	8010c2e <__gethex+0x352>
 8010c7a:	68a3      	ldr	r3, [r4, #8]
 8010c7c:	459b      	cmp	fp, r3
 8010c7e:	db17      	blt.n	8010cb0 <__gethex+0x3d4>
 8010c80:	6861      	ldr	r1, [r4, #4]
 8010c82:	9801      	ldr	r0, [sp, #4]
 8010c84:	3101      	adds	r1, #1
 8010c86:	f000 f90d 	bl	8010ea4 <_Balloc>
 8010c8a:	4681      	mov	r9, r0
 8010c8c:	b918      	cbnz	r0, 8010c96 <__gethex+0x3ba>
 8010c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8010cf8 <__gethex+0x41c>)
 8010c90:	4602      	mov	r2, r0
 8010c92:	2184      	movs	r1, #132	@ 0x84
 8010c94:	e6c5      	b.n	8010a22 <__gethex+0x146>
 8010c96:	6922      	ldr	r2, [r4, #16]
 8010c98:	3202      	adds	r2, #2
 8010c9a:	f104 010c 	add.w	r1, r4, #12
 8010c9e:	0092      	lsls	r2, r2, #2
 8010ca0:	300c      	adds	r0, #12
 8010ca2:	f7fe fee2 	bl	800fa6a <memcpy>
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	9801      	ldr	r0, [sp, #4]
 8010caa:	f000 f93b 	bl	8010f24 <_Bfree>
 8010cae:	464c      	mov	r4, r9
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	1c5a      	adds	r2, r3, #1
 8010cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010cb8:	6122      	str	r2, [r4, #16]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	615a      	str	r2, [r3, #20]
 8010cbe:	e7be      	b.n	8010c3e <__gethex+0x362>
 8010cc0:	6922      	ldr	r2, [r4, #16]
 8010cc2:	455a      	cmp	r2, fp
 8010cc4:	dd0b      	ble.n	8010cde <__gethex+0x402>
 8010cc6:	2101      	movs	r1, #1
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f7ff fd9f 	bl	801080c <rshift>
 8010cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cd2:	3701      	adds	r7, #1
 8010cd4:	42bb      	cmp	r3, r7
 8010cd6:	f6ff aee0 	blt.w	8010a9a <__gethex+0x1be>
 8010cda:	2501      	movs	r5, #1
 8010cdc:	e7c2      	b.n	8010c64 <__gethex+0x388>
 8010cde:	f016 061f 	ands.w	r6, r6, #31
 8010ce2:	d0fa      	beq.n	8010cda <__gethex+0x3fe>
 8010ce4:	4453      	add	r3, sl
 8010ce6:	f1c6 0620 	rsb	r6, r6, #32
 8010cea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010cee:	f000 f9cb 	bl	8011088 <__hi0bits>
 8010cf2:	42b0      	cmp	r0, r6
 8010cf4:	dbe7      	blt.n	8010cc6 <__gethex+0x3ea>
 8010cf6:	e7f0      	b.n	8010cda <__gethex+0x3fe>
 8010cf8:	08015cf2 	.word	0x08015cf2

08010cfc <L_shift>:
 8010cfc:	f1c2 0208 	rsb	r2, r2, #8
 8010d00:	0092      	lsls	r2, r2, #2
 8010d02:	b570      	push	{r4, r5, r6, lr}
 8010d04:	f1c2 0620 	rsb	r6, r2, #32
 8010d08:	6843      	ldr	r3, [r0, #4]
 8010d0a:	6804      	ldr	r4, [r0, #0]
 8010d0c:	fa03 f506 	lsl.w	r5, r3, r6
 8010d10:	432c      	orrs	r4, r5
 8010d12:	40d3      	lsrs	r3, r2
 8010d14:	6004      	str	r4, [r0, #0]
 8010d16:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d1a:	4288      	cmp	r0, r1
 8010d1c:	d3f4      	bcc.n	8010d08 <L_shift+0xc>
 8010d1e:	bd70      	pop	{r4, r5, r6, pc}

08010d20 <__match>:
 8010d20:	b530      	push	{r4, r5, lr}
 8010d22:	6803      	ldr	r3, [r0, #0]
 8010d24:	3301      	adds	r3, #1
 8010d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d2a:	b914      	cbnz	r4, 8010d32 <__match+0x12>
 8010d2c:	6003      	str	r3, [r0, #0]
 8010d2e:	2001      	movs	r0, #1
 8010d30:	bd30      	pop	{r4, r5, pc}
 8010d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010d3a:	2d19      	cmp	r5, #25
 8010d3c:	bf98      	it	ls
 8010d3e:	3220      	addls	r2, #32
 8010d40:	42a2      	cmp	r2, r4
 8010d42:	d0f0      	beq.n	8010d26 <__match+0x6>
 8010d44:	2000      	movs	r0, #0
 8010d46:	e7f3      	b.n	8010d30 <__match+0x10>

08010d48 <__hexnan>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	680b      	ldr	r3, [r1, #0]
 8010d4e:	6801      	ldr	r1, [r0, #0]
 8010d50:	115e      	asrs	r6, r3, #5
 8010d52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d56:	f013 031f 	ands.w	r3, r3, #31
 8010d5a:	b087      	sub	sp, #28
 8010d5c:	bf18      	it	ne
 8010d5e:	3604      	addne	r6, #4
 8010d60:	2500      	movs	r5, #0
 8010d62:	1f37      	subs	r7, r6, #4
 8010d64:	4682      	mov	sl, r0
 8010d66:	4690      	mov	r8, r2
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010d6e:	46b9      	mov	r9, r7
 8010d70:	463c      	mov	r4, r7
 8010d72:	9502      	str	r5, [sp, #8]
 8010d74:	46ab      	mov	fp, r5
 8010d76:	784a      	ldrb	r2, [r1, #1]
 8010d78:	1c4b      	adds	r3, r1, #1
 8010d7a:	9303      	str	r3, [sp, #12]
 8010d7c:	b342      	cbz	r2, 8010dd0 <__hexnan+0x88>
 8010d7e:	4610      	mov	r0, r2
 8010d80:	9105      	str	r1, [sp, #20]
 8010d82:	9204      	str	r2, [sp, #16]
 8010d84:	f7ff fd94 	bl	80108b0 <__hexdig_fun>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	d151      	bne.n	8010e30 <__hexnan+0xe8>
 8010d8c:	9a04      	ldr	r2, [sp, #16]
 8010d8e:	9905      	ldr	r1, [sp, #20]
 8010d90:	2a20      	cmp	r2, #32
 8010d92:	d818      	bhi.n	8010dc6 <__hexnan+0x7e>
 8010d94:	9b02      	ldr	r3, [sp, #8]
 8010d96:	459b      	cmp	fp, r3
 8010d98:	dd13      	ble.n	8010dc2 <__hexnan+0x7a>
 8010d9a:	454c      	cmp	r4, r9
 8010d9c:	d206      	bcs.n	8010dac <__hexnan+0x64>
 8010d9e:	2d07      	cmp	r5, #7
 8010da0:	dc04      	bgt.n	8010dac <__hexnan+0x64>
 8010da2:	462a      	mov	r2, r5
 8010da4:	4649      	mov	r1, r9
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7ff ffa8 	bl	8010cfc <L_shift>
 8010dac:	4544      	cmp	r4, r8
 8010dae:	d952      	bls.n	8010e56 <__hexnan+0x10e>
 8010db0:	2300      	movs	r3, #0
 8010db2:	f1a4 0904 	sub.w	r9, r4, #4
 8010db6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010dba:	f8cd b008 	str.w	fp, [sp, #8]
 8010dbe:	464c      	mov	r4, r9
 8010dc0:	461d      	mov	r5, r3
 8010dc2:	9903      	ldr	r1, [sp, #12]
 8010dc4:	e7d7      	b.n	8010d76 <__hexnan+0x2e>
 8010dc6:	2a29      	cmp	r2, #41	@ 0x29
 8010dc8:	d157      	bne.n	8010e7a <__hexnan+0x132>
 8010dca:	3102      	adds	r1, #2
 8010dcc:	f8ca 1000 	str.w	r1, [sl]
 8010dd0:	f1bb 0f00 	cmp.w	fp, #0
 8010dd4:	d051      	beq.n	8010e7a <__hexnan+0x132>
 8010dd6:	454c      	cmp	r4, r9
 8010dd8:	d206      	bcs.n	8010de8 <__hexnan+0xa0>
 8010dda:	2d07      	cmp	r5, #7
 8010ddc:	dc04      	bgt.n	8010de8 <__hexnan+0xa0>
 8010dde:	462a      	mov	r2, r5
 8010de0:	4649      	mov	r1, r9
 8010de2:	4620      	mov	r0, r4
 8010de4:	f7ff ff8a 	bl	8010cfc <L_shift>
 8010de8:	4544      	cmp	r4, r8
 8010dea:	d936      	bls.n	8010e5a <__hexnan+0x112>
 8010dec:	f1a8 0204 	sub.w	r2, r8, #4
 8010df0:	4623      	mov	r3, r4
 8010df2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010df6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010dfa:	429f      	cmp	r7, r3
 8010dfc:	d2f9      	bcs.n	8010df2 <__hexnan+0xaa>
 8010dfe:	1b3b      	subs	r3, r7, r4
 8010e00:	f023 0303 	bic.w	r3, r3, #3
 8010e04:	3304      	adds	r3, #4
 8010e06:	3401      	adds	r4, #1
 8010e08:	3e03      	subs	r6, #3
 8010e0a:	42b4      	cmp	r4, r6
 8010e0c:	bf88      	it	hi
 8010e0e:	2304      	movhi	r3, #4
 8010e10:	4443      	add	r3, r8
 8010e12:	2200      	movs	r2, #0
 8010e14:	f843 2b04 	str.w	r2, [r3], #4
 8010e18:	429f      	cmp	r7, r3
 8010e1a:	d2fb      	bcs.n	8010e14 <__hexnan+0xcc>
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	b91b      	cbnz	r3, 8010e28 <__hexnan+0xe0>
 8010e20:	4547      	cmp	r7, r8
 8010e22:	d128      	bne.n	8010e76 <__hexnan+0x12e>
 8010e24:	2301      	movs	r3, #1
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	2005      	movs	r0, #5
 8010e2a:	b007      	add	sp, #28
 8010e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e30:	3501      	adds	r5, #1
 8010e32:	2d08      	cmp	r5, #8
 8010e34:	f10b 0b01 	add.w	fp, fp, #1
 8010e38:	dd06      	ble.n	8010e48 <__hexnan+0x100>
 8010e3a:	4544      	cmp	r4, r8
 8010e3c:	d9c1      	bls.n	8010dc2 <__hexnan+0x7a>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e44:	2501      	movs	r5, #1
 8010e46:	3c04      	subs	r4, #4
 8010e48:	6822      	ldr	r2, [r4, #0]
 8010e4a:	f000 000f 	and.w	r0, r0, #15
 8010e4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010e52:	6020      	str	r0, [r4, #0]
 8010e54:	e7b5      	b.n	8010dc2 <__hexnan+0x7a>
 8010e56:	2508      	movs	r5, #8
 8010e58:	e7b3      	b.n	8010dc2 <__hexnan+0x7a>
 8010e5a:	9b01      	ldr	r3, [sp, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d0dd      	beq.n	8010e1c <__hexnan+0xd4>
 8010e60:	f1c3 0320 	rsb	r3, r3, #32
 8010e64:	f04f 32ff 	mov.w	r2, #4294967295
 8010e68:	40da      	lsrs	r2, r3
 8010e6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010e6e:	4013      	ands	r3, r2
 8010e70:	f846 3c04 	str.w	r3, [r6, #-4]
 8010e74:	e7d2      	b.n	8010e1c <__hexnan+0xd4>
 8010e76:	3f04      	subs	r7, #4
 8010e78:	e7d0      	b.n	8010e1c <__hexnan+0xd4>
 8010e7a:	2004      	movs	r0, #4
 8010e7c:	e7d5      	b.n	8010e2a <__hexnan+0xe2>

08010e7e <__ascii_mbtowc>:
 8010e7e:	b082      	sub	sp, #8
 8010e80:	b901      	cbnz	r1, 8010e84 <__ascii_mbtowc+0x6>
 8010e82:	a901      	add	r1, sp, #4
 8010e84:	b142      	cbz	r2, 8010e98 <__ascii_mbtowc+0x1a>
 8010e86:	b14b      	cbz	r3, 8010e9c <__ascii_mbtowc+0x1e>
 8010e88:	7813      	ldrb	r3, [r2, #0]
 8010e8a:	600b      	str	r3, [r1, #0]
 8010e8c:	7812      	ldrb	r2, [r2, #0]
 8010e8e:	1e10      	subs	r0, r2, #0
 8010e90:	bf18      	it	ne
 8010e92:	2001      	movne	r0, #1
 8010e94:	b002      	add	sp, #8
 8010e96:	4770      	bx	lr
 8010e98:	4610      	mov	r0, r2
 8010e9a:	e7fb      	b.n	8010e94 <__ascii_mbtowc+0x16>
 8010e9c:	f06f 0001 	mvn.w	r0, #1
 8010ea0:	e7f8      	b.n	8010e94 <__ascii_mbtowc+0x16>
	...

08010ea4 <_Balloc>:
 8010ea4:	b570      	push	{r4, r5, r6, lr}
 8010ea6:	69c6      	ldr	r6, [r0, #28]
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	460d      	mov	r5, r1
 8010eac:	b976      	cbnz	r6, 8010ecc <_Balloc+0x28>
 8010eae:	2010      	movs	r0, #16
 8010eb0:	f7fc fcec 	bl	800d88c <malloc>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	61e0      	str	r0, [r4, #28]
 8010eb8:	b920      	cbnz	r0, 8010ec4 <_Balloc+0x20>
 8010eba:	4b18      	ldr	r3, [pc, #96]	@ (8010f1c <_Balloc+0x78>)
 8010ebc:	4818      	ldr	r0, [pc, #96]	@ (8010f20 <_Balloc+0x7c>)
 8010ebe:	216b      	movs	r1, #107	@ 0x6b
 8010ec0:	f7fe fdf0 	bl	800faa4 <__assert_func>
 8010ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ec8:	6006      	str	r6, [r0, #0]
 8010eca:	60c6      	str	r6, [r0, #12]
 8010ecc:	69e6      	ldr	r6, [r4, #28]
 8010ece:	68f3      	ldr	r3, [r6, #12]
 8010ed0:	b183      	cbz	r3, 8010ef4 <_Balloc+0x50>
 8010ed2:	69e3      	ldr	r3, [r4, #28]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010eda:	b9b8      	cbnz	r0, 8010f0c <_Balloc+0x68>
 8010edc:	2101      	movs	r1, #1
 8010ede:	fa01 f605 	lsl.w	r6, r1, r5
 8010ee2:	1d72      	adds	r2, r6, #5
 8010ee4:	0092      	lsls	r2, r2, #2
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f001 fc97 	bl	801281a <_calloc_r>
 8010eec:	b160      	cbz	r0, 8010f08 <_Balloc+0x64>
 8010eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ef2:	e00e      	b.n	8010f12 <_Balloc+0x6e>
 8010ef4:	2221      	movs	r2, #33	@ 0x21
 8010ef6:	2104      	movs	r1, #4
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f001 fc8e 	bl	801281a <_calloc_r>
 8010efe:	69e3      	ldr	r3, [r4, #28]
 8010f00:	60f0      	str	r0, [r6, #12]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1e4      	bne.n	8010ed2 <_Balloc+0x2e>
 8010f08:	2000      	movs	r0, #0
 8010f0a:	bd70      	pop	{r4, r5, r6, pc}
 8010f0c:	6802      	ldr	r2, [r0, #0]
 8010f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f12:	2300      	movs	r3, #0
 8010f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f18:	e7f7      	b.n	8010f0a <_Balloc+0x66>
 8010f1a:	bf00      	nop
 8010f1c:	08015bd8 	.word	0x08015bd8
 8010f20:	08015d63 	.word	0x08015d63

08010f24 <_Bfree>:
 8010f24:	b570      	push	{r4, r5, r6, lr}
 8010f26:	69c6      	ldr	r6, [r0, #28]
 8010f28:	4605      	mov	r5, r0
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	b976      	cbnz	r6, 8010f4c <_Bfree+0x28>
 8010f2e:	2010      	movs	r0, #16
 8010f30:	f7fc fcac 	bl	800d88c <malloc>
 8010f34:	4602      	mov	r2, r0
 8010f36:	61e8      	str	r0, [r5, #28]
 8010f38:	b920      	cbnz	r0, 8010f44 <_Bfree+0x20>
 8010f3a:	4b09      	ldr	r3, [pc, #36]	@ (8010f60 <_Bfree+0x3c>)
 8010f3c:	4809      	ldr	r0, [pc, #36]	@ (8010f64 <_Bfree+0x40>)
 8010f3e:	218f      	movs	r1, #143	@ 0x8f
 8010f40:	f7fe fdb0 	bl	800faa4 <__assert_func>
 8010f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f48:	6006      	str	r6, [r0, #0]
 8010f4a:	60c6      	str	r6, [r0, #12]
 8010f4c:	b13c      	cbz	r4, 8010f5e <_Bfree+0x3a>
 8010f4e:	69eb      	ldr	r3, [r5, #28]
 8010f50:	6862      	ldr	r2, [r4, #4]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f58:	6021      	str	r1, [r4, #0]
 8010f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f5e:	bd70      	pop	{r4, r5, r6, pc}
 8010f60:	08015bd8 	.word	0x08015bd8
 8010f64:	08015d63 	.word	0x08015d63

08010f68 <__multadd>:
 8010f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6c:	690d      	ldr	r5, [r1, #16]
 8010f6e:	4607      	mov	r7, r0
 8010f70:	460c      	mov	r4, r1
 8010f72:	461e      	mov	r6, r3
 8010f74:	f101 0c14 	add.w	ip, r1, #20
 8010f78:	2000      	movs	r0, #0
 8010f7a:	f8dc 3000 	ldr.w	r3, [ip]
 8010f7e:	b299      	uxth	r1, r3
 8010f80:	fb02 6101 	mla	r1, r2, r1, r6
 8010f84:	0c1e      	lsrs	r6, r3, #16
 8010f86:	0c0b      	lsrs	r3, r1, #16
 8010f88:	fb02 3306 	mla	r3, r2, r6, r3
 8010f8c:	b289      	uxth	r1, r1
 8010f8e:	3001      	adds	r0, #1
 8010f90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f94:	4285      	cmp	r5, r0
 8010f96:	f84c 1b04 	str.w	r1, [ip], #4
 8010f9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f9e:	dcec      	bgt.n	8010f7a <__multadd+0x12>
 8010fa0:	b30e      	cbz	r6, 8010fe6 <__multadd+0x7e>
 8010fa2:	68a3      	ldr	r3, [r4, #8]
 8010fa4:	42ab      	cmp	r3, r5
 8010fa6:	dc19      	bgt.n	8010fdc <__multadd+0x74>
 8010fa8:	6861      	ldr	r1, [r4, #4]
 8010faa:	4638      	mov	r0, r7
 8010fac:	3101      	adds	r1, #1
 8010fae:	f7ff ff79 	bl	8010ea4 <_Balloc>
 8010fb2:	4680      	mov	r8, r0
 8010fb4:	b928      	cbnz	r0, 8010fc2 <__multadd+0x5a>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010fec <__multadd+0x84>)
 8010fba:	480d      	ldr	r0, [pc, #52]	@ (8010ff0 <__multadd+0x88>)
 8010fbc:	21ba      	movs	r1, #186	@ 0xba
 8010fbe:	f7fe fd71 	bl	800faa4 <__assert_func>
 8010fc2:	6922      	ldr	r2, [r4, #16]
 8010fc4:	3202      	adds	r2, #2
 8010fc6:	f104 010c 	add.w	r1, r4, #12
 8010fca:	0092      	lsls	r2, r2, #2
 8010fcc:	300c      	adds	r0, #12
 8010fce:	f7fe fd4c 	bl	800fa6a <memcpy>
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	f7ff ffa5 	bl	8010f24 <_Bfree>
 8010fda:	4644      	mov	r4, r8
 8010fdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fe0:	3501      	adds	r5, #1
 8010fe2:	615e      	str	r6, [r3, #20]
 8010fe4:	6125      	str	r5, [r4, #16]
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fec:	08015cf2 	.word	0x08015cf2
 8010ff0:	08015d63 	.word	0x08015d63

08010ff4 <__s2b>:
 8010ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	4615      	mov	r5, r2
 8010ffc:	461f      	mov	r7, r3
 8010ffe:	2209      	movs	r2, #9
 8011000:	3308      	adds	r3, #8
 8011002:	4606      	mov	r6, r0
 8011004:	fb93 f3f2 	sdiv	r3, r3, r2
 8011008:	2100      	movs	r1, #0
 801100a:	2201      	movs	r2, #1
 801100c:	429a      	cmp	r2, r3
 801100e:	db09      	blt.n	8011024 <__s2b+0x30>
 8011010:	4630      	mov	r0, r6
 8011012:	f7ff ff47 	bl	8010ea4 <_Balloc>
 8011016:	b940      	cbnz	r0, 801102a <__s2b+0x36>
 8011018:	4602      	mov	r2, r0
 801101a:	4b19      	ldr	r3, [pc, #100]	@ (8011080 <__s2b+0x8c>)
 801101c:	4819      	ldr	r0, [pc, #100]	@ (8011084 <__s2b+0x90>)
 801101e:	21d3      	movs	r1, #211	@ 0xd3
 8011020:	f7fe fd40 	bl	800faa4 <__assert_func>
 8011024:	0052      	lsls	r2, r2, #1
 8011026:	3101      	adds	r1, #1
 8011028:	e7f0      	b.n	801100c <__s2b+0x18>
 801102a:	9b08      	ldr	r3, [sp, #32]
 801102c:	6143      	str	r3, [r0, #20]
 801102e:	2d09      	cmp	r5, #9
 8011030:	f04f 0301 	mov.w	r3, #1
 8011034:	6103      	str	r3, [r0, #16]
 8011036:	dd16      	ble.n	8011066 <__s2b+0x72>
 8011038:	f104 0909 	add.w	r9, r4, #9
 801103c:	46c8      	mov	r8, r9
 801103e:	442c      	add	r4, r5
 8011040:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011044:	4601      	mov	r1, r0
 8011046:	3b30      	subs	r3, #48	@ 0x30
 8011048:	220a      	movs	r2, #10
 801104a:	4630      	mov	r0, r6
 801104c:	f7ff ff8c 	bl	8010f68 <__multadd>
 8011050:	45a0      	cmp	r8, r4
 8011052:	d1f5      	bne.n	8011040 <__s2b+0x4c>
 8011054:	f1a5 0408 	sub.w	r4, r5, #8
 8011058:	444c      	add	r4, r9
 801105a:	1b2d      	subs	r5, r5, r4
 801105c:	1963      	adds	r3, r4, r5
 801105e:	42bb      	cmp	r3, r7
 8011060:	db04      	blt.n	801106c <__s2b+0x78>
 8011062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011066:	340a      	adds	r4, #10
 8011068:	2509      	movs	r5, #9
 801106a:	e7f6      	b.n	801105a <__s2b+0x66>
 801106c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011070:	4601      	mov	r1, r0
 8011072:	3b30      	subs	r3, #48	@ 0x30
 8011074:	220a      	movs	r2, #10
 8011076:	4630      	mov	r0, r6
 8011078:	f7ff ff76 	bl	8010f68 <__multadd>
 801107c:	e7ee      	b.n	801105c <__s2b+0x68>
 801107e:	bf00      	nop
 8011080:	08015cf2 	.word	0x08015cf2
 8011084:	08015d63 	.word	0x08015d63

08011088 <__hi0bits>:
 8011088:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801108c:	4603      	mov	r3, r0
 801108e:	bf36      	itet	cc
 8011090:	0403      	lslcc	r3, r0, #16
 8011092:	2000      	movcs	r0, #0
 8011094:	2010      	movcc	r0, #16
 8011096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801109a:	bf3c      	itt	cc
 801109c:	021b      	lslcc	r3, r3, #8
 801109e:	3008      	addcc	r0, #8
 80110a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110a4:	bf3c      	itt	cc
 80110a6:	011b      	lslcc	r3, r3, #4
 80110a8:	3004      	addcc	r0, #4
 80110aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110ae:	bf3c      	itt	cc
 80110b0:	009b      	lslcc	r3, r3, #2
 80110b2:	3002      	addcc	r0, #2
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	db05      	blt.n	80110c4 <__hi0bits+0x3c>
 80110b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110bc:	f100 0001 	add.w	r0, r0, #1
 80110c0:	bf08      	it	eq
 80110c2:	2020      	moveq	r0, #32
 80110c4:	4770      	bx	lr

080110c6 <__lo0bits>:
 80110c6:	6803      	ldr	r3, [r0, #0]
 80110c8:	4602      	mov	r2, r0
 80110ca:	f013 0007 	ands.w	r0, r3, #7
 80110ce:	d00b      	beq.n	80110e8 <__lo0bits+0x22>
 80110d0:	07d9      	lsls	r1, r3, #31
 80110d2:	d421      	bmi.n	8011118 <__lo0bits+0x52>
 80110d4:	0798      	lsls	r0, r3, #30
 80110d6:	bf49      	itett	mi
 80110d8:	085b      	lsrmi	r3, r3, #1
 80110da:	089b      	lsrpl	r3, r3, #2
 80110dc:	2001      	movmi	r0, #1
 80110de:	6013      	strmi	r3, [r2, #0]
 80110e0:	bf5c      	itt	pl
 80110e2:	6013      	strpl	r3, [r2, #0]
 80110e4:	2002      	movpl	r0, #2
 80110e6:	4770      	bx	lr
 80110e8:	b299      	uxth	r1, r3
 80110ea:	b909      	cbnz	r1, 80110f0 <__lo0bits+0x2a>
 80110ec:	0c1b      	lsrs	r3, r3, #16
 80110ee:	2010      	movs	r0, #16
 80110f0:	b2d9      	uxtb	r1, r3
 80110f2:	b909      	cbnz	r1, 80110f8 <__lo0bits+0x32>
 80110f4:	3008      	adds	r0, #8
 80110f6:	0a1b      	lsrs	r3, r3, #8
 80110f8:	0719      	lsls	r1, r3, #28
 80110fa:	bf04      	itt	eq
 80110fc:	091b      	lsreq	r3, r3, #4
 80110fe:	3004      	addeq	r0, #4
 8011100:	0799      	lsls	r1, r3, #30
 8011102:	bf04      	itt	eq
 8011104:	089b      	lsreq	r3, r3, #2
 8011106:	3002      	addeq	r0, #2
 8011108:	07d9      	lsls	r1, r3, #31
 801110a:	d403      	bmi.n	8011114 <__lo0bits+0x4e>
 801110c:	085b      	lsrs	r3, r3, #1
 801110e:	f100 0001 	add.w	r0, r0, #1
 8011112:	d003      	beq.n	801111c <__lo0bits+0x56>
 8011114:	6013      	str	r3, [r2, #0]
 8011116:	4770      	bx	lr
 8011118:	2000      	movs	r0, #0
 801111a:	4770      	bx	lr
 801111c:	2020      	movs	r0, #32
 801111e:	4770      	bx	lr

08011120 <__i2b>:
 8011120:	b510      	push	{r4, lr}
 8011122:	460c      	mov	r4, r1
 8011124:	2101      	movs	r1, #1
 8011126:	f7ff febd 	bl	8010ea4 <_Balloc>
 801112a:	4602      	mov	r2, r0
 801112c:	b928      	cbnz	r0, 801113a <__i2b+0x1a>
 801112e:	4b05      	ldr	r3, [pc, #20]	@ (8011144 <__i2b+0x24>)
 8011130:	4805      	ldr	r0, [pc, #20]	@ (8011148 <__i2b+0x28>)
 8011132:	f240 1145 	movw	r1, #325	@ 0x145
 8011136:	f7fe fcb5 	bl	800faa4 <__assert_func>
 801113a:	2301      	movs	r3, #1
 801113c:	6144      	str	r4, [r0, #20]
 801113e:	6103      	str	r3, [r0, #16]
 8011140:	bd10      	pop	{r4, pc}
 8011142:	bf00      	nop
 8011144:	08015cf2 	.word	0x08015cf2
 8011148:	08015d63 	.word	0x08015d63

0801114c <__multiply>:
 801114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011150:	4614      	mov	r4, r2
 8011152:	690a      	ldr	r2, [r1, #16]
 8011154:	6923      	ldr	r3, [r4, #16]
 8011156:	429a      	cmp	r2, r3
 8011158:	bfa8      	it	ge
 801115a:	4623      	movge	r3, r4
 801115c:	460f      	mov	r7, r1
 801115e:	bfa4      	itt	ge
 8011160:	460c      	movge	r4, r1
 8011162:	461f      	movge	r7, r3
 8011164:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011168:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801116c:	68a3      	ldr	r3, [r4, #8]
 801116e:	6861      	ldr	r1, [r4, #4]
 8011170:	eb0a 0609 	add.w	r6, sl, r9
 8011174:	42b3      	cmp	r3, r6
 8011176:	b085      	sub	sp, #20
 8011178:	bfb8      	it	lt
 801117a:	3101      	addlt	r1, #1
 801117c:	f7ff fe92 	bl	8010ea4 <_Balloc>
 8011180:	b930      	cbnz	r0, 8011190 <__multiply+0x44>
 8011182:	4602      	mov	r2, r0
 8011184:	4b44      	ldr	r3, [pc, #272]	@ (8011298 <__multiply+0x14c>)
 8011186:	4845      	ldr	r0, [pc, #276]	@ (801129c <__multiply+0x150>)
 8011188:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801118c:	f7fe fc8a 	bl	800faa4 <__assert_func>
 8011190:	f100 0514 	add.w	r5, r0, #20
 8011194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011198:	462b      	mov	r3, r5
 801119a:	2200      	movs	r2, #0
 801119c:	4543      	cmp	r3, r8
 801119e:	d321      	bcc.n	80111e4 <__multiply+0x98>
 80111a0:	f107 0114 	add.w	r1, r7, #20
 80111a4:	f104 0214 	add.w	r2, r4, #20
 80111a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111b0:	9302      	str	r3, [sp, #8]
 80111b2:	1b13      	subs	r3, r2, r4
 80111b4:	3b15      	subs	r3, #21
 80111b6:	f023 0303 	bic.w	r3, r3, #3
 80111ba:	3304      	adds	r3, #4
 80111bc:	f104 0715 	add.w	r7, r4, #21
 80111c0:	42ba      	cmp	r2, r7
 80111c2:	bf38      	it	cc
 80111c4:	2304      	movcc	r3, #4
 80111c6:	9301      	str	r3, [sp, #4]
 80111c8:	9b02      	ldr	r3, [sp, #8]
 80111ca:	9103      	str	r1, [sp, #12]
 80111cc:	428b      	cmp	r3, r1
 80111ce:	d80c      	bhi.n	80111ea <__multiply+0x9e>
 80111d0:	2e00      	cmp	r6, #0
 80111d2:	dd03      	ble.n	80111dc <__multiply+0x90>
 80111d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d05b      	beq.n	8011294 <__multiply+0x148>
 80111dc:	6106      	str	r6, [r0, #16]
 80111de:	b005      	add	sp, #20
 80111e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e4:	f843 2b04 	str.w	r2, [r3], #4
 80111e8:	e7d8      	b.n	801119c <__multiply+0x50>
 80111ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80111ee:	f1ba 0f00 	cmp.w	sl, #0
 80111f2:	d024      	beq.n	801123e <__multiply+0xf2>
 80111f4:	f104 0e14 	add.w	lr, r4, #20
 80111f8:	46a9      	mov	r9, r5
 80111fa:	f04f 0c00 	mov.w	ip, #0
 80111fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011202:	f8d9 3000 	ldr.w	r3, [r9]
 8011206:	fa1f fb87 	uxth.w	fp, r7
 801120a:	b29b      	uxth	r3, r3
 801120c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011210:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011214:	f8d9 7000 	ldr.w	r7, [r9]
 8011218:	4463      	add	r3, ip
 801121a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801121e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011222:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011226:	b29b      	uxth	r3, r3
 8011228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801122c:	4572      	cmp	r2, lr
 801122e:	f849 3b04 	str.w	r3, [r9], #4
 8011232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011236:	d8e2      	bhi.n	80111fe <__multiply+0xb2>
 8011238:	9b01      	ldr	r3, [sp, #4]
 801123a:	f845 c003 	str.w	ip, [r5, r3]
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011244:	3104      	adds	r1, #4
 8011246:	f1b9 0f00 	cmp.w	r9, #0
 801124a:	d021      	beq.n	8011290 <__multiply+0x144>
 801124c:	682b      	ldr	r3, [r5, #0]
 801124e:	f104 0c14 	add.w	ip, r4, #20
 8011252:	46ae      	mov	lr, r5
 8011254:	f04f 0a00 	mov.w	sl, #0
 8011258:	f8bc b000 	ldrh.w	fp, [ip]
 801125c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011260:	fb09 770b 	mla	r7, r9, fp, r7
 8011264:	4457      	add	r7, sl
 8011266:	b29b      	uxth	r3, r3
 8011268:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801126c:	f84e 3b04 	str.w	r3, [lr], #4
 8011270:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011278:	f8be 3000 	ldrh.w	r3, [lr]
 801127c:	fb09 330a 	mla	r3, r9, sl, r3
 8011280:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011284:	4562      	cmp	r2, ip
 8011286:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801128a:	d8e5      	bhi.n	8011258 <__multiply+0x10c>
 801128c:	9f01      	ldr	r7, [sp, #4]
 801128e:	51eb      	str	r3, [r5, r7]
 8011290:	3504      	adds	r5, #4
 8011292:	e799      	b.n	80111c8 <__multiply+0x7c>
 8011294:	3e01      	subs	r6, #1
 8011296:	e79b      	b.n	80111d0 <__multiply+0x84>
 8011298:	08015cf2 	.word	0x08015cf2
 801129c:	08015d63 	.word	0x08015d63

080112a0 <__pow5mult>:
 80112a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	4615      	mov	r5, r2
 80112a6:	f012 0203 	ands.w	r2, r2, #3
 80112aa:	4607      	mov	r7, r0
 80112ac:	460e      	mov	r6, r1
 80112ae:	d007      	beq.n	80112c0 <__pow5mult+0x20>
 80112b0:	4c25      	ldr	r4, [pc, #148]	@ (8011348 <__pow5mult+0xa8>)
 80112b2:	3a01      	subs	r2, #1
 80112b4:	2300      	movs	r3, #0
 80112b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112ba:	f7ff fe55 	bl	8010f68 <__multadd>
 80112be:	4606      	mov	r6, r0
 80112c0:	10ad      	asrs	r5, r5, #2
 80112c2:	d03d      	beq.n	8011340 <__pow5mult+0xa0>
 80112c4:	69fc      	ldr	r4, [r7, #28]
 80112c6:	b97c      	cbnz	r4, 80112e8 <__pow5mult+0x48>
 80112c8:	2010      	movs	r0, #16
 80112ca:	f7fc fadf 	bl	800d88c <malloc>
 80112ce:	4602      	mov	r2, r0
 80112d0:	61f8      	str	r0, [r7, #28]
 80112d2:	b928      	cbnz	r0, 80112e0 <__pow5mult+0x40>
 80112d4:	4b1d      	ldr	r3, [pc, #116]	@ (801134c <__pow5mult+0xac>)
 80112d6:	481e      	ldr	r0, [pc, #120]	@ (8011350 <__pow5mult+0xb0>)
 80112d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112dc:	f7fe fbe2 	bl	800faa4 <__assert_func>
 80112e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112e4:	6004      	str	r4, [r0, #0]
 80112e6:	60c4      	str	r4, [r0, #12]
 80112e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80112ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112f0:	b94c      	cbnz	r4, 8011306 <__pow5mult+0x66>
 80112f2:	f240 2171 	movw	r1, #625	@ 0x271
 80112f6:	4638      	mov	r0, r7
 80112f8:	f7ff ff12 	bl	8011120 <__i2b>
 80112fc:	2300      	movs	r3, #0
 80112fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011302:	4604      	mov	r4, r0
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	f04f 0900 	mov.w	r9, #0
 801130a:	07eb      	lsls	r3, r5, #31
 801130c:	d50a      	bpl.n	8011324 <__pow5mult+0x84>
 801130e:	4631      	mov	r1, r6
 8011310:	4622      	mov	r2, r4
 8011312:	4638      	mov	r0, r7
 8011314:	f7ff ff1a 	bl	801114c <__multiply>
 8011318:	4631      	mov	r1, r6
 801131a:	4680      	mov	r8, r0
 801131c:	4638      	mov	r0, r7
 801131e:	f7ff fe01 	bl	8010f24 <_Bfree>
 8011322:	4646      	mov	r6, r8
 8011324:	106d      	asrs	r5, r5, #1
 8011326:	d00b      	beq.n	8011340 <__pow5mult+0xa0>
 8011328:	6820      	ldr	r0, [r4, #0]
 801132a:	b938      	cbnz	r0, 801133c <__pow5mult+0x9c>
 801132c:	4622      	mov	r2, r4
 801132e:	4621      	mov	r1, r4
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff ff0b 	bl	801114c <__multiply>
 8011336:	6020      	str	r0, [r4, #0]
 8011338:	f8c0 9000 	str.w	r9, [r0]
 801133c:	4604      	mov	r4, r0
 801133e:	e7e4      	b.n	801130a <__pow5mult+0x6a>
 8011340:	4630      	mov	r0, r6
 8011342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011346:	bf00      	nop
 8011348:	08015dbc 	.word	0x08015dbc
 801134c:	08015bd8 	.word	0x08015bd8
 8011350:	08015d63 	.word	0x08015d63

08011354 <__lshift>:
 8011354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011358:	460c      	mov	r4, r1
 801135a:	6849      	ldr	r1, [r1, #4]
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011362:	68a3      	ldr	r3, [r4, #8]
 8011364:	4607      	mov	r7, r0
 8011366:	4691      	mov	r9, r2
 8011368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801136c:	f108 0601 	add.w	r6, r8, #1
 8011370:	42b3      	cmp	r3, r6
 8011372:	db0b      	blt.n	801138c <__lshift+0x38>
 8011374:	4638      	mov	r0, r7
 8011376:	f7ff fd95 	bl	8010ea4 <_Balloc>
 801137a:	4605      	mov	r5, r0
 801137c:	b948      	cbnz	r0, 8011392 <__lshift+0x3e>
 801137e:	4602      	mov	r2, r0
 8011380:	4b28      	ldr	r3, [pc, #160]	@ (8011424 <__lshift+0xd0>)
 8011382:	4829      	ldr	r0, [pc, #164]	@ (8011428 <__lshift+0xd4>)
 8011384:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011388:	f7fe fb8c 	bl	800faa4 <__assert_func>
 801138c:	3101      	adds	r1, #1
 801138e:	005b      	lsls	r3, r3, #1
 8011390:	e7ee      	b.n	8011370 <__lshift+0x1c>
 8011392:	2300      	movs	r3, #0
 8011394:	f100 0114 	add.w	r1, r0, #20
 8011398:	f100 0210 	add.w	r2, r0, #16
 801139c:	4618      	mov	r0, r3
 801139e:	4553      	cmp	r3, sl
 80113a0:	db33      	blt.n	801140a <__lshift+0xb6>
 80113a2:	6920      	ldr	r0, [r4, #16]
 80113a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113a8:	f104 0314 	add.w	r3, r4, #20
 80113ac:	f019 091f 	ands.w	r9, r9, #31
 80113b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113b8:	d02b      	beq.n	8011412 <__lshift+0xbe>
 80113ba:	f1c9 0e20 	rsb	lr, r9, #32
 80113be:	468a      	mov	sl, r1
 80113c0:	2200      	movs	r2, #0
 80113c2:	6818      	ldr	r0, [r3, #0]
 80113c4:	fa00 f009 	lsl.w	r0, r0, r9
 80113c8:	4310      	orrs	r0, r2
 80113ca:	f84a 0b04 	str.w	r0, [sl], #4
 80113ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80113d2:	459c      	cmp	ip, r3
 80113d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80113d8:	d8f3      	bhi.n	80113c2 <__lshift+0x6e>
 80113da:	ebac 0304 	sub.w	r3, ip, r4
 80113de:	3b15      	subs	r3, #21
 80113e0:	f023 0303 	bic.w	r3, r3, #3
 80113e4:	3304      	adds	r3, #4
 80113e6:	f104 0015 	add.w	r0, r4, #21
 80113ea:	4584      	cmp	ip, r0
 80113ec:	bf38      	it	cc
 80113ee:	2304      	movcc	r3, #4
 80113f0:	50ca      	str	r2, [r1, r3]
 80113f2:	b10a      	cbz	r2, 80113f8 <__lshift+0xa4>
 80113f4:	f108 0602 	add.w	r6, r8, #2
 80113f8:	3e01      	subs	r6, #1
 80113fa:	4638      	mov	r0, r7
 80113fc:	612e      	str	r6, [r5, #16]
 80113fe:	4621      	mov	r1, r4
 8011400:	f7ff fd90 	bl	8010f24 <_Bfree>
 8011404:	4628      	mov	r0, r5
 8011406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801140a:	f842 0f04 	str.w	r0, [r2, #4]!
 801140e:	3301      	adds	r3, #1
 8011410:	e7c5      	b.n	801139e <__lshift+0x4a>
 8011412:	3904      	subs	r1, #4
 8011414:	f853 2b04 	ldr.w	r2, [r3], #4
 8011418:	f841 2f04 	str.w	r2, [r1, #4]!
 801141c:	459c      	cmp	ip, r3
 801141e:	d8f9      	bhi.n	8011414 <__lshift+0xc0>
 8011420:	e7ea      	b.n	80113f8 <__lshift+0xa4>
 8011422:	bf00      	nop
 8011424:	08015cf2 	.word	0x08015cf2
 8011428:	08015d63 	.word	0x08015d63

0801142c <__mcmp>:
 801142c:	690a      	ldr	r2, [r1, #16]
 801142e:	4603      	mov	r3, r0
 8011430:	6900      	ldr	r0, [r0, #16]
 8011432:	1a80      	subs	r0, r0, r2
 8011434:	b530      	push	{r4, r5, lr}
 8011436:	d10e      	bne.n	8011456 <__mcmp+0x2a>
 8011438:	3314      	adds	r3, #20
 801143a:	3114      	adds	r1, #20
 801143c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011440:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801144c:	4295      	cmp	r5, r2
 801144e:	d003      	beq.n	8011458 <__mcmp+0x2c>
 8011450:	d205      	bcs.n	801145e <__mcmp+0x32>
 8011452:	f04f 30ff 	mov.w	r0, #4294967295
 8011456:	bd30      	pop	{r4, r5, pc}
 8011458:	42a3      	cmp	r3, r4
 801145a:	d3f3      	bcc.n	8011444 <__mcmp+0x18>
 801145c:	e7fb      	b.n	8011456 <__mcmp+0x2a>
 801145e:	2001      	movs	r0, #1
 8011460:	e7f9      	b.n	8011456 <__mcmp+0x2a>
	...

08011464 <__mdiff>:
 8011464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011468:	4689      	mov	r9, r1
 801146a:	4606      	mov	r6, r0
 801146c:	4611      	mov	r1, r2
 801146e:	4648      	mov	r0, r9
 8011470:	4614      	mov	r4, r2
 8011472:	f7ff ffdb 	bl	801142c <__mcmp>
 8011476:	1e05      	subs	r5, r0, #0
 8011478:	d112      	bne.n	80114a0 <__mdiff+0x3c>
 801147a:	4629      	mov	r1, r5
 801147c:	4630      	mov	r0, r6
 801147e:	f7ff fd11 	bl	8010ea4 <_Balloc>
 8011482:	4602      	mov	r2, r0
 8011484:	b928      	cbnz	r0, 8011492 <__mdiff+0x2e>
 8011486:	4b3f      	ldr	r3, [pc, #252]	@ (8011584 <__mdiff+0x120>)
 8011488:	f240 2137 	movw	r1, #567	@ 0x237
 801148c:	483e      	ldr	r0, [pc, #248]	@ (8011588 <__mdiff+0x124>)
 801148e:	f7fe fb09 	bl	800faa4 <__assert_func>
 8011492:	2301      	movs	r3, #1
 8011494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011498:	4610      	mov	r0, r2
 801149a:	b003      	add	sp, #12
 801149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a0:	bfbc      	itt	lt
 80114a2:	464b      	movlt	r3, r9
 80114a4:	46a1      	movlt	r9, r4
 80114a6:	4630      	mov	r0, r6
 80114a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114ac:	bfba      	itte	lt
 80114ae:	461c      	movlt	r4, r3
 80114b0:	2501      	movlt	r5, #1
 80114b2:	2500      	movge	r5, #0
 80114b4:	f7ff fcf6 	bl	8010ea4 <_Balloc>
 80114b8:	4602      	mov	r2, r0
 80114ba:	b918      	cbnz	r0, 80114c4 <__mdiff+0x60>
 80114bc:	4b31      	ldr	r3, [pc, #196]	@ (8011584 <__mdiff+0x120>)
 80114be:	f240 2145 	movw	r1, #581	@ 0x245
 80114c2:	e7e3      	b.n	801148c <__mdiff+0x28>
 80114c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114c8:	6926      	ldr	r6, [r4, #16]
 80114ca:	60c5      	str	r5, [r0, #12]
 80114cc:	f109 0310 	add.w	r3, r9, #16
 80114d0:	f109 0514 	add.w	r5, r9, #20
 80114d4:	f104 0e14 	add.w	lr, r4, #20
 80114d8:	f100 0b14 	add.w	fp, r0, #20
 80114dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80114e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	46d9      	mov	r9, fp
 80114e8:	f04f 0c00 	mov.w	ip, #0
 80114ec:	9b01      	ldr	r3, [sp, #4]
 80114ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80114f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	fa1f f38a 	uxth.w	r3, sl
 80114fc:	4619      	mov	r1, r3
 80114fe:	b283      	uxth	r3, r0
 8011500:	1acb      	subs	r3, r1, r3
 8011502:	0c00      	lsrs	r0, r0, #16
 8011504:	4463      	add	r3, ip
 8011506:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801150a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801150e:	b29b      	uxth	r3, r3
 8011510:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011514:	4576      	cmp	r6, lr
 8011516:	f849 3b04 	str.w	r3, [r9], #4
 801151a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801151e:	d8e5      	bhi.n	80114ec <__mdiff+0x88>
 8011520:	1b33      	subs	r3, r6, r4
 8011522:	3b15      	subs	r3, #21
 8011524:	f023 0303 	bic.w	r3, r3, #3
 8011528:	3415      	adds	r4, #21
 801152a:	3304      	adds	r3, #4
 801152c:	42a6      	cmp	r6, r4
 801152e:	bf38      	it	cc
 8011530:	2304      	movcc	r3, #4
 8011532:	441d      	add	r5, r3
 8011534:	445b      	add	r3, fp
 8011536:	461e      	mov	r6, r3
 8011538:	462c      	mov	r4, r5
 801153a:	4544      	cmp	r4, r8
 801153c:	d30e      	bcc.n	801155c <__mdiff+0xf8>
 801153e:	f108 0103 	add.w	r1, r8, #3
 8011542:	1b49      	subs	r1, r1, r5
 8011544:	f021 0103 	bic.w	r1, r1, #3
 8011548:	3d03      	subs	r5, #3
 801154a:	45a8      	cmp	r8, r5
 801154c:	bf38      	it	cc
 801154e:	2100      	movcc	r1, #0
 8011550:	440b      	add	r3, r1
 8011552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011556:	b191      	cbz	r1, 801157e <__mdiff+0x11a>
 8011558:	6117      	str	r7, [r2, #16]
 801155a:	e79d      	b.n	8011498 <__mdiff+0x34>
 801155c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011560:	46e6      	mov	lr, ip
 8011562:	0c08      	lsrs	r0, r1, #16
 8011564:	fa1c fc81 	uxtah	ip, ip, r1
 8011568:	4471      	add	r1, lr
 801156a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801156e:	b289      	uxth	r1, r1
 8011570:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011574:	f846 1b04 	str.w	r1, [r6], #4
 8011578:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801157c:	e7dd      	b.n	801153a <__mdiff+0xd6>
 801157e:	3f01      	subs	r7, #1
 8011580:	e7e7      	b.n	8011552 <__mdiff+0xee>
 8011582:	bf00      	nop
 8011584:	08015cf2 	.word	0x08015cf2
 8011588:	08015d63 	.word	0x08015d63

0801158c <__ulp>:
 801158c:	b082      	sub	sp, #8
 801158e:	ed8d 0b00 	vstr	d0, [sp]
 8011592:	9a01      	ldr	r2, [sp, #4]
 8011594:	4b0f      	ldr	r3, [pc, #60]	@ (80115d4 <__ulp+0x48>)
 8011596:	4013      	ands	r3, r2
 8011598:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801159c:	2b00      	cmp	r3, #0
 801159e:	dc08      	bgt.n	80115b2 <__ulp+0x26>
 80115a0:	425b      	negs	r3, r3
 80115a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80115a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80115aa:	da04      	bge.n	80115b6 <__ulp+0x2a>
 80115ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80115b0:	4113      	asrs	r3, r2
 80115b2:	2200      	movs	r2, #0
 80115b4:	e008      	b.n	80115c8 <__ulp+0x3c>
 80115b6:	f1a2 0314 	sub.w	r3, r2, #20
 80115ba:	2b1e      	cmp	r3, #30
 80115bc:	bfda      	itte	le
 80115be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80115c2:	40da      	lsrle	r2, r3
 80115c4:	2201      	movgt	r2, #1
 80115c6:	2300      	movs	r3, #0
 80115c8:	4619      	mov	r1, r3
 80115ca:	4610      	mov	r0, r2
 80115cc:	ec41 0b10 	vmov	d0, r0, r1
 80115d0:	b002      	add	sp, #8
 80115d2:	4770      	bx	lr
 80115d4:	7ff00000 	.word	0x7ff00000

080115d8 <__b2d>:
 80115d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115dc:	6906      	ldr	r6, [r0, #16]
 80115de:	f100 0814 	add.w	r8, r0, #20
 80115e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80115e6:	1f37      	subs	r7, r6, #4
 80115e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115ec:	4610      	mov	r0, r2
 80115ee:	f7ff fd4b 	bl	8011088 <__hi0bits>
 80115f2:	f1c0 0320 	rsb	r3, r0, #32
 80115f6:	280a      	cmp	r0, #10
 80115f8:	600b      	str	r3, [r1, #0]
 80115fa:	491b      	ldr	r1, [pc, #108]	@ (8011668 <__b2d+0x90>)
 80115fc:	dc15      	bgt.n	801162a <__b2d+0x52>
 80115fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8011602:	fa22 f30c 	lsr.w	r3, r2, ip
 8011606:	45b8      	cmp	r8, r7
 8011608:	ea43 0501 	orr.w	r5, r3, r1
 801160c:	bf34      	ite	cc
 801160e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011612:	2300      	movcs	r3, #0
 8011614:	3015      	adds	r0, #21
 8011616:	fa02 f000 	lsl.w	r0, r2, r0
 801161a:	fa23 f30c 	lsr.w	r3, r3, ip
 801161e:	4303      	orrs	r3, r0
 8011620:	461c      	mov	r4, r3
 8011622:	ec45 4b10 	vmov	d0, r4, r5
 8011626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162a:	45b8      	cmp	r8, r7
 801162c:	bf3a      	itte	cc
 801162e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011632:	f1a6 0708 	subcc.w	r7, r6, #8
 8011636:	2300      	movcs	r3, #0
 8011638:	380b      	subs	r0, #11
 801163a:	d012      	beq.n	8011662 <__b2d+0x8a>
 801163c:	f1c0 0120 	rsb	r1, r0, #32
 8011640:	fa23 f401 	lsr.w	r4, r3, r1
 8011644:	4082      	lsls	r2, r0
 8011646:	4322      	orrs	r2, r4
 8011648:	4547      	cmp	r7, r8
 801164a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801164e:	bf8c      	ite	hi
 8011650:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011654:	2200      	movls	r2, #0
 8011656:	4083      	lsls	r3, r0
 8011658:	40ca      	lsrs	r2, r1
 801165a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801165e:	4313      	orrs	r3, r2
 8011660:	e7de      	b.n	8011620 <__b2d+0x48>
 8011662:	ea42 0501 	orr.w	r5, r2, r1
 8011666:	e7db      	b.n	8011620 <__b2d+0x48>
 8011668:	3ff00000 	.word	0x3ff00000

0801166c <__d2b>:
 801166c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011670:	460f      	mov	r7, r1
 8011672:	2101      	movs	r1, #1
 8011674:	ec59 8b10 	vmov	r8, r9, d0
 8011678:	4616      	mov	r6, r2
 801167a:	f7ff fc13 	bl	8010ea4 <_Balloc>
 801167e:	4604      	mov	r4, r0
 8011680:	b930      	cbnz	r0, 8011690 <__d2b+0x24>
 8011682:	4602      	mov	r2, r0
 8011684:	4b23      	ldr	r3, [pc, #140]	@ (8011714 <__d2b+0xa8>)
 8011686:	4824      	ldr	r0, [pc, #144]	@ (8011718 <__d2b+0xac>)
 8011688:	f240 310f 	movw	r1, #783	@ 0x30f
 801168c:	f7fe fa0a 	bl	800faa4 <__assert_func>
 8011690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011698:	b10d      	cbz	r5, 801169e <__d2b+0x32>
 801169a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	f1b8 0300 	subs.w	r3, r8, #0
 80116a4:	d023      	beq.n	80116ee <__d2b+0x82>
 80116a6:	4668      	mov	r0, sp
 80116a8:	9300      	str	r3, [sp, #0]
 80116aa:	f7ff fd0c 	bl	80110c6 <__lo0bits>
 80116ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80116b2:	b1d0      	cbz	r0, 80116ea <__d2b+0x7e>
 80116b4:	f1c0 0320 	rsb	r3, r0, #32
 80116b8:	fa02 f303 	lsl.w	r3, r2, r3
 80116bc:	430b      	orrs	r3, r1
 80116be:	40c2      	lsrs	r2, r0
 80116c0:	6163      	str	r3, [r4, #20]
 80116c2:	9201      	str	r2, [sp, #4]
 80116c4:	9b01      	ldr	r3, [sp, #4]
 80116c6:	61a3      	str	r3, [r4, #24]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	bf0c      	ite	eq
 80116cc:	2201      	moveq	r2, #1
 80116ce:	2202      	movne	r2, #2
 80116d0:	6122      	str	r2, [r4, #16]
 80116d2:	b1a5      	cbz	r5, 80116fe <__d2b+0x92>
 80116d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80116d8:	4405      	add	r5, r0
 80116da:	603d      	str	r5, [r7, #0]
 80116dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80116e0:	6030      	str	r0, [r6, #0]
 80116e2:	4620      	mov	r0, r4
 80116e4:	b003      	add	sp, #12
 80116e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ea:	6161      	str	r1, [r4, #20]
 80116ec:	e7ea      	b.n	80116c4 <__d2b+0x58>
 80116ee:	a801      	add	r0, sp, #4
 80116f0:	f7ff fce9 	bl	80110c6 <__lo0bits>
 80116f4:	9b01      	ldr	r3, [sp, #4]
 80116f6:	6163      	str	r3, [r4, #20]
 80116f8:	3020      	adds	r0, #32
 80116fa:	2201      	movs	r2, #1
 80116fc:	e7e8      	b.n	80116d0 <__d2b+0x64>
 80116fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011706:	6038      	str	r0, [r7, #0]
 8011708:	6918      	ldr	r0, [r3, #16]
 801170a:	f7ff fcbd 	bl	8011088 <__hi0bits>
 801170e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011712:	e7e5      	b.n	80116e0 <__d2b+0x74>
 8011714:	08015cf2 	.word	0x08015cf2
 8011718:	08015d63 	.word	0x08015d63

0801171c <__ratio>:
 801171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011720:	b085      	sub	sp, #20
 8011722:	e9cd 1000 	strd	r1, r0, [sp]
 8011726:	a902      	add	r1, sp, #8
 8011728:	f7ff ff56 	bl	80115d8 <__b2d>
 801172c:	9800      	ldr	r0, [sp, #0]
 801172e:	a903      	add	r1, sp, #12
 8011730:	ec55 4b10 	vmov	r4, r5, d0
 8011734:	f7ff ff50 	bl	80115d8 <__b2d>
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	6919      	ldr	r1, [r3, #16]
 801173c:	9b00      	ldr	r3, [sp, #0]
 801173e:	691b      	ldr	r3, [r3, #16]
 8011740:	1ac9      	subs	r1, r1, r3
 8011742:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011746:	1a9b      	subs	r3, r3, r2
 8011748:	ec5b ab10 	vmov	sl, fp, d0
 801174c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011750:	2b00      	cmp	r3, #0
 8011752:	bfce      	itee	gt
 8011754:	462a      	movgt	r2, r5
 8011756:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801175a:	465a      	movle	r2, fp
 801175c:	462f      	mov	r7, r5
 801175e:	46d9      	mov	r9, fp
 8011760:	bfcc      	ite	gt
 8011762:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011766:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801176a:	464b      	mov	r3, r9
 801176c:	4652      	mov	r2, sl
 801176e:	4620      	mov	r0, r4
 8011770:	4639      	mov	r1, r7
 8011772:	f7ef f87b 	bl	800086c <__aeabi_ddiv>
 8011776:	ec41 0b10 	vmov	d0, r0, r1
 801177a:	b005      	add	sp, #20
 801177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011780 <__copybits>:
 8011780:	3901      	subs	r1, #1
 8011782:	b570      	push	{r4, r5, r6, lr}
 8011784:	1149      	asrs	r1, r1, #5
 8011786:	6914      	ldr	r4, [r2, #16]
 8011788:	3101      	adds	r1, #1
 801178a:	f102 0314 	add.w	r3, r2, #20
 801178e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011792:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011796:	1f05      	subs	r5, r0, #4
 8011798:	42a3      	cmp	r3, r4
 801179a:	d30c      	bcc.n	80117b6 <__copybits+0x36>
 801179c:	1aa3      	subs	r3, r4, r2
 801179e:	3b11      	subs	r3, #17
 80117a0:	f023 0303 	bic.w	r3, r3, #3
 80117a4:	3211      	adds	r2, #17
 80117a6:	42a2      	cmp	r2, r4
 80117a8:	bf88      	it	hi
 80117aa:	2300      	movhi	r3, #0
 80117ac:	4418      	add	r0, r3
 80117ae:	2300      	movs	r3, #0
 80117b0:	4288      	cmp	r0, r1
 80117b2:	d305      	bcc.n	80117c0 <__copybits+0x40>
 80117b4:	bd70      	pop	{r4, r5, r6, pc}
 80117b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80117ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80117be:	e7eb      	b.n	8011798 <__copybits+0x18>
 80117c0:	f840 3b04 	str.w	r3, [r0], #4
 80117c4:	e7f4      	b.n	80117b0 <__copybits+0x30>

080117c6 <__any_on>:
 80117c6:	f100 0214 	add.w	r2, r0, #20
 80117ca:	6900      	ldr	r0, [r0, #16]
 80117cc:	114b      	asrs	r3, r1, #5
 80117ce:	4298      	cmp	r0, r3
 80117d0:	b510      	push	{r4, lr}
 80117d2:	db11      	blt.n	80117f8 <__any_on+0x32>
 80117d4:	dd0a      	ble.n	80117ec <__any_on+0x26>
 80117d6:	f011 011f 	ands.w	r1, r1, #31
 80117da:	d007      	beq.n	80117ec <__any_on+0x26>
 80117dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80117e0:	fa24 f001 	lsr.w	r0, r4, r1
 80117e4:	fa00 f101 	lsl.w	r1, r0, r1
 80117e8:	428c      	cmp	r4, r1
 80117ea:	d10b      	bne.n	8011804 <__any_on+0x3e>
 80117ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d803      	bhi.n	80117fc <__any_on+0x36>
 80117f4:	2000      	movs	r0, #0
 80117f6:	bd10      	pop	{r4, pc}
 80117f8:	4603      	mov	r3, r0
 80117fa:	e7f7      	b.n	80117ec <__any_on+0x26>
 80117fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011800:	2900      	cmp	r1, #0
 8011802:	d0f5      	beq.n	80117f0 <__any_on+0x2a>
 8011804:	2001      	movs	r0, #1
 8011806:	e7f6      	b.n	80117f6 <__any_on+0x30>

08011808 <_malloc_usable_size_r>:
 8011808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801180c:	1f18      	subs	r0, r3, #4
 801180e:	2b00      	cmp	r3, #0
 8011810:	bfbc      	itt	lt
 8011812:	580b      	ldrlt	r3, [r1, r0]
 8011814:	18c0      	addlt	r0, r0, r3
 8011816:	4770      	bx	lr

08011818 <_strtol_l.constprop.0>:
 8011818:	2b24      	cmp	r3, #36	@ 0x24
 801181a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801181e:	4686      	mov	lr, r0
 8011820:	4690      	mov	r8, r2
 8011822:	d801      	bhi.n	8011828 <_strtol_l.constprop.0+0x10>
 8011824:	2b01      	cmp	r3, #1
 8011826:	d106      	bne.n	8011836 <_strtol_l.constprop.0+0x1e>
 8011828:	f7fe f8f2 	bl	800fa10 <__errno>
 801182c:	2316      	movs	r3, #22
 801182e:	6003      	str	r3, [r0, #0]
 8011830:	2000      	movs	r0, #0
 8011832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011836:	4834      	ldr	r0, [pc, #208]	@ (8011908 <_strtol_l.constprop.0+0xf0>)
 8011838:	460d      	mov	r5, r1
 801183a:	462a      	mov	r2, r5
 801183c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011840:	5d06      	ldrb	r6, [r0, r4]
 8011842:	f016 0608 	ands.w	r6, r6, #8
 8011846:	d1f8      	bne.n	801183a <_strtol_l.constprop.0+0x22>
 8011848:	2c2d      	cmp	r4, #45	@ 0x2d
 801184a:	d12d      	bne.n	80118a8 <_strtol_l.constprop.0+0x90>
 801184c:	782c      	ldrb	r4, [r5, #0]
 801184e:	2601      	movs	r6, #1
 8011850:	1c95      	adds	r5, r2, #2
 8011852:	f033 0210 	bics.w	r2, r3, #16
 8011856:	d109      	bne.n	801186c <_strtol_l.constprop.0+0x54>
 8011858:	2c30      	cmp	r4, #48	@ 0x30
 801185a:	d12a      	bne.n	80118b2 <_strtol_l.constprop.0+0x9a>
 801185c:	782a      	ldrb	r2, [r5, #0]
 801185e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011862:	2a58      	cmp	r2, #88	@ 0x58
 8011864:	d125      	bne.n	80118b2 <_strtol_l.constprop.0+0x9a>
 8011866:	786c      	ldrb	r4, [r5, #1]
 8011868:	2310      	movs	r3, #16
 801186a:	3502      	adds	r5, #2
 801186c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011870:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011874:	2200      	movs	r2, #0
 8011876:	fbbc f9f3 	udiv	r9, ip, r3
 801187a:	4610      	mov	r0, r2
 801187c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011880:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011884:	2f09      	cmp	r7, #9
 8011886:	d81b      	bhi.n	80118c0 <_strtol_l.constprop.0+0xa8>
 8011888:	463c      	mov	r4, r7
 801188a:	42a3      	cmp	r3, r4
 801188c:	dd27      	ble.n	80118de <_strtol_l.constprop.0+0xc6>
 801188e:	1c57      	adds	r7, r2, #1
 8011890:	d007      	beq.n	80118a2 <_strtol_l.constprop.0+0x8a>
 8011892:	4581      	cmp	r9, r0
 8011894:	d320      	bcc.n	80118d8 <_strtol_l.constprop.0+0xc0>
 8011896:	d101      	bne.n	801189c <_strtol_l.constprop.0+0x84>
 8011898:	45a2      	cmp	sl, r4
 801189a:	db1d      	blt.n	80118d8 <_strtol_l.constprop.0+0xc0>
 801189c:	fb00 4003 	mla	r0, r0, r3, r4
 80118a0:	2201      	movs	r2, #1
 80118a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118a6:	e7eb      	b.n	8011880 <_strtol_l.constprop.0+0x68>
 80118a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80118aa:	bf04      	itt	eq
 80118ac:	782c      	ldrbeq	r4, [r5, #0]
 80118ae:	1c95      	addeq	r5, r2, #2
 80118b0:	e7cf      	b.n	8011852 <_strtol_l.constprop.0+0x3a>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1da      	bne.n	801186c <_strtol_l.constprop.0+0x54>
 80118b6:	2c30      	cmp	r4, #48	@ 0x30
 80118b8:	bf0c      	ite	eq
 80118ba:	2308      	moveq	r3, #8
 80118bc:	230a      	movne	r3, #10
 80118be:	e7d5      	b.n	801186c <_strtol_l.constprop.0+0x54>
 80118c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80118c4:	2f19      	cmp	r7, #25
 80118c6:	d801      	bhi.n	80118cc <_strtol_l.constprop.0+0xb4>
 80118c8:	3c37      	subs	r4, #55	@ 0x37
 80118ca:	e7de      	b.n	801188a <_strtol_l.constprop.0+0x72>
 80118cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80118d0:	2f19      	cmp	r7, #25
 80118d2:	d804      	bhi.n	80118de <_strtol_l.constprop.0+0xc6>
 80118d4:	3c57      	subs	r4, #87	@ 0x57
 80118d6:	e7d8      	b.n	801188a <_strtol_l.constprop.0+0x72>
 80118d8:	f04f 32ff 	mov.w	r2, #4294967295
 80118dc:	e7e1      	b.n	80118a2 <_strtol_l.constprop.0+0x8a>
 80118de:	1c53      	adds	r3, r2, #1
 80118e0:	d108      	bne.n	80118f4 <_strtol_l.constprop.0+0xdc>
 80118e2:	2322      	movs	r3, #34	@ 0x22
 80118e4:	f8ce 3000 	str.w	r3, [lr]
 80118e8:	4660      	mov	r0, ip
 80118ea:	f1b8 0f00 	cmp.w	r8, #0
 80118ee:	d0a0      	beq.n	8011832 <_strtol_l.constprop.0+0x1a>
 80118f0:	1e69      	subs	r1, r5, #1
 80118f2:	e006      	b.n	8011902 <_strtol_l.constprop.0+0xea>
 80118f4:	b106      	cbz	r6, 80118f8 <_strtol_l.constprop.0+0xe0>
 80118f6:	4240      	negs	r0, r0
 80118f8:	f1b8 0f00 	cmp.w	r8, #0
 80118fc:	d099      	beq.n	8011832 <_strtol_l.constprop.0+0x1a>
 80118fe:	2a00      	cmp	r2, #0
 8011900:	d1f6      	bne.n	80118f0 <_strtol_l.constprop.0+0xd8>
 8011902:	f8c8 1000 	str.w	r1, [r8]
 8011906:	e794      	b.n	8011832 <_strtol_l.constprop.0+0x1a>
 8011908:	08015aa1 	.word	0x08015aa1

0801190c <_strtol_r>:
 801190c:	f7ff bf84 	b.w	8011818 <_strtol_l.constprop.0>

08011910 <__ascii_wctomb>:
 8011910:	4603      	mov	r3, r0
 8011912:	4608      	mov	r0, r1
 8011914:	b141      	cbz	r1, 8011928 <__ascii_wctomb+0x18>
 8011916:	2aff      	cmp	r2, #255	@ 0xff
 8011918:	d904      	bls.n	8011924 <__ascii_wctomb+0x14>
 801191a:	228a      	movs	r2, #138	@ 0x8a
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	f04f 30ff 	mov.w	r0, #4294967295
 8011922:	4770      	bx	lr
 8011924:	700a      	strb	r2, [r1, #0]
 8011926:	2001      	movs	r0, #1
 8011928:	4770      	bx	lr

0801192a <__ssputs_r>:
 801192a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801192e:	688e      	ldr	r6, [r1, #8]
 8011930:	461f      	mov	r7, r3
 8011932:	42be      	cmp	r6, r7
 8011934:	680b      	ldr	r3, [r1, #0]
 8011936:	4682      	mov	sl, r0
 8011938:	460c      	mov	r4, r1
 801193a:	4690      	mov	r8, r2
 801193c:	d82d      	bhi.n	801199a <__ssputs_r+0x70>
 801193e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011942:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011946:	d026      	beq.n	8011996 <__ssputs_r+0x6c>
 8011948:	6965      	ldr	r5, [r4, #20]
 801194a:	6909      	ldr	r1, [r1, #16]
 801194c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011950:	eba3 0901 	sub.w	r9, r3, r1
 8011954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011958:	1c7b      	adds	r3, r7, #1
 801195a:	444b      	add	r3, r9
 801195c:	106d      	asrs	r5, r5, #1
 801195e:	429d      	cmp	r5, r3
 8011960:	bf38      	it	cc
 8011962:	461d      	movcc	r5, r3
 8011964:	0553      	lsls	r3, r2, #21
 8011966:	d527      	bpl.n	80119b8 <__ssputs_r+0x8e>
 8011968:	4629      	mov	r1, r5
 801196a:	f7fb ffc1 	bl	800d8f0 <_malloc_r>
 801196e:	4606      	mov	r6, r0
 8011970:	b360      	cbz	r0, 80119cc <__ssputs_r+0xa2>
 8011972:	6921      	ldr	r1, [r4, #16]
 8011974:	464a      	mov	r2, r9
 8011976:	f7fe f878 	bl	800fa6a <memcpy>
 801197a:	89a3      	ldrh	r3, [r4, #12]
 801197c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	6126      	str	r6, [r4, #16]
 8011988:	6165      	str	r5, [r4, #20]
 801198a:	444e      	add	r6, r9
 801198c:	eba5 0509 	sub.w	r5, r5, r9
 8011990:	6026      	str	r6, [r4, #0]
 8011992:	60a5      	str	r5, [r4, #8]
 8011994:	463e      	mov	r6, r7
 8011996:	42be      	cmp	r6, r7
 8011998:	d900      	bls.n	801199c <__ssputs_r+0x72>
 801199a:	463e      	mov	r6, r7
 801199c:	6820      	ldr	r0, [r4, #0]
 801199e:	4632      	mov	r2, r6
 80119a0:	4641      	mov	r1, r8
 80119a2:	f000 fef6 	bl	8012792 <memmove>
 80119a6:	68a3      	ldr	r3, [r4, #8]
 80119a8:	1b9b      	subs	r3, r3, r6
 80119aa:	60a3      	str	r3, [r4, #8]
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	4433      	add	r3, r6
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	2000      	movs	r0, #0
 80119b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b8:	462a      	mov	r2, r5
 80119ba:	f7fc f82d 	bl	800da18 <_realloc_r>
 80119be:	4606      	mov	r6, r0
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d1e0      	bne.n	8011986 <__ssputs_r+0x5c>
 80119c4:	6921      	ldr	r1, [r4, #16]
 80119c6:	4650      	mov	r0, sl
 80119c8:	f7fe fed6 	bl	8010778 <_free_r>
 80119cc:	230c      	movs	r3, #12
 80119ce:	f8ca 3000 	str.w	r3, [sl]
 80119d2:	89a3      	ldrh	r3, [r4, #12]
 80119d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119d8:	81a3      	strh	r3, [r4, #12]
 80119da:	f04f 30ff 	mov.w	r0, #4294967295
 80119de:	e7e9      	b.n	80119b4 <__ssputs_r+0x8a>

080119e0 <_svfiprintf_r>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	4698      	mov	r8, r3
 80119e6:	898b      	ldrh	r3, [r1, #12]
 80119e8:	061b      	lsls	r3, r3, #24
 80119ea:	b09d      	sub	sp, #116	@ 0x74
 80119ec:	4607      	mov	r7, r0
 80119ee:	460d      	mov	r5, r1
 80119f0:	4614      	mov	r4, r2
 80119f2:	d510      	bpl.n	8011a16 <_svfiprintf_r+0x36>
 80119f4:	690b      	ldr	r3, [r1, #16]
 80119f6:	b973      	cbnz	r3, 8011a16 <_svfiprintf_r+0x36>
 80119f8:	2140      	movs	r1, #64	@ 0x40
 80119fa:	f7fb ff79 	bl	800d8f0 <_malloc_r>
 80119fe:	6028      	str	r0, [r5, #0]
 8011a00:	6128      	str	r0, [r5, #16]
 8011a02:	b930      	cbnz	r0, 8011a12 <_svfiprintf_r+0x32>
 8011a04:	230c      	movs	r3, #12
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0c:	b01d      	add	sp, #116	@ 0x74
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	2340      	movs	r3, #64	@ 0x40
 8011a14:	616b      	str	r3, [r5, #20]
 8011a16:	2300      	movs	r3, #0
 8011a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a1a:	2320      	movs	r3, #32
 8011a1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a24:	2330      	movs	r3, #48	@ 0x30
 8011a26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011bc4 <_svfiprintf_r+0x1e4>
 8011a2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a2e:	f04f 0901 	mov.w	r9, #1
 8011a32:	4623      	mov	r3, r4
 8011a34:	469a      	mov	sl, r3
 8011a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a3a:	b10a      	cbz	r2, 8011a40 <_svfiprintf_r+0x60>
 8011a3c:	2a25      	cmp	r2, #37	@ 0x25
 8011a3e:	d1f9      	bne.n	8011a34 <_svfiprintf_r+0x54>
 8011a40:	ebba 0b04 	subs.w	fp, sl, r4
 8011a44:	d00b      	beq.n	8011a5e <_svfiprintf_r+0x7e>
 8011a46:	465b      	mov	r3, fp
 8011a48:	4622      	mov	r2, r4
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f7ff ff6c 	bl	801192a <__ssputs_r>
 8011a52:	3001      	adds	r0, #1
 8011a54:	f000 80a7 	beq.w	8011ba6 <_svfiprintf_r+0x1c6>
 8011a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a5a:	445a      	add	r2, fp
 8011a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 809f 	beq.w	8011ba6 <_svfiprintf_r+0x1c6>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a72:	f10a 0a01 	add.w	sl, sl, #1
 8011a76:	9304      	str	r3, [sp, #16]
 8011a78:	9307      	str	r3, [sp, #28]
 8011a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a80:	4654      	mov	r4, sl
 8011a82:	2205      	movs	r2, #5
 8011a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a88:	484e      	ldr	r0, [pc, #312]	@ (8011bc4 <_svfiprintf_r+0x1e4>)
 8011a8a:	f7ee fbb1 	bl	80001f0 <memchr>
 8011a8e:	9a04      	ldr	r2, [sp, #16]
 8011a90:	b9d8      	cbnz	r0, 8011aca <_svfiprintf_r+0xea>
 8011a92:	06d0      	lsls	r0, r2, #27
 8011a94:	bf44      	itt	mi
 8011a96:	2320      	movmi	r3, #32
 8011a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a9c:	0711      	lsls	r1, r2, #28
 8011a9e:	bf44      	itt	mi
 8011aa0:	232b      	movmi	r3, #43	@ 0x2b
 8011aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8011aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aac:	d015      	beq.n	8011ada <_svfiprintf_r+0xfa>
 8011aae:	9a07      	ldr	r2, [sp, #28]
 8011ab0:	4654      	mov	r4, sl
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	f04f 0c0a 	mov.w	ip, #10
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011abe:	3b30      	subs	r3, #48	@ 0x30
 8011ac0:	2b09      	cmp	r3, #9
 8011ac2:	d94b      	bls.n	8011b5c <_svfiprintf_r+0x17c>
 8011ac4:	b1b0      	cbz	r0, 8011af4 <_svfiprintf_r+0x114>
 8011ac6:	9207      	str	r2, [sp, #28]
 8011ac8:	e014      	b.n	8011af4 <_svfiprintf_r+0x114>
 8011aca:	eba0 0308 	sub.w	r3, r0, r8
 8011ace:	fa09 f303 	lsl.w	r3, r9, r3
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	9304      	str	r3, [sp, #16]
 8011ad6:	46a2      	mov	sl, r4
 8011ad8:	e7d2      	b.n	8011a80 <_svfiprintf_r+0xa0>
 8011ada:	9b03      	ldr	r3, [sp, #12]
 8011adc:	1d19      	adds	r1, r3, #4
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	9103      	str	r1, [sp, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	bfbb      	ittet	lt
 8011ae6:	425b      	neglt	r3, r3
 8011ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8011aec:	9307      	strge	r3, [sp, #28]
 8011aee:	9307      	strlt	r3, [sp, #28]
 8011af0:	bfb8      	it	lt
 8011af2:	9204      	strlt	r2, [sp, #16]
 8011af4:	7823      	ldrb	r3, [r4, #0]
 8011af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011af8:	d10a      	bne.n	8011b10 <_svfiprintf_r+0x130>
 8011afa:	7863      	ldrb	r3, [r4, #1]
 8011afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011afe:	d132      	bne.n	8011b66 <_svfiprintf_r+0x186>
 8011b00:	9b03      	ldr	r3, [sp, #12]
 8011b02:	1d1a      	adds	r2, r3, #4
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	9203      	str	r2, [sp, #12]
 8011b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b0c:	3402      	adds	r4, #2
 8011b0e:	9305      	str	r3, [sp, #20]
 8011b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bd4 <_svfiprintf_r+0x1f4>
 8011b14:	7821      	ldrb	r1, [r4, #0]
 8011b16:	2203      	movs	r2, #3
 8011b18:	4650      	mov	r0, sl
 8011b1a:	f7ee fb69 	bl	80001f0 <memchr>
 8011b1e:	b138      	cbz	r0, 8011b30 <_svfiprintf_r+0x150>
 8011b20:	9b04      	ldr	r3, [sp, #16]
 8011b22:	eba0 000a 	sub.w	r0, r0, sl
 8011b26:	2240      	movs	r2, #64	@ 0x40
 8011b28:	4082      	lsls	r2, r0
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	3401      	adds	r4, #1
 8011b2e:	9304      	str	r3, [sp, #16]
 8011b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b34:	4824      	ldr	r0, [pc, #144]	@ (8011bc8 <_svfiprintf_r+0x1e8>)
 8011b36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b3a:	2206      	movs	r2, #6
 8011b3c:	f7ee fb58 	bl	80001f0 <memchr>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d036      	beq.n	8011bb2 <_svfiprintf_r+0x1d2>
 8011b44:	4b21      	ldr	r3, [pc, #132]	@ (8011bcc <_svfiprintf_r+0x1ec>)
 8011b46:	bb1b      	cbnz	r3, 8011b90 <_svfiprintf_r+0x1b0>
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	3307      	adds	r3, #7
 8011b4c:	f023 0307 	bic.w	r3, r3, #7
 8011b50:	3308      	adds	r3, #8
 8011b52:	9303      	str	r3, [sp, #12]
 8011b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b56:	4433      	add	r3, r6
 8011b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b5a:	e76a      	b.n	8011a32 <_svfiprintf_r+0x52>
 8011b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b60:	460c      	mov	r4, r1
 8011b62:	2001      	movs	r0, #1
 8011b64:	e7a8      	b.n	8011ab8 <_svfiprintf_r+0xd8>
 8011b66:	2300      	movs	r3, #0
 8011b68:	3401      	adds	r4, #1
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	f04f 0c0a 	mov.w	ip, #10
 8011b72:	4620      	mov	r0, r4
 8011b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b78:	3a30      	subs	r2, #48	@ 0x30
 8011b7a:	2a09      	cmp	r2, #9
 8011b7c:	d903      	bls.n	8011b86 <_svfiprintf_r+0x1a6>
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0c6      	beq.n	8011b10 <_svfiprintf_r+0x130>
 8011b82:	9105      	str	r1, [sp, #20]
 8011b84:	e7c4      	b.n	8011b10 <_svfiprintf_r+0x130>
 8011b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e7f0      	b.n	8011b72 <_svfiprintf_r+0x192>
 8011b90:	ab03      	add	r3, sp, #12
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	462a      	mov	r2, r5
 8011b96:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd0 <_svfiprintf_r+0x1f0>)
 8011b98:	a904      	add	r1, sp, #16
 8011b9a:	4638      	mov	r0, r7
 8011b9c:	f7fc fe1e 	bl	800e7dc <_printf_float>
 8011ba0:	1c42      	adds	r2, r0, #1
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	d1d6      	bne.n	8011b54 <_svfiprintf_r+0x174>
 8011ba6:	89ab      	ldrh	r3, [r5, #12]
 8011ba8:	065b      	lsls	r3, r3, #25
 8011baa:	f53f af2d 	bmi.w	8011a08 <_svfiprintf_r+0x28>
 8011bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bb0:	e72c      	b.n	8011a0c <_svfiprintf_r+0x2c>
 8011bb2:	ab03      	add	r3, sp, #12
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4b05      	ldr	r3, [pc, #20]	@ (8011bd0 <_svfiprintf_r+0x1f0>)
 8011bba:	a904      	add	r1, sp, #16
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	f7fd f8a5 	bl	800ed0c <_printf_i>
 8011bc2:	e7ed      	b.n	8011ba0 <_svfiprintf_r+0x1c0>
 8011bc4:	08015eb8 	.word	0x08015eb8
 8011bc8:	08015ec2 	.word	0x08015ec2
 8011bcc:	0800e7dd 	.word	0x0800e7dd
 8011bd0:	0801192b 	.word	0x0801192b
 8011bd4:	08015ebe 	.word	0x08015ebe

08011bd8 <_sungetc_r>:
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	1c4b      	adds	r3, r1, #1
 8011bdc:	4614      	mov	r4, r2
 8011bde:	d103      	bne.n	8011be8 <_sungetc_r+0x10>
 8011be0:	f04f 35ff 	mov.w	r5, #4294967295
 8011be4:	4628      	mov	r0, r5
 8011be6:	bd38      	pop	{r3, r4, r5, pc}
 8011be8:	8993      	ldrh	r3, [r2, #12]
 8011bea:	f023 0320 	bic.w	r3, r3, #32
 8011bee:	8193      	strh	r3, [r2, #12]
 8011bf0:	6853      	ldr	r3, [r2, #4]
 8011bf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011bf4:	b2cd      	uxtb	r5, r1
 8011bf6:	b18a      	cbz	r2, 8011c1c <_sungetc_r+0x44>
 8011bf8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	dd08      	ble.n	8011c10 <_sungetc_r+0x38>
 8011bfe:	6823      	ldr	r3, [r4, #0]
 8011c00:	1e5a      	subs	r2, r3, #1
 8011c02:	6022      	str	r2, [r4, #0]
 8011c04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011c08:	6863      	ldr	r3, [r4, #4]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	6063      	str	r3, [r4, #4]
 8011c0e:	e7e9      	b.n	8011be4 <_sungetc_r+0xc>
 8011c10:	4621      	mov	r1, r4
 8011c12:	f000 fd84 	bl	801271e <__submore>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d0f1      	beq.n	8011bfe <_sungetc_r+0x26>
 8011c1a:	e7e1      	b.n	8011be0 <_sungetc_r+0x8>
 8011c1c:	6921      	ldr	r1, [r4, #16]
 8011c1e:	6822      	ldr	r2, [r4, #0]
 8011c20:	b141      	cbz	r1, 8011c34 <_sungetc_r+0x5c>
 8011c22:	4291      	cmp	r1, r2
 8011c24:	d206      	bcs.n	8011c34 <_sungetc_r+0x5c>
 8011c26:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011c2a:	42a9      	cmp	r1, r5
 8011c2c:	d102      	bne.n	8011c34 <_sungetc_r+0x5c>
 8011c2e:	3a01      	subs	r2, #1
 8011c30:	6022      	str	r2, [r4, #0]
 8011c32:	e7ea      	b.n	8011c0a <_sungetc_r+0x32>
 8011c34:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c3e:	2303      	movs	r3, #3
 8011c40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011c42:	4623      	mov	r3, r4
 8011c44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e7de      	b.n	8011c0c <_sungetc_r+0x34>

08011c4e <__ssrefill_r>:
 8011c4e:	b510      	push	{r4, lr}
 8011c50:	460c      	mov	r4, r1
 8011c52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011c54:	b169      	cbz	r1, 8011c72 <__ssrefill_r+0x24>
 8011c56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c5a:	4299      	cmp	r1, r3
 8011c5c:	d001      	beq.n	8011c62 <__ssrefill_r+0x14>
 8011c5e:	f7fe fd8b 	bl	8010778 <_free_r>
 8011c62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c64:	6063      	str	r3, [r4, #4]
 8011c66:	2000      	movs	r0, #0
 8011c68:	6360      	str	r0, [r4, #52]	@ 0x34
 8011c6a:	b113      	cbz	r3, 8011c72 <__ssrefill_r+0x24>
 8011c6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011c6e:	6023      	str	r3, [r4, #0]
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	6923      	ldr	r3, [r4, #16]
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	2300      	movs	r3, #0
 8011c78:	6063      	str	r3, [r4, #4]
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	f043 0320 	orr.w	r3, r3, #32
 8011c80:	81a3      	strh	r3, [r4, #12]
 8011c82:	f04f 30ff 	mov.w	r0, #4294967295
 8011c86:	e7f3      	b.n	8011c70 <__ssrefill_r+0x22>

08011c88 <__ssvfiscanf_r>:
 8011c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8c:	460c      	mov	r4, r1
 8011c8e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011c92:	2100      	movs	r1, #0
 8011c94:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011c98:	49a5      	ldr	r1, [pc, #660]	@ (8011f30 <__ssvfiscanf_r+0x2a8>)
 8011c9a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011c9c:	f10d 0804 	add.w	r8, sp, #4
 8011ca0:	49a4      	ldr	r1, [pc, #656]	@ (8011f34 <__ssvfiscanf_r+0x2ac>)
 8011ca2:	4fa5      	ldr	r7, [pc, #660]	@ (8011f38 <__ssvfiscanf_r+0x2b0>)
 8011ca4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011ca8:	4606      	mov	r6, r0
 8011caa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	7813      	ldrb	r3, [r2, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f000 8158 	beq.w	8011f66 <__ssvfiscanf_r+0x2de>
 8011cb6:	5cf9      	ldrb	r1, [r7, r3]
 8011cb8:	f011 0108 	ands.w	r1, r1, #8
 8011cbc:	f102 0501 	add.w	r5, r2, #1
 8011cc0:	d019      	beq.n	8011cf6 <__ssvfiscanf_r+0x6e>
 8011cc2:	6863      	ldr	r3, [r4, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dd0f      	ble.n	8011ce8 <__ssvfiscanf_r+0x60>
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	781a      	ldrb	r2, [r3, #0]
 8011ccc:	5cba      	ldrb	r2, [r7, r2]
 8011cce:	0712      	lsls	r2, r2, #28
 8011cd0:	d401      	bmi.n	8011cd6 <__ssvfiscanf_r+0x4e>
 8011cd2:	462a      	mov	r2, r5
 8011cd4:	e7eb      	b.n	8011cae <__ssvfiscanf_r+0x26>
 8011cd6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011cd8:	3201      	adds	r2, #1
 8011cda:	9245      	str	r2, [sp, #276]	@ 0x114
 8011cdc:	6862      	ldr	r2, [r4, #4]
 8011cde:	3301      	adds	r3, #1
 8011ce0:	3a01      	subs	r2, #1
 8011ce2:	6062      	str	r2, [r4, #4]
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	e7ec      	b.n	8011cc2 <__ssvfiscanf_r+0x3a>
 8011ce8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011cea:	4621      	mov	r1, r4
 8011cec:	4630      	mov	r0, r6
 8011cee:	4798      	blx	r3
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d0e9      	beq.n	8011cc8 <__ssvfiscanf_r+0x40>
 8011cf4:	e7ed      	b.n	8011cd2 <__ssvfiscanf_r+0x4a>
 8011cf6:	2b25      	cmp	r3, #37	@ 0x25
 8011cf8:	d012      	beq.n	8011d20 <__ssvfiscanf_r+0x98>
 8011cfa:	4699      	mov	r9, r3
 8011cfc:	6863      	ldr	r3, [r4, #4]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f340 8093 	ble.w	8011e2a <__ssvfiscanf_r+0x1a2>
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	7813      	ldrb	r3, [r2, #0]
 8011d08:	454b      	cmp	r3, r9
 8011d0a:	f040 812c 	bne.w	8011f66 <__ssvfiscanf_r+0x2de>
 8011d0e:	6863      	ldr	r3, [r4, #4]
 8011d10:	3b01      	subs	r3, #1
 8011d12:	6063      	str	r3, [r4, #4]
 8011d14:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011d16:	3201      	adds	r2, #1
 8011d18:	3301      	adds	r3, #1
 8011d1a:	6022      	str	r2, [r4, #0]
 8011d1c:	9345      	str	r3, [sp, #276]	@ 0x114
 8011d1e:	e7d8      	b.n	8011cd2 <__ssvfiscanf_r+0x4a>
 8011d20:	9141      	str	r1, [sp, #260]	@ 0x104
 8011d22:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d24:	7853      	ldrb	r3, [r2, #1]
 8011d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d28:	bf02      	ittt	eq
 8011d2a:	2310      	moveq	r3, #16
 8011d2c:	1c95      	addeq	r5, r2, #2
 8011d2e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011d30:	220a      	movs	r2, #10
 8011d32:	46a9      	mov	r9, r5
 8011d34:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011d38:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011d3c:	2b09      	cmp	r3, #9
 8011d3e:	d91e      	bls.n	8011d7e <__ssvfiscanf_r+0xf6>
 8011d40:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011f3c <__ssvfiscanf_r+0x2b4>
 8011d44:	2203      	movs	r2, #3
 8011d46:	4650      	mov	r0, sl
 8011d48:	f7ee fa52 	bl	80001f0 <memchr>
 8011d4c:	b138      	cbz	r0, 8011d5e <__ssvfiscanf_r+0xd6>
 8011d4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011d50:	eba0 000a 	sub.w	r0, r0, sl
 8011d54:	2301      	movs	r3, #1
 8011d56:	4083      	lsls	r3, r0
 8011d58:	4313      	orrs	r3, r2
 8011d5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d5c:	464d      	mov	r5, r9
 8011d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d62:	2b78      	cmp	r3, #120	@ 0x78
 8011d64:	d806      	bhi.n	8011d74 <__ssvfiscanf_r+0xec>
 8011d66:	2b57      	cmp	r3, #87	@ 0x57
 8011d68:	d810      	bhi.n	8011d8c <__ssvfiscanf_r+0x104>
 8011d6a:	2b25      	cmp	r3, #37	@ 0x25
 8011d6c:	d0c5      	beq.n	8011cfa <__ssvfiscanf_r+0x72>
 8011d6e:	d857      	bhi.n	8011e20 <__ssvfiscanf_r+0x198>
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d065      	beq.n	8011e40 <__ssvfiscanf_r+0x1b8>
 8011d74:	2303      	movs	r3, #3
 8011d76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011d78:	230a      	movs	r3, #10
 8011d7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d7c:	e078      	b.n	8011e70 <__ssvfiscanf_r+0x1e8>
 8011d7e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011d80:	fb02 1103 	mla	r1, r2, r3, r1
 8011d84:	3930      	subs	r1, #48	@ 0x30
 8011d86:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011d88:	464d      	mov	r5, r9
 8011d8a:	e7d2      	b.n	8011d32 <__ssvfiscanf_r+0xaa>
 8011d8c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011d90:	2a20      	cmp	r2, #32
 8011d92:	d8ef      	bhi.n	8011d74 <__ssvfiscanf_r+0xec>
 8011d94:	a101      	add	r1, pc, #4	@ (adr r1, 8011d9c <__ssvfiscanf_r+0x114>)
 8011d96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d9a:	bf00      	nop
 8011d9c:	08011e4f 	.word	0x08011e4f
 8011da0:	08011d75 	.word	0x08011d75
 8011da4:	08011d75 	.word	0x08011d75
 8011da8:	08011ea9 	.word	0x08011ea9
 8011dac:	08011d75 	.word	0x08011d75
 8011db0:	08011d75 	.word	0x08011d75
 8011db4:	08011d75 	.word	0x08011d75
 8011db8:	08011d75 	.word	0x08011d75
 8011dbc:	08011d75 	.word	0x08011d75
 8011dc0:	08011d75 	.word	0x08011d75
 8011dc4:	08011d75 	.word	0x08011d75
 8011dc8:	08011ebf 	.word	0x08011ebf
 8011dcc:	08011ea5 	.word	0x08011ea5
 8011dd0:	08011e27 	.word	0x08011e27
 8011dd4:	08011e27 	.word	0x08011e27
 8011dd8:	08011e27 	.word	0x08011e27
 8011ddc:	08011d75 	.word	0x08011d75
 8011de0:	08011e61 	.word	0x08011e61
 8011de4:	08011d75 	.word	0x08011d75
 8011de8:	08011d75 	.word	0x08011d75
 8011dec:	08011d75 	.word	0x08011d75
 8011df0:	08011d75 	.word	0x08011d75
 8011df4:	08011ecf 	.word	0x08011ecf
 8011df8:	08011e69 	.word	0x08011e69
 8011dfc:	08011e47 	.word	0x08011e47
 8011e00:	08011d75 	.word	0x08011d75
 8011e04:	08011d75 	.word	0x08011d75
 8011e08:	08011ecb 	.word	0x08011ecb
 8011e0c:	08011d75 	.word	0x08011d75
 8011e10:	08011ea5 	.word	0x08011ea5
 8011e14:	08011d75 	.word	0x08011d75
 8011e18:	08011d75 	.word	0x08011d75
 8011e1c:	08011e4f 	.word	0x08011e4f
 8011e20:	3b45      	subs	r3, #69	@ 0x45
 8011e22:	2b02      	cmp	r3, #2
 8011e24:	d8a6      	bhi.n	8011d74 <__ssvfiscanf_r+0xec>
 8011e26:	2305      	movs	r3, #5
 8011e28:	e021      	b.n	8011e6e <__ssvfiscanf_r+0x1e6>
 8011e2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	4630      	mov	r0, r6
 8011e30:	4798      	blx	r3
 8011e32:	2800      	cmp	r0, #0
 8011e34:	f43f af66 	beq.w	8011d04 <__ssvfiscanf_r+0x7c>
 8011e38:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	f040 808b 	bne.w	8011f56 <__ssvfiscanf_r+0x2ce>
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	e08b      	b.n	8011f5e <__ssvfiscanf_r+0x2d6>
 8011e46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e48:	f042 0220 	orr.w	r2, r2, #32
 8011e4c:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e54:	9241      	str	r2, [sp, #260]	@ 0x104
 8011e56:	2210      	movs	r2, #16
 8011e58:	2b6e      	cmp	r3, #110	@ 0x6e
 8011e5a:	9242      	str	r2, [sp, #264]	@ 0x108
 8011e5c:	d902      	bls.n	8011e64 <__ssvfiscanf_r+0x1dc>
 8011e5e:	e005      	b.n	8011e6c <__ssvfiscanf_r+0x1e4>
 8011e60:	2300      	movs	r3, #0
 8011e62:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e64:	2303      	movs	r3, #3
 8011e66:	e002      	b.n	8011e6e <__ssvfiscanf_r+0x1e6>
 8011e68:	2308      	movs	r3, #8
 8011e6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011e6c:	2304      	movs	r3, #4
 8011e6e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011e70:	6863      	ldr	r3, [r4, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	dd39      	ble.n	8011eea <__ssvfiscanf_r+0x262>
 8011e76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011e78:	0659      	lsls	r1, r3, #25
 8011e7a:	d404      	bmi.n	8011e86 <__ssvfiscanf_r+0x1fe>
 8011e7c:	6823      	ldr	r3, [r4, #0]
 8011e7e:	781a      	ldrb	r2, [r3, #0]
 8011e80:	5cba      	ldrb	r2, [r7, r2]
 8011e82:	0712      	lsls	r2, r2, #28
 8011e84:	d438      	bmi.n	8011ef8 <__ssvfiscanf_r+0x270>
 8011e86:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	dc47      	bgt.n	8011f1c <__ssvfiscanf_r+0x294>
 8011e8c:	466b      	mov	r3, sp
 8011e8e:	4622      	mov	r2, r4
 8011e90:	a941      	add	r1, sp, #260	@ 0x104
 8011e92:	4630      	mov	r0, r6
 8011e94:	f000 f9ae 	bl	80121f4 <_scanf_chars>
 8011e98:	2801      	cmp	r0, #1
 8011e9a:	d064      	beq.n	8011f66 <__ssvfiscanf_r+0x2de>
 8011e9c:	2802      	cmp	r0, #2
 8011e9e:	f47f af18 	bne.w	8011cd2 <__ssvfiscanf_r+0x4a>
 8011ea2:	e7c9      	b.n	8011e38 <__ssvfiscanf_r+0x1b0>
 8011ea4:	220a      	movs	r2, #10
 8011ea6:	e7d7      	b.n	8011e58 <__ssvfiscanf_r+0x1d0>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4640      	mov	r0, r8
 8011eac:	f000 fbfe 	bl	80126ac <__sccl>
 8011eb0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eb6:	9341      	str	r3, [sp, #260]	@ 0x104
 8011eb8:	4605      	mov	r5, r0
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e7d7      	b.n	8011e6e <__ssvfiscanf_r+0x1e6>
 8011ebe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ec4:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e7d1      	b.n	8011e6e <__ssvfiscanf_r+0x1e6>
 8011eca:	2302      	movs	r3, #2
 8011ecc:	e7cf      	b.n	8011e6e <__ssvfiscanf_r+0x1e6>
 8011ece:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011ed0:	06c3      	lsls	r3, r0, #27
 8011ed2:	f53f aefe 	bmi.w	8011cd2 <__ssvfiscanf_r+0x4a>
 8011ed6:	9b00      	ldr	r3, [sp, #0]
 8011ed8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011eda:	1d19      	adds	r1, r3, #4
 8011edc:	9100      	str	r1, [sp, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	07c0      	lsls	r0, r0, #31
 8011ee2:	bf4c      	ite	mi
 8011ee4:	801a      	strhmi	r2, [r3, #0]
 8011ee6:	601a      	strpl	r2, [r3, #0]
 8011ee8:	e6f3      	b.n	8011cd2 <__ssvfiscanf_r+0x4a>
 8011eea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011eec:	4621      	mov	r1, r4
 8011eee:	4630      	mov	r0, r6
 8011ef0:	4798      	blx	r3
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d0bf      	beq.n	8011e76 <__ssvfiscanf_r+0x1ee>
 8011ef6:	e79f      	b.n	8011e38 <__ssvfiscanf_r+0x1b0>
 8011ef8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011efa:	3201      	adds	r2, #1
 8011efc:	9245      	str	r2, [sp, #276]	@ 0x114
 8011efe:	6862      	ldr	r2, [r4, #4]
 8011f00:	3a01      	subs	r2, #1
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	6062      	str	r2, [r4, #4]
 8011f06:	dd02      	ble.n	8011f0e <__ssvfiscanf_r+0x286>
 8011f08:	3301      	adds	r3, #1
 8011f0a:	6023      	str	r3, [r4, #0]
 8011f0c:	e7b6      	b.n	8011e7c <__ssvfiscanf_r+0x1f4>
 8011f0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f10:	4621      	mov	r1, r4
 8011f12:	4630      	mov	r0, r6
 8011f14:	4798      	blx	r3
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d0b0      	beq.n	8011e7c <__ssvfiscanf_r+0x1f4>
 8011f1a:	e78d      	b.n	8011e38 <__ssvfiscanf_r+0x1b0>
 8011f1c:	2b04      	cmp	r3, #4
 8011f1e:	dc0f      	bgt.n	8011f40 <__ssvfiscanf_r+0x2b8>
 8011f20:	466b      	mov	r3, sp
 8011f22:	4622      	mov	r2, r4
 8011f24:	a941      	add	r1, sp, #260	@ 0x104
 8011f26:	4630      	mov	r0, r6
 8011f28:	f000 f9be 	bl	80122a8 <_scanf_i>
 8011f2c:	e7b4      	b.n	8011e98 <__ssvfiscanf_r+0x210>
 8011f2e:	bf00      	nop
 8011f30:	08011bd9 	.word	0x08011bd9
 8011f34:	08011c4f 	.word	0x08011c4f
 8011f38:	08015aa1 	.word	0x08015aa1
 8011f3c:	08015ebe 	.word	0x08015ebe
 8011f40:	4b0a      	ldr	r3, [pc, #40]	@ (8011f6c <__ssvfiscanf_r+0x2e4>)
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f43f aec5 	beq.w	8011cd2 <__ssvfiscanf_r+0x4a>
 8011f48:	466b      	mov	r3, sp
 8011f4a:	4622      	mov	r2, r4
 8011f4c:	a941      	add	r1, sp, #260	@ 0x104
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f7fc fffc 	bl	800ef4c <_scanf_float>
 8011f54:	e7a0      	b.n	8011e98 <__ssvfiscanf_r+0x210>
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	065b      	lsls	r3, r3, #25
 8011f5a:	f53f af71 	bmi.w	8011e40 <__ssvfiscanf_r+0x1b8>
 8011f5e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f66:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011f68:	e7f9      	b.n	8011f5e <__ssvfiscanf_r+0x2d6>
 8011f6a:	bf00      	nop
 8011f6c:	0800ef4d 	.word	0x0800ef4d

08011f70 <__sfputc_r>:
 8011f70:	6893      	ldr	r3, [r2, #8]
 8011f72:	3b01      	subs	r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	b410      	push	{r4}
 8011f78:	6093      	str	r3, [r2, #8]
 8011f7a:	da08      	bge.n	8011f8e <__sfputc_r+0x1e>
 8011f7c:	6994      	ldr	r4, [r2, #24]
 8011f7e:	42a3      	cmp	r3, r4
 8011f80:	db01      	blt.n	8011f86 <__sfputc_r+0x16>
 8011f82:	290a      	cmp	r1, #10
 8011f84:	d103      	bne.n	8011f8e <__sfputc_r+0x1e>
 8011f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f8a:	f7fd bbc6 	b.w	800f71a <__swbuf_r>
 8011f8e:	6813      	ldr	r3, [r2, #0]
 8011f90:	1c58      	adds	r0, r3, #1
 8011f92:	6010      	str	r0, [r2, #0]
 8011f94:	7019      	strb	r1, [r3, #0]
 8011f96:	4608      	mov	r0, r1
 8011f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <__sfputs_r>:
 8011f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa0:	4606      	mov	r6, r0
 8011fa2:	460f      	mov	r7, r1
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	18d5      	adds	r5, r2, r3
 8011fa8:	42ac      	cmp	r4, r5
 8011faa:	d101      	bne.n	8011fb0 <__sfputs_r+0x12>
 8011fac:	2000      	movs	r0, #0
 8011fae:	e007      	b.n	8011fc0 <__sfputs_r+0x22>
 8011fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb4:	463a      	mov	r2, r7
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7ff ffda 	bl	8011f70 <__sfputc_r>
 8011fbc:	1c43      	adds	r3, r0, #1
 8011fbe:	d1f3      	bne.n	8011fa8 <__sfputs_r+0xa>
 8011fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fc4 <_vfiprintf_r>:
 8011fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc8:	460d      	mov	r5, r1
 8011fca:	b09d      	sub	sp, #116	@ 0x74
 8011fcc:	4614      	mov	r4, r2
 8011fce:	4698      	mov	r8, r3
 8011fd0:	4606      	mov	r6, r0
 8011fd2:	b118      	cbz	r0, 8011fdc <_vfiprintf_r+0x18>
 8011fd4:	6a03      	ldr	r3, [r0, #32]
 8011fd6:	b90b      	cbnz	r3, 8011fdc <_vfiprintf_r+0x18>
 8011fd8:	f7fd fa58 	bl	800f48c <__sinit>
 8011fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fde:	07d9      	lsls	r1, r3, #31
 8011fe0:	d405      	bmi.n	8011fee <_vfiprintf_r+0x2a>
 8011fe2:	89ab      	ldrh	r3, [r5, #12]
 8011fe4:	059a      	lsls	r2, r3, #22
 8011fe6:	d402      	bmi.n	8011fee <_vfiprintf_r+0x2a>
 8011fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fea:	f7fd fd3c 	bl	800fa66 <__retarget_lock_acquire_recursive>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	071b      	lsls	r3, r3, #28
 8011ff2:	d501      	bpl.n	8011ff8 <_vfiprintf_r+0x34>
 8011ff4:	692b      	ldr	r3, [r5, #16]
 8011ff6:	b99b      	cbnz	r3, 8012020 <_vfiprintf_r+0x5c>
 8011ff8:	4629      	mov	r1, r5
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f7fd fbcc 	bl	800f798 <__swsetup_r>
 8012000:	b170      	cbz	r0, 8012020 <_vfiprintf_r+0x5c>
 8012002:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012004:	07dc      	lsls	r4, r3, #31
 8012006:	d504      	bpl.n	8012012 <_vfiprintf_r+0x4e>
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	b01d      	add	sp, #116	@ 0x74
 801200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	0598      	lsls	r0, r3, #22
 8012016:	d4f7      	bmi.n	8012008 <_vfiprintf_r+0x44>
 8012018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801201a:	f7fd fd25 	bl	800fa68 <__retarget_lock_release_recursive>
 801201e:	e7f3      	b.n	8012008 <_vfiprintf_r+0x44>
 8012020:	2300      	movs	r3, #0
 8012022:	9309      	str	r3, [sp, #36]	@ 0x24
 8012024:	2320      	movs	r3, #32
 8012026:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801202a:	f8cd 800c 	str.w	r8, [sp, #12]
 801202e:	2330      	movs	r3, #48	@ 0x30
 8012030:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80121e0 <_vfiprintf_r+0x21c>
 8012034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012038:	f04f 0901 	mov.w	r9, #1
 801203c:	4623      	mov	r3, r4
 801203e:	469a      	mov	sl, r3
 8012040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012044:	b10a      	cbz	r2, 801204a <_vfiprintf_r+0x86>
 8012046:	2a25      	cmp	r2, #37	@ 0x25
 8012048:	d1f9      	bne.n	801203e <_vfiprintf_r+0x7a>
 801204a:	ebba 0b04 	subs.w	fp, sl, r4
 801204e:	d00b      	beq.n	8012068 <_vfiprintf_r+0xa4>
 8012050:	465b      	mov	r3, fp
 8012052:	4622      	mov	r2, r4
 8012054:	4629      	mov	r1, r5
 8012056:	4630      	mov	r0, r6
 8012058:	f7ff ffa1 	bl	8011f9e <__sfputs_r>
 801205c:	3001      	adds	r0, #1
 801205e:	f000 80a7 	beq.w	80121b0 <_vfiprintf_r+0x1ec>
 8012062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012064:	445a      	add	r2, fp
 8012066:	9209      	str	r2, [sp, #36]	@ 0x24
 8012068:	f89a 3000 	ldrb.w	r3, [sl]
 801206c:	2b00      	cmp	r3, #0
 801206e:	f000 809f 	beq.w	80121b0 <_vfiprintf_r+0x1ec>
 8012072:	2300      	movs	r3, #0
 8012074:	f04f 32ff 	mov.w	r2, #4294967295
 8012078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801207c:	f10a 0a01 	add.w	sl, sl, #1
 8012080:	9304      	str	r3, [sp, #16]
 8012082:	9307      	str	r3, [sp, #28]
 8012084:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012088:	931a      	str	r3, [sp, #104]	@ 0x68
 801208a:	4654      	mov	r4, sl
 801208c:	2205      	movs	r2, #5
 801208e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012092:	4853      	ldr	r0, [pc, #332]	@ (80121e0 <_vfiprintf_r+0x21c>)
 8012094:	f7ee f8ac 	bl	80001f0 <memchr>
 8012098:	9a04      	ldr	r2, [sp, #16]
 801209a:	b9d8      	cbnz	r0, 80120d4 <_vfiprintf_r+0x110>
 801209c:	06d1      	lsls	r1, r2, #27
 801209e:	bf44      	itt	mi
 80120a0:	2320      	movmi	r3, #32
 80120a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120a6:	0713      	lsls	r3, r2, #28
 80120a8:	bf44      	itt	mi
 80120aa:	232b      	movmi	r3, #43	@ 0x2b
 80120ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120b0:	f89a 3000 	ldrb.w	r3, [sl]
 80120b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80120b6:	d015      	beq.n	80120e4 <_vfiprintf_r+0x120>
 80120b8:	9a07      	ldr	r2, [sp, #28]
 80120ba:	4654      	mov	r4, sl
 80120bc:	2000      	movs	r0, #0
 80120be:	f04f 0c0a 	mov.w	ip, #10
 80120c2:	4621      	mov	r1, r4
 80120c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120c8:	3b30      	subs	r3, #48	@ 0x30
 80120ca:	2b09      	cmp	r3, #9
 80120cc:	d94b      	bls.n	8012166 <_vfiprintf_r+0x1a2>
 80120ce:	b1b0      	cbz	r0, 80120fe <_vfiprintf_r+0x13a>
 80120d0:	9207      	str	r2, [sp, #28]
 80120d2:	e014      	b.n	80120fe <_vfiprintf_r+0x13a>
 80120d4:	eba0 0308 	sub.w	r3, r0, r8
 80120d8:	fa09 f303 	lsl.w	r3, r9, r3
 80120dc:	4313      	orrs	r3, r2
 80120de:	9304      	str	r3, [sp, #16]
 80120e0:	46a2      	mov	sl, r4
 80120e2:	e7d2      	b.n	801208a <_vfiprintf_r+0xc6>
 80120e4:	9b03      	ldr	r3, [sp, #12]
 80120e6:	1d19      	adds	r1, r3, #4
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	9103      	str	r1, [sp, #12]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	bfbb      	ittet	lt
 80120f0:	425b      	neglt	r3, r3
 80120f2:	f042 0202 	orrlt.w	r2, r2, #2
 80120f6:	9307      	strge	r3, [sp, #28]
 80120f8:	9307      	strlt	r3, [sp, #28]
 80120fa:	bfb8      	it	lt
 80120fc:	9204      	strlt	r2, [sp, #16]
 80120fe:	7823      	ldrb	r3, [r4, #0]
 8012100:	2b2e      	cmp	r3, #46	@ 0x2e
 8012102:	d10a      	bne.n	801211a <_vfiprintf_r+0x156>
 8012104:	7863      	ldrb	r3, [r4, #1]
 8012106:	2b2a      	cmp	r3, #42	@ 0x2a
 8012108:	d132      	bne.n	8012170 <_vfiprintf_r+0x1ac>
 801210a:	9b03      	ldr	r3, [sp, #12]
 801210c:	1d1a      	adds	r2, r3, #4
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	9203      	str	r2, [sp, #12]
 8012112:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012116:	3402      	adds	r4, #2
 8012118:	9305      	str	r3, [sp, #20]
 801211a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80121f0 <_vfiprintf_r+0x22c>
 801211e:	7821      	ldrb	r1, [r4, #0]
 8012120:	2203      	movs	r2, #3
 8012122:	4650      	mov	r0, sl
 8012124:	f7ee f864 	bl	80001f0 <memchr>
 8012128:	b138      	cbz	r0, 801213a <_vfiprintf_r+0x176>
 801212a:	9b04      	ldr	r3, [sp, #16]
 801212c:	eba0 000a 	sub.w	r0, r0, sl
 8012130:	2240      	movs	r2, #64	@ 0x40
 8012132:	4082      	lsls	r2, r0
 8012134:	4313      	orrs	r3, r2
 8012136:	3401      	adds	r4, #1
 8012138:	9304      	str	r3, [sp, #16]
 801213a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801213e:	4829      	ldr	r0, [pc, #164]	@ (80121e4 <_vfiprintf_r+0x220>)
 8012140:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012144:	2206      	movs	r2, #6
 8012146:	f7ee f853 	bl	80001f0 <memchr>
 801214a:	2800      	cmp	r0, #0
 801214c:	d03f      	beq.n	80121ce <_vfiprintf_r+0x20a>
 801214e:	4b26      	ldr	r3, [pc, #152]	@ (80121e8 <_vfiprintf_r+0x224>)
 8012150:	bb1b      	cbnz	r3, 801219a <_vfiprintf_r+0x1d6>
 8012152:	9b03      	ldr	r3, [sp, #12]
 8012154:	3307      	adds	r3, #7
 8012156:	f023 0307 	bic.w	r3, r3, #7
 801215a:	3308      	adds	r3, #8
 801215c:	9303      	str	r3, [sp, #12]
 801215e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012160:	443b      	add	r3, r7
 8012162:	9309      	str	r3, [sp, #36]	@ 0x24
 8012164:	e76a      	b.n	801203c <_vfiprintf_r+0x78>
 8012166:	fb0c 3202 	mla	r2, ip, r2, r3
 801216a:	460c      	mov	r4, r1
 801216c:	2001      	movs	r0, #1
 801216e:	e7a8      	b.n	80120c2 <_vfiprintf_r+0xfe>
 8012170:	2300      	movs	r3, #0
 8012172:	3401      	adds	r4, #1
 8012174:	9305      	str	r3, [sp, #20]
 8012176:	4619      	mov	r1, r3
 8012178:	f04f 0c0a 	mov.w	ip, #10
 801217c:	4620      	mov	r0, r4
 801217e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012182:	3a30      	subs	r2, #48	@ 0x30
 8012184:	2a09      	cmp	r2, #9
 8012186:	d903      	bls.n	8012190 <_vfiprintf_r+0x1cc>
 8012188:	2b00      	cmp	r3, #0
 801218a:	d0c6      	beq.n	801211a <_vfiprintf_r+0x156>
 801218c:	9105      	str	r1, [sp, #20]
 801218e:	e7c4      	b.n	801211a <_vfiprintf_r+0x156>
 8012190:	fb0c 2101 	mla	r1, ip, r1, r2
 8012194:	4604      	mov	r4, r0
 8012196:	2301      	movs	r3, #1
 8012198:	e7f0      	b.n	801217c <_vfiprintf_r+0x1b8>
 801219a:	ab03      	add	r3, sp, #12
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	462a      	mov	r2, r5
 80121a0:	4b12      	ldr	r3, [pc, #72]	@ (80121ec <_vfiprintf_r+0x228>)
 80121a2:	a904      	add	r1, sp, #16
 80121a4:	4630      	mov	r0, r6
 80121a6:	f7fc fb19 	bl	800e7dc <_printf_float>
 80121aa:	4607      	mov	r7, r0
 80121ac:	1c78      	adds	r0, r7, #1
 80121ae:	d1d6      	bne.n	801215e <_vfiprintf_r+0x19a>
 80121b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121b2:	07d9      	lsls	r1, r3, #31
 80121b4:	d405      	bmi.n	80121c2 <_vfiprintf_r+0x1fe>
 80121b6:	89ab      	ldrh	r3, [r5, #12]
 80121b8:	059a      	lsls	r2, r3, #22
 80121ba:	d402      	bmi.n	80121c2 <_vfiprintf_r+0x1fe>
 80121bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121be:	f7fd fc53 	bl	800fa68 <__retarget_lock_release_recursive>
 80121c2:	89ab      	ldrh	r3, [r5, #12]
 80121c4:	065b      	lsls	r3, r3, #25
 80121c6:	f53f af1f 	bmi.w	8012008 <_vfiprintf_r+0x44>
 80121ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121cc:	e71e      	b.n	801200c <_vfiprintf_r+0x48>
 80121ce:	ab03      	add	r3, sp, #12
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	462a      	mov	r2, r5
 80121d4:	4b05      	ldr	r3, [pc, #20]	@ (80121ec <_vfiprintf_r+0x228>)
 80121d6:	a904      	add	r1, sp, #16
 80121d8:	4630      	mov	r0, r6
 80121da:	f7fc fd97 	bl	800ed0c <_printf_i>
 80121de:	e7e4      	b.n	80121aa <_vfiprintf_r+0x1e6>
 80121e0:	08015eb8 	.word	0x08015eb8
 80121e4:	08015ec2 	.word	0x08015ec2
 80121e8:	0800e7dd 	.word	0x0800e7dd
 80121ec:	08011f9f 	.word	0x08011f9f
 80121f0:	08015ebe 	.word	0x08015ebe

080121f4 <_scanf_chars>:
 80121f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121f8:	4615      	mov	r5, r2
 80121fa:	688a      	ldr	r2, [r1, #8]
 80121fc:	4680      	mov	r8, r0
 80121fe:	460c      	mov	r4, r1
 8012200:	b932      	cbnz	r2, 8012210 <_scanf_chars+0x1c>
 8012202:	698a      	ldr	r2, [r1, #24]
 8012204:	2a00      	cmp	r2, #0
 8012206:	bf14      	ite	ne
 8012208:	f04f 32ff 	movne.w	r2, #4294967295
 801220c:	2201      	moveq	r2, #1
 801220e:	608a      	str	r2, [r1, #8]
 8012210:	6822      	ldr	r2, [r4, #0]
 8012212:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80122a4 <_scanf_chars+0xb0>
 8012216:	06d1      	lsls	r1, r2, #27
 8012218:	bf5f      	itttt	pl
 801221a:	681a      	ldrpl	r2, [r3, #0]
 801221c:	1d11      	addpl	r1, r2, #4
 801221e:	6019      	strpl	r1, [r3, #0]
 8012220:	6816      	ldrpl	r6, [r2, #0]
 8012222:	2700      	movs	r7, #0
 8012224:	69a0      	ldr	r0, [r4, #24]
 8012226:	b188      	cbz	r0, 801224c <_scanf_chars+0x58>
 8012228:	2801      	cmp	r0, #1
 801222a:	d107      	bne.n	801223c <_scanf_chars+0x48>
 801222c:	682b      	ldr	r3, [r5, #0]
 801222e:	781a      	ldrb	r2, [r3, #0]
 8012230:	6963      	ldr	r3, [r4, #20]
 8012232:	5c9b      	ldrb	r3, [r3, r2]
 8012234:	b953      	cbnz	r3, 801224c <_scanf_chars+0x58>
 8012236:	2f00      	cmp	r7, #0
 8012238:	d031      	beq.n	801229e <_scanf_chars+0xaa>
 801223a:	e022      	b.n	8012282 <_scanf_chars+0x8e>
 801223c:	2802      	cmp	r0, #2
 801223e:	d120      	bne.n	8012282 <_scanf_chars+0x8e>
 8012240:	682b      	ldr	r3, [r5, #0]
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012248:	071b      	lsls	r3, r3, #28
 801224a:	d41a      	bmi.n	8012282 <_scanf_chars+0x8e>
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	06da      	lsls	r2, r3, #27
 8012250:	bf5e      	ittt	pl
 8012252:	682b      	ldrpl	r3, [r5, #0]
 8012254:	781b      	ldrbpl	r3, [r3, #0]
 8012256:	f806 3b01 	strbpl.w	r3, [r6], #1
 801225a:	682a      	ldr	r2, [r5, #0]
 801225c:	686b      	ldr	r3, [r5, #4]
 801225e:	3201      	adds	r2, #1
 8012260:	602a      	str	r2, [r5, #0]
 8012262:	68a2      	ldr	r2, [r4, #8]
 8012264:	3b01      	subs	r3, #1
 8012266:	3a01      	subs	r2, #1
 8012268:	606b      	str	r3, [r5, #4]
 801226a:	3701      	adds	r7, #1
 801226c:	60a2      	str	r2, [r4, #8]
 801226e:	b142      	cbz	r2, 8012282 <_scanf_chars+0x8e>
 8012270:	2b00      	cmp	r3, #0
 8012272:	dcd7      	bgt.n	8012224 <_scanf_chars+0x30>
 8012274:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012278:	4629      	mov	r1, r5
 801227a:	4640      	mov	r0, r8
 801227c:	4798      	blx	r3
 801227e:	2800      	cmp	r0, #0
 8012280:	d0d0      	beq.n	8012224 <_scanf_chars+0x30>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	f013 0310 	ands.w	r3, r3, #16
 8012288:	d105      	bne.n	8012296 <_scanf_chars+0xa2>
 801228a:	68e2      	ldr	r2, [r4, #12]
 801228c:	3201      	adds	r2, #1
 801228e:	60e2      	str	r2, [r4, #12]
 8012290:	69a2      	ldr	r2, [r4, #24]
 8012292:	b102      	cbz	r2, 8012296 <_scanf_chars+0xa2>
 8012294:	7033      	strb	r3, [r6, #0]
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	443b      	add	r3, r7
 801229a:	6123      	str	r3, [r4, #16]
 801229c:	2000      	movs	r0, #0
 801229e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122a2:	bf00      	nop
 80122a4:	08015aa1 	.word	0x08015aa1

080122a8 <_scanf_i>:
 80122a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ac:	4698      	mov	r8, r3
 80122ae:	4b74      	ldr	r3, [pc, #464]	@ (8012480 <_scanf_i+0x1d8>)
 80122b0:	460c      	mov	r4, r1
 80122b2:	4682      	mov	sl, r0
 80122b4:	4616      	mov	r6, r2
 80122b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122ba:	b087      	sub	sp, #28
 80122bc:	ab03      	add	r3, sp, #12
 80122be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122c2:	4b70      	ldr	r3, [pc, #448]	@ (8012484 <_scanf_i+0x1dc>)
 80122c4:	69a1      	ldr	r1, [r4, #24]
 80122c6:	4a70      	ldr	r2, [pc, #448]	@ (8012488 <_scanf_i+0x1e0>)
 80122c8:	2903      	cmp	r1, #3
 80122ca:	bf08      	it	eq
 80122cc:	461a      	moveq	r2, r3
 80122ce:	68a3      	ldr	r3, [r4, #8]
 80122d0:	9201      	str	r2, [sp, #4]
 80122d2:	1e5a      	subs	r2, r3, #1
 80122d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80122d8:	bf88      	it	hi
 80122da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80122de:	4627      	mov	r7, r4
 80122e0:	bf82      	ittt	hi
 80122e2:	eb03 0905 	addhi.w	r9, r3, r5
 80122e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80122ea:	60a3      	strhi	r3, [r4, #8]
 80122ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80122f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80122f4:	bf98      	it	ls
 80122f6:	f04f 0900 	movls.w	r9, #0
 80122fa:	6023      	str	r3, [r4, #0]
 80122fc:	463d      	mov	r5, r7
 80122fe:	f04f 0b00 	mov.w	fp, #0
 8012302:	6831      	ldr	r1, [r6, #0]
 8012304:	ab03      	add	r3, sp, #12
 8012306:	7809      	ldrb	r1, [r1, #0]
 8012308:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801230c:	2202      	movs	r2, #2
 801230e:	f7ed ff6f 	bl	80001f0 <memchr>
 8012312:	b328      	cbz	r0, 8012360 <_scanf_i+0xb8>
 8012314:	f1bb 0f01 	cmp.w	fp, #1
 8012318:	d159      	bne.n	80123ce <_scanf_i+0x126>
 801231a:	6862      	ldr	r2, [r4, #4]
 801231c:	b92a      	cbnz	r2, 801232a <_scanf_i+0x82>
 801231e:	6822      	ldr	r2, [r4, #0]
 8012320:	2108      	movs	r1, #8
 8012322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012326:	6061      	str	r1, [r4, #4]
 8012328:	6022      	str	r2, [r4, #0]
 801232a:	6822      	ldr	r2, [r4, #0]
 801232c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	68a2      	ldr	r2, [r4, #8]
 8012334:	1e51      	subs	r1, r2, #1
 8012336:	60a1      	str	r1, [r4, #8]
 8012338:	b192      	cbz	r2, 8012360 <_scanf_i+0xb8>
 801233a:	6832      	ldr	r2, [r6, #0]
 801233c:	1c51      	adds	r1, r2, #1
 801233e:	6031      	str	r1, [r6, #0]
 8012340:	7812      	ldrb	r2, [r2, #0]
 8012342:	f805 2b01 	strb.w	r2, [r5], #1
 8012346:	6872      	ldr	r2, [r6, #4]
 8012348:	3a01      	subs	r2, #1
 801234a:	2a00      	cmp	r2, #0
 801234c:	6072      	str	r2, [r6, #4]
 801234e:	dc07      	bgt.n	8012360 <_scanf_i+0xb8>
 8012350:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012354:	4631      	mov	r1, r6
 8012356:	4650      	mov	r0, sl
 8012358:	4790      	blx	r2
 801235a:	2800      	cmp	r0, #0
 801235c:	f040 8085 	bne.w	801246a <_scanf_i+0x1c2>
 8012360:	f10b 0b01 	add.w	fp, fp, #1
 8012364:	f1bb 0f03 	cmp.w	fp, #3
 8012368:	d1cb      	bne.n	8012302 <_scanf_i+0x5a>
 801236a:	6863      	ldr	r3, [r4, #4]
 801236c:	b90b      	cbnz	r3, 8012372 <_scanf_i+0xca>
 801236e:	230a      	movs	r3, #10
 8012370:	6063      	str	r3, [r4, #4]
 8012372:	6863      	ldr	r3, [r4, #4]
 8012374:	4945      	ldr	r1, [pc, #276]	@ (801248c <_scanf_i+0x1e4>)
 8012376:	6960      	ldr	r0, [r4, #20]
 8012378:	1ac9      	subs	r1, r1, r3
 801237a:	f000 f997 	bl	80126ac <__sccl>
 801237e:	f04f 0b00 	mov.w	fp, #0
 8012382:	68a3      	ldr	r3, [r4, #8]
 8012384:	6822      	ldr	r2, [r4, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d03d      	beq.n	8012406 <_scanf_i+0x15e>
 801238a:	6831      	ldr	r1, [r6, #0]
 801238c:	6960      	ldr	r0, [r4, #20]
 801238e:	f891 c000 	ldrb.w	ip, [r1]
 8012392:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012396:	2800      	cmp	r0, #0
 8012398:	d035      	beq.n	8012406 <_scanf_i+0x15e>
 801239a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801239e:	d124      	bne.n	80123ea <_scanf_i+0x142>
 80123a0:	0510      	lsls	r0, r2, #20
 80123a2:	d522      	bpl.n	80123ea <_scanf_i+0x142>
 80123a4:	f10b 0b01 	add.w	fp, fp, #1
 80123a8:	f1b9 0f00 	cmp.w	r9, #0
 80123ac:	d003      	beq.n	80123b6 <_scanf_i+0x10e>
 80123ae:	3301      	adds	r3, #1
 80123b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80123b4:	60a3      	str	r3, [r4, #8]
 80123b6:	6873      	ldr	r3, [r6, #4]
 80123b8:	3b01      	subs	r3, #1
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	6073      	str	r3, [r6, #4]
 80123be:	dd1b      	ble.n	80123f8 <_scanf_i+0x150>
 80123c0:	6833      	ldr	r3, [r6, #0]
 80123c2:	3301      	adds	r3, #1
 80123c4:	6033      	str	r3, [r6, #0]
 80123c6:	68a3      	ldr	r3, [r4, #8]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	60a3      	str	r3, [r4, #8]
 80123cc:	e7d9      	b.n	8012382 <_scanf_i+0xda>
 80123ce:	f1bb 0f02 	cmp.w	fp, #2
 80123d2:	d1ae      	bne.n	8012332 <_scanf_i+0x8a>
 80123d4:	6822      	ldr	r2, [r4, #0]
 80123d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80123da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80123de:	d1bf      	bne.n	8012360 <_scanf_i+0xb8>
 80123e0:	2110      	movs	r1, #16
 80123e2:	6061      	str	r1, [r4, #4]
 80123e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80123e8:	e7a2      	b.n	8012330 <_scanf_i+0x88>
 80123ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80123ee:	6022      	str	r2, [r4, #0]
 80123f0:	780b      	ldrb	r3, [r1, #0]
 80123f2:	f805 3b01 	strb.w	r3, [r5], #1
 80123f6:	e7de      	b.n	80123b6 <_scanf_i+0x10e>
 80123f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80123fc:	4631      	mov	r1, r6
 80123fe:	4650      	mov	r0, sl
 8012400:	4798      	blx	r3
 8012402:	2800      	cmp	r0, #0
 8012404:	d0df      	beq.n	80123c6 <_scanf_i+0x11e>
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	05d9      	lsls	r1, r3, #23
 801240a:	d50d      	bpl.n	8012428 <_scanf_i+0x180>
 801240c:	42bd      	cmp	r5, r7
 801240e:	d909      	bls.n	8012424 <_scanf_i+0x17c>
 8012410:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012414:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012418:	4632      	mov	r2, r6
 801241a:	4650      	mov	r0, sl
 801241c:	4798      	blx	r3
 801241e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012422:	464d      	mov	r5, r9
 8012424:	42bd      	cmp	r5, r7
 8012426:	d028      	beq.n	801247a <_scanf_i+0x1d2>
 8012428:	6822      	ldr	r2, [r4, #0]
 801242a:	f012 0210 	ands.w	r2, r2, #16
 801242e:	d113      	bne.n	8012458 <_scanf_i+0x1b0>
 8012430:	702a      	strb	r2, [r5, #0]
 8012432:	6863      	ldr	r3, [r4, #4]
 8012434:	9e01      	ldr	r6, [sp, #4]
 8012436:	4639      	mov	r1, r7
 8012438:	4650      	mov	r0, sl
 801243a:	47b0      	blx	r6
 801243c:	f8d8 3000 	ldr.w	r3, [r8]
 8012440:	6821      	ldr	r1, [r4, #0]
 8012442:	1d1a      	adds	r2, r3, #4
 8012444:	f8c8 2000 	str.w	r2, [r8]
 8012448:	f011 0f20 	tst.w	r1, #32
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	d00f      	beq.n	8012470 <_scanf_i+0x1c8>
 8012450:	6018      	str	r0, [r3, #0]
 8012452:	68e3      	ldr	r3, [r4, #12]
 8012454:	3301      	adds	r3, #1
 8012456:	60e3      	str	r3, [r4, #12]
 8012458:	6923      	ldr	r3, [r4, #16]
 801245a:	1bed      	subs	r5, r5, r7
 801245c:	445d      	add	r5, fp
 801245e:	442b      	add	r3, r5
 8012460:	6123      	str	r3, [r4, #16]
 8012462:	2000      	movs	r0, #0
 8012464:	b007      	add	sp, #28
 8012466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801246a:	f04f 0b00 	mov.w	fp, #0
 801246e:	e7ca      	b.n	8012406 <_scanf_i+0x15e>
 8012470:	07ca      	lsls	r2, r1, #31
 8012472:	bf4c      	ite	mi
 8012474:	8018      	strhmi	r0, [r3, #0]
 8012476:	6018      	strpl	r0, [r3, #0]
 8012478:	e7eb      	b.n	8012452 <_scanf_i+0x1aa>
 801247a:	2001      	movs	r0, #1
 801247c:	e7f2      	b.n	8012464 <_scanf_i+0x1bc>
 801247e:	bf00      	nop
 8012480:	08015a20 	.word	0x08015a20
 8012484:	0801190d 	.word	0x0801190d
 8012488:	08012921 	.word	0x08012921
 801248c:	08015ed9 	.word	0x08015ed9

08012490 <__sflush_r>:
 8012490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012498:	0716      	lsls	r6, r2, #28
 801249a:	4605      	mov	r5, r0
 801249c:	460c      	mov	r4, r1
 801249e:	d454      	bmi.n	801254a <__sflush_r+0xba>
 80124a0:	684b      	ldr	r3, [r1, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	dc02      	bgt.n	80124ac <__sflush_r+0x1c>
 80124a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	dd48      	ble.n	801253e <__sflush_r+0xae>
 80124ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124ae:	2e00      	cmp	r6, #0
 80124b0:	d045      	beq.n	801253e <__sflush_r+0xae>
 80124b2:	2300      	movs	r3, #0
 80124b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80124b8:	682f      	ldr	r7, [r5, #0]
 80124ba:	6a21      	ldr	r1, [r4, #32]
 80124bc:	602b      	str	r3, [r5, #0]
 80124be:	d030      	beq.n	8012522 <__sflush_r+0x92>
 80124c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80124c2:	89a3      	ldrh	r3, [r4, #12]
 80124c4:	0759      	lsls	r1, r3, #29
 80124c6:	d505      	bpl.n	80124d4 <__sflush_r+0x44>
 80124c8:	6863      	ldr	r3, [r4, #4]
 80124ca:	1ad2      	subs	r2, r2, r3
 80124cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124ce:	b10b      	cbz	r3, 80124d4 <__sflush_r+0x44>
 80124d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80124d2:	1ad2      	subs	r2, r2, r3
 80124d4:	2300      	movs	r3, #0
 80124d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124d8:	6a21      	ldr	r1, [r4, #32]
 80124da:	4628      	mov	r0, r5
 80124dc:	47b0      	blx	r6
 80124de:	1c43      	adds	r3, r0, #1
 80124e0:	89a3      	ldrh	r3, [r4, #12]
 80124e2:	d106      	bne.n	80124f2 <__sflush_r+0x62>
 80124e4:	6829      	ldr	r1, [r5, #0]
 80124e6:	291d      	cmp	r1, #29
 80124e8:	d82b      	bhi.n	8012542 <__sflush_r+0xb2>
 80124ea:	4a2a      	ldr	r2, [pc, #168]	@ (8012594 <__sflush_r+0x104>)
 80124ec:	410a      	asrs	r2, r1
 80124ee:	07d6      	lsls	r6, r2, #31
 80124f0:	d427      	bmi.n	8012542 <__sflush_r+0xb2>
 80124f2:	2200      	movs	r2, #0
 80124f4:	6062      	str	r2, [r4, #4]
 80124f6:	04d9      	lsls	r1, r3, #19
 80124f8:	6922      	ldr	r2, [r4, #16]
 80124fa:	6022      	str	r2, [r4, #0]
 80124fc:	d504      	bpl.n	8012508 <__sflush_r+0x78>
 80124fe:	1c42      	adds	r2, r0, #1
 8012500:	d101      	bne.n	8012506 <__sflush_r+0x76>
 8012502:	682b      	ldr	r3, [r5, #0]
 8012504:	b903      	cbnz	r3, 8012508 <__sflush_r+0x78>
 8012506:	6560      	str	r0, [r4, #84]	@ 0x54
 8012508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801250a:	602f      	str	r7, [r5, #0]
 801250c:	b1b9      	cbz	r1, 801253e <__sflush_r+0xae>
 801250e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012512:	4299      	cmp	r1, r3
 8012514:	d002      	beq.n	801251c <__sflush_r+0x8c>
 8012516:	4628      	mov	r0, r5
 8012518:	f7fe f92e 	bl	8010778 <_free_r>
 801251c:	2300      	movs	r3, #0
 801251e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012520:	e00d      	b.n	801253e <__sflush_r+0xae>
 8012522:	2301      	movs	r3, #1
 8012524:	4628      	mov	r0, r5
 8012526:	47b0      	blx	r6
 8012528:	4602      	mov	r2, r0
 801252a:	1c50      	adds	r0, r2, #1
 801252c:	d1c9      	bne.n	80124c2 <__sflush_r+0x32>
 801252e:	682b      	ldr	r3, [r5, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d0c6      	beq.n	80124c2 <__sflush_r+0x32>
 8012534:	2b1d      	cmp	r3, #29
 8012536:	d001      	beq.n	801253c <__sflush_r+0xac>
 8012538:	2b16      	cmp	r3, #22
 801253a:	d11e      	bne.n	801257a <__sflush_r+0xea>
 801253c:	602f      	str	r7, [r5, #0]
 801253e:	2000      	movs	r0, #0
 8012540:	e022      	b.n	8012588 <__sflush_r+0xf8>
 8012542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012546:	b21b      	sxth	r3, r3
 8012548:	e01b      	b.n	8012582 <__sflush_r+0xf2>
 801254a:	690f      	ldr	r7, [r1, #16]
 801254c:	2f00      	cmp	r7, #0
 801254e:	d0f6      	beq.n	801253e <__sflush_r+0xae>
 8012550:	0793      	lsls	r3, r2, #30
 8012552:	680e      	ldr	r6, [r1, #0]
 8012554:	bf08      	it	eq
 8012556:	694b      	ldreq	r3, [r1, #20]
 8012558:	600f      	str	r7, [r1, #0]
 801255a:	bf18      	it	ne
 801255c:	2300      	movne	r3, #0
 801255e:	eba6 0807 	sub.w	r8, r6, r7
 8012562:	608b      	str	r3, [r1, #8]
 8012564:	f1b8 0f00 	cmp.w	r8, #0
 8012568:	dde9      	ble.n	801253e <__sflush_r+0xae>
 801256a:	6a21      	ldr	r1, [r4, #32]
 801256c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801256e:	4643      	mov	r3, r8
 8012570:	463a      	mov	r2, r7
 8012572:	4628      	mov	r0, r5
 8012574:	47b0      	blx	r6
 8012576:	2800      	cmp	r0, #0
 8012578:	dc08      	bgt.n	801258c <__sflush_r+0xfc>
 801257a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801257e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012582:	81a3      	strh	r3, [r4, #12]
 8012584:	f04f 30ff 	mov.w	r0, #4294967295
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258c:	4407      	add	r7, r0
 801258e:	eba8 0800 	sub.w	r8, r8, r0
 8012592:	e7e7      	b.n	8012564 <__sflush_r+0xd4>
 8012594:	dfbffffe 	.word	0xdfbffffe

08012598 <_fflush_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	690b      	ldr	r3, [r1, #16]
 801259c:	4605      	mov	r5, r0
 801259e:	460c      	mov	r4, r1
 80125a0:	b913      	cbnz	r3, 80125a8 <_fflush_r+0x10>
 80125a2:	2500      	movs	r5, #0
 80125a4:	4628      	mov	r0, r5
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	b118      	cbz	r0, 80125b2 <_fflush_r+0x1a>
 80125aa:	6a03      	ldr	r3, [r0, #32]
 80125ac:	b90b      	cbnz	r3, 80125b2 <_fflush_r+0x1a>
 80125ae:	f7fc ff6d 	bl	800f48c <__sinit>
 80125b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d0f3      	beq.n	80125a2 <_fflush_r+0xa>
 80125ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80125bc:	07d0      	lsls	r0, r2, #31
 80125be:	d404      	bmi.n	80125ca <_fflush_r+0x32>
 80125c0:	0599      	lsls	r1, r3, #22
 80125c2:	d402      	bmi.n	80125ca <_fflush_r+0x32>
 80125c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125c6:	f7fd fa4e 	bl	800fa66 <__retarget_lock_acquire_recursive>
 80125ca:	4628      	mov	r0, r5
 80125cc:	4621      	mov	r1, r4
 80125ce:	f7ff ff5f 	bl	8012490 <__sflush_r>
 80125d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125d4:	07da      	lsls	r2, r3, #31
 80125d6:	4605      	mov	r5, r0
 80125d8:	d4e4      	bmi.n	80125a4 <_fflush_r+0xc>
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	059b      	lsls	r3, r3, #22
 80125de:	d4e1      	bmi.n	80125a4 <_fflush_r+0xc>
 80125e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125e2:	f7fd fa41 	bl	800fa68 <__retarget_lock_release_recursive>
 80125e6:	e7dd      	b.n	80125a4 <_fflush_r+0xc>

080125e8 <__swhatbuf_r>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	460c      	mov	r4, r1
 80125ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f0:	2900      	cmp	r1, #0
 80125f2:	b096      	sub	sp, #88	@ 0x58
 80125f4:	4615      	mov	r5, r2
 80125f6:	461e      	mov	r6, r3
 80125f8:	da0d      	bge.n	8012616 <__swhatbuf_r+0x2e>
 80125fa:	89a3      	ldrh	r3, [r4, #12]
 80125fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012600:	f04f 0100 	mov.w	r1, #0
 8012604:	bf14      	ite	ne
 8012606:	2340      	movne	r3, #64	@ 0x40
 8012608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801260c:	2000      	movs	r0, #0
 801260e:	6031      	str	r1, [r6, #0]
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	b016      	add	sp, #88	@ 0x58
 8012614:	bd70      	pop	{r4, r5, r6, pc}
 8012616:	466a      	mov	r2, sp
 8012618:	f000 f8d6 	bl	80127c8 <_fstat_r>
 801261c:	2800      	cmp	r0, #0
 801261e:	dbec      	blt.n	80125fa <__swhatbuf_r+0x12>
 8012620:	9901      	ldr	r1, [sp, #4]
 8012622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801262a:	4259      	negs	r1, r3
 801262c:	4159      	adcs	r1, r3
 801262e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012632:	e7eb      	b.n	801260c <__swhatbuf_r+0x24>

08012634 <__smakebuf_r>:
 8012634:	898b      	ldrh	r3, [r1, #12]
 8012636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012638:	079d      	lsls	r5, r3, #30
 801263a:	4606      	mov	r6, r0
 801263c:	460c      	mov	r4, r1
 801263e:	d507      	bpl.n	8012650 <__smakebuf_r+0x1c>
 8012640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012644:	6023      	str	r3, [r4, #0]
 8012646:	6123      	str	r3, [r4, #16]
 8012648:	2301      	movs	r3, #1
 801264a:	6163      	str	r3, [r4, #20]
 801264c:	b003      	add	sp, #12
 801264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012650:	ab01      	add	r3, sp, #4
 8012652:	466a      	mov	r2, sp
 8012654:	f7ff ffc8 	bl	80125e8 <__swhatbuf_r>
 8012658:	9f00      	ldr	r7, [sp, #0]
 801265a:	4605      	mov	r5, r0
 801265c:	4639      	mov	r1, r7
 801265e:	4630      	mov	r0, r6
 8012660:	f7fb f946 	bl	800d8f0 <_malloc_r>
 8012664:	b948      	cbnz	r0, 801267a <__smakebuf_r+0x46>
 8012666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801266a:	059a      	lsls	r2, r3, #22
 801266c:	d4ee      	bmi.n	801264c <__smakebuf_r+0x18>
 801266e:	f023 0303 	bic.w	r3, r3, #3
 8012672:	f043 0302 	orr.w	r3, r3, #2
 8012676:	81a3      	strh	r3, [r4, #12]
 8012678:	e7e2      	b.n	8012640 <__smakebuf_r+0xc>
 801267a:	89a3      	ldrh	r3, [r4, #12]
 801267c:	6020      	str	r0, [r4, #0]
 801267e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012682:	81a3      	strh	r3, [r4, #12]
 8012684:	9b01      	ldr	r3, [sp, #4]
 8012686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801268a:	b15b      	cbz	r3, 80126a4 <__smakebuf_r+0x70>
 801268c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012690:	4630      	mov	r0, r6
 8012692:	f000 f8ab 	bl	80127ec <_isatty_r>
 8012696:	b128      	cbz	r0, 80126a4 <__smakebuf_r+0x70>
 8012698:	89a3      	ldrh	r3, [r4, #12]
 801269a:	f023 0303 	bic.w	r3, r3, #3
 801269e:	f043 0301 	orr.w	r3, r3, #1
 80126a2:	81a3      	strh	r3, [r4, #12]
 80126a4:	89a3      	ldrh	r3, [r4, #12]
 80126a6:	431d      	orrs	r5, r3
 80126a8:	81a5      	strh	r5, [r4, #12]
 80126aa:	e7cf      	b.n	801264c <__smakebuf_r+0x18>

080126ac <__sccl>:
 80126ac:	b570      	push	{r4, r5, r6, lr}
 80126ae:	780b      	ldrb	r3, [r1, #0]
 80126b0:	4604      	mov	r4, r0
 80126b2:	2b5e      	cmp	r3, #94	@ 0x5e
 80126b4:	bf0b      	itete	eq
 80126b6:	784b      	ldrbeq	r3, [r1, #1]
 80126b8:	1c4a      	addne	r2, r1, #1
 80126ba:	1c8a      	addeq	r2, r1, #2
 80126bc:	2100      	movne	r1, #0
 80126be:	bf08      	it	eq
 80126c0:	2101      	moveq	r1, #1
 80126c2:	3801      	subs	r0, #1
 80126c4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80126c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80126cc:	42a8      	cmp	r0, r5
 80126ce:	d1fb      	bne.n	80126c8 <__sccl+0x1c>
 80126d0:	b90b      	cbnz	r3, 80126d6 <__sccl+0x2a>
 80126d2:	1e50      	subs	r0, r2, #1
 80126d4:	bd70      	pop	{r4, r5, r6, pc}
 80126d6:	f081 0101 	eor.w	r1, r1, #1
 80126da:	54e1      	strb	r1, [r4, r3]
 80126dc:	4610      	mov	r0, r2
 80126de:	4602      	mov	r2, r0
 80126e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80126e4:	2d2d      	cmp	r5, #45	@ 0x2d
 80126e6:	d005      	beq.n	80126f4 <__sccl+0x48>
 80126e8:	2d5d      	cmp	r5, #93	@ 0x5d
 80126ea:	d016      	beq.n	801271a <__sccl+0x6e>
 80126ec:	2d00      	cmp	r5, #0
 80126ee:	d0f1      	beq.n	80126d4 <__sccl+0x28>
 80126f0:	462b      	mov	r3, r5
 80126f2:	e7f2      	b.n	80126da <__sccl+0x2e>
 80126f4:	7846      	ldrb	r6, [r0, #1]
 80126f6:	2e5d      	cmp	r6, #93	@ 0x5d
 80126f8:	d0fa      	beq.n	80126f0 <__sccl+0x44>
 80126fa:	42b3      	cmp	r3, r6
 80126fc:	dcf8      	bgt.n	80126f0 <__sccl+0x44>
 80126fe:	3002      	adds	r0, #2
 8012700:	461a      	mov	r2, r3
 8012702:	3201      	adds	r2, #1
 8012704:	4296      	cmp	r6, r2
 8012706:	54a1      	strb	r1, [r4, r2]
 8012708:	dcfb      	bgt.n	8012702 <__sccl+0x56>
 801270a:	1af2      	subs	r2, r6, r3
 801270c:	3a01      	subs	r2, #1
 801270e:	1c5d      	adds	r5, r3, #1
 8012710:	42b3      	cmp	r3, r6
 8012712:	bfa8      	it	ge
 8012714:	2200      	movge	r2, #0
 8012716:	18ab      	adds	r3, r5, r2
 8012718:	e7e1      	b.n	80126de <__sccl+0x32>
 801271a:	4610      	mov	r0, r2
 801271c:	e7da      	b.n	80126d4 <__sccl+0x28>

0801271e <__submore>:
 801271e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012722:	460c      	mov	r4, r1
 8012724:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801272a:	4299      	cmp	r1, r3
 801272c:	d11d      	bne.n	801276a <__submore+0x4c>
 801272e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012732:	f7fb f8dd 	bl	800d8f0 <_malloc_r>
 8012736:	b918      	cbnz	r0, 8012740 <__submore+0x22>
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012744:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012746:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801274a:	6360      	str	r0, [r4, #52]	@ 0x34
 801274c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012750:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012754:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012758:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801275c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012760:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012764:	6020      	str	r0, [r4, #0]
 8012766:	2000      	movs	r0, #0
 8012768:	e7e8      	b.n	801273c <__submore+0x1e>
 801276a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801276c:	0077      	lsls	r7, r6, #1
 801276e:	463a      	mov	r2, r7
 8012770:	f7fb f952 	bl	800da18 <_realloc_r>
 8012774:	4605      	mov	r5, r0
 8012776:	2800      	cmp	r0, #0
 8012778:	d0de      	beq.n	8012738 <__submore+0x1a>
 801277a:	eb00 0806 	add.w	r8, r0, r6
 801277e:	4601      	mov	r1, r0
 8012780:	4632      	mov	r2, r6
 8012782:	4640      	mov	r0, r8
 8012784:	f7fd f971 	bl	800fa6a <memcpy>
 8012788:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801278c:	f8c4 8000 	str.w	r8, [r4]
 8012790:	e7e9      	b.n	8012766 <__submore+0x48>

08012792 <memmove>:
 8012792:	4288      	cmp	r0, r1
 8012794:	b510      	push	{r4, lr}
 8012796:	eb01 0402 	add.w	r4, r1, r2
 801279a:	d902      	bls.n	80127a2 <memmove+0x10>
 801279c:	4284      	cmp	r4, r0
 801279e:	4623      	mov	r3, r4
 80127a0:	d807      	bhi.n	80127b2 <memmove+0x20>
 80127a2:	1e43      	subs	r3, r0, #1
 80127a4:	42a1      	cmp	r1, r4
 80127a6:	d008      	beq.n	80127ba <memmove+0x28>
 80127a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127b0:	e7f8      	b.n	80127a4 <memmove+0x12>
 80127b2:	4402      	add	r2, r0
 80127b4:	4601      	mov	r1, r0
 80127b6:	428a      	cmp	r2, r1
 80127b8:	d100      	bne.n	80127bc <memmove+0x2a>
 80127ba:	bd10      	pop	{r4, pc}
 80127bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127c4:	e7f7      	b.n	80127b6 <memmove+0x24>
	...

080127c8 <_fstat_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4d07      	ldr	r5, [pc, #28]	@ (80127e8 <_fstat_r+0x20>)
 80127cc:	2300      	movs	r3, #0
 80127ce:	4604      	mov	r4, r0
 80127d0:	4608      	mov	r0, r1
 80127d2:	4611      	mov	r1, r2
 80127d4:	602b      	str	r3, [r5, #0]
 80127d6:	f7f4 fef5 	bl	80075c4 <_fstat>
 80127da:	1c43      	adds	r3, r0, #1
 80127dc:	d102      	bne.n	80127e4 <_fstat_r+0x1c>
 80127de:	682b      	ldr	r3, [r5, #0]
 80127e0:	b103      	cbz	r3, 80127e4 <_fstat_r+0x1c>
 80127e2:	6023      	str	r3, [r4, #0]
 80127e4:	bd38      	pop	{r3, r4, r5, pc}
 80127e6:	bf00      	nop
 80127e8:	200010e0 	.word	0x200010e0

080127ec <_isatty_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4d06      	ldr	r5, [pc, #24]	@ (8012808 <_isatty_r+0x1c>)
 80127f0:	2300      	movs	r3, #0
 80127f2:	4604      	mov	r4, r0
 80127f4:	4608      	mov	r0, r1
 80127f6:	602b      	str	r3, [r5, #0]
 80127f8:	f7f4 fef4 	bl	80075e4 <_isatty>
 80127fc:	1c43      	adds	r3, r0, #1
 80127fe:	d102      	bne.n	8012806 <_isatty_r+0x1a>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	b103      	cbz	r3, 8012806 <_isatty_r+0x1a>
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	200010e0 	.word	0x200010e0

0801280c <abort>:
 801280c:	b508      	push	{r3, lr}
 801280e:	2006      	movs	r0, #6
 8012810:	f000 f8b0 	bl	8012974 <raise>
 8012814:	2001      	movs	r0, #1
 8012816:	f7f4 fe85 	bl	8007524 <_exit>

0801281a <_calloc_r>:
 801281a:	b570      	push	{r4, r5, r6, lr}
 801281c:	fba1 5402 	umull	r5, r4, r1, r2
 8012820:	b93c      	cbnz	r4, 8012832 <_calloc_r+0x18>
 8012822:	4629      	mov	r1, r5
 8012824:	f7fb f864 	bl	800d8f0 <_malloc_r>
 8012828:	4606      	mov	r6, r0
 801282a:	b928      	cbnz	r0, 8012838 <_calloc_r+0x1e>
 801282c:	2600      	movs	r6, #0
 801282e:	4630      	mov	r0, r6
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	220c      	movs	r2, #12
 8012834:	6002      	str	r2, [r0, #0]
 8012836:	e7f9      	b.n	801282c <_calloc_r+0x12>
 8012838:	462a      	mov	r2, r5
 801283a:	4621      	mov	r1, r4
 801283c:	f7fd f802 	bl	800f844 <memset>
 8012840:	e7f5      	b.n	801282e <_calloc_r+0x14>
	...

08012844 <_strtoul_l.constprop.0>:
 8012844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012848:	4e34      	ldr	r6, [pc, #208]	@ (801291c <_strtoul_l.constprop.0+0xd8>)
 801284a:	4686      	mov	lr, r0
 801284c:	460d      	mov	r5, r1
 801284e:	4628      	mov	r0, r5
 8012850:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012854:	5d37      	ldrb	r7, [r6, r4]
 8012856:	f017 0708 	ands.w	r7, r7, #8
 801285a:	d1f8      	bne.n	801284e <_strtoul_l.constprop.0+0xa>
 801285c:	2c2d      	cmp	r4, #45	@ 0x2d
 801285e:	d12f      	bne.n	80128c0 <_strtoul_l.constprop.0+0x7c>
 8012860:	782c      	ldrb	r4, [r5, #0]
 8012862:	2701      	movs	r7, #1
 8012864:	1c85      	adds	r5, r0, #2
 8012866:	f033 0010 	bics.w	r0, r3, #16
 801286a:	d109      	bne.n	8012880 <_strtoul_l.constprop.0+0x3c>
 801286c:	2c30      	cmp	r4, #48	@ 0x30
 801286e:	d12c      	bne.n	80128ca <_strtoul_l.constprop.0+0x86>
 8012870:	7828      	ldrb	r0, [r5, #0]
 8012872:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012876:	2858      	cmp	r0, #88	@ 0x58
 8012878:	d127      	bne.n	80128ca <_strtoul_l.constprop.0+0x86>
 801287a:	786c      	ldrb	r4, [r5, #1]
 801287c:	2310      	movs	r3, #16
 801287e:	3502      	adds	r5, #2
 8012880:	f04f 38ff 	mov.w	r8, #4294967295
 8012884:	2600      	movs	r6, #0
 8012886:	fbb8 f8f3 	udiv	r8, r8, r3
 801288a:	fb03 f908 	mul.w	r9, r3, r8
 801288e:	ea6f 0909 	mvn.w	r9, r9
 8012892:	4630      	mov	r0, r6
 8012894:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012898:	f1bc 0f09 	cmp.w	ip, #9
 801289c:	d81c      	bhi.n	80128d8 <_strtoul_l.constprop.0+0x94>
 801289e:	4664      	mov	r4, ip
 80128a0:	42a3      	cmp	r3, r4
 80128a2:	dd2a      	ble.n	80128fa <_strtoul_l.constprop.0+0xb6>
 80128a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80128a8:	d007      	beq.n	80128ba <_strtoul_l.constprop.0+0x76>
 80128aa:	4580      	cmp	r8, r0
 80128ac:	d322      	bcc.n	80128f4 <_strtoul_l.constprop.0+0xb0>
 80128ae:	d101      	bne.n	80128b4 <_strtoul_l.constprop.0+0x70>
 80128b0:	45a1      	cmp	r9, r4
 80128b2:	db1f      	blt.n	80128f4 <_strtoul_l.constprop.0+0xb0>
 80128b4:	fb00 4003 	mla	r0, r0, r3, r4
 80128b8:	2601      	movs	r6, #1
 80128ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128be:	e7e9      	b.n	8012894 <_strtoul_l.constprop.0+0x50>
 80128c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80128c2:	bf04      	itt	eq
 80128c4:	782c      	ldrbeq	r4, [r5, #0]
 80128c6:	1c85      	addeq	r5, r0, #2
 80128c8:	e7cd      	b.n	8012866 <_strtoul_l.constprop.0+0x22>
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d1d8      	bne.n	8012880 <_strtoul_l.constprop.0+0x3c>
 80128ce:	2c30      	cmp	r4, #48	@ 0x30
 80128d0:	bf0c      	ite	eq
 80128d2:	2308      	moveq	r3, #8
 80128d4:	230a      	movne	r3, #10
 80128d6:	e7d3      	b.n	8012880 <_strtoul_l.constprop.0+0x3c>
 80128d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80128dc:	f1bc 0f19 	cmp.w	ip, #25
 80128e0:	d801      	bhi.n	80128e6 <_strtoul_l.constprop.0+0xa2>
 80128e2:	3c37      	subs	r4, #55	@ 0x37
 80128e4:	e7dc      	b.n	80128a0 <_strtoul_l.constprop.0+0x5c>
 80128e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80128ea:	f1bc 0f19 	cmp.w	ip, #25
 80128ee:	d804      	bhi.n	80128fa <_strtoul_l.constprop.0+0xb6>
 80128f0:	3c57      	subs	r4, #87	@ 0x57
 80128f2:	e7d5      	b.n	80128a0 <_strtoul_l.constprop.0+0x5c>
 80128f4:	f04f 36ff 	mov.w	r6, #4294967295
 80128f8:	e7df      	b.n	80128ba <_strtoul_l.constprop.0+0x76>
 80128fa:	1c73      	adds	r3, r6, #1
 80128fc:	d106      	bne.n	801290c <_strtoul_l.constprop.0+0xc8>
 80128fe:	2322      	movs	r3, #34	@ 0x22
 8012900:	f8ce 3000 	str.w	r3, [lr]
 8012904:	4630      	mov	r0, r6
 8012906:	b932      	cbnz	r2, 8012916 <_strtoul_l.constprop.0+0xd2>
 8012908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801290c:	b107      	cbz	r7, 8012910 <_strtoul_l.constprop.0+0xcc>
 801290e:	4240      	negs	r0, r0
 8012910:	2a00      	cmp	r2, #0
 8012912:	d0f9      	beq.n	8012908 <_strtoul_l.constprop.0+0xc4>
 8012914:	b106      	cbz	r6, 8012918 <_strtoul_l.constprop.0+0xd4>
 8012916:	1e69      	subs	r1, r5, #1
 8012918:	6011      	str	r1, [r2, #0]
 801291a:	e7f5      	b.n	8012908 <_strtoul_l.constprop.0+0xc4>
 801291c:	08015aa1 	.word	0x08015aa1

08012920 <_strtoul_r>:
 8012920:	f7ff bf90 	b.w	8012844 <_strtoul_l.constprop.0>

08012924 <_raise_r>:
 8012924:	291f      	cmp	r1, #31
 8012926:	b538      	push	{r3, r4, r5, lr}
 8012928:	4605      	mov	r5, r0
 801292a:	460c      	mov	r4, r1
 801292c:	d904      	bls.n	8012938 <_raise_r+0x14>
 801292e:	2316      	movs	r3, #22
 8012930:	6003      	str	r3, [r0, #0]
 8012932:	f04f 30ff 	mov.w	r0, #4294967295
 8012936:	bd38      	pop	{r3, r4, r5, pc}
 8012938:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801293a:	b112      	cbz	r2, 8012942 <_raise_r+0x1e>
 801293c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012940:	b94b      	cbnz	r3, 8012956 <_raise_r+0x32>
 8012942:	4628      	mov	r0, r5
 8012944:	f000 f830 	bl	80129a8 <_getpid_r>
 8012948:	4622      	mov	r2, r4
 801294a:	4601      	mov	r1, r0
 801294c:	4628      	mov	r0, r5
 801294e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012952:	f000 b817 	b.w	8012984 <_kill_r>
 8012956:	2b01      	cmp	r3, #1
 8012958:	d00a      	beq.n	8012970 <_raise_r+0x4c>
 801295a:	1c59      	adds	r1, r3, #1
 801295c:	d103      	bne.n	8012966 <_raise_r+0x42>
 801295e:	2316      	movs	r3, #22
 8012960:	6003      	str	r3, [r0, #0]
 8012962:	2001      	movs	r0, #1
 8012964:	e7e7      	b.n	8012936 <_raise_r+0x12>
 8012966:	2100      	movs	r1, #0
 8012968:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801296c:	4620      	mov	r0, r4
 801296e:	4798      	blx	r3
 8012970:	2000      	movs	r0, #0
 8012972:	e7e0      	b.n	8012936 <_raise_r+0x12>

08012974 <raise>:
 8012974:	4b02      	ldr	r3, [pc, #8]	@ (8012980 <raise+0xc>)
 8012976:	4601      	mov	r1, r0
 8012978:	6818      	ldr	r0, [r3, #0]
 801297a:	f7ff bfd3 	b.w	8012924 <_raise_r>
 801297e:	bf00      	nop
 8012980:	20000194 	.word	0x20000194

08012984 <_kill_r>:
 8012984:	b538      	push	{r3, r4, r5, lr}
 8012986:	4d07      	ldr	r5, [pc, #28]	@ (80129a4 <_kill_r+0x20>)
 8012988:	2300      	movs	r3, #0
 801298a:	4604      	mov	r4, r0
 801298c:	4608      	mov	r0, r1
 801298e:	4611      	mov	r1, r2
 8012990:	602b      	str	r3, [r5, #0]
 8012992:	f7f4 fdb7 	bl	8007504 <_kill>
 8012996:	1c43      	adds	r3, r0, #1
 8012998:	d102      	bne.n	80129a0 <_kill_r+0x1c>
 801299a:	682b      	ldr	r3, [r5, #0]
 801299c:	b103      	cbz	r3, 80129a0 <_kill_r+0x1c>
 801299e:	6023      	str	r3, [r4, #0]
 80129a0:	bd38      	pop	{r3, r4, r5, pc}
 80129a2:	bf00      	nop
 80129a4:	200010e0 	.word	0x200010e0

080129a8 <_getpid_r>:
 80129a8:	f7f4 bda4 	b.w	80074f4 <_getpid>

080129ac <asin>:
 80129ac:	b538      	push	{r3, r4, r5, lr}
 80129ae:	ed2d 8b02 	vpush	{d8}
 80129b2:	ec55 4b10 	vmov	r4, r5, d0
 80129b6:	f000 fc5b 	bl	8013270 <__ieee754_asin>
 80129ba:	4622      	mov	r2, r4
 80129bc:	462b      	mov	r3, r5
 80129be:	4620      	mov	r0, r4
 80129c0:	4629      	mov	r1, r5
 80129c2:	eeb0 8a40 	vmov.f32	s16, s0
 80129c6:	eef0 8a60 	vmov.f32	s17, s1
 80129ca:	f7ee f8bf 	bl	8000b4c <__aeabi_dcmpun>
 80129ce:	b9a8      	cbnz	r0, 80129fc <asin+0x50>
 80129d0:	ec45 4b10 	vmov	d0, r4, r5
 80129d4:	f000 f940 	bl	8012c58 <fabs>
 80129d8:	4b0c      	ldr	r3, [pc, #48]	@ (8012a0c <asin+0x60>)
 80129da:	ec51 0b10 	vmov	r0, r1, d0
 80129de:	2200      	movs	r2, #0
 80129e0:	f7ee f8aa 	bl	8000b38 <__aeabi_dcmpgt>
 80129e4:	b150      	cbz	r0, 80129fc <asin+0x50>
 80129e6:	f7fd f813 	bl	800fa10 <__errno>
 80129ea:	ecbd 8b02 	vpop	{d8}
 80129ee:	2321      	movs	r3, #33	@ 0x21
 80129f0:	6003      	str	r3, [r0, #0]
 80129f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f6:	4806      	ldr	r0, [pc, #24]	@ (8012a10 <asin+0x64>)
 80129f8:	f7fd b846 	b.w	800fa88 <nan>
 80129fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012a00:	eef0 0a68 	vmov.f32	s1, s17
 8012a04:	ecbd 8b02 	vpop	{d8}
 8012a08:	bd38      	pop	{r3, r4, r5, pc}
 8012a0a:	bf00      	nop
 8012a0c:	3ff00000 	.word	0x3ff00000
 8012a10:	08015c8c 	.word	0x08015c8c

08012a14 <atan2>:
 8012a14:	f000 be30 	b.w	8013678 <__ieee754_atan2>

08012a18 <fmod>:
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1a:	ed2d 8b02 	vpush	{d8}
 8012a1e:	ec57 6b10 	vmov	r6, r7, d0
 8012a22:	ec55 4b11 	vmov	r4, r5, d1
 8012a26:	f000 feed 	bl	8013804 <__ieee754_fmod>
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	462b      	mov	r3, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	4639      	mov	r1, r7
 8012a32:	eeb0 8a40 	vmov.f32	s16, s0
 8012a36:	eef0 8a60 	vmov.f32	s17, s1
 8012a3a:	f7ee f887 	bl	8000b4c <__aeabi_dcmpun>
 8012a3e:	b990      	cbnz	r0, 8012a66 <fmod+0x4e>
 8012a40:	2200      	movs	r2, #0
 8012a42:	2300      	movs	r3, #0
 8012a44:	4620      	mov	r0, r4
 8012a46:	4629      	mov	r1, r5
 8012a48:	f7ee f84e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a4c:	b158      	cbz	r0, 8012a66 <fmod+0x4e>
 8012a4e:	f7fc ffdf 	bl	800fa10 <__errno>
 8012a52:	2321      	movs	r3, #33	@ 0x21
 8012a54:	6003      	str	r3, [r0, #0]
 8012a56:	2200      	movs	r2, #0
 8012a58:	2300      	movs	r3, #0
 8012a5a:	4610      	mov	r0, r2
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	f7ed ff05 	bl	800086c <__aeabi_ddiv>
 8012a62:	ec41 0b18 	vmov	d8, r0, r1
 8012a66:	eeb0 0a48 	vmov.f32	s0, s16
 8012a6a:	eef0 0a68 	vmov.f32	s1, s17
 8012a6e:	ecbd 8b02 	vpop	{d8}
 8012a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a74 <pow>:
 8012a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a76:	ed2d 8b02 	vpush	{d8}
 8012a7a:	eeb0 8a40 	vmov.f32	s16, s0
 8012a7e:	eef0 8a60 	vmov.f32	s17, s1
 8012a82:	ec55 4b11 	vmov	r4, r5, d1
 8012a86:	f000 ffc7 	bl	8013a18 <__ieee754_pow>
 8012a8a:	4622      	mov	r2, r4
 8012a8c:	462b      	mov	r3, r5
 8012a8e:	4620      	mov	r0, r4
 8012a90:	4629      	mov	r1, r5
 8012a92:	ec57 6b10 	vmov	r6, r7, d0
 8012a96:	f7ee f859 	bl	8000b4c <__aeabi_dcmpun>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	d13b      	bne.n	8012b16 <pow+0xa2>
 8012a9e:	ec51 0b18 	vmov	r0, r1, d8
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f7ee f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8012aaa:	b1b8      	cbz	r0, 8012adc <pow+0x68>
 8012aac:	2200      	movs	r2, #0
 8012aae:	2300      	movs	r3, #0
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	f7ee f818 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d146      	bne.n	8012b4a <pow+0xd6>
 8012abc:	ec45 4b10 	vmov	d0, r4, r5
 8012ac0:	f000 f926 	bl	8012d10 <finite>
 8012ac4:	b338      	cbz	r0, 8012b16 <pow+0xa2>
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	2300      	movs	r3, #0
 8012aca:	4620      	mov	r0, r4
 8012acc:	4629      	mov	r1, r5
 8012ace:	f7ee f815 	bl	8000afc <__aeabi_dcmplt>
 8012ad2:	b300      	cbz	r0, 8012b16 <pow+0xa2>
 8012ad4:	f7fc ff9c 	bl	800fa10 <__errno>
 8012ad8:	2322      	movs	r3, #34	@ 0x22
 8012ada:	e01b      	b.n	8012b14 <pow+0xa0>
 8012adc:	ec47 6b10 	vmov	d0, r6, r7
 8012ae0:	f000 f916 	bl	8012d10 <finite>
 8012ae4:	b9e0      	cbnz	r0, 8012b20 <pow+0xac>
 8012ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8012aea:	eef0 0a68 	vmov.f32	s1, s17
 8012aee:	f000 f90f 	bl	8012d10 <finite>
 8012af2:	b1a8      	cbz	r0, 8012b20 <pow+0xac>
 8012af4:	ec45 4b10 	vmov	d0, r4, r5
 8012af8:	f000 f90a 	bl	8012d10 <finite>
 8012afc:	b180      	cbz	r0, 8012b20 <pow+0xac>
 8012afe:	4632      	mov	r2, r6
 8012b00:	463b      	mov	r3, r7
 8012b02:	4630      	mov	r0, r6
 8012b04:	4639      	mov	r1, r7
 8012b06:	f7ee f821 	bl	8000b4c <__aeabi_dcmpun>
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d0e2      	beq.n	8012ad4 <pow+0x60>
 8012b0e:	f7fc ff7f 	bl	800fa10 <__errno>
 8012b12:	2321      	movs	r3, #33	@ 0x21
 8012b14:	6003      	str	r3, [r0, #0]
 8012b16:	ecbd 8b02 	vpop	{d8}
 8012b1a:	ec47 6b10 	vmov	d0, r6, r7
 8012b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b20:	2200      	movs	r2, #0
 8012b22:	2300      	movs	r3, #0
 8012b24:	4630      	mov	r0, r6
 8012b26:	4639      	mov	r1, r7
 8012b28:	f7ed ffde 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	d0f2      	beq.n	8012b16 <pow+0xa2>
 8012b30:	eeb0 0a48 	vmov.f32	s0, s16
 8012b34:	eef0 0a68 	vmov.f32	s1, s17
 8012b38:	f000 f8ea 	bl	8012d10 <finite>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d0ea      	beq.n	8012b16 <pow+0xa2>
 8012b40:	ec45 4b10 	vmov	d0, r4, r5
 8012b44:	f000 f8e4 	bl	8012d10 <finite>
 8012b48:	e7c3      	b.n	8012ad2 <pow+0x5e>
 8012b4a:	4f01      	ldr	r7, [pc, #4]	@ (8012b50 <pow+0xdc>)
 8012b4c:	2600      	movs	r6, #0
 8012b4e:	e7e2      	b.n	8012b16 <pow+0xa2>
 8012b50:	3ff00000 	.word	0x3ff00000

08012b54 <sqrt>:
 8012b54:	b538      	push	{r3, r4, r5, lr}
 8012b56:	ed2d 8b02 	vpush	{d8}
 8012b5a:	ec55 4b10 	vmov	r4, r5, d0
 8012b5e:	f000 f8e3 	bl	8012d28 <__ieee754_sqrt>
 8012b62:	4622      	mov	r2, r4
 8012b64:	462b      	mov	r3, r5
 8012b66:	4620      	mov	r0, r4
 8012b68:	4629      	mov	r1, r5
 8012b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b6e:	eef0 8a60 	vmov.f32	s17, s1
 8012b72:	f7ed ffeb 	bl	8000b4c <__aeabi_dcmpun>
 8012b76:	b990      	cbnz	r0, 8012b9e <sqrt+0x4a>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	4629      	mov	r1, r5
 8012b80:	f7ed ffbc 	bl	8000afc <__aeabi_dcmplt>
 8012b84:	b158      	cbz	r0, 8012b9e <sqrt+0x4a>
 8012b86:	f7fc ff43 	bl	800fa10 <__errno>
 8012b8a:	2321      	movs	r3, #33	@ 0x21
 8012b8c:	6003      	str	r3, [r0, #0]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	2300      	movs	r3, #0
 8012b92:	4610      	mov	r0, r2
 8012b94:	4619      	mov	r1, r3
 8012b96:	f7ed fe69 	bl	800086c <__aeabi_ddiv>
 8012b9a:	ec41 0b18 	vmov	d8, r0, r1
 8012b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8012ba2:	eef0 0a68 	vmov.f32	s1, s17
 8012ba6:	ecbd 8b02 	vpop	{d8}
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	0000      	movs	r0, r0
	...

08012bb0 <cos>:
 8012bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bb2:	ec53 2b10 	vmov	r2, r3, d0
 8012bb6:	4826      	ldr	r0, [pc, #152]	@ (8012c50 <cos+0xa0>)
 8012bb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012bbc:	4281      	cmp	r1, r0
 8012bbe:	d806      	bhi.n	8012bce <cos+0x1e>
 8012bc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012c48 <cos+0x98>
 8012bc4:	b005      	add	sp, #20
 8012bc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bca:	f000 b9cd 	b.w	8012f68 <__kernel_cos>
 8012bce:	4821      	ldr	r0, [pc, #132]	@ (8012c54 <cos+0xa4>)
 8012bd0:	4281      	cmp	r1, r0
 8012bd2:	d908      	bls.n	8012be6 <cos+0x36>
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	f7ed fb66 	bl	80002a8 <__aeabi_dsub>
 8012bdc:	ec41 0b10 	vmov	d0, r0, r1
 8012be0:	b005      	add	sp, #20
 8012be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8012be6:	4668      	mov	r0, sp
 8012be8:	f001 fc5a 	bl	80144a0 <__ieee754_rem_pio2>
 8012bec:	f000 0003 	and.w	r0, r0, #3
 8012bf0:	2801      	cmp	r0, #1
 8012bf2:	d00b      	beq.n	8012c0c <cos+0x5c>
 8012bf4:	2802      	cmp	r0, #2
 8012bf6:	d015      	beq.n	8012c24 <cos+0x74>
 8012bf8:	b9d8      	cbnz	r0, 8012c32 <cos+0x82>
 8012bfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bfe:	ed9d 0b00 	vldr	d0, [sp]
 8012c02:	f000 f9b1 	bl	8012f68 <__kernel_cos>
 8012c06:	ec51 0b10 	vmov	r0, r1, d0
 8012c0a:	e7e7      	b.n	8012bdc <cos+0x2c>
 8012c0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c10:	ed9d 0b00 	vldr	d0, [sp]
 8012c14:	f000 fa70 	bl	80130f8 <__kernel_sin>
 8012c18:	ec53 2b10 	vmov	r2, r3, d0
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012c22:	e7db      	b.n	8012bdc <cos+0x2c>
 8012c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c28:	ed9d 0b00 	vldr	d0, [sp]
 8012c2c:	f000 f99c 	bl	8012f68 <__kernel_cos>
 8012c30:	e7f2      	b.n	8012c18 <cos+0x68>
 8012c32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c36:	ed9d 0b00 	vldr	d0, [sp]
 8012c3a:	2001      	movs	r0, #1
 8012c3c:	f000 fa5c 	bl	80130f8 <__kernel_sin>
 8012c40:	e7e1      	b.n	8012c06 <cos+0x56>
 8012c42:	bf00      	nop
 8012c44:	f3af 8000 	nop.w
	...
 8012c50:	3fe921fb 	.word	0x3fe921fb
 8012c54:	7fefffff 	.word	0x7fefffff

08012c58 <fabs>:
 8012c58:	ec51 0b10 	vmov	r0, r1, d0
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012c62:	ec43 2b10 	vmov	d0, r2, r3
 8012c66:	4770      	bx	lr

08012c68 <sin>:
 8012c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c6a:	ec53 2b10 	vmov	r2, r3, d0
 8012c6e:	4826      	ldr	r0, [pc, #152]	@ (8012d08 <sin+0xa0>)
 8012c70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012c74:	4281      	cmp	r1, r0
 8012c76:	d807      	bhi.n	8012c88 <sin+0x20>
 8012c78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012d00 <sin+0x98>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	b005      	add	sp, #20
 8012c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c84:	f000 ba38 	b.w	80130f8 <__kernel_sin>
 8012c88:	4820      	ldr	r0, [pc, #128]	@ (8012d0c <sin+0xa4>)
 8012c8a:	4281      	cmp	r1, r0
 8012c8c:	d908      	bls.n	8012ca0 <sin+0x38>
 8012c8e:	4610      	mov	r0, r2
 8012c90:	4619      	mov	r1, r3
 8012c92:	f7ed fb09 	bl	80002a8 <__aeabi_dsub>
 8012c96:	ec41 0b10 	vmov	d0, r0, r1
 8012c9a:	b005      	add	sp, #20
 8012c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ca0:	4668      	mov	r0, sp
 8012ca2:	f001 fbfd 	bl	80144a0 <__ieee754_rem_pio2>
 8012ca6:	f000 0003 	and.w	r0, r0, #3
 8012caa:	2801      	cmp	r0, #1
 8012cac:	d00c      	beq.n	8012cc8 <sin+0x60>
 8012cae:	2802      	cmp	r0, #2
 8012cb0:	d011      	beq.n	8012cd6 <sin+0x6e>
 8012cb2:	b9e8      	cbnz	r0, 8012cf0 <sin+0x88>
 8012cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cb8:	ed9d 0b00 	vldr	d0, [sp]
 8012cbc:	2001      	movs	r0, #1
 8012cbe:	f000 fa1b 	bl	80130f8 <__kernel_sin>
 8012cc2:	ec51 0b10 	vmov	r0, r1, d0
 8012cc6:	e7e6      	b.n	8012c96 <sin+0x2e>
 8012cc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ccc:	ed9d 0b00 	vldr	d0, [sp]
 8012cd0:	f000 f94a 	bl	8012f68 <__kernel_cos>
 8012cd4:	e7f5      	b.n	8012cc2 <sin+0x5a>
 8012cd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cda:	ed9d 0b00 	vldr	d0, [sp]
 8012cde:	2001      	movs	r0, #1
 8012ce0:	f000 fa0a 	bl	80130f8 <__kernel_sin>
 8012ce4:	ec53 2b10 	vmov	r2, r3, d0
 8012ce8:	4610      	mov	r0, r2
 8012cea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012cee:	e7d2      	b.n	8012c96 <sin+0x2e>
 8012cf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cf4:	ed9d 0b00 	vldr	d0, [sp]
 8012cf8:	f000 f936 	bl	8012f68 <__kernel_cos>
 8012cfc:	e7f2      	b.n	8012ce4 <sin+0x7c>
 8012cfe:	bf00      	nop
	...
 8012d08:	3fe921fb 	.word	0x3fe921fb
 8012d0c:	7fefffff 	.word	0x7fefffff

08012d10 <finite>:
 8012d10:	b082      	sub	sp, #8
 8012d12:	ed8d 0b00 	vstr	d0, [sp]
 8012d16:	9801      	ldr	r0, [sp, #4]
 8012d18:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8012d1c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012d20:	0fc0      	lsrs	r0, r0, #31
 8012d22:	b002      	add	sp, #8
 8012d24:	4770      	bx	lr
	...

08012d28 <__ieee754_sqrt>:
 8012d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	4a68      	ldr	r2, [pc, #416]	@ (8012ed0 <__ieee754_sqrt+0x1a8>)
 8012d2e:	ec55 4b10 	vmov	r4, r5, d0
 8012d32:	43aa      	bics	r2, r5
 8012d34:	462b      	mov	r3, r5
 8012d36:	4621      	mov	r1, r4
 8012d38:	d110      	bne.n	8012d5c <__ieee754_sqrt+0x34>
 8012d3a:	4622      	mov	r2, r4
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed fc6a 	bl	8000618 <__aeabi_dmul>
 8012d44:	4602      	mov	r2, r0
 8012d46:	460b      	mov	r3, r1
 8012d48:	4620      	mov	r0, r4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	f7ed faae 	bl	80002ac <__adddf3>
 8012d50:	4604      	mov	r4, r0
 8012d52:	460d      	mov	r5, r1
 8012d54:	ec45 4b10 	vmov	d0, r4, r5
 8012d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5c:	2d00      	cmp	r5, #0
 8012d5e:	dc0e      	bgt.n	8012d7e <__ieee754_sqrt+0x56>
 8012d60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012d64:	4322      	orrs	r2, r4
 8012d66:	d0f5      	beq.n	8012d54 <__ieee754_sqrt+0x2c>
 8012d68:	b19d      	cbz	r5, 8012d92 <__ieee754_sqrt+0x6a>
 8012d6a:	4622      	mov	r2, r4
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	4629      	mov	r1, r5
 8012d70:	f7ed fa9a 	bl	80002a8 <__aeabi_dsub>
 8012d74:	4602      	mov	r2, r0
 8012d76:	460b      	mov	r3, r1
 8012d78:	f7ed fd78 	bl	800086c <__aeabi_ddiv>
 8012d7c:	e7e8      	b.n	8012d50 <__ieee754_sqrt+0x28>
 8012d7e:	152a      	asrs	r2, r5, #20
 8012d80:	d115      	bne.n	8012dae <__ieee754_sqrt+0x86>
 8012d82:	2000      	movs	r0, #0
 8012d84:	e009      	b.n	8012d9a <__ieee754_sqrt+0x72>
 8012d86:	0acb      	lsrs	r3, r1, #11
 8012d88:	3a15      	subs	r2, #21
 8012d8a:	0549      	lsls	r1, r1, #21
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d0fa      	beq.n	8012d86 <__ieee754_sqrt+0x5e>
 8012d90:	e7f7      	b.n	8012d82 <__ieee754_sqrt+0x5a>
 8012d92:	462a      	mov	r2, r5
 8012d94:	e7fa      	b.n	8012d8c <__ieee754_sqrt+0x64>
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	3001      	adds	r0, #1
 8012d9a:	02dc      	lsls	r4, r3, #11
 8012d9c:	d5fb      	bpl.n	8012d96 <__ieee754_sqrt+0x6e>
 8012d9e:	1e44      	subs	r4, r0, #1
 8012da0:	1b12      	subs	r2, r2, r4
 8012da2:	f1c0 0420 	rsb	r4, r0, #32
 8012da6:	fa21 f404 	lsr.w	r4, r1, r4
 8012daa:	4323      	orrs	r3, r4
 8012dac:	4081      	lsls	r1, r0
 8012dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012db2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012dba:	07d2      	lsls	r2, r2, #31
 8012dbc:	bf5c      	itt	pl
 8012dbe:	005b      	lslpl	r3, r3, #1
 8012dc0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012dc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012dc8:	bf58      	it	pl
 8012dca:	0049      	lslpl	r1, r1, #1
 8012dcc:	2600      	movs	r6, #0
 8012dce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012dd2:	106d      	asrs	r5, r5, #1
 8012dd4:	0049      	lsls	r1, r1, #1
 8012dd6:	2016      	movs	r0, #22
 8012dd8:	4632      	mov	r2, r6
 8012dda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012dde:	1917      	adds	r7, r2, r4
 8012de0:	429f      	cmp	r7, r3
 8012de2:	bfde      	ittt	le
 8012de4:	193a      	addle	r2, r7, r4
 8012de6:	1bdb      	suble	r3, r3, r7
 8012de8:	1936      	addle	r6, r6, r4
 8012dea:	0fcf      	lsrs	r7, r1, #31
 8012dec:	3801      	subs	r0, #1
 8012dee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012df2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012df6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012dfa:	d1f0      	bne.n	8012dde <__ieee754_sqrt+0xb6>
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	2720      	movs	r7, #32
 8012e00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012e04:	429a      	cmp	r2, r3
 8012e06:	eb00 0e0c 	add.w	lr, r0, ip
 8012e0a:	db02      	blt.n	8012e12 <__ieee754_sqrt+0xea>
 8012e0c:	d113      	bne.n	8012e36 <__ieee754_sqrt+0x10e>
 8012e0e:	458e      	cmp	lr, r1
 8012e10:	d811      	bhi.n	8012e36 <__ieee754_sqrt+0x10e>
 8012e12:	f1be 0f00 	cmp.w	lr, #0
 8012e16:	eb0e 000c 	add.w	r0, lr, ip
 8012e1a:	da42      	bge.n	8012ea2 <__ieee754_sqrt+0x17a>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	db40      	blt.n	8012ea2 <__ieee754_sqrt+0x17a>
 8012e20:	f102 0801 	add.w	r8, r2, #1
 8012e24:	1a9b      	subs	r3, r3, r2
 8012e26:	458e      	cmp	lr, r1
 8012e28:	bf88      	it	hi
 8012e2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012e2e:	eba1 010e 	sub.w	r1, r1, lr
 8012e32:	4464      	add	r4, ip
 8012e34:	4642      	mov	r2, r8
 8012e36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012e3a:	3f01      	subs	r7, #1
 8012e3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012e40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012e48:	d1dc      	bne.n	8012e04 <__ieee754_sqrt+0xdc>
 8012e4a:	4319      	orrs	r1, r3
 8012e4c:	d01b      	beq.n	8012e86 <__ieee754_sqrt+0x15e>
 8012e4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012ed4 <__ieee754_sqrt+0x1ac>
 8012e52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012ed8 <__ieee754_sqrt+0x1b0>
 8012e56:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e5e:	f7ed fa23 	bl	80002a8 <__aeabi_dsub>
 8012e62:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fe4f 	bl	8000b10 <__aeabi_dcmple>
 8012e72:	b140      	cbz	r0, 8012e86 <__ieee754_sqrt+0x15e>
 8012e74:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012e78:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e80:	d111      	bne.n	8012ea6 <__ieee754_sqrt+0x17e>
 8012e82:	3601      	adds	r6, #1
 8012e84:	463c      	mov	r4, r7
 8012e86:	1072      	asrs	r2, r6, #1
 8012e88:	0863      	lsrs	r3, r4, #1
 8012e8a:	07f1      	lsls	r1, r6, #31
 8012e8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012e90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012e94:	bf48      	it	mi
 8012e96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012e9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	e756      	b.n	8012d50 <__ieee754_sqrt+0x28>
 8012ea2:	4690      	mov	r8, r2
 8012ea4:	e7be      	b.n	8012e24 <__ieee754_sqrt+0xfc>
 8012ea6:	f7ed fa01 	bl	80002ac <__adddf3>
 8012eaa:	e9da 8900 	ldrd	r8, r9, [sl]
 8012eae:	4602      	mov	r2, r0
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	4640      	mov	r0, r8
 8012eb4:	4649      	mov	r1, r9
 8012eb6:	f7ed fe21 	bl	8000afc <__aeabi_dcmplt>
 8012eba:	b120      	cbz	r0, 8012ec6 <__ieee754_sqrt+0x19e>
 8012ebc:	1ca0      	adds	r0, r4, #2
 8012ebe:	bf08      	it	eq
 8012ec0:	3601      	addeq	r6, #1
 8012ec2:	3402      	adds	r4, #2
 8012ec4:	e7df      	b.n	8012e86 <__ieee754_sqrt+0x15e>
 8012ec6:	1c63      	adds	r3, r4, #1
 8012ec8:	f023 0401 	bic.w	r4, r3, #1
 8012ecc:	e7db      	b.n	8012e86 <__ieee754_sqrt+0x15e>
 8012ece:	bf00      	nop
 8012ed0:	7ff00000 	.word	0x7ff00000
 8012ed4:	200001f0 	.word	0x200001f0
 8012ed8:	200001e8 	.word	0x200001e8

08012edc <round>:
 8012edc:	ec51 0b10 	vmov	r0, r1, d0
 8012ee0:	b570      	push	{r4, r5, r6, lr}
 8012ee2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012ee6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8012eea:	2a13      	cmp	r2, #19
 8012eec:	460b      	mov	r3, r1
 8012eee:	4605      	mov	r5, r0
 8012ef0:	dc1b      	bgt.n	8012f2a <round+0x4e>
 8012ef2:	2a00      	cmp	r2, #0
 8012ef4:	da0b      	bge.n	8012f0e <round+0x32>
 8012ef6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012efa:	3201      	adds	r2, #1
 8012efc:	bf04      	itt	eq
 8012efe:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8012f02:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8012f06:	2200      	movs	r2, #0
 8012f08:	4619      	mov	r1, r3
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	e015      	b.n	8012f3a <round+0x5e>
 8012f0e:	4c15      	ldr	r4, [pc, #84]	@ (8012f64 <round+0x88>)
 8012f10:	4114      	asrs	r4, r2
 8012f12:	ea04 0601 	and.w	r6, r4, r1
 8012f16:	4306      	orrs	r6, r0
 8012f18:	d00f      	beq.n	8012f3a <round+0x5e>
 8012f1a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8012f1e:	fa41 f202 	asr.w	r2, r1, r2
 8012f22:	4413      	add	r3, r2
 8012f24:	ea23 0304 	bic.w	r3, r3, r4
 8012f28:	e7ed      	b.n	8012f06 <round+0x2a>
 8012f2a:	2a33      	cmp	r2, #51	@ 0x33
 8012f2c:	dd08      	ble.n	8012f40 <round+0x64>
 8012f2e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8012f32:	d102      	bne.n	8012f3a <round+0x5e>
 8012f34:	4602      	mov	r2, r0
 8012f36:	f7ed f9b9 	bl	80002ac <__adddf3>
 8012f3a:	ec41 0b10 	vmov	d0, r0, r1
 8012f3e:	bd70      	pop	{r4, r5, r6, pc}
 8012f40:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8012f44:	f04f 34ff 	mov.w	r4, #4294967295
 8012f48:	40f4      	lsrs	r4, r6
 8012f4a:	4204      	tst	r4, r0
 8012f4c:	d0f5      	beq.n	8012f3a <round+0x5e>
 8012f4e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8012f52:	2201      	movs	r2, #1
 8012f54:	408a      	lsls	r2, r1
 8012f56:	1952      	adds	r2, r2, r5
 8012f58:	bf28      	it	cs
 8012f5a:	3301      	addcs	r3, #1
 8012f5c:	ea22 0204 	bic.w	r2, r2, r4
 8012f60:	e7d2      	b.n	8012f08 <round+0x2c>
 8012f62:	bf00      	nop
 8012f64:	000fffff 	.word	0x000fffff

08012f68 <__kernel_cos>:
 8012f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	ec57 6b10 	vmov	r6, r7, d0
 8012f70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012f74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012f78:	ed8d 1b00 	vstr	d1, [sp]
 8012f7c:	d206      	bcs.n	8012f8c <__kernel_cos+0x24>
 8012f7e:	4630      	mov	r0, r6
 8012f80:	4639      	mov	r1, r7
 8012f82:	f7ed fdf9 	bl	8000b78 <__aeabi_d2iz>
 8012f86:	2800      	cmp	r0, #0
 8012f88:	f000 8088 	beq.w	801309c <__kernel_cos+0x134>
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	463b      	mov	r3, r7
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7ed fb40 	bl	8000618 <__aeabi_dmul>
 8012f98:	4b51      	ldr	r3, [pc, #324]	@ (80130e0 <__kernel_cos+0x178>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	460d      	mov	r5, r1
 8012fa0:	f7ed fb3a 	bl	8000618 <__aeabi_dmul>
 8012fa4:	a340      	add	r3, pc, #256	@ (adr r3, 80130a8 <__kernel_cos+0x140>)
 8012fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012faa:	4682      	mov	sl, r0
 8012fac:	468b      	mov	fp, r1
 8012fae:	4620      	mov	r0, r4
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	f7ed fb31 	bl	8000618 <__aeabi_dmul>
 8012fb6:	a33e      	add	r3, pc, #248	@ (adr r3, 80130b0 <__kernel_cos+0x148>)
 8012fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbc:	f7ed f976 	bl	80002ac <__adddf3>
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	f7ed fb28 	bl	8000618 <__aeabi_dmul>
 8012fc8:	a33b      	add	r3, pc, #236	@ (adr r3, 80130b8 <__kernel_cos+0x150>)
 8012fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fce:	f7ed f96b 	bl	80002a8 <__aeabi_dsub>
 8012fd2:	4622      	mov	r2, r4
 8012fd4:	462b      	mov	r3, r5
 8012fd6:	f7ed fb1f 	bl	8000618 <__aeabi_dmul>
 8012fda:	a339      	add	r3, pc, #228	@ (adr r3, 80130c0 <__kernel_cos+0x158>)
 8012fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe0:	f7ed f964 	bl	80002ac <__adddf3>
 8012fe4:	4622      	mov	r2, r4
 8012fe6:	462b      	mov	r3, r5
 8012fe8:	f7ed fb16 	bl	8000618 <__aeabi_dmul>
 8012fec:	a336      	add	r3, pc, #216	@ (adr r3, 80130c8 <__kernel_cos+0x160>)
 8012fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff2:	f7ed f959 	bl	80002a8 <__aeabi_dsub>
 8012ff6:	4622      	mov	r2, r4
 8012ff8:	462b      	mov	r3, r5
 8012ffa:	f7ed fb0d 	bl	8000618 <__aeabi_dmul>
 8012ffe:	a334      	add	r3, pc, #208	@ (adr r3, 80130d0 <__kernel_cos+0x168>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	f7ed f952 	bl	80002ac <__adddf3>
 8013008:	4622      	mov	r2, r4
 801300a:	462b      	mov	r3, r5
 801300c:	f7ed fb04 	bl	8000618 <__aeabi_dmul>
 8013010:	4622      	mov	r2, r4
 8013012:	462b      	mov	r3, r5
 8013014:	f7ed fb00 	bl	8000618 <__aeabi_dmul>
 8013018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801301c:	4604      	mov	r4, r0
 801301e:	460d      	mov	r5, r1
 8013020:	4630      	mov	r0, r6
 8013022:	4639      	mov	r1, r7
 8013024:	f7ed faf8 	bl	8000618 <__aeabi_dmul>
 8013028:	460b      	mov	r3, r1
 801302a:	4602      	mov	r2, r0
 801302c:	4629      	mov	r1, r5
 801302e:	4620      	mov	r0, r4
 8013030:	f7ed f93a 	bl	80002a8 <__aeabi_dsub>
 8013034:	4b2b      	ldr	r3, [pc, #172]	@ (80130e4 <__kernel_cos+0x17c>)
 8013036:	4598      	cmp	r8, r3
 8013038:	4606      	mov	r6, r0
 801303a:	460f      	mov	r7, r1
 801303c:	d810      	bhi.n	8013060 <__kernel_cos+0xf8>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4650      	mov	r0, sl
 8013044:	4659      	mov	r1, fp
 8013046:	f7ed f92f 	bl	80002a8 <__aeabi_dsub>
 801304a:	460b      	mov	r3, r1
 801304c:	4926      	ldr	r1, [pc, #152]	@ (80130e8 <__kernel_cos+0x180>)
 801304e:	4602      	mov	r2, r0
 8013050:	2000      	movs	r0, #0
 8013052:	f7ed f929 	bl	80002a8 <__aeabi_dsub>
 8013056:	ec41 0b10 	vmov	d0, r0, r1
 801305a:	b003      	add	sp, #12
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	4b22      	ldr	r3, [pc, #136]	@ (80130ec <__kernel_cos+0x184>)
 8013062:	4921      	ldr	r1, [pc, #132]	@ (80130e8 <__kernel_cos+0x180>)
 8013064:	4598      	cmp	r8, r3
 8013066:	bf8c      	ite	hi
 8013068:	4d21      	ldrhi	r5, [pc, #132]	@ (80130f0 <__kernel_cos+0x188>)
 801306a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801306e:	2400      	movs	r4, #0
 8013070:	4622      	mov	r2, r4
 8013072:	462b      	mov	r3, r5
 8013074:	2000      	movs	r0, #0
 8013076:	f7ed f917 	bl	80002a8 <__aeabi_dsub>
 801307a:	4622      	mov	r2, r4
 801307c:	4680      	mov	r8, r0
 801307e:	4689      	mov	r9, r1
 8013080:	462b      	mov	r3, r5
 8013082:	4650      	mov	r0, sl
 8013084:	4659      	mov	r1, fp
 8013086:	f7ed f90f 	bl	80002a8 <__aeabi_dsub>
 801308a:	4632      	mov	r2, r6
 801308c:	463b      	mov	r3, r7
 801308e:	f7ed f90b 	bl	80002a8 <__aeabi_dsub>
 8013092:	4602      	mov	r2, r0
 8013094:	460b      	mov	r3, r1
 8013096:	4640      	mov	r0, r8
 8013098:	4649      	mov	r1, r9
 801309a:	e7da      	b.n	8013052 <__kernel_cos+0xea>
 801309c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80130d8 <__kernel_cos+0x170>
 80130a0:	e7db      	b.n	801305a <__kernel_cos+0xf2>
 80130a2:	bf00      	nop
 80130a4:	f3af 8000 	nop.w
 80130a8:	be8838d4 	.word	0xbe8838d4
 80130ac:	bda8fae9 	.word	0xbda8fae9
 80130b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80130b4:	3e21ee9e 	.word	0x3e21ee9e
 80130b8:	809c52ad 	.word	0x809c52ad
 80130bc:	3e927e4f 	.word	0x3e927e4f
 80130c0:	19cb1590 	.word	0x19cb1590
 80130c4:	3efa01a0 	.word	0x3efa01a0
 80130c8:	16c15177 	.word	0x16c15177
 80130cc:	3f56c16c 	.word	0x3f56c16c
 80130d0:	5555554c 	.word	0x5555554c
 80130d4:	3fa55555 	.word	0x3fa55555
 80130d8:	00000000 	.word	0x00000000
 80130dc:	3ff00000 	.word	0x3ff00000
 80130e0:	3fe00000 	.word	0x3fe00000
 80130e4:	3fd33332 	.word	0x3fd33332
 80130e8:	3ff00000 	.word	0x3ff00000
 80130ec:	3fe90000 	.word	0x3fe90000
 80130f0:	3fd20000 	.word	0x3fd20000
 80130f4:	00000000 	.word	0x00000000

080130f8 <__kernel_sin>:
 80130f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fc:	ec55 4b10 	vmov	r4, r5, d0
 8013100:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013104:	b085      	sub	sp, #20
 8013106:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801310a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801310e:	4680      	mov	r8, r0
 8013110:	d205      	bcs.n	801311e <__kernel_sin+0x26>
 8013112:	4620      	mov	r0, r4
 8013114:	4629      	mov	r1, r5
 8013116:	f7ed fd2f 	bl	8000b78 <__aeabi_d2iz>
 801311a:	2800      	cmp	r0, #0
 801311c:	d052      	beq.n	80131c4 <__kernel_sin+0xcc>
 801311e:	4622      	mov	r2, r4
 8013120:	462b      	mov	r3, r5
 8013122:	4620      	mov	r0, r4
 8013124:	4629      	mov	r1, r5
 8013126:	f7ed fa77 	bl	8000618 <__aeabi_dmul>
 801312a:	4682      	mov	sl, r0
 801312c:	468b      	mov	fp, r1
 801312e:	4602      	mov	r2, r0
 8013130:	460b      	mov	r3, r1
 8013132:	4620      	mov	r0, r4
 8013134:	4629      	mov	r1, r5
 8013136:	f7ed fa6f 	bl	8000618 <__aeabi_dmul>
 801313a:	a342      	add	r3, pc, #264	@ (adr r3, 8013244 <__kernel_sin+0x14c>)
 801313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013140:	e9cd 0100 	strd	r0, r1, [sp]
 8013144:	4650      	mov	r0, sl
 8013146:	4659      	mov	r1, fp
 8013148:	f7ed fa66 	bl	8000618 <__aeabi_dmul>
 801314c:	a33f      	add	r3, pc, #252	@ (adr r3, 801324c <__kernel_sin+0x154>)
 801314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013152:	f7ed f8a9 	bl	80002a8 <__aeabi_dsub>
 8013156:	4652      	mov	r2, sl
 8013158:	465b      	mov	r3, fp
 801315a:	f7ed fa5d 	bl	8000618 <__aeabi_dmul>
 801315e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013254 <__kernel_sin+0x15c>)
 8013160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013164:	f7ed f8a2 	bl	80002ac <__adddf3>
 8013168:	4652      	mov	r2, sl
 801316a:	465b      	mov	r3, fp
 801316c:	f7ed fa54 	bl	8000618 <__aeabi_dmul>
 8013170:	a33a      	add	r3, pc, #232	@ (adr r3, 801325c <__kernel_sin+0x164>)
 8013172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013176:	f7ed f897 	bl	80002a8 <__aeabi_dsub>
 801317a:	4652      	mov	r2, sl
 801317c:	465b      	mov	r3, fp
 801317e:	f7ed fa4b 	bl	8000618 <__aeabi_dmul>
 8013182:	a338      	add	r3, pc, #224	@ (adr r3, 8013264 <__kernel_sin+0x16c>)
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	f7ed f890 	bl	80002ac <__adddf3>
 801318c:	4606      	mov	r6, r0
 801318e:	460f      	mov	r7, r1
 8013190:	f1b8 0f00 	cmp.w	r8, #0
 8013194:	d11b      	bne.n	80131ce <__kernel_sin+0xd6>
 8013196:	4602      	mov	r2, r0
 8013198:	460b      	mov	r3, r1
 801319a:	4650      	mov	r0, sl
 801319c:	4659      	mov	r1, fp
 801319e:	f7ed fa3b 	bl	8000618 <__aeabi_dmul>
 80131a2:	a325      	add	r3, pc, #148	@ (adr r3, 8013238 <__kernel_sin+0x140>)
 80131a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a8:	f7ed f87e 	bl	80002a8 <__aeabi_dsub>
 80131ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131b0:	f7ed fa32 	bl	8000618 <__aeabi_dmul>
 80131b4:	4602      	mov	r2, r0
 80131b6:	460b      	mov	r3, r1
 80131b8:	4620      	mov	r0, r4
 80131ba:	4629      	mov	r1, r5
 80131bc:	f7ed f876 	bl	80002ac <__adddf3>
 80131c0:	4604      	mov	r4, r0
 80131c2:	460d      	mov	r5, r1
 80131c4:	ec45 4b10 	vmov	d0, r4, r5
 80131c8:	b005      	add	sp, #20
 80131ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131d2:	4b1b      	ldr	r3, [pc, #108]	@ (8013240 <__kernel_sin+0x148>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	f7ed fa1f 	bl	8000618 <__aeabi_dmul>
 80131da:	4632      	mov	r2, r6
 80131dc:	4680      	mov	r8, r0
 80131de:	4689      	mov	r9, r1
 80131e0:	463b      	mov	r3, r7
 80131e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131e6:	f7ed fa17 	bl	8000618 <__aeabi_dmul>
 80131ea:	4602      	mov	r2, r0
 80131ec:	460b      	mov	r3, r1
 80131ee:	4640      	mov	r0, r8
 80131f0:	4649      	mov	r1, r9
 80131f2:	f7ed f859 	bl	80002a8 <__aeabi_dsub>
 80131f6:	4652      	mov	r2, sl
 80131f8:	465b      	mov	r3, fp
 80131fa:	f7ed fa0d 	bl	8000618 <__aeabi_dmul>
 80131fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013202:	f7ed f851 	bl	80002a8 <__aeabi_dsub>
 8013206:	a30c      	add	r3, pc, #48	@ (adr r3, 8013238 <__kernel_sin+0x140>)
 8013208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320c:	4606      	mov	r6, r0
 801320e:	460f      	mov	r7, r1
 8013210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013214:	f7ed fa00 	bl	8000618 <__aeabi_dmul>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4630      	mov	r0, r6
 801321e:	4639      	mov	r1, r7
 8013220:	f7ed f844 	bl	80002ac <__adddf3>
 8013224:	4602      	mov	r2, r0
 8013226:	460b      	mov	r3, r1
 8013228:	4620      	mov	r0, r4
 801322a:	4629      	mov	r1, r5
 801322c:	f7ed f83c 	bl	80002a8 <__aeabi_dsub>
 8013230:	e7c6      	b.n	80131c0 <__kernel_sin+0xc8>
 8013232:	bf00      	nop
 8013234:	f3af 8000 	nop.w
 8013238:	55555549 	.word	0x55555549
 801323c:	3fc55555 	.word	0x3fc55555
 8013240:	3fe00000 	.word	0x3fe00000
 8013244:	5acfd57c 	.word	0x5acfd57c
 8013248:	3de5d93a 	.word	0x3de5d93a
 801324c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013250:	3e5ae5e6 	.word	0x3e5ae5e6
 8013254:	57b1fe7d 	.word	0x57b1fe7d
 8013258:	3ec71de3 	.word	0x3ec71de3
 801325c:	19c161d5 	.word	0x19c161d5
 8013260:	3f2a01a0 	.word	0x3f2a01a0
 8013264:	1110f8a6 	.word	0x1110f8a6
 8013268:	3f811111 	.word	0x3f811111
 801326c:	00000000 	.word	0x00000000

08013270 <__ieee754_asin>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	ec55 4b10 	vmov	r4, r5, d0
 8013278:	4bc7      	ldr	r3, [pc, #796]	@ (8013598 <__ieee754_asin+0x328>)
 801327a:	b087      	sub	sp, #28
 801327c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013280:	429e      	cmp	r6, r3
 8013282:	9501      	str	r5, [sp, #4]
 8013284:	d92d      	bls.n	80132e2 <__ieee754_asin+0x72>
 8013286:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801328a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801328e:	4326      	orrs	r6, r4
 8013290:	d116      	bne.n	80132c0 <__ieee754_asin+0x50>
 8013292:	a3a7      	add	r3, pc, #668	@ (adr r3, 8013530 <__ieee754_asin+0x2c0>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	4620      	mov	r0, r4
 801329a:	4629      	mov	r1, r5
 801329c:	f7ed f9bc 	bl	8000618 <__aeabi_dmul>
 80132a0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8013538 <__ieee754_asin+0x2c8>)
 80132a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a6:	4606      	mov	r6, r0
 80132a8:	460f      	mov	r7, r1
 80132aa:	4620      	mov	r0, r4
 80132ac:	4629      	mov	r1, r5
 80132ae:	f7ed f9b3 	bl	8000618 <__aeabi_dmul>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4630      	mov	r0, r6
 80132b8:	4639      	mov	r1, r7
 80132ba:	f7ec fff7 	bl	80002ac <__adddf3>
 80132be:	e009      	b.n	80132d4 <__ieee754_asin+0x64>
 80132c0:	4622      	mov	r2, r4
 80132c2:	462b      	mov	r3, r5
 80132c4:	4620      	mov	r0, r4
 80132c6:	4629      	mov	r1, r5
 80132c8:	f7ec ffee 	bl	80002a8 <__aeabi_dsub>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	f7ed facc 	bl	800086c <__aeabi_ddiv>
 80132d4:	4604      	mov	r4, r0
 80132d6:	460d      	mov	r5, r1
 80132d8:	ec45 4b10 	vmov	d0, r4, r5
 80132dc:	b007      	add	sp, #28
 80132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e2:	4bae      	ldr	r3, [pc, #696]	@ (801359c <__ieee754_asin+0x32c>)
 80132e4:	429e      	cmp	r6, r3
 80132e6:	d810      	bhi.n	801330a <__ieee754_asin+0x9a>
 80132e8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80132ec:	f080 80ad 	bcs.w	801344a <__ieee754_asin+0x1da>
 80132f0:	a393      	add	r3, pc, #588	@ (adr r3, 8013540 <__ieee754_asin+0x2d0>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	4620      	mov	r0, r4
 80132f8:	4629      	mov	r1, r5
 80132fa:	f7ec ffd7 	bl	80002ac <__adddf3>
 80132fe:	4ba8      	ldr	r3, [pc, #672]	@ (80135a0 <__ieee754_asin+0x330>)
 8013300:	2200      	movs	r2, #0
 8013302:	f7ed fc19 	bl	8000b38 <__aeabi_dcmpgt>
 8013306:	2800      	cmp	r0, #0
 8013308:	d1e6      	bne.n	80132d8 <__ieee754_asin+0x68>
 801330a:	ec45 4b10 	vmov	d0, r4, r5
 801330e:	f7ff fca3 	bl	8012c58 <fabs>
 8013312:	49a3      	ldr	r1, [pc, #652]	@ (80135a0 <__ieee754_asin+0x330>)
 8013314:	ec53 2b10 	vmov	r2, r3, d0
 8013318:	2000      	movs	r0, #0
 801331a:	f7ec ffc5 	bl	80002a8 <__aeabi_dsub>
 801331e:	4ba1      	ldr	r3, [pc, #644]	@ (80135a4 <__ieee754_asin+0x334>)
 8013320:	2200      	movs	r2, #0
 8013322:	f7ed f979 	bl	8000618 <__aeabi_dmul>
 8013326:	a388      	add	r3, pc, #544	@ (adr r3, 8013548 <__ieee754_asin+0x2d8>)
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	4604      	mov	r4, r0
 801332e:	460d      	mov	r5, r1
 8013330:	f7ed f972 	bl	8000618 <__aeabi_dmul>
 8013334:	a386      	add	r3, pc, #536	@ (adr r3, 8013550 <__ieee754_asin+0x2e0>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	f7ec ffb7 	bl	80002ac <__adddf3>
 801333e:	4622      	mov	r2, r4
 8013340:	462b      	mov	r3, r5
 8013342:	f7ed f969 	bl	8000618 <__aeabi_dmul>
 8013346:	a384      	add	r3, pc, #528	@ (adr r3, 8013558 <__ieee754_asin+0x2e8>)
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	f7ec ffac 	bl	80002a8 <__aeabi_dsub>
 8013350:	4622      	mov	r2, r4
 8013352:	462b      	mov	r3, r5
 8013354:	f7ed f960 	bl	8000618 <__aeabi_dmul>
 8013358:	a381      	add	r3, pc, #516	@ (adr r3, 8013560 <__ieee754_asin+0x2f0>)
 801335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335e:	f7ec ffa5 	bl	80002ac <__adddf3>
 8013362:	4622      	mov	r2, r4
 8013364:	462b      	mov	r3, r5
 8013366:	f7ed f957 	bl	8000618 <__aeabi_dmul>
 801336a:	a37f      	add	r3, pc, #508	@ (adr r3, 8013568 <__ieee754_asin+0x2f8>)
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	f7ec ff9a 	bl	80002a8 <__aeabi_dsub>
 8013374:	4622      	mov	r2, r4
 8013376:	462b      	mov	r3, r5
 8013378:	f7ed f94e 	bl	8000618 <__aeabi_dmul>
 801337c:	a37c      	add	r3, pc, #496	@ (adr r3, 8013570 <__ieee754_asin+0x300>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	f7ec ff93 	bl	80002ac <__adddf3>
 8013386:	4622      	mov	r2, r4
 8013388:	462b      	mov	r3, r5
 801338a:	f7ed f945 	bl	8000618 <__aeabi_dmul>
 801338e:	a37a      	add	r3, pc, #488	@ (adr r3, 8013578 <__ieee754_asin+0x308>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013398:	4620      	mov	r0, r4
 801339a:	4629      	mov	r1, r5
 801339c:	f7ed f93c 	bl	8000618 <__aeabi_dmul>
 80133a0:	a377      	add	r3, pc, #476	@ (adr r3, 8013580 <__ieee754_asin+0x310>)
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	f7ec ff7f 	bl	80002a8 <__aeabi_dsub>
 80133aa:	4622      	mov	r2, r4
 80133ac:	462b      	mov	r3, r5
 80133ae:	f7ed f933 	bl	8000618 <__aeabi_dmul>
 80133b2:	a375      	add	r3, pc, #468	@ (adr r3, 8013588 <__ieee754_asin+0x318>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	f7ec ff78 	bl	80002ac <__adddf3>
 80133bc:	4622      	mov	r2, r4
 80133be:	462b      	mov	r3, r5
 80133c0:	f7ed f92a 	bl	8000618 <__aeabi_dmul>
 80133c4:	a372      	add	r3, pc, #456	@ (adr r3, 8013590 <__ieee754_asin+0x320>)
 80133c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ca:	f7ec ff6d 	bl	80002a8 <__aeabi_dsub>
 80133ce:	4622      	mov	r2, r4
 80133d0:	462b      	mov	r3, r5
 80133d2:	f7ed f921 	bl	8000618 <__aeabi_dmul>
 80133d6:	4b72      	ldr	r3, [pc, #456]	@ (80135a0 <__ieee754_asin+0x330>)
 80133d8:	2200      	movs	r2, #0
 80133da:	f7ec ff67 	bl	80002ac <__adddf3>
 80133de:	ec45 4b10 	vmov	d0, r4, r5
 80133e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80133e6:	f7ff fc9f 	bl	8012d28 <__ieee754_sqrt>
 80133ea:	4b6f      	ldr	r3, [pc, #444]	@ (80135a8 <__ieee754_asin+0x338>)
 80133ec:	429e      	cmp	r6, r3
 80133ee:	ec5b ab10 	vmov	sl, fp, d0
 80133f2:	f240 80db 	bls.w	80135ac <__ieee754_asin+0x33c>
 80133f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133fe:	f7ed fa35 	bl	800086c <__aeabi_ddiv>
 8013402:	4652      	mov	r2, sl
 8013404:	465b      	mov	r3, fp
 8013406:	f7ed f907 	bl	8000618 <__aeabi_dmul>
 801340a:	4652      	mov	r2, sl
 801340c:	465b      	mov	r3, fp
 801340e:	f7ec ff4d 	bl	80002ac <__adddf3>
 8013412:	4602      	mov	r2, r0
 8013414:	460b      	mov	r3, r1
 8013416:	f7ec ff49 	bl	80002ac <__adddf3>
 801341a:	a347      	add	r3, pc, #284	@ (adr r3, 8013538 <__ieee754_asin+0x2c8>)
 801341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013420:	f7ec ff42 	bl	80002a8 <__aeabi_dsub>
 8013424:	4602      	mov	r2, r0
 8013426:	460b      	mov	r3, r1
 8013428:	a141      	add	r1, pc, #260	@ (adr r1, 8013530 <__ieee754_asin+0x2c0>)
 801342a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801342e:	f7ec ff3b 	bl	80002a8 <__aeabi_dsub>
 8013432:	9b01      	ldr	r3, [sp, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	bfdc      	itt	le
 8013438:	4602      	movle	r2, r0
 801343a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801343e:	4604      	mov	r4, r0
 8013440:	460d      	mov	r5, r1
 8013442:	bfdc      	itt	le
 8013444:	4614      	movle	r4, r2
 8013446:	461d      	movle	r5, r3
 8013448:	e746      	b.n	80132d8 <__ieee754_asin+0x68>
 801344a:	4622      	mov	r2, r4
 801344c:	462b      	mov	r3, r5
 801344e:	4620      	mov	r0, r4
 8013450:	4629      	mov	r1, r5
 8013452:	f7ed f8e1 	bl	8000618 <__aeabi_dmul>
 8013456:	a33c      	add	r3, pc, #240	@ (adr r3, 8013548 <__ieee754_asin+0x2d8>)
 8013458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	f7ed f8da 	bl	8000618 <__aeabi_dmul>
 8013464:	a33a      	add	r3, pc, #232	@ (adr r3, 8013550 <__ieee754_asin+0x2e0>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	f7ec ff1f 	bl	80002ac <__adddf3>
 801346e:	4632      	mov	r2, r6
 8013470:	463b      	mov	r3, r7
 8013472:	f7ed f8d1 	bl	8000618 <__aeabi_dmul>
 8013476:	a338      	add	r3, pc, #224	@ (adr r3, 8013558 <__ieee754_asin+0x2e8>)
 8013478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347c:	f7ec ff14 	bl	80002a8 <__aeabi_dsub>
 8013480:	4632      	mov	r2, r6
 8013482:	463b      	mov	r3, r7
 8013484:	f7ed f8c8 	bl	8000618 <__aeabi_dmul>
 8013488:	a335      	add	r3, pc, #212	@ (adr r3, 8013560 <__ieee754_asin+0x2f0>)
 801348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348e:	f7ec ff0d 	bl	80002ac <__adddf3>
 8013492:	4632      	mov	r2, r6
 8013494:	463b      	mov	r3, r7
 8013496:	f7ed f8bf 	bl	8000618 <__aeabi_dmul>
 801349a:	a333      	add	r3, pc, #204	@ (adr r3, 8013568 <__ieee754_asin+0x2f8>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ec ff02 	bl	80002a8 <__aeabi_dsub>
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	f7ed f8b6 	bl	8000618 <__aeabi_dmul>
 80134ac:	a330      	add	r3, pc, #192	@ (adr r3, 8013570 <__ieee754_asin+0x300>)
 80134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b2:	f7ec fefb 	bl	80002ac <__adddf3>
 80134b6:	4632      	mov	r2, r6
 80134b8:	463b      	mov	r3, r7
 80134ba:	f7ed f8ad 	bl	8000618 <__aeabi_dmul>
 80134be:	a32e      	add	r3, pc, #184	@ (adr r3, 8013578 <__ieee754_asin+0x308>)
 80134c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c4:	4680      	mov	r8, r0
 80134c6:	4689      	mov	r9, r1
 80134c8:	4630      	mov	r0, r6
 80134ca:	4639      	mov	r1, r7
 80134cc:	f7ed f8a4 	bl	8000618 <__aeabi_dmul>
 80134d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8013580 <__ieee754_asin+0x310>)
 80134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d6:	f7ec fee7 	bl	80002a8 <__aeabi_dsub>
 80134da:	4632      	mov	r2, r6
 80134dc:	463b      	mov	r3, r7
 80134de:	f7ed f89b 	bl	8000618 <__aeabi_dmul>
 80134e2:	a329      	add	r3, pc, #164	@ (adr r3, 8013588 <__ieee754_asin+0x318>)
 80134e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e8:	f7ec fee0 	bl	80002ac <__adddf3>
 80134ec:	4632      	mov	r2, r6
 80134ee:	463b      	mov	r3, r7
 80134f0:	f7ed f892 	bl	8000618 <__aeabi_dmul>
 80134f4:	a326      	add	r3, pc, #152	@ (adr r3, 8013590 <__ieee754_asin+0x320>)
 80134f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fa:	f7ec fed5 	bl	80002a8 <__aeabi_dsub>
 80134fe:	4632      	mov	r2, r6
 8013500:	463b      	mov	r3, r7
 8013502:	f7ed f889 	bl	8000618 <__aeabi_dmul>
 8013506:	4b26      	ldr	r3, [pc, #152]	@ (80135a0 <__ieee754_asin+0x330>)
 8013508:	2200      	movs	r2, #0
 801350a:	f7ec fecf 	bl	80002ac <__adddf3>
 801350e:	4602      	mov	r2, r0
 8013510:	460b      	mov	r3, r1
 8013512:	4640      	mov	r0, r8
 8013514:	4649      	mov	r1, r9
 8013516:	f7ed f9a9 	bl	800086c <__aeabi_ddiv>
 801351a:	4622      	mov	r2, r4
 801351c:	462b      	mov	r3, r5
 801351e:	f7ed f87b 	bl	8000618 <__aeabi_dmul>
 8013522:	4602      	mov	r2, r0
 8013524:	460b      	mov	r3, r1
 8013526:	4620      	mov	r0, r4
 8013528:	4629      	mov	r1, r5
 801352a:	e6c6      	b.n	80132ba <__ieee754_asin+0x4a>
 801352c:	f3af 8000 	nop.w
 8013530:	54442d18 	.word	0x54442d18
 8013534:	3ff921fb 	.word	0x3ff921fb
 8013538:	33145c07 	.word	0x33145c07
 801353c:	3c91a626 	.word	0x3c91a626
 8013540:	8800759c 	.word	0x8800759c
 8013544:	7e37e43c 	.word	0x7e37e43c
 8013548:	0dfdf709 	.word	0x0dfdf709
 801354c:	3f023de1 	.word	0x3f023de1
 8013550:	7501b288 	.word	0x7501b288
 8013554:	3f49efe0 	.word	0x3f49efe0
 8013558:	b5688f3b 	.word	0xb5688f3b
 801355c:	3fa48228 	.word	0x3fa48228
 8013560:	0e884455 	.word	0x0e884455
 8013564:	3fc9c155 	.word	0x3fc9c155
 8013568:	03eb6f7d 	.word	0x03eb6f7d
 801356c:	3fd4d612 	.word	0x3fd4d612
 8013570:	55555555 	.word	0x55555555
 8013574:	3fc55555 	.word	0x3fc55555
 8013578:	b12e9282 	.word	0xb12e9282
 801357c:	3fb3b8c5 	.word	0x3fb3b8c5
 8013580:	1b8d0159 	.word	0x1b8d0159
 8013584:	3fe6066c 	.word	0x3fe6066c
 8013588:	9c598ac8 	.word	0x9c598ac8
 801358c:	40002ae5 	.word	0x40002ae5
 8013590:	1c8a2d4b 	.word	0x1c8a2d4b
 8013594:	40033a27 	.word	0x40033a27
 8013598:	3fefffff 	.word	0x3fefffff
 801359c:	3fdfffff 	.word	0x3fdfffff
 80135a0:	3ff00000 	.word	0x3ff00000
 80135a4:	3fe00000 	.word	0x3fe00000
 80135a8:	3fef3332 	.word	0x3fef3332
 80135ac:	4652      	mov	r2, sl
 80135ae:	465b      	mov	r3, fp
 80135b0:	4650      	mov	r0, sl
 80135b2:	4659      	mov	r1, fp
 80135b4:	f7ec fe7a 	bl	80002ac <__adddf3>
 80135b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135bc:	4606      	mov	r6, r0
 80135be:	460f      	mov	r7, r1
 80135c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135c4:	f7ed f952 	bl	800086c <__aeabi_ddiv>
 80135c8:	4602      	mov	r2, r0
 80135ca:	460b      	mov	r3, r1
 80135cc:	4630      	mov	r0, r6
 80135ce:	4639      	mov	r1, r7
 80135d0:	f7ed f822 	bl	8000618 <__aeabi_dmul>
 80135d4:	f04f 0800 	mov.w	r8, #0
 80135d8:	4606      	mov	r6, r0
 80135da:	460f      	mov	r7, r1
 80135dc:	4642      	mov	r2, r8
 80135de:	465b      	mov	r3, fp
 80135e0:	4640      	mov	r0, r8
 80135e2:	4659      	mov	r1, fp
 80135e4:	f7ed f818 	bl	8000618 <__aeabi_dmul>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4620      	mov	r0, r4
 80135ee:	4629      	mov	r1, r5
 80135f0:	f7ec fe5a 	bl	80002a8 <__aeabi_dsub>
 80135f4:	4642      	mov	r2, r8
 80135f6:	4604      	mov	r4, r0
 80135f8:	460d      	mov	r5, r1
 80135fa:	465b      	mov	r3, fp
 80135fc:	4650      	mov	r0, sl
 80135fe:	4659      	mov	r1, fp
 8013600:	f7ec fe54 	bl	80002ac <__adddf3>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	4620      	mov	r0, r4
 801360a:	4629      	mov	r1, r5
 801360c:	f7ed f92e 	bl	800086c <__aeabi_ddiv>
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	f7ec fe4a 	bl	80002ac <__adddf3>
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	a112      	add	r1, pc, #72	@ (adr r1, 8013668 <__ieee754_asin+0x3f8>)
 801361e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013622:	f7ec fe41 	bl	80002a8 <__aeabi_dsub>
 8013626:	4602      	mov	r2, r0
 8013628:	460b      	mov	r3, r1
 801362a:	4630      	mov	r0, r6
 801362c:	4639      	mov	r1, r7
 801362e:	f7ec fe3b 	bl	80002a8 <__aeabi_dsub>
 8013632:	4642      	mov	r2, r8
 8013634:	4604      	mov	r4, r0
 8013636:	460d      	mov	r5, r1
 8013638:	465b      	mov	r3, fp
 801363a:	4640      	mov	r0, r8
 801363c:	4659      	mov	r1, fp
 801363e:	f7ec fe35 	bl	80002ac <__adddf3>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	a10a      	add	r1, pc, #40	@ (adr r1, 8013670 <__ieee754_asin+0x400>)
 8013648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801364c:	f7ec fe2c 	bl	80002a8 <__aeabi_dsub>
 8013650:	4602      	mov	r2, r0
 8013652:	460b      	mov	r3, r1
 8013654:	4620      	mov	r0, r4
 8013656:	4629      	mov	r1, r5
 8013658:	f7ec fe26 	bl	80002a8 <__aeabi_dsub>
 801365c:	4602      	mov	r2, r0
 801365e:	460b      	mov	r3, r1
 8013660:	a103      	add	r1, pc, #12	@ (adr r1, 8013670 <__ieee754_asin+0x400>)
 8013662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013666:	e6e2      	b.n	801342e <__ieee754_asin+0x1be>
 8013668:	33145c07 	.word	0x33145c07
 801366c:	3c91a626 	.word	0x3c91a626
 8013670:	54442d18 	.word	0x54442d18
 8013674:	3fe921fb 	.word	0x3fe921fb

08013678 <__ieee754_atan2>:
 8013678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801367c:	ec57 6b11 	vmov	r6, r7, d1
 8013680:	4273      	negs	r3, r6
 8013682:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013800 <__ieee754_atan2+0x188>
 8013686:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801368a:	4333      	orrs	r3, r6
 801368c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013690:	4543      	cmp	r3, r8
 8013692:	ec51 0b10 	vmov	r0, r1, d0
 8013696:	4635      	mov	r5, r6
 8013698:	d809      	bhi.n	80136ae <__ieee754_atan2+0x36>
 801369a:	4244      	negs	r4, r0
 801369c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80136a0:	4304      	orrs	r4, r0
 80136a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80136a6:	4544      	cmp	r4, r8
 80136a8:	468e      	mov	lr, r1
 80136aa:	4681      	mov	r9, r0
 80136ac:	d907      	bls.n	80136be <__ieee754_atan2+0x46>
 80136ae:	4632      	mov	r2, r6
 80136b0:	463b      	mov	r3, r7
 80136b2:	f7ec fdfb 	bl	80002ac <__adddf3>
 80136b6:	ec41 0b10 	vmov	d0, r0, r1
 80136ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80136c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80136c6:	4334      	orrs	r4, r6
 80136c8:	d103      	bne.n	80136d2 <__ieee754_atan2+0x5a>
 80136ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ce:	f001 b8e3 	b.w	8014898 <atan>
 80136d2:	17bc      	asrs	r4, r7, #30
 80136d4:	f004 0402 	and.w	r4, r4, #2
 80136d8:	ea53 0909 	orrs.w	r9, r3, r9
 80136dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80136e0:	d107      	bne.n	80136f2 <__ieee754_atan2+0x7a>
 80136e2:	2c02      	cmp	r4, #2
 80136e4:	d05f      	beq.n	80137a6 <__ieee754_atan2+0x12e>
 80136e6:	2c03      	cmp	r4, #3
 80136e8:	d1e5      	bne.n	80136b6 <__ieee754_atan2+0x3e>
 80136ea:	a141      	add	r1, pc, #260	@ (adr r1, 80137f0 <__ieee754_atan2+0x178>)
 80136ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f0:	e7e1      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80136f2:	4315      	orrs	r5, r2
 80136f4:	d106      	bne.n	8013704 <__ieee754_atan2+0x8c>
 80136f6:	f1be 0f00 	cmp.w	lr, #0
 80136fa:	da5f      	bge.n	80137bc <__ieee754_atan2+0x144>
 80136fc:	a13e      	add	r1, pc, #248	@ (adr r1, 80137f8 <__ieee754_atan2+0x180>)
 80136fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013702:	e7d8      	b.n	80136b6 <__ieee754_atan2+0x3e>
 8013704:	4542      	cmp	r2, r8
 8013706:	d10f      	bne.n	8013728 <__ieee754_atan2+0xb0>
 8013708:	4293      	cmp	r3, r2
 801370a:	f104 34ff 	add.w	r4, r4, #4294967295
 801370e:	d107      	bne.n	8013720 <__ieee754_atan2+0xa8>
 8013710:	2c02      	cmp	r4, #2
 8013712:	d84c      	bhi.n	80137ae <__ieee754_atan2+0x136>
 8013714:	4b34      	ldr	r3, [pc, #208]	@ (80137e8 <__ieee754_atan2+0x170>)
 8013716:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801371a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801371e:	e7ca      	b.n	80136b6 <__ieee754_atan2+0x3e>
 8013720:	2c02      	cmp	r4, #2
 8013722:	d848      	bhi.n	80137b6 <__ieee754_atan2+0x13e>
 8013724:	4b31      	ldr	r3, [pc, #196]	@ (80137ec <__ieee754_atan2+0x174>)
 8013726:	e7f6      	b.n	8013716 <__ieee754_atan2+0x9e>
 8013728:	4543      	cmp	r3, r8
 801372a:	d0e4      	beq.n	80136f6 <__ieee754_atan2+0x7e>
 801372c:	1a9b      	subs	r3, r3, r2
 801372e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013732:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013736:	da1e      	bge.n	8013776 <__ieee754_atan2+0xfe>
 8013738:	2f00      	cmp	r7, #0
 801373a:	da01      	bge.n	8013740 <__ieee754_atan2+0xc8>
 801373c:	323c      	adds	r2, #60	@ 0x3c
 801373e:	db1e      	blt.n	801377e <__ieee754_atan2+0x106>
 8013740:	4632      	mov	r2, r6
 8013742:	463b      	mov	r3, r7
 8013744:	f7ed f892 	bl	800086c <__aeabi_ddiv>
 8013748:	ec41 0b10 	vmov	d0, r0, r1
 801374c:	f7ff fa84 	bl	8012c58 <fabs>
 8013750:	f001 f8a2 	bl	8014898 <atan>
 8013754:	ec51 0b10 	vmov	r0, r1, d0
 8013758:	2c01      	cmp	r4, #1
 801375a:	d013      	beq.n	8013784 <__ieee754_atan2+0x10c>
 801375c:	2c02      	cmp	r4, #2
 801375e:	d015      	beq.n	801378c <__ieee754_atan2+0x114>
 8013760:	2c00      	cmp	r4, #0
 8013762:	d0a8      	beq.n	80136b6 <__ieee754_atan2+0x3e>
 8013764:	a318      	add	r3, pc, #96	@ (adr r3, 80137c8 <__ieee754_atan2+0x150>)
 8013766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376a:	f7ec fd9d 	bl	80002a8 <__aeabi_dsub>
 801376e:	a318      	add	r3, pc, #96	@ (adr r3, 80137d0 <__ieee754_atan2+0x158>)
 8013770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013774:	e014      	b.n	80137a0 <__ieee754_atan2+0x128>
 8013776:	a118      	add	r1, pc, #96	@ (adr r1, 80137d8 <__ieee754_atan2+0x160>)
 8013778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801377c:	e7ec      	b.n	8013758 <__ieee754_atan2+0xe0>
 801377e:	2000      	movs	r0, #0
 8013780:	2100      	movs	r1, #0
 8013782:	e7e9      	b.n	8013758 <__ieee754_atan2+0xe0>
 8013784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013788:	4619      	mov	r1, r3
 801378a:	e794      	b.n	80136b6 <__ieee754_atan2+0x3e>
 801378c:	a30e      	add	r3, pc, #56	@ (adr r3, 80137c8 <__ieee754_atan2+0x150>)
 801378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013792:	f7ec fd89 	bl	80002a8 <__aeabi_dsub>
 8013796:	4602      	mov	r2, r0
 8013798:	460b      	mov	r3, r1
 801379a:	a10d      	add	r1, pc, #52	@ (adr r1, 80137d0 <__ieee754_atan2+0x158>)
 801379c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137a0:	f7ec fd82 	bl	80002a8 <__aeabi_dsub>
 80137a4:	e787      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80137a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80137d0 <__ieee754_atan2+0x158>)
 80137a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137ac:	e783      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80137ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80137e0 <__ieee754_atan2+0x168>)
 80137b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137b4:	e77f      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80137b6:	2000      	movs	r0, #0
 80137b8:	2100      	movs	r1, #0
 80137ba:	e77c      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80137bc:	a106      	add	r1, pc, #24	@ (adr r1, 80137d8 <__ieee754_atan2+0x160>)
 80137be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c2:	e778      	b.n	80136b6 <__ieee754_atan2+0x3e>
 80137c4:	f3af 8000 	nop.w
 80137c8:	33145c07 	.word	0x33145c07
 80137cc:	3ca1a626 	.word	0x3ca1a626
 80137d0:	54442d18 	.word	0x54442d18
 80137d4:	400921fb 	.word	0x400921fb
 80137d8:	54442d18 	.word	0x54442d18
 80137dc:	3ff921fb 	.word	0x3ff921fb
 80137e0:	54442d18 	.word	0x54442d18
 80137e4:	3fe921fb 	.word	0x3fe921fb
 80137e8:	08015f00 	.word	0x08015f00
 80137ec:	08015ee8 	.word	0x08015ee8
 80137f0:	54442d18 	.word	0x54442d18
 80137f4:	c00921fb 	.word	0xc00921fb
 80137f8:	54442d18 	.word	0x54442d18
 80137fc:	bff921fb 	.word	0xbff921fb
 8013800:	7ff00000 	.word	0x7ff00000

08013804 <__ieee754_fmod>:
 8013804:	ec53 2b11 	vmov	r2, r3, d1
 8013808:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 801380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013810:	ea52 040c 	orrs.w	r4, r2, ip
 8013814:	ec51 0b10 	vmov	r0, r1, d0
 8013818:	461e      	mov	r6, r3
 801381a:	4617      	mov	r7, r2
 801381c:	4696      	mov	lr, r2
 801381e:	d00c      	beq.n	801383a <__ieee754_fmod+0x36>
 8013820:	4c77      	ldr	r4, [pc, #476]	@ (8013a00 <__ieee754_fmod+0x1fc>)
 8013822:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8013826:	45a0      	cmp	r8, r4
 8013828:	4689      	mov	r9, r1
 801382a:	d806      	bhi.n	801383a <__ieee754_fmod+0x36>
 801382c:	4254      	negs	r4, r2
 801382e:	4d75      	ldr	r5, [pc, #468]	@ (8013a04 <__ieee754_fmod+0x200>)
 8013830:	4314      	orrs	r4, r2
 8013832:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8013836:	42ac      	cmp	r4, r5
 8013838:	d909      	bls.n	801384e <__ieee754_fmod+0x4a>
 801383a:	f7ec feed 	bl	8000618 <__aeabi_dmul>
 801383e:	4602      	mov	r2, r0
 8013840:	460b      	mov	r3, r1
 8013842:	f7ed f813 	bl	800086c <__aeabi_ddiv>
 8013846:	ec41 0b10 	vmov	d0, r0, r1
 801384a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801384e:	45e0      	cmp	r8, ip
 8013850:	4682      	mov	sl, r0
 8013852:	4604      	mov	r4, r0
 8013854:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8013858:	dc09      	bgt.n	801386e <__ieee754_fmod+0x6a>
 801385a:	dbf4      	blt.n	8013846 <__ieee754_fmod+0x42>
 801385c:	4282      	cmp	r2, r0
 801385e:	d8f2      	bhi.n	8013846 <__ieee754_fmod+0x42>
 8013860:	d105      	bne.n	801386e <__ieee754_fmod+0x6a>
 8013862:	4b69      	ldr	r3, [pc, #420]	@ (8013a08 <__ieee754_fmod+0x204>)
 8013864:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8013868:	e9d3 0100 	ldrd	r0, r1, [r3]
 801386c:	e7eb      	b.n	8013846 <__ieee754_fmod+0x42>
 801386e:	4a65      	ldr	r2, [pc, #404]	@ (8013a04 <__ieee754_fmod+0x200>)
 8013870:	ea19 0f02 	tst.w	r9, r2
 8013874:	d148      	bne.n	8013908 <__ieee754_fmod+0x104>
 8013876:	f1b8 0f00 	cmp.w	r8, #0
 801387a:	d13d      	bne.n	80138f8 <__ieee754_fmod+0xf4>
 801387c:	4963      	ldr	r1, [pc, #396]	@ (8013a0c <__ieee754_fmod+0x208>)
 801387e:	4653      	mov	r3, sl
 8013880:	2b00      	cmp	r3, #0
 8013882:	dc36      	bgt.n	80138f2 <__ieee754_fmod+0xee>
 8013884:	4216      	tst	r6, r2
 8013886:	d14f      	bne.n	8013928 <__ieee754_fmod+0x124>
 8013888:	f1bc 0f00 	cmp.w	ip, #0
 801388c:	d144      	bne.n	8013918 <__ieee754_fmod+0x114>
 801388e:	4a5f      	ldr	r2, [pc, #380]	@ (8013a0c <__ieee754_fmod+0x208>)
 8013890:	463b      	mov	r3, r7
 8013892:	2b00      	cmp	r3, #0
 8013894:	dc3d      	bgt.n	8013912 <__ieee754_fmod+0x10e>
 8013896:	485e      	ldr	r0, [pc, #376]	@ (8013a10 <__ieee754_fmod+0x20c>)
 8013898:	4281      	cmp	r1, r0
 801389a:	db4a      	blt.n	8013932 <__ieee754_fmod+0x12e>
 801389c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80138a4:	485a      	ldr	r0, [pc, #360]	@ (8013a10 <__ieee754_fmod+0x20c>)
 80138a6:	4282      	cmp	r2, r0
 80138a8:	db57      	blt.n	801395a <__ieee754_fmod+0x156>
 80138aa:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80138ae:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80138b2:	1a89      	subs	r1, r1, r2
 80138b4:	1b98      	subs	r0, r3, r6
 80138b6:	eba4 070e 	sub.w	r7, r4, lr
 80138ba:	2900      	cmp	r1, #0
 80138bc:	d162      	bne.n	8013984 <__ieee754_fmod+0x180>
 80138be:	4574      	cmp	r4, lr
 80138c0:	bf38      	it	cc
 80138c2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80138c6:	2800      	cmp	r0, #0
 80138c8:	bfa4      	itt	ge
 80138ca:	463c      	movge	r4, r7
 80138cc:	4603      	movge	r3, r0
 80138ce:	ea53 0104 	orrs.w	r1, r3, r4
 80138d2:	d0c6      	beq.n	8013862 <__ieee754_fmod+0x5e>
 80138d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80138d8:	db69      	blt.n	80139ae <__ieee754_fmod+0x1aa>
 80138da:	494d      	ldr	r1, [pc, #308]	@ (8013a10 <__ieee754_fmod+0x20c>)
 80138dc:	428a      	cmp	r2, r1
 80138de:	db6c      	blt.n	80139ba <__ieee754_fmod+0x1b6>
 80138e0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80138e4:	432b      	orrs	r3, r5
 80138e6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80138ea:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80138ee:	4620      	mov	r0, r4
 80138f0:	e7a9      	b.n	8013846 <__ieee754_fmod+0x42>
 80138f2:	3901      	subs	r1, #1
 80138f4:	005b      	lsls	r3, r3, #1
 80138f6:	e7c3      	b.n	8013880 <__ieee754_fmod+0x7c>
 80138f8:	4945      	ldr	r1, [pc, #276]	@ (8013a10 <__ieee754_fmod+0x20c>)
 80138fa:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80138fe:	2b00      	cmp	r3, #0
 8013900:	ddc0      	ble.n	8013884 <__ieee754_fmod+0x80>
 8013902:	3901      	subs	r1, #1
 8013904:	005b      	lsls	r3, r3, #1
 8013906:	e7fa      	b.n	80138fe <__ieee754_fmod+0xfa>
 8013908:	ea4f 5128 	mov.w	r1, r8, asr #20
 801390c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013910:	e7b8      	b.n	8013884 <__ieee754_fmod+0x80>
 8013912:	3a01      	subs	r2, #1
 8013914:	005b      	lsls	r3, r3, #1
 8013916:	e7bc      	b.n	8013892 <__ieee754_fmod+0x8e>
 8013918:	4a3d      	ldr	r2, [pc, #244]	@ (8013a10 <__ieee754_fmod+0x20c>)
 801391a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801391e:	2b00      	cmp	r3, #0
 8013920:	ddb9      	ble.n	8013896 <__ieee754_fmod+0x92>
 8013922:	3a01      	subs	r2, #1
 8013924:	005b      	lsls	r3, r3, #1
 8013926:	e7fa      	b.n	801391e <__ieee754_fmod+0x11a>
 8013928:	ea4f 522c 	mov.w	r2, ip, asr #20
 801392c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013930:	e7b1      	b.n	8013896 <__ieee754_fmod+0x92>
 8013932:	1a40      	subs	r0, r0, r1
 8013934:	281f      	cmp	r0, #31
 8013936:	dc0a      	bgt.n	801394e <__ieee754_fmod+0x14a>
 8013938:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 801393c:	fa08 f800 	lsl.w	r8, r8, r0
 8013940:	fa2a f303 	lsr.w	r3, sl, r3
 8013944:	ea43 0308 	orr.w	r3, r3, r8
 8013948:	fa0a f400 	lsl.w	r4, sl, r0
 801394c:	e7aa      	b.n	80138a4 <__ieee754_fmod+0xa0>
 801394e:	4b31      	ldr	r3, [pc, #196]	@ (8013a14 <__ieee754_fmod+0x210>)
 8013950:	1a5b      	subs	r3, r3, r1
 8013952:	fa0a f303 	lsl.w	r3, sl, r3
 8013956:	2400      	movs	r4, #0
 8013958:	e7a4      	b.n	80138a4 <__ieee754_fmod+0xa0>
 801395a:	1a80      	subs	r0, r0, r2
 801395c:	281f      	cmp	r0, #31
 801395e:	dc0a      	bgt.n	8013976 <__ieee754_fmod+0x172>
 8013960:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8013964:	fa0c fc00 	lsl.w	ip, ip, r0
 8013968:	fa27 f606 	lsr.w	r6, r7, r6
 801396c:	ea46 060c 	orr.w	r6, r6, ip
 8013970:	fa07 fe00 	lsl.w	lr, r7, r0
 8013974:	e79d      	b.n	80138b2 <__ieee754_fmod+0xae>
 8013976:	4e27      	ldr	r6, [pc, #156]	@ (8013a14 <__ieee754_fmod+0x210>)
 8013978:	1ab6      	subs	r6, r6, r2
 801397a:	fa07 f606 	lsl.w	r6, r7, r6
 801397e:	f04f 0e00 	mov.w	lr, #0
 8013982:	e796      	b.n	80138b2 <__ieee754_fmod+0xae>
 8013984:	4574      	cmp	r4, lr
 8013986:	bf38      	it	cc
 8013988:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801398c:	2800      	cmp	r0, #0
 801398e:	da05      	bge.n	801399c <__ieee754_fmod+0x198>
 8013990:	0fe0      	lsrs	r0, r4, #31
 8013992:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013996:	0064      	lsls	r4, r4, #1
 8013998:	3901      	subs	r1, #1
 801399a:	e78b      	b.n	80138b4 <__ieee754_fmod+0xb0>
 801399c:	ea50 0307 	orrs.w	r3, r0, r7
 80139a0:	f43f af5f 	beq.w	8013862 <__ieee754_fmod+0x5e>
 80139a4:	0ffb      	lsrs	r3, r7, #31
 80139a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80139aa:	007c      	lsls	r4, r7, #1
 80139ac:	e7f4      	b.n	8013998 <__ieee754_fmod+0x194>
 80139ae:	0fe1      	lsrs	r1, r4, #31
 80139b0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80139b4:	0064      	lsls	r4, r4, #1
 80139b6:	3a01      	subs	r2, #1
 80139b8:	e78c      	b.n	80138d4 <__ieee754_fmod+0xd0>
 80139ba:	1a89      	subs	r1, r1, r2
 80139bc:	2914      	cmp	r1, #20
 80139be:	dc0a      	bgt.n	80139d6 <__ieee754_fmod+0x1d2>
 80139c0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80139c4:	fa03 f202 	lsl.w	r2, r3, r2
 80139c8:	40cc      	lsrs	r4, r1
 80139ca:	4322      	orrs	r2, r4
 80139cc:	410b      	asrs	r3, r1
 80139ce:	ea43 0105 	orr.w	r1, r3, r5
 80139d2:	4610      	mov	r0, r2
 80139d4:	e737      	b.n	8013846 <__ieee754_fmod+0x42>
 80139d6:	291f      	cmp	r1, #31
 80139d8:	dc07      	bgt.n	80139ea <__ieee754_fmod+0x1e6>
 80139da:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80139de:	40cc      	lsrs	r4, r1
 80139e0:	fa03 f202 	lsl.w	r2, r3, r2
 80139e4:	4322      	orrs	r2, r4
 80139e6:	462b      	mov	r3, r5
 80139e8:	e7f1      	b.n	80139ce <__ieee754_fmod+0x1ca>
 80139ea:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80139ee:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80139f2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80139f6:	32e2      	adds	r2, #226	@ 0xe2
 80139f8:	fa43 f202 	asr.w	r2, r3, r2
 80139fc:	e7f3      	b.n	80139e6 <__ieee754_fmod+0x1e2>
 80139fe:	bf00      	nop
 8013a00:	7fefffff 	.word	0x7fefffff
 8013a04:	7ff00000 	.word	0x7ff00000
 8013a08:	08015f18 	.word	0x08015f18
 8013a0c:	fffffbed 	.word	0xfffffbed
 8013a10:	fffffc02 	.word	0xfffffc02
 8013a14:	fffffbe2 	.word	0xfffffbe2

08013a18 <__ieee754_pow>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	b091      	sub	sp, #68	@ 0x44
 8013a1e:	ed8d 1b00 	vstr	d1, [sp]
 8013a22:	e9dd 1900 	ldrd	r1, r9, [sp]
 8013a26:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013a2a:	ea5a 0001 	orrs.w	r0, sl, r1
 8013a2e:	ec57 6b10 	vmov	r6, r7, d0
 8013a32:	d113      	bne.n	8013a5c <__ieee754_pow+0x44>
 8013a34:	19b3      	adds	r3, r6, r6
 8013a36:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013a3a:	4152      	adcs	r2, r2
 8013a3c:	4298      	cmp	r0, r3
 8013a3e:	4b98      	ldr	r3, [pc, #608]	@ (8013ca0 <__ieee754_pow+0x288>)
 8013a40:	4193      	sbcs	r3, r2
 8013a42:	f080 84ea 	bcs.w	801441a <__ieee754_pow+0xa02>
 8013a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a4a:	4630      	mov	r0, r6
 8013a4c:	4639      	mov	r1, r7
 8013a4e:	f7ec fc2d 	bl	80002ac <__adddf3>
 8013a52:	ec41 0b10 	vmov	d0, r0, r1
 8013a56:	b011      	add	sp, #68	@ 0x44
 8013a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a5c:	4a91      	ldr	r2, [pc, #580]	@ (8013ca4 <__ieee754_pow+0x28c>)
 8013a5e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013a62:	4590      	cmp	r8, r2
 8013a64:	463d      	mov	r5, r7
 8013a66:	4633      	mov	r3, r6
 8013a68:	d806      	bhi.n	8013a78 <__ieee754_pow+0x60>
 8013a6a:	d101      	bne.n	8013a70 <__ieee754_pow+0x58>
 8013a6c:	2e00      	cmp	r6, #0
 8013a6e:	d1ea      	bne.n	8013a46 <__ieee754_pow+0x2e>
 8013a70:	4592      	cmp	sl, r2
 8013a72:	d801      	bhi.n	8013a78 <__ieee754_pow+0x60>
 8013a74:	d10e      	bne.n	8013a94 <__ieee754_pow+0x7c>
 8013a76:	b169      	cbz	r1, 8013a94 <__ieee754_pow+0x7c>
 8013a78:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013a7c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013a80:	431d      	orrs	r5, r3
 8013a82:	d1e0      	bne.n	8013a46 <__ieee754_pow+0x2e>
 8013a84:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013a88:	18db      	adds	r3, r3, r3
 8013a8a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013a8e:	4152      	adcs	r2, r2
 8013a90:	429d      	cmp	r5, r3
 8013a92:	e7d4      	b.n	8013a3e <__ieee754_pow+0x26>
 8013a94:	2d00      	cmp	r5, #0
 8013a96:	46c3      	mov	fp, r8
 8013a98:	da3a      	bge.n	8013b10 <__ieee754_pow+0xf8>
 8013a9a:	4a83      	ldr	r2, [pc, #524]	@ (8013ca8 <__ieee754_pow+0x290>)
 8013a9c:	4592      	cmp	sl, r2
 8013a9e:	d84d      	bhi.n	8013b3c <__ieee754_pow+0x124>
 8013aa0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013aa4:	4592      	cmp	sl, r2
 8013aa6:	f240 84c7 	bls.w	8014438 <__ieee754_pow+0xa20>
 8013aaa:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013aae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013ab2:	2a14      	cmp	r2, #20
 8013ab4:	dd0f      	ble.n	8013ad6 <__ieee754_pow+0xbe>
 8013ab6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013aba:	fa21 f402 	lsr.w	r4, r1, r2
 8013abe:	fa04 f202 	lsl.w	r2, r4, r2
 8013ac2:	428a      	cmp	r2, r1
 8013ac4:	f040 84b8 	bne.w	8014438 <__ieee754_pow+0xa20>
 8013ac8:	f004 0401 	and.w	r4, r4, #1
 8013acc:	f1c4 0402 	rsb	r4, r4, #2
 8013ad0:	2900      	cmp	r1, #0
 8013ad2:	d158      	bne.n	8013b86 <__ieee754_pow+0x16e>
 8013ad4:	e00e      	b.n	8013af4 <__ieee754_pow+0xdc>
 8013ad6:	2900      	cmp	r1, #0
 8013ad8:	d154      	bne.n	8013b84 <__ieee754_pow+0x16c>
 8013ada:	f1c2 0214 	rsb	r2, r2, #20
 8013ade:	fa4a f402 	asr.w	r4, sl, r2
 8013ae2:	fa04 f202 	lsl.w	r2, r4, r2
 8013ae6:	4552      	cmp	r2, sl
 8013ae8:	f040 84a3 	bne.w	8014432 <__ieee754_pow+0xa1a>
 8013aec:	f004 0401 	and.w	r4, r4, #1
 8013af0:	f1c4 0402 	rsb	r4, r4, #2
 8013af4:	4a6d      	ldr	r2, [pc, #436]	@ (8013cac <__ieee754_pow+0x294>)
 8013af6:	4592      	cmp	sl, r2
 8013af8:	d12e      	bne.n	8013b58 <__ieee754_pow+0x140>
 8013afa:	f1b9 0f00 	cmp.w	r9, #0
 8013afe:	f280 8494 	bge.w	801442a <__ieee754_pow+0xa12>
 8013b02:	496a      	ldr	r1, [pc, #424]	@ (8013cac <__ieee754_pow+0x294>)
 8013b04:	4632      	mov	r2, r6
 8013b06:	463b      	mov	r3, r7
 8013b08:	2000      	movs	r0, #0
 8013b0a:	f7ec feaf 	bl	800086c <__aeabi_ddiv>
 8013b0e:	e7a0      	b.n	8013a52 <__ieee754_pow+0x3a>
 8013b10:	2400      	movs	r4, #0
 8013b12:	bbc1      	cbnz	r1, 8013b86 <__ieee754_pow+0x16e>
 8013b14:	4a63      	ldr	r2, [pc, #396]	@ (8013ca4 <__ieee754_pow+0x28c>)
 8013b16:	4592      	cmp	sl, r2
 8013b18:	d1ec      	bne.n	8013af4 <__ieee754_pow+0xdc>
 8013b1a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013b1e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8013b22:	431a      	orrs	r2, r3
 8013b24:	f000 8479 	beq.w	801441a <__ieee754_pow+0xa02>
 8013b28:	4b61      	ldr	r3, [pc, #388]	@ (8013cb0 <__ieee754_pow+0x298>)
 8013b2a:	4598      	cmp	r8, r3
 8013b2c:	d908      	bls.n	8013b40 <__ieee754_pow+0x128>
 8013b2e:	f1b9 0f00 	cmp.w	r9, #0
 8013b32:	f2c0 8476 	blt.w	8014422 <__ieee754_pow+0xa0a>
 8013b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b3a:	e78a      	b.n	8013a52 <__ieee754_pow+0x3a>
 8013b3c:	2402      	movs	r4, #2
 8013b3e:	e7e8      	b.n	8013b12 <__ieee754_pow+0xfa>
 8013b40:	f1b9 0f00 	cmp.w	r9, #0
 8013b44:	f04f 0000 	mov.w	r0, #0
 8013b48:	f04f 0100 	mov.w	r1, #0
 8013b4c:	da81      	bge.n	8013a52 <__ieee754_pow+0x3a>
 8013b4e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013b52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013b56:	e77c      	b.n	8013a52 <__ieee754_pow+0x3a>
 8013b58:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013b5c:	d106      	bne.n	8013b6c <__ieee754_pow+0x154>
 8013b5e:	4632      	mov	r2, r6
 8013b60:	463b      	mov	r3, r7
 8013b62:	4630      	mov	r0, r6
 8013b64:	4639      	mov	r1, r7
 8013b66:	f7ec fd57 	bl	8000618 <__aeabi_dmul>
 8013b6a:	e772      	b.n	8013a52 <__ieee754_pow+0x3a>
 8013b6c:	4a51      	ldr	r2, [pc, #324]	@ (8013cb4 <__ieee754_pow+0x29c>)
 8013b6e:	4591      	cmp	r9, r2
 8013b70:	d109      	bne.n	8013b86 <__ieee754_pow+0x16e>
 8013b72:	2d00      	cmp	r5, #0
 8013b74:	db07      	blt.n	8013b86 <__ieee754_pow+0x16e>
 8013b76:	ec47 6b10 	vmov	d0, r6, r7
 8013b7a:	b011      	add	sp, #68	@ 0x44
 8013b7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b80:	f7ff b8d2 	b.w	8012d28 <__ieee754_sqrt>
 8013b84:	2400      	movs	r4, #0
 8013b86:	ec47 6b10 	vmov	d0, r6, r7
 8013b8a:	9302      	str	r3, [sp, #8]
 8013b8c:	f7ff f864 	bl	8012c58 <fabs>
 8013b90:	9b02      	ldr	r3, [sp, #8]
 8013b92:	ec51 0b10 	vmov	r0, r1, d0
 8013b96:	bb53      	cbnz	r3, 8013bee <__ieee754_pow+0x1d6>
 8013b98:	4b44      	ldr	r3, [pc, #272]	@ (8013cac <__ieee754_pow+0x294>)
 8013b9a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d002      	beq.n	8013ba8 <__ieee754_pow+0x190>
 8013ba2:	f1b8 0f00 	cmp.w	r8, #0
 8013ba6:	d122      	bne.n	8013bee <__ieee754_pow+0x1d6>
 8013ba8:	f1b9 0f00 	cmp.w	r9, #0
 8013bac:	da05      	bge.n	8013bba <__ieee754_pow+0x1a2>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	493d      	ldr	r1, [pc, #244]	@ (8013cac <__ieee754_pow+0x294>)
 8013bb6:	f7ec fe59 	bl	800086c <__aeabi_ddiv>
 8013bba:	2d00      	cmp	r5, #0
 8013bbc:	f6bf af49 	bge.w	8013a52 <__ieee754_pow+0x3a>
 8013bc0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013bc4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013bc8:	ea58 0804 	orrs.w	r8, r8, r4
 8013bcc:	d108      	bne.n	8013be0 <__ieee754_pow+0x1c8>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	4610      	mov	r0, r2
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	f7ec fb67 	bl	80002a8 <__aeabi_dsub>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	e794      	b.n	8013b0a <__ieee754_pow+0xf2>
 8013be0:	2c01      	cmp	r4, #1
 8013be2:	f47f af36 	bne.w	8013a52 <__ieee754_pow+0x3a>
 8013be6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bea:	4619      	mov	r1, r3
 8013bec:	e731      	b.n	8013a52 <__ieee754_pow+0x3a>
 8013bee:	0feb      	lsrs	r3, r5, #31
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	ea53 0204 	orrs.w	r2, r3, r4
 8013bf6:	d102      	bne.n	8013bfe <__ieee754_pow+0x1e6>
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	463b      	mov	r3, r7
 8013bfc:	e7e9      	b.n	8013bd2 <__ieee754_pow+0x1ba>
 8013bfe:	3c01      	subs	r4, #1
 8013c00:	431c      	orrs	r4, r3
 8013c02:	d016      	beq.n	8013c32 <__ieee754_pow+0x21a>
 8013c04:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013c90 <__ieee754_pow+0x278>
 8013c08:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013c0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013c10:	f240 8112 	bls.w	8013e38 <__ieee754_pow+0x420>
 8013c14:	4b28      	ldr	r3, [pc, #160]	@ (8013cb8 <__ieee754_pow+0x2a0>)
 8013c16:	459a      	cmp	sl, r3
 8013c18:	4b25      	ldr	r3, [pc, #148]	@ (8013cb0 <__ieee754_pow+0x298>)
 8013c1a:	d916      	bls.n	8013c4a <__ieee754_pow+0x232>
 8013c1c:	4598      	cmp	r8, r3
 8013c1e:	d80b      	bhi.n	8013c38 <__ieee754_pow+0x220>
 8013c20:	f1b9 0f00 	cmp.w	r9, #0
 8013c24:	da0b      	bge.n	8013c3e <__ieee754_pow+0x226>
 8013c26:	2000      	movs	r0, #0
 8013c28:	b011      	add	sp, #68	@ 0x44
 8013c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c2e:	f001 b87f 	b.w	8014d30 <__math_oflow>
 8013c32:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013c98 <__ieee754_pow+0x280>
 8013c36:	e7e7      	b.n	8013c08 <__ieee754_pow+0x1f0>
 8013c38:	f1b9 0f00 	cmp.w	r9, #0
 8013c3c:	dcf3      	bgt.n	8013c26 <__ieee754_pow+0x20e>
 8013c3e:	2000      	movs	r0, #0
 8013c40:	b011      	add	sp, #68	@ 0x44
 8013c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c46:	f001 b86b 	b.w	8014d20 <__math_uflow>
 8013c4a:	4598      	cmp	r8, r3
 8013c4c:	d20c      	bcs.n	8013c68 <__ieee754_pow+0x250>
 8013c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c52:	2200      	movs	r2, #0
 8013c54:	2300      	movs	r3, #0
 8013c56:	f7ec ff51 	bl	8000afc <__aeabi_dcmplt>
 8013c5a:	3800      	subs	r0, #0
 8013c5c:	bf18      	it	ne
 8013c5e:	2001      	movne	r0, #1
 8013c60:	f1b9 0f00 	cmp.w	r9, #0
 8013c64:	daec      	bge.n	8013c40 <__ieee754_pow+0x228>
 8013c66:	e7df      	b.n	8013c28 <__ieee754_pow+0x210>
 8013c68:	4b10      	ldr	r3, [pc, #64]	@ (8013cac <__ieee754_pow+0x294>)
 8013c6a:	4598      	cmp	r8, r3
 8013c6c:	f04f 0200 	mov.w	r2, #0
 8013c70:	d924      	bls.n	8013cbc <__ieee754_pow+0x2a4>
 8013c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c76:	2300      	movs	r3, #0
 8013c78:	f7ec ff40 	bl	8000afc <__aeabi_dcmplt>
 8013c7c:	3800      	subs	r0, #0
 8013c7e:	bf18      	it	ne
 8013c80:	2001      	movne	r0, #1
 8013c82:	f1b9 0f00 	cmp.w	r9, #0
 8013c86:	dccf      	bgt.n	8013c28 <__ieee754_pow+0x210>
 8013c88:	e7da      	b.n	8013c40 <__ieee754_pow+0x228>
 8013c8a:	bf00      	nop
 8013c8c:	f3af 8000 	nop.w
 8013c90:	00000000 	.word	0x00000000
 8013c94:	3ff00000 	.word	0x3ff00000
 8013c98:	00000000 	.word	0x00000000
 8013c9c:	bff00000 	.word	0xbff00000
 8013ca0:	fff00000 	.word	0xfff00000
 8013ca4:	7ff00000 	.word	0x7ff00000
 8013ca8:	433fffff 	.word	0x433fffff
 8013cac:	3ff00000 	.word	0x3ff00000
 8013cb0:	3fefffff 	.word	0x3fefffff
 8013cb4:	3fe00000 	.word	0x3fe00000
 8013cb8:	43f00000 	.word	0x43f00000
 8013cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8013e28 <__ieee754_pow+0x410>)
 8013cbe:	f7ec faf3 	bl	80002a8 <__aeabi_dsub>
 8013cc2:	a351      	add	r3, pc, #324	@ (adr r3, 8013e08 <__ieee754_pow+0x3f0>)
 8013cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc8:	4604      	mov	r4, r0
 8013cca:	460d      	mov	r5, r1
 8013ccc:	f7ec fca4 	bl	8000618 <__aeabi_dmul>
 8013cd0:	a34f      	add	r3, pc, #316	@ (adr r3, 8013e10 <__ieee754_pow+0x3f8>)
 8013cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	460f      	mov	r7, r1
 8013cda:	4620      	mov	r0, r4
 8013cdc:	4629      	mov	r1, r5
 8013cde:	f7ec fc9b 	bl	8000618 <__aeabi_dmul>
 8013ce2:	4b52      	ldr	r3, [pc, #328]	@ (8013e2c <__ieee754_pow+0x414>)
 8013ce4:	4682      	mov	sl, r0
 8013ce6:	468b      	mov	fp, r1
 8013ce8:	2200      	movs	r2, #0
 8013cea:	4620      	mov	r0, r4
 8013cec:	4629      	mov	r1, r5
 8013cee:	f7ec fc93 	bl	8000618 <__aeabi_dmul>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	a148      	add	r1, pc, #288	@ (adr r1, 8013e18 <__ieee754_pow+0x400>)
 8013cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cfc:	f7ec fad4 	bl	80002a8 <__aeabi_dsub>
 8013d00:	4622      	mov	r2, r4
 8013d02:	462b      	mov	r3, r5
 8013d04:	f7ec fc88 	bl	8000618 <__aeabi_dmul>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	2000      	movs	r0, #0
 8013d0e:	4948      	ldr	r1, [pc, #288]	@ (8013e30 <__ieee754_pow+0x418>)
 8013d10:	f7ec faca 	bl	80002a8 <__aeabi_dsub>
 8013d14:	4622      	mov	r2, r4
 8013d16:	4680      	mov	r8, r0
 8013d18:	4689      	mov	r9, r1
 8013d1a:	462b      	mov	r3, r5
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	4629      	mov	r1, r5
 8013d20:	f7ec fc7a 	bl	8000618 <__aeabi_dmul>
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4640      	mov	r0, r8
 8013d2a:	4649      	mov	r1, r9
 8013d2c:	f7ec fc74 	bl	8000618 <__aeabi_dmul>
 8013d30:	a33b      	add	r3, pc, #236	@ (adr r3, 8013e20 <__ieee754_pow+0x408>)
 8013d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d36:	f7ec fc6f 	bl	8000618 <__aeabi_dmul>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4650      	mov	r0, sl
 8013d40:	4659      	mov	r1, fp
 8013d42:	f7ec fab1 	bl	80002a8 <__aeabi_dsub>
 8013d46:	4602      	mov	r2, r0
 8013d48:	460b      	mov	r3, r1
 8013d4a:	4680      	mov	r8, r0
 8013d4c:	4689      	mov	r9, r1
 8013d4e:	4630      	mov	r0, r6
 8013d50:	4639      	mov	r1, r7
 8013d52:	f7ec faab 	bl	80002ac <__adddf3>
 8013d56:	2400      	movs	r4, #0
 8013d58:	4632      	mov	r2, r6
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	460d      	mov	r5, r1
 8013d60:	f7ec faa2 	bl	80002a8 <__aeabi_dsub>
 8013d64:	4602      	mov	r2, r0
 8013d66:	460b      	mov	r3, r1
 8013d68:	4640      	mov	r0, r8
 8013d6a:	4649      	mov	r1, r9
 8013d6c:	f7ec fa9c 	bl	80002a8 <__aeabi_dsub>
 8013d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013d78:	2300      	movs	r3, #0
 8013d7a:	9304      	str	r3, [sp, #16]
 8013d7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013d80:	4606      	mov	r6, r0
 8013d82:	460f      	mov	r7, r1
 8013d84:	4652      	mov	r2, sl
 8013d86:	465b      	mov	r3, fp
 8013d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d8c:	f7ec fa8c 	bl	80002a8 <__aeabi_dsub>
 8013d90:	4622      	mov	r2, r4
 8013d92:	462b      	mov	r3, r5
 8013d94:	f7ec fc40 	bl	8000618 <__aeabi_dmul>
 8013d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	4689      	mov	r9, r1
 8013da0:	4630      	mov	r0, r6
 8013da2:	4639      	mov	r1, r7
 8013da4:	f7ec fc38 	bl	8000618 <__aeabi_dmul>
 8013da8:	4602      	mov	r2, r0
 8013daa:	460b      	mov	r3, r1
 8013dac:	4640      	mov	r0, r8
 8013dae:	4649      	mov	r1, r9
 8013db0:	f7ec fa7c 	bl	80002ac <__adddf3>
 8013db4:	4652      	mov	r2, sl
 8013db6:	465b      	mov	r3, fp
 8013db8:	4606      	mov	r6, r0
 8013dba:	460f      	mov	r7, r1
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	f7ec fc2a 	bl	8000618 <__aeabi_dmul>
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	4680      	mov	r8, r0
 8013dca:	4689      	mov	r9, r1
 8013dcc:	4630      	mov	r0, r6
 8013dce:	4639      	mov	r1, r7
 8013dd0:	f7ec fa6c 	bl	80002ac <__adddf3>
 8013dd4:	4b17      	ldr	r3, [pc, #92]	@ (8013e34 <__ieee754_pow+0x41c>)
 8013dd6:	4299      	cmp	r1, r3
 8013dd8:	4604      	mov	r4, r0
 8013dda:	460d      	mov	r5, r1
 8013ddc:	468a      	mov	sl, r1
 8013dde:	468b      	mov	fp, r1
 8013de0:	f340 82ef 	ble.w	80143c2 <__ieee754_pow+0x9aa>
 8013de4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013de8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013dec:	4303      	orrs	r3, r0
 8013dee:	f000 81e8 	beq.w	80141c2 <__ieee754_pow+0x7aa>
 8013df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013df6:	2200      	movs	r2, #0
 8013df8:	2300      	movs	r3, #0
 8013dfa:	f7ec fe7f 	bl	8000afc <__aeabi_dcmplt>
 8013dfe:	3800      	subs	r0, #0
 8013e00:	bf18      	it	ne
 8013e02:	2001      	movne	r0, #1
 8013e04:	e710      	b.n	8013c28 <__ieee754_pow+0x210>
 8013e06:	bf00      	nop
 8013e08:	60000000 	.word	0x60000000
 8013e0c:	3ff71547 	.word	0x3ff71547
 8013e10:	f85ddf44 	.word	0xf85ddf44
 8013e14:	3e54ae0b 	.word	0x3e54ae0b
 8013e18:	55555555 	.word	0x55555555
 8013e1c:	3fd55555 	.word	0x3fd55555
 8013e20:	652b82fe 	.word	0x652b82fe
 8013e24:	3ff71547 	.word	0x3ff71547
 8013e28:	3ff00000 	.word	0x3ff00000
 8013e2c:	3fd00000 	.word	0x3fd00000
 8013e30:	3fe00000 	.word	0x3fe00000
 8013e34:	408fffff 	.word	0x408fffff
 8013e38:	4bd5      	ldr	r3, [pc, #852]	@ (8014190 <__ieee754_pow+0x778>)
 8013e3a:	402b      	ands	r3, r5
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	b92b      	cbnz	r3, 8013e4c <__ieee754_pow+0x434>
 8013e40:	4bd4      	ldr	r3, [pc, #848]	@ (8014194 <__ieee754_pow+0x77c>)
 8013e42:	f7ec fbe9 	bl	8000618 <__aeabi_dmul>
 8013e46:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013e4a:	468b      	mov	fp, r1
 8013e4c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013e50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013e54:	4413      	add	r3, r2
 8013e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e58:	4bcf      	ldr	r3, [pc, #828]	@ (8014198 <__ieee754_pow+0x780>)
 8013e5a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013e5e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013e62:	459b      	cmp	fp, r3
 8013e64:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013e68:	dd08      	ble.n	8013e7c <__ieee754_pow+0x464>
 8013e6a:	4bcc      	ldr	r3, [pc, #816]	@ (801419c <__ieee754_pow+0x784>)
 8013e6c:	459b      	cmp	fp, r3
 8013e6e:	f340 81a5 	ble.w	80141bc <__ieee754_pow+0x7a4>
 8013e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e74:	3301      	adds	r3, #1
 8013e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e78:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013e7c:	f04f 0a00 	mov.w	sl, #0
 8013e80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e86:	4bc6      	ldr	r3, [pc, #792]	@ (80141a0 <__ieee754_pow+0x788>)
 8013e88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e8c:	ed93 7b00 	vldr	d7, [r3]
 8013e90:	4629      	mov	r1, r5
 8013e92:	ec53 2b17 	vmov	r2, r3, d7
 8013e96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e9e:	f7ec fa03 	bl	80002a8 <__aeabi_dsub>
 8013ea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	460f      	mov	r7, r1
 8013eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013eae:	f7ec f9fd 	bl	80002ac <__adddf3>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	2000      	movs	r0, #0
 8013eb8:	49ba      	ldr	r1, [pc, #744]	@ (80141a4 <__ieee754_pow+0x78c>)
 8013eba:	f7ec fcd7 	bl	800086c <__aeabi_ddiv>
 8013ebe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	4639      	mov	r1, r7
 8013eca:	f7ec fba5 	bl	8000618 <__aeabi_dmul>
 8013ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ed2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013ed6:	106d      	asrs	r5, r5, #1
 8013ed8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013edc:	f04f 0b00 	mov.w	fp, #0
 8013ee0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013ee4:	4661      	mov	r1, ip
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013eec:	4658      	mov	r0, fp
 8013eee:	46e1      	mov	r9, ip
 8013ef0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013ef4:	4614      	mov	r4, r2
 8013ef6:	461d      	mov	r5, r3
 8013ef8:	f7ec fb8e 	bl	8000618 <__aeabi_dmul>
 8013efc:	4602      	mov	r2, r0
 8013efe:	460b      	mov	r3, r1
 8013f00:	4630      	mov	r0, r6
 8013f02:	4639      	mov	r1, r7
 8013f04:	f7ec f9d0 	bl	80002a8 <__aeabi_dsub>
 8013f08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f0c:	4606      	mov	r6, r0
 8013f0e:	460f      	mov	r7, r1
 8013f10:	4620      	mov	r0, r4
 8013f12:	4629      	mov	r1, r5
 8013f14:	f7ec f9c8 	bl	80002a8 <__aeabi_dsub>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f20:	f7ec f9c2 	bl	80002a8 <__aeabi_dsub>
 8013f24:	465a      	mov	r2, fp
 8013f26:	464b      	mov	r3, r9
 8013f28:	f7ec fb76 	bl	8000618 <__aeabi_dmul>
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	460b      	mov	r3, r1
 8013f30:	4630      	mov	r0, r6
 8013f32:	4639      	mov	r1, r7
 8013f34:	f7ec f9b8 	bl	80002a8 <__aeabi_dsub>
 8013f38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013f3c:	f7ec fb6c 	bl	8000618 <__aeabi_dmul>
 8013f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f48:	4610      	mov	r0, r2
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	f7ec fb64 	bl	8000618 <__aeabi_dmul>
 8013f50:	a37d      	add	r3, pc, #500	@ (adr r3, 8014148 <__ieee754_pow+0x730>)
 8013f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f56:	4604      	mov	r4, r0
 8013f58:	460d      	mov	r5, r1
 8013f5a:	f7ec fb5d 	bl	8000618 <__aeabi_dmul>
 8013f5e:	a37c      	add	r3, pc, #496	@ (adr r3, 8014150 <__ieee754_pow+0x738>)
 8013f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f64:	f7ec f9a2 	bl	80002ac <__adddf3>
 8013f68:	4622      	mov	r2, r4
 8013f6a:	462b      	mov	r3, r5
 8013f6c:	f7ec fb54 	bl	8000618 <__aeabi_dmul>
 8013f70:	a379      	add	r3, pc, #484	@ (adr r3, 8014158 <__ieee754_pow+0x740>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec f999 	bl	80002ac <__adddf3>
 8013f7a:	4622      	mov	r2, r4
 8013f7c:	462b      	mov	r3, r5
 8013f7e:	f7ec fb4b 	bl	8000618 <__aeabi_dmul>
 8013f82:	a377      	add	r3, pc, #476	@ (adr r3, 8014160 <__ieee754_pow+0x748>)
 8013f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f88:	f7ec f990 	bl	80002ac <__adddf3>
 8013f8c:	4622      	mov	r2, r4
 8013f8e:	462b      	mov	r3, r5
 8013f90:	f7ec fb42 	bl	8000618 <__aeabi_dmul>
 8013f94:	a374      	add	r3, pc, #464	@ (adr r3, 8014168 <__ieee754_pow+0x750>)
 8013f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9a:	f7ec f987 	bl	80002ac <__adddf3>
 8013f9e:	4622      	mov	r2, r4
 8013fa0:	462b      	mov	r3, r5
 8013fa2:	f7ec fb39 	bl	8000618 <__aeabi_dmul>
 8013fa6:	a372      	add	r3, pc, #456	@ (adr r3, 8014170 <__ieee754_pow+0x758>)
 8013fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fac:	f7ec f97e 	bl	80002ac <__adddf3>
 8013fb0:	4622      	mov	r2, r4
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	460f      	mov	r7, r1
 8013fb6:	462b      	mov	r3, r5
 8013fb8:	4620      	mov	r0, r4
 8013fba:	4629      	mov	r1, r5
 8013fbc:	f7ec fb2c 	bl	8000618 <__aeabi_dmul>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	4639      	mov	r1, r7
 8013fc8:	f7ec fb26 	bl	8000618 <__aeabi_dmul>
 8013fcc:	465a      	mov	r2, fp
 8013fce:	4604      	mov	r4, r0
 8013fd0:	460d      	mov	r5, r1
 8013fd2:	464b      	mov	r3, r9
 8013fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fd8:	f7ec f968 	bl	80002ac <__adddf3>
 8013fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fe0:	f7ec fb1a 	bl	8000618 <__aeabi_dmul>
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	462b      	mov	r3, r5
 8013fe8:	f7ec f960 	bl	80002ac <__adddf3>
 8013fec:	465a      	mov	r2, fp
 8013fee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ff2:	464b      	mov	r3, r9
 8013ff4:	4658      	mov	r0, fp
 8013ff6:	4649      	mov	r1, r9
 8013ff8:	f7ec fb0e 	bl	8000618 <__aeabi_dmul>
 8013ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80141a8 <__ieee754_pow+0x790>)
 8013ffe:	2200      	movs	r2, #0
 8014000:	4606      	mov	r6, r0
 8014002:	460f      	mov	r7, r1
 8014004:	f7ec f952 	bl	80002ac <__adddf3>
 8014008:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801400c:	f7ec f94e 	bl	80002ac <__adddf3>
 8014010:	46d8      	mov	r8, fp
 8014012:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014016:	460d      	mov	r5, r1
 8014018:	465a      	mov	r2, fp
 801401a:	460b      	mov	r3, r1
 801401c:	4640      	mov	r0, r8
 801401e:	4649      	mov	r1, r9
 8014020:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014024:	f7ec faf8 	bl	8000618 <__aeabi_dmul>
 8014028:	465c      	mov	r4, fp
 801402a:	4680      	mov	r8, r0
 801402c:	4689      	mov	r9, r1
 801402e:	4b5e      	ldr	r3, [pc, #376]	@ (80141a8 <__ieee754_pow+0x790>)
 8014030:	2200      	movs	r2, #0
 8014032:	4620      	mov	r0, r4
 8014034:	4629      	mov	r1, r5
 8014036:	f7ec f937 	bl	80002a8 <__aeabi_dsub>
 801403a:	4632      	mov	r2, r6
 801403c:	463b      	mov	r3, r7
 801403e:	f7ec f933 	bl	80002a8 <__aeabi_dsub>
 8014042:	4602      	mov	r2, r0
 8014044:	460b      	mov	r3, r1
 8014046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801404a:	f7ec f92d 	bl	80002a8 <__aeabi_dsub>
 801404e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014052:	f7ec fae1 	bl	8000618 <__aeabi_dmul>
 8014056:	4622      	mov	r2, r4
 8014058:	4606      	mov	r6, r0
 801405a:	460f      	mov	r7, r1
 801405c:	462b      	mov	r3, r5
 801405e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014062:	f7ec fad9 	bl	8000618 <__aeabi_dmul>
 8014066:	4602      	mov	r2, r0
 8014068:	460b      	mov	r3, r1
 801406a:	4630      	mov	r0, r6
 801406c:	4639      	mov	r1, r7
 801406e:	f7ec f91d 	bl	80002ac <__adddf3>
 8014072:	4606      	mov	r6, r0
 8014074:	460f      	mov	r7, r1
 8014076:	4602      	mov	r2, r0
 8014078:	460b      	mov	r3, r1
 801407a:	4640      	mov	r0, r8
 801407c:	4649      	mov	r1, r9
 801407e:	f7ec f915 	bl	80002ac <__adddf3>
 8014082:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8014086:	a33c      	add	r3, pc, #240	@ (adr r3, 8014178 <__ieee754_pow+0x760>)
 8014088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408c:	4658      	mov	r0, fp
 801408e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8014092:	460d      	mov	r5, r1
 8014094:	f7ec fac0 	bl	8000618 <__aeabi_dmul>
 8014098:	465c      	mov	r4, fp
 801409a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801409e:	4642      	mov	r2, r8
 80140a0:	464b      	mov	r3, r9
 80140a2:	4620      	mov	r0, r4
 80140a4:	4629      	mov	r1, r5
 80140a6:	f7ec f8ff 	bl	80002a8 <__aeabi_dsub>
 80140aa:	4602      	mov	r2, r0
 80140ac:	460b      	mov	r3, r1
 80140ae:	4630      	mov	r0, r6
 80140b0:	4639      	mov	r1, r7
 80140b2:	f7ec f8f9 	bl	80002a8 <__aeabi_dsub>
 80140b6:	a332      	add	r3, pc, #200	@ (adr r3, 8014180 <__ieee754_pow+0x768>)
 80140b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140bc:	f7ec faac 	bl	8000618 <__aeabi_dmul>
 80140c0:	a331      	add	r3, pc, #196	@ (adr r3, 8014188 <__ieee754_pow+0x770>)
 80140c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c6:	4606      	mov	r6, r0
 80140c8:	460f      	mov	r7, r1
 80140ca:	4620      	mov	r0, r4
 80140cc:	4629      	mov	r1, r5
 80140ce:	f7ec faa3 	bl	8000618 <__aeabi_dmul>
 80140d2:	4602      	mov	r2, r0
 80140d4:	460b      	mov	r3, r1
 80140d6:	4630      	mov	r0, r6
 80140d8:	4639      	mov	r1, r7
 80140da:	f7ec f8e7 	bl	80002ac <__adddf3>
 80140de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140e0:	4b32      	ldr	r3, [pc, #200]	@ (80141ac <__ieee754_pow+0x794>)
 80140e2:	4413      	add	r3, r2
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	f7ec f8e0 	bl	80002ac <__adddf3>
 80140ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80140f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80140f2:	f7ec fa27 	bl	8000544 <__aeabi_i2d>
 80140f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80140f8:	4b2d      	ldr	r3, [pc, #180]	@ (80141b0 <__ieee754_pow+0x798>)
 80140fa:	4413      	add	r3, r2
 80140fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014100:	4606      	mov	r6, r0
 8014102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014106:	460f      	mov	r7, r1
 8014108:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801410c:	f7ec f8ce 	bl	80002ac <__adddf3>
 8014110:	4642      	mov	r2, r8
 8014112:	464b      	mov	r3, r9
 8014114:	f7ec f8ca 	bl	80002ac <__adddf3>
 8014118:	4632      	mov	r2, r6
 801411a:	463b      	mov	r3, r7
 801411c:	f7ec f8c6 	bl	80002ac <__adddf3>
 8014120:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8014124:	4632      	mov	r2, r6
 8014126:	463b      	mov	r3, r7
 8014128:	4658      	mov	r0, fp
 801412a:	460d      	mov	r5, r1
 801412c:	f7ec f8bc 	bl	80002a8 <__aeabi_dsub>
 8014130:	4642      	mov	r2, r8
 8014132:	464b      	mov	r3, r9
 8014134:	f7ec f8b8 	bl	80002a8 <__aeabi_dsub>
 8014138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801413c:	f7ec f8b4 	bl	80002a8 <__aeabi_dsub>
 8014140:	465c      	mov	r4, fp
 8014142:	4602      	mov	r2, r0
 8014144:	e036      	b.n	80141b4 <__ieee754_pow+0x79c>
 8014146:	bf00      	nop
 8014148:	4a454eef 	.word	0x4a454eef
 801414c:	3fca7e28 	.word	0x3fca7e28
 8014150:	93c9db65 	.word	0x93c9db65
 8014154:	3fcd864a 	.word	0x3fcd864a
 8014158:	a91d4101 	.word	0xa91d4101
 801415c:	3fd17460 	.word	0x3fd17460
 8014160:	518f264d 	.word	0x518f264d
 8014164:	3fd55555 	.word	0x3fd55555
 8014168:	db6fabff 	.word	0xdb6fabff
 801416c:	3fdb6db6 	.word	0x3fdb6db6
 8014170:	33333303 	.word	0x33333303
 8014174:	3fe33333 	.word	0x3fe33333
 8014178:	e0000000 	.word	0xe0000000
 801417c:	3feec709 	.word	0x3feec709
 8014180:	dc3a03fd 	.word	0xdc3a03fd
 8014184:	3feec709 	.word	0x3feec709
 8014188:	145b01f5 	.word	0x145b01f5
 801418c:	be3e2fe0 	.word	0xbe3e2fe0
 8014190:	7ff00000 	.word	0x7ff00000
 8014194:	43400000 	.word	0x43400000
 8014198:	0003988e 	.word	0x0003988e
 801419c:	000bb679 	.word	0x000bb679
 80141a0:	08015f48 	.word	0x08015f48
 80141a4:	3ff00000 	.word	0x3ff00000
 80141a8:	40080000 	.word	0x40080000
 80141ac:	08015f28 	.word	0x08015f28
 80141b0:	08015f38 	.word	0x08015f38
 80141b4:	460b      	mov	r3, r1
 80141b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141ba:	e5d7      	b.n	8013d6c <__ieee754_pow+0x354>
 80141bc:	f04f 0a01 	mov.w	sl, #1
 80141c0:	e65e      	b.n	8013e80 <__ieee754_pow+0x468>
 80141c2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8014494 <__ieee754_pow+0xa7c>)
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	f7ec f86e 	bl	80002ac <__adddf3>
 80141d0:	4642      	mov	r2, r8
 80141d2:	e9cd 0100 	strd	r0, r1, [sp]
 80141d6:	464b      	mov	r3, r9
 80141d8:	4620      	mov	r0, r4
 80141da:	4629      	mov	r1, r5
 80141dc:	f7ec f864 	bl	80002a8 <__aeabi_dsub>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141e8:	f7ec fca6 	bl	8000b38 <__aeabi_dcmpgt>
 80141ec:	2800      	cmp	r0, #0
 80141ee:	f47f ae00 	bne.w	8013df2 <__ieee754_pow+0x3da>
 80141f2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80141f6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80141fa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80141fe:	fa43 fa0a 	asr.w	sl, r3, sl
 8014202:	44da      	add	sl, fp
 8014204:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014208:	489d      	ldr	r0, [pc, #628]	@ (8014480 <__ieee754_pow+0xa68>)
 801420a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801420e:	4108      	asrs	r0, r1
 8014210:	ea00 030a 	and.w	r3, r0, sl
 8014214:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014218:	f1c1 0114 	rsb	r1, r1, #20
 801421c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8014220:	fa4a fa01 	asr.w	sl, sl, r1
 8014224:	f1bb 0f00 	cmp.w	fp, #0
 8014228:	4640      	mov	r0, r8
 801422a:	4649      	mov	r1, r9
 801422c:	f04f 0200 	mov.w	r2, #0
 8014230:	bfb8      	it	lt
 8014232:	f1ca 0a00 	rsblt	sl, sl, #0
 8014236:	f7ec f837 	bl	80002a8 <__aeabi_dsub>
 801423a:	4680      	mov	r8, r0
 801423c:	4689      	mov	r9, r1
 801423e:	4632      	mov	r2, r6
 8014240:	463b      	mov	r3, r7
 8014242:	4640      	mov	r0, r8
 8014244:	4649      	mov	r1, r9
 8014246:	f7ec f831 	bl	80002ac <__adddf3>
 801424a:	2400      	movs	r4, #0
 801424c:	a37c      	add	r3, pc, #496	@ (adr r3, 8014440 <__ieee754_pow+0xa28>)
 801424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014252:	4620      	mov	r0, r4
 8014254:	460d      	mov	r5, r1
 8014256:	f7ec f9df 	bl	8000618 <__aeabi_dmul>
 801425a:	4642      	mov	r2, r8
 801425c:	e9cd 0100 	strd	r0, r1, [sp]
 8014260:	464b      	mov	r3, r9
 8014262:	4620      	mov	r0, r4
 8014264:	4629      	mov	r1, r5
 8014266:	f7ec f81f 	bl	80002a8 <__aeabi_dsub>
 801426a:	4602      	mov	r2, r0
 801426c:	460b      	mov	r3, r1
 801426e:	4630      	mov	r0, r6
 8014270:	4639      	mov	r1, r7
 8014272:	f7ec f819 	bl	80002a8 <__aeabi_dsub>
 8014276:	a374      	add	r3, pc, #464	@ (adr r3, 8014448 <__ieee754_pow+0xa30>)
 8014278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427c:	f7ec f9cc 	bl	8000618 <__aeabi_dmul>
 8014280:	a373      	add	r3, pc, #460	@ (adr r3, 8014450 <__ieee754_pow+0xa38>)
 8014282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014286:	4680      	mov	r8, r0
 8014288:	4689      	mov	r9, r1
 801428a:	4620      	mov	r0, r4
 801428c:	4629      	mov	r1, r5
 801428e:	f7ec f9c3 	bl	8000618 <__aeabi_dmul>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	4640      	mov	r0, r8
 8014298:	4649      	mov	r1, r9
 801429a:	f7ec f807 	bl	80002ac <__adddf3>
 801429e:	4604      	mov	r4, r0
 80142a0:	460d      	mov	r5, r1
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142aa:	f7eb ffff 	bl	80002ac <__adddf3>
 80142ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142b2:	4680      	mov	r8, r0
 80142b4:	4689      	mov	r9, r1
 80142b6:	f7eb fff7 	bl	80002a8 <__aeabi_dsub>
 80142ba:	4602      	mov	r2, r0
 80142bc:	460b      	mov	r3, r1
 80142be:	4620      	mov	r0, r4
 80142c0:	4629      	mov	r1, r5
 80142c2:	f7eb fff1 	bl	80002a8 <__aeabi_dsub>
 80142c6:	4642      	mov	r2, r8
 80142c8:	4606      	mov	r6, r0
 80142ca:	460f      	mov	r7, r1
 80142cc:	464b      	mov	r3, r9
 80142ce:	4640      	mov	r0, r8
 80142d0:	4649      	mov	r1, r9
 80142d2:	f7ec f9a1 	bl	8000618 <__aeabi_dmul>
 80142d6:	a360      	add	r3, pc, #384	@ (adr r3, 8014458 <__ieee754_pow+0xa40>)
 80142d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142dc:	4604      	mov	r4, r0
 80142de:	460d      	mov	r5, r1
 80142e0:	f7ec f99a 	bl	8000618 <__aeabi_dmul>
 80142e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8014460 <__ieee754_pow+0xa48>)
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	f7eb ffdd 	bl	80002a8 <__aeabi_dsub>
 80142ee:	4622      	mov	r2, r4
 80142f0:	462b      	mov	r3, r5
 80142f2:	f7ec f991 	bl	8000618 <__aeabi_dmul>
 80142f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8014468 <__ieee754_pow+0xa50>)
 80142f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fc:	f7eb ffd6 	bl	80002ac <__adddf3>
 8014300:	4622      	mov	r2, r4
 8014302:	462b      	mov	r3, r5
 8014304:	f7ec f988 	bl	8000618 <__aeabi_dmul>
 8014308:	a359      	add	r3, pc, #356	@ (adr r3, 8014470 <__ieee754_pow+0xa58>)
 801430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430e:	f7eb ffcb 	bl	80002a8 <__aeabi_dsub>
 8014312:	4622      	mov	r2, r4
 8014314:	462b      	mov	r3, r5
 8014316:	f7ec f97f 	bl	8000618 <__aeabi_dmul>
 801431a:	a357      	add	r3, pc, #348	@ (adr r3, 8014478 <__ieee754_pow+0xa60>)
 801431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014320:	f7eb ffc4 	bl	80002ac <__adddf3>
 8014324:	4622      	mov	r2, r4
 8014326:	462b      	mov	r3, r5
 8014328:	f7ec f976 	bl	8000618 <__aeabi_dmul>
 801432c:	4602      	mov	r2, r0
 801432e:	460b      	mov	r3, r1
 8014330:	4640      	mov	r0, r8
 8014332:	4649      	mov	r1, r9
 8014334:	f7eb ffb8 	bl	80002a8 <__aeabi_dsub>
 8014338:	4604      	mov	r4, r0
 801433a:	460d      	mov	r5, r1
 801433c:	4602      	mov	r2, r0
 801433e:	460b      	mov	r3, r1
 8014340:	4640      	mov	r0, r8
 8014342:	4649      	mov	r1, r9
 8014344:	f7ec f968 	bl	8000618 <__aeabi_dmul>
 8014348:	2200      	movs	r2, #0
 801434a:	e9cd 0100 	strd	r0, r1, [sp]
 801434e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014352:	4620      	mov	r0, r4
 8014354:	4629      	mov	r1, r5
 8014356:	f7eb ffa7 	bl	80002a8 <__aeabi_dsub>
 801435a:	4602      	mov	r2, r0
 801435c:	460b      	mov	r3, r1
 801435e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014362:	f7ec fa83 	bl	800086c <__aeabi_ddiv>
 8014366:	4632      	mov	r2, r6
 8014368:	4604      	mov	r4, r0
 801436a:	460d      	mov	r5, r1
 801436c:	463b      	mov	r3, r7
 801436e:	4640      	mov	r0, r8
 8014370:	4649      	mov	r1, r9
 8014372:	f7ec f951 	bl	8000618 <__aeabi_dmul>
 8014376:	4632      	mov	r2, r6
 8014378:	463b      	mov	r3, r7
 801437a:	f7eb ff97 	bl	80002ac <__adddf3>
 801437e:	4602      	mov	r2, r0
 8014380:	460b      	mov	r3, r1
 8014382:	4620      	mov	r0, r4
 8014384:	4629      	mov	r1, r5
 8014386:	f7eb ff8f 	bl	80002a8 <__aeabi_dsub>
 801438a:	4642      	mov	r2, r8
 801438c:	464b      	mov	r3, r9
 801438e:	f7eb ff8b 	bl	80002a8 <__aeabi_dsub>
 8014392:	460b      	mov	r3, r1
 8014394:	4602      	mov	r2, r0
 8014396:	493b      	ldr	r1, [pc, #236]	@ (8014484 <__ieee754_pow+0xa6c>)
 8014398:	2000      	movs	r0, #0
 801439a:	f7eb ff85 	bl	80002a8 <__aeabi_dsub>
 801439e:	ec41 0b10 	vmov	d0, r0, r1
 80143a2:	ee10 3a90 	vmov	r3, s1
 80143a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80143aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80143ae:	da30      	bge.n	8014412 <__ieee754_pow+0x9fa>
 80143b0:	4650      	mov	r0, sl
 80143b2:	f000 fc09 	bl	8014bc8 <scalbn>
 80143b6:	ec51 0b10 	vmov	r0, r1, d0
 80143ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143be:	f7ff bbd2 	b.w	8013b66 <__ieee754_pow+0x14e>
 80143c2:	4c31      	ldr	r4, [pc, #196]	@ (8014488 <__ieee754_pow+0xa70>)
 80143c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80143c8:	42a3      	cmp	r3, r4
 80143ca:	d91a      	bls.n	8014402 <__ieee754_pow+0x9ea>
 80143cc:	4b2f      	ldr	r3, [pc, #188]	@ (801448c <__ieee754_pow+0xa74>)
 80143ce:	440b      	add	r3, r1
 80143d0:	4303      	orrs	r3, r0
 80143d2:	d009      	beq.n	80143e8 <__ieee754_pow+0x9d0>
 80143d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143d8:	2200      	movs	r2, #0
 80143da:	2300      	movs	r3, #0
 80143dc:	f7ec fb8e 	bl	8000afc <__aeabi_dcmplt>
 80143e0:	3800      	subs	r0, #0
 80143e2:	bf18      	it	ne
 80143e4:	2001      	movne	r0, #1
 80143e6:	e42b      	b.n	8013c40 <__ieee754_pow+0x228>
 80143e8:	4642      	mov	r2, r8
 80143ea:	464b      	mov	r3, r9
 80143ec:	f7eb ff5c 	bl	80002a8 <__aeabi_dsub>
 80143f0:	4632      	mov	r2, r6
 80143f2:	463b      	mov	r3, r7
 80143f4:	f7ec fb96 	bl	8000b24 <__aeabi_dcmpge>
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d1eb      	bne.n	80143d4 <__ieee754_pow+0x9bc>
 80143fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801449c <__ieee754_pow+0xa84>
 8014400:	e6f7      	b.n	80141f2 <__ieee754_pow+0x7da>
 8014402:	469a      	mov	sl, r3
 8014404:	4b22      	ldr	r3, [pc, #136]	@ (8014490 <__ieee754_pow+0xa78>)
 8014406:	459a      	cmp	sl, r3
 8014408:	f63f aef3 	bhi.w	80141f2 <__ieee754_pow+0x7da>
 801440c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014410:	e715      	b.n	801423e <__ieee754_pow+0x826>
 8014412:	ec51 0b10 	vmov	r0, r1, d0
 8014416:	4619      	mov	r1, r3
 8014418:	e7cf      	b.n	80143ba <__ieee754_pow+0x9a2>
 801441a:	491a      	ldr	r1, [pc, #104]	@ (8014484 <__ieee754_pow+0xa6c>)
 801441c:	2000      	movs	r0, #0
 801441e:	f7ff bb18 	b.w	8013a52 <__ieee754_pow+0x3a>
 8014422:	2000      	movs	r0, #0
 8014424:	2100      	movs	r1, #0
 8014426:	f7ff bb14 	b.w	8013a52 <__ieee754_pow+0x3a>
 801442a:	4630      	mov	r0, r6
 801442c:	4639      	mov	r1, r7
 801442e:	f7ff bb10 	b.w	8013a52 <__ieee754_pow+0x3a>
 8014432:	460c      	mov	r4, r1
 8014434:	f7ff bb5e 	b.w	8013af4 <__ieee754_pow+0xdc>
 8014438:	2400      	movs	r4, #0
 801443a:	f7ff bb49 	b.w	8013ad0 <__ieee754_pow+0xb8>
 801443e:	bf00      	nop
 8014440:	00000000 	.word	0x00000000
 8014444:	3fe62e43 	.word	0x3fe62e43
 8014448:	fefa39ef 	.word	0xfefa39ef
 801444c:	3fe62e42 	.word	0x3fe62e42
 8014450:	0ca86c39 	.word	0x0ca86c39
 8014454:	be205c61 	.word	0xbe205c61
 8014458:	72bea4d0 	.word	0x72bea4d0
 801445c:	3e663769 	.word	0x3e663769
 8014460:	c5d26bf1 	.word	0xc5d26bf1
 8014464:	3ebbbd41 	.word	0x3ebbbd41
 8014468:	af25de2c 	.word	0xaf25de2c
 801446c:	3f11566a 	.word	0x3f11566a
 8014470:	16bebd93 	.word	0x16bebd93
 8014474:	3f66c16c 	.word	0x3f66c16c
 8014478:	5555553e 	.word	0x5555553e
 801447c:	3fc55555 	.word	0x3fc55555
 8014480:	fff00000 	.word	0xfff00000
 8014484:	3ff00000 	.word	0x3ff00000
 8014488:	4090cbff 	.word	0x4090cbff
 801448c:	3f6f3400 	.word	0x3f6f3400
 8014490:	3fe00000 	.word	0x3fe00000
 8014494:	652b82fe 	.word	0x652b82fe
 8014498:	3c971547 	.word	0x3c971547
 801449c:	4090cc00 	.word	0x4090cc00

080144a0 <__ieee754_rem_pio2>:
 80144a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a4:	ec57 6b10 	vmov	r6, r7, d0
 80144a8:	4bc5      	ldr	r3, [pc, #788]	@ (80147c0 <__ieee754_rem_pio2+0x320>)
 80144aa:	b08d      	sub	sp, #52	@ 0x34
 80144ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80144b0:	4598      	cmp	r8, r3
 80144b2:	4604      	mov	r4, r0
 80144b4:	9704      	str	r7, [sp, #16]
 80144b6:	d807      	bhi.n	80144c8 <__ieee754_rem_pio2+0x28>
 80144b8:	2200      	movs	r2, #0
 80144ba:	2300      	movs	r3, #0
 80144bc:	ed80 0b00 	vstr	d0, [r0]
 80144c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80144c4:	2500      	movs	r5, #0
 80144c6:	e028      	b.n	801451a <__ieee754_rem_pio2+0x7a>
 80144c8:	4bbe      	ldr	r3, [pc, #760]	@ (80147c4 <__ieee754_rem_pio2+0x324>)
 80144ca:	4598      	cmp	r8, r3
 80144cc:	d878      	bhi.n	80145c0 <__ieee754_rem_pio2+0x120>
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	4dbd      	ldr	r5, [pc, #756]	@ (80147c8 <__ieee754_rem_pio2+0x328>)
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	4630      	mov	r0, r6
 80144d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014788 <__ieee754_rem_pio2+0x2e8>)
 80144d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144dc:	4639      	mov	r1, r7
 80144de:	dd38      	ble.n	8014552 <__ieee754_rem_pio2+0xb2>
 80144e0:	f7eb fee2 	bl	80002a8 <__aeabi_dsub>
 80144e4:	45a8      	cmp	r8, r5
 80144e6:	4606      	mov	r6, r0
 80144e8:	460f      	mov	r7, r1
 80144ea:	d01a      	beq.n	8014522 <__ieee754_rem_pio2+0x82>
 80144ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x2f0>)
 80144ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f2:	f7eb fed9 	bl	80002a8 <__aeabi_dsub>
 80144f6:	4602      	mov	r2, r0
 80144f8:	460b      	mov	r3, r1
 80144fa:	4680      	mov	r8, r0
 80144fc:	4689      	mov	r9, r1
 80144fe:	4630      	mov	r0, r6
 8014500:	4639      	mov	r1, r7
 8014502:	f7eb fed1 	bl	80002a8 <__aeabi_dsub>
 8014506:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x2f0>)
 8014508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450c:	f7eb fecc 	bl	80002a8 <__aeabi_dsub>
 8014510:	e9c4 8900 	strd	r8, r9, [r4]
 8014514:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014518:	2501      	movs	r5, #1
 801451a:	4628      	mov	r0, r5
 801451c:	b00d      	add	sp, #52	@ 0x34
 801451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014522:	a39d      	add	r3, pc, #628	@ (adr r3, 8014798 <__ieee754_rem_pio2+0x2f8>)
 8014524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014528:	f7eb febe 	bl	80002a8 <__aeabi_dsub>
 801452c:	a39c      	add	r3, pc, #624	@ (adr r3, 80147a0 <__ieee754_rem_pio2+0x300>)
 801452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014532:	4606      	mov	r6, r0
 8014534:	460f      	mov	r7, r1
 8014536:	f7eb feb7 	bl	80002a8 <__aeabi_dsub>
 801453a:	4602      	mov	r2, r0
 801453c:	460b      	mov	r3, r1
 801453e:	4680      	mov	r8, r0
 8014540:	4689      	mov	r9, r1
 8014542:	4630      	mov	r0, r6
 8014544:	4639      	mov	r1, r7
 8014546:	f7eb feaf 	bl	80002a8 <__aeabi_dsub>
 801454a:	a395      	add	r3, pc, #596	@ (adr r3, 80147a0 <__ieee754_rem_pio2+0x300>)
 801454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014550:	e7dc      	b.n	801450c <__ieee754_rem_pio2+0x6c>
 8014552:	f7eb feab 	bl	80002ac <__adddf3>
 8014556:	45a8      	cmp	r8, r5
 8014558:	4606      	mov	r6, r0
 801455a:	460f      	mov	r7, r1
 801455c:	d018      	beq.n	8014590 <__ieee754_rem_pio2+0xf0>
 801455e:	a38c      	add	r3, pc, #560	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x2f0>)
 8014560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014564:	f7eb fea2 	bl	80002ac <__adddf3>
 8014568:	4602      	mov	r2, r0
 801456a:	460b      	mov	r3, r1
 801456c:	4680      	mov	r8, r0
 801456e:	4689      	mov	r9, r1
 8014570:	4630      	mov	r0, r6
 8014572:	4639      	mov	r1, r7
 8014574:	f7eb fe98 	bl	80002a8 <__aeabi_dsub>
 8014578:	a385      	add	r3, pc, #532	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x2f0>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7eb fe95 	bl	80002ac <__adddf3>
 8014582:	f04f 35ff 	mov.w	r5, #4294967295
 8014586:	e9c4 8900 	strd	r8, r9, [r4]
 801458a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801458e:	e7c4      	b.n	801451a <__ieee754_rem_pio2+0x7a>
 8014590:	a381      	add	r3, pc, #516	@ (adr r3, 8014798 <__ieee754_rem_pio2+0x2f8>)
 8014592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014596:	f7eb fe89 	bl	80002ac <__adddf3>
 801459a:	a381      	add	r3, pc, #516	@ (adr r3, 80147a0 <__ieee754_rem_pio2+0x300>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	4606      	mov	r6, r0
 80145a2:	460f      	mov	r7, r1
 80145a4:	f7eb fe82 	bl	80002ac <__adddf3>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	4680      	mov	r8, r0
 80145ae:	4689      	mov	r9, r1
 80145b0:	4630      	mov	r0, r6
 80145b2:	4639      	mov	r1, r7
 80145b4:	f7eb fe78 	bl	80002a8 <__aeabi_dsub>
 80145b8:	a379      	add	r3, pc, #484	@ (adr r3, 80147a0 <__ieee754_rem_pio2+0x300>)
 80145ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145be:	e7de      	b.n	801457e <__ieee754_rem_pio2+0xde>
 80145c0:	4b82      	ldr	r3, [pc, #520]	@ (80147cc <__ieee754_rem_pio2+0x32c>)
 80145c2:	4598      	cmp	r8, r3
 80145c4:	f200 80d1 	bhi.w	801476a <__ieee754_rem_pio2+0x2ca>
 80145c8:	f7fe fb46 	bl	8012c58 <fabs>
 80145cc:	ec57 6b10 	vmov	r6, r7, d0
 80145d0:	a375      	add	r3, pc, #468	@ (adr r3, 80147a8 <__ieee754_rem_pio2+0x308>)
 80145d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d6:	4630      	mov	r0, r6
 80145d8:	4639      	mov	r1, r7
 80145da:	f7ec f81d 	bl	8000618 <__aeabi_dmul>
 80145de:	4b7c      	ldr	r3, [pc, #496]	@ (80147d0 <__ieee754_rem_pio2+0x330>)
 80145e0:	2200      	movs	r2, #0
 80145e2:	f7eb fe63 	bl	80002ac <__adddf3>
 80145e6:	f7ec fac7 	bl	8000b78 <__aeabi_d2iz>
 80145ea:	4605      	mov	r5, r0
 80145ec:	f7eb ffaa 	bl	8000544 <__aeabi_i2d>
 80145f0:	4602      	mov	r2, r0
 80145f2:	460b      	mov	r3, r1
 80145f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80145f8:	a363      	add	r3, pc, #396	@ (adr r3, 8014788 <__ieee754_rem_pio2+0x2e8>)
 80145fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fe:	f7ec f80b 	bl	8000618 <__aeabi_dmul>
 8014602:	4602      	mov	r2, r0
 8014604:	460b      	mov	r3, r1
 8014606:	4630      	mov	r0, r6
 8014608:	4639      	mov	r1, r7
 801460a:	f7eb fe4d 	bl	80002a8 <__aeabi_dsub>
 801460e:	a360      	add	r3, pc, #384	@ (adr r3, 8014790 <__ieee754_rem_pio2+0x2f0>)
 8014610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014614:	4682      	mov	sl, r0
 8014616:	468b      	mov	fp, r1
 8014618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801461c:	f7eb fffc 	bl	8000618 <__aeabi_dmul>
 8014620:	2d1f      	cmp	r5, #31
 8014622:	4606      	mov	r6, r0
 8014624:	460f      	mov	r7, r1
 8014626:	dc0c      	bgt.n	8014642 <__ieee754_rem_pio2+0x1a2>
 8014628:	4b6a      	ldr	r3, [pc, #424]	@ (80147d4 <__ieee754_rem_pio2+0x334>)
 801462a:	1e6a      	subs	r2, r5, #1
 801462c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014630:	4543      	cmp	r3, r8
 8014632:	d006      	beq.n	8014642 <__ieee754_rem_pio2+0x1a2>
 8014634:	4632      	mov	r2, r6
 8014636:	463b      	mov	r3, r7
 8014638:	4650      	mov	r0, sl
 801463a:	4659      	mov	r1, fp
 801463c:	f7eb fe34 	bl	80002a8 <__aeabi_dsub>
 8014640:	e00e      	b.n	8014660 <__ieee754_rem_pio2+0x1c0>
 8014642:	463b      	mov	r3, r7
 8014644:	4632      	mov	r2, r6
 8014646:	4650      	mov	r0, sl
 8014648:	4659      	mov	r1, fp
 801464a:	f7eb fe2d 	bl	80002a8 <__aeabi_dsub>
 801464e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014652:	9305      	str	r3, [sp, #20]
 8014654:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014658:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801465c:	2b10      	cmp	r3, #16
 801465e:	dc02      	bgt.n	8014666 <__ieee754_rem_pio2+0x1c6>
 8014660:	e9c4 0100 	strd	r0, r1, [r4]
 8014664:	e039      	b.n	80146da <__ieee754_rem_pio2+0x23a>
 8014666:	a34c      	add	r3, pc, #304	@ (adr r3, 8014798 <__ieee754_rem_pio2+0x2f8>)
 8014668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014670:	f7eb ffd2 	bl	8000618 <__aeabi_dmul>
 8014674:	4606      	mov	r6, r0
 8014676:	460f      	mov	r7, r1
 8014678:	4602      	mov	r2, r0
 801467a:	460b      	mov	r3, r1
 801467c:	4650      	mov	r0, sl
 801467e:	4659      	mov	r1, fp
 8014680:	f7eb fe12 	bl	80002a8 <__aeabi_dsub>
 8014684:	4602      	mov	r2, r0
 8014686:	460b      	mov	r3, r1
 8014688:	4680      	mov	r8, r0
 801468a:	4689      	mov	r9, r1
 801468c:	4650      	mov	r0, sl
 801468e:	4659      	mov	r1, fp
 8014690:	f7eb fe0a 	bl	80002a8 <__aeabi_dsub>
 8014694:	4632      	mov	r2, r6
 8014696:	463b      	mov	r3, r7
 8014698:	f7eb fe06 	bl	80002a8 <__aeabi_dsub>
 801469c:	a340      	add	r3, pc, #256	@ (adr r3, 80147a0 <__ieee754_rem_pio2+0x300>)
 801469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a2:	4606      	mov	r6, r0
 80146a4:	460f      	mov	r7, r1
 80146a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146aa:	f7eb ffb5 	bl	8000618 <__aeabi_dmul>
 80146ae:	4632      	mov	r2, r6
 80146b0:	463b      	mov	r3, r7
 80146b2:	f7eb fdf9 	bl	80002a8 <__aeabi_dsub>
 80146b6:	4602      	mov	r2, r0
 80146b8:	460b      	mov	r3, r1
 80146ba:	4606      	mov	r6, r0
 80146bc:	460f      	mov	r7, r1
 80146be:	4640      	mov	r0, r8
 80146c0:	4649      	mov	r1, r9
 80146c2:	f7eb fdf1 	bl	80002a8 <__aeabi_dsub>
 80146c6:	9a05      	ldr	r2, [sp, #20]
 80146c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146cc:	1ad3      	subs	r3, r2, r3
 80146ce:	2b31      	cmp	r3, #49	@ 0x31
 80146d0:	dc20      	bgt.n	8014714 <__ieee754_rem_pio2+0x274>
 80146d2:	e9c4 0100 	strd	r0, r1, [r4]
 80146d6:	46c2      	mov	sl, r8
 80146d8:	46cb      	mov	fp, r9
 80146da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80146de:	4650      	mov	r0, sl
 80146e0:	4642      	mov	r2, r8
 80146e2:	464b      	mov	r3, r9
 80146e4:	4659      	mov	r1, fp
 80146e6:	f7eb fddf 	bl	80002a8 <__aeabi_dsub>
 80146ea:	463b      	mov	r3, r7
 80146ec:	4632      	mov	r2, r6
 80146ee:	f7eb fddb 	bl	80002a8 <__aeabi_dsub>
 80146f2:	9b04      	ldr	r3, [sp, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80146fa:	f6bf af0e 	bge.w	801451a <__ieee754_rem_pio2+0x7a>
 80146fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8014702:	6063      	str	r3, [r4, #4]
 8014704:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014708:	f8c4 8000 	str.w	r8, [r4]
 801470c:	60a0      	str	r0, [r4, #8]
 801470e:	60e3      	str	r3, [r4, #12]
 8014710:	426d      	negs	r5, r5
 8014712:	e702      	b.n	801451a <__ieee754_rem_pio2+0x7a>
 8014714:	a326      	add	r3, pc, #152	@ (adr r3, 80147b0 <__ieee754_rem_pio2+0x310>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801471e:	f7eb ff7b 	bl	8000618 <__aeabi_dmul>
 8014722:	4606      	mov	r6, r0
 8014724:	460f      	mov	r7, r1
 8014726:	4602      	mov	r2, r0
 8014728:	460b      	mov	r3, r1
 801472a:	4640      	mov	r0, r8
 801472c:	4649      	mov	r1, r9
 801472e:	f7eb fdbb 	bl	80002a8 <__aeabi_dsub>
 8014732:	4602      	mov	r2, r0
 8014734:	460b      	mov	r3, r1
 8014736:	4682      	mov	sl, r0
 8014738:	468b      	mov	fp, r1
 801473a:	4640      	mov	r0, r8
 801473c:	4649      	mov	r1, r9
 801473e:	f7eb fdb3 	bl	80002a8 <__aeabi_dsub>
 8014742:	4632      	mov	r2, r6
 8014744:	463b      	mov	r3, r7
 8014746:	f7eb fdaf 	bl	80002a8 <__aeabi_dsub>
 801474a:	a31b      	add	r3, pc, #108	@ (adr r3, 80147b8 <__ieee754_rem_pio2+0x318>)
 801474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014750:	4606      	mov	r6, r0
 8014752:	460f      	mov	r7, r1
 8014754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014758:	f7eb ff5e 	bl	8000618 <__aeabi_dmul>
 801475c:	4632      	mov	r2, r6
 801475e:	463b      	mov	r3, r7
 8014760:	f7eb fda2 	bl	80002a8 <__aeabi_dsub>
 8014764:	4606      	mov	r6, r0
 8014766:	460f      	mov	r7, r1
 8014768:	e764      	b.n	8014634 <__ieee754_rem_pio2+0x194>
 801476a:	4b1b      	ldr	r3, [pc, #108]	@ (80147d8 <__ieee754_rem_pio2+0x338>)
 801476c:	4598      	cmp	r8, r3
 801476e:	d935      	bls.n	80147dc <__ieee754_rem_pio2+0x33c>
 8014770:	4632      	mov	r2, r6
 8014772:	463b      	mov	r3, r7
 8014774:	4630      	mov	r0, r6
 8014776:	4639      	mov	r1, r7
 8014778:	f7eb fd96 	bl	80002a8 <__aeabi_dsub>
 801477c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014780:	e9c4 0100 	strd	r0, r1, [r4]
 8014784:	e69e      	b.n	80144c4 <__ieee754_rem_pio2+0x24>
 8014786:	bf00      	nop
 8014788:	54400000 	.word	0x54400000
 801478c:	3ff921fb 	.word	0x3ff921fb
 8014790:	1a626331 	.word	0x1a626331
 8014794:	3dd0b461 	.word	0x3dd0b461
 8014798:	1a600000 	.word	0x1a600000
 801479c:	3dd0b461 	.word	0x3dd0b461
 80147a0:	2e037073 	.word	0x2e037073
 80147a4:	3ba3198a 	.word	0x3ba3198a
 80147a8:	6dc9c883 	.word	0x6dc9c883
 80147ac:	3fe45f30 	.word	0x3fe45f30
 80147b0:	2e000000 	.word	0x2e000000
 80147b4:	3ba3198a 	.word	0x3ba3198a
 80147b8:	252049c1 	.word	0x252049c1
 80147bc:	397b839a 	.word	0x397b839a
 80147c0:	3fe921fb 	.word	0x3fe921fb
 80147c4:	4002d97b 	.word	0x4002d97b
 80147c8:	3ff921fb 	.word	0x3ff921fb
 80147cc:	413921fb 	.word	0x413921fb
 80147d0:	3fe00000 	.word	0x3fe00000
 80147d4:	08015f58 	.word	0x08015f58
 80147d8:	7fefffff 	.word	0x7fefffff
 80147dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80147e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80147e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80147e8:	4630      	mov	r0, r6
 80147ea:	460f      	mov	r7, r1
 80147ec:	f7ec f9c4 	bl	8000b78 <__aeabi_d2iz>
 80147f0:	f7eb fea8 	bl	8000544 <__aeabi_i2d>
 80147f4:	4602      	mov	r2, r0
 80147f6:	460b      	mov	r3, r1
 80147f8:	4630      	mov	r0, r6
 80147fa:	4639      	mov	r1, r7
 80147fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014800:	f7eb fd52 	bl	80002a8 <__aeabi_dsub>
 8014804:	4b22      	ldr	r3, [pc, #136]	@ (8014890 <__ieee754_rem_pio2+0x3f0>)
 8014806:	2200      	movs	r2, #0
 8014808:	f7eb ff06 	bl	8000618 <__aeabi_dmul>
 801480c:	460f      	mov	r7, r1
 801480e:	4606      	mov	r6, r0
 8014810:	f7ec f9b2 	bl	8000b78 <__aeabi_d2iz>
 8014814:	f7eb fe96 	bl	8000544 <__aeabi_i2d>
 8014818:	4602      	mov	r2, r0
 801481a:	460b      	mov	r3, r1
 801481c:	4630      	mov	r0, r6
 801481e:	4639      	mov	r1, r7
 8014820:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014824:	f7eb fd40 	bl	80002a8 <__aeabi_dsub>
 8014828:	4b19      	ldr	r3, [pc, #100]	@ (8014890 <__ieee754_rem_pio2+0x3f0>)
 801482a:	2200      	movs	r2, #0
 801482c:	f7eb fef4 	bl	8000618 <__aeabi_dmul>
 8014830:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014834:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014838:	f04f 0803 	mov.w	r8, #3
 801483c:	2600      	movs	r6, #0
 801483e:	2700      	movs	r7, #0
 8014840:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014844:	4632      	mov	r2, r6
 8014846:	463b      	mov	r3, r7
 8014848:	46c2      	mov	sl, r8
 801484a:	f108 38ff 	add.w	r8, r8, #4294967295
 801484e:	f7ec f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 8014852:	2800      	cmp	r0, #0
 8014854:	d1f4      	bne.n	8014840 <__ieee754_rem_pio2+0x3a0>
 8014856:	4b0f      	ldr	r3, [pc, #60]	@ (8014894 <__ieee754_rem_pio2+0x3f4>)
 8014858:	9301      	str	r3, [sp, #4]
 801485a:	2302      	movs	r3, #2
 801485c:	9300      	str	r3, [sp, #0]
 801485e:	462a      	mov	r2, r5
 8014860:	4653      	mov	r3, sl
 8014862:	4621      	mov	r1, r4
 8014864:	a806      	add	r0, sp, #24
 8014866:	f000 fa6b 	bl	8014d40 <__kernel_rem_pio2>
 801486a:	9b04      	ldr	r3, [sp, #16]
 801486c:	2b00      	cmp	r3, #0
 801486e:	4605      	mov	r5, r0
 8014870:	f6bf ae53 	bge.w	801451a <__ieee754_rem_pio2+0x7a>
 8014874:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014878:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801487c:	e9c4 2300 	strd	r2, r3, [r4]
 8014880:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014884:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014888:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801488c:	e740      	b.n	8014710 <__ieee754_rem_pio2+0x270>
 801488e:	bf00      	nop
 8014890:	41700000 	.word	0x41700000
 8014894:	08015fd8 	.word	0x08015fd8

08014898 <atan>:
 8014898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489c:	ec55 4b10 	vmov	r4, r5, d0
 80148a0:	4bbf      	ldr	r3, [pc, #764]	@ (8014ba0 <atan+0x308>)
 80148a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80148a6:	429e      	cmp	r6, r3
 80148a8:	46ab      	mov	fp, r5
 80148aa:	d918      	bls.n	80148de <atan+0x46>
 80148ac:	4bbd      	ldr	r3, [pc, #756]	@ (8014ba4 <atan+0x30c>)
 80148ae:	429e      	cmp	r6, r3
 80148b0:	d801      	bhi.n	80148b6 <atan+0x1e>
 80148b2:	d109      	bne.n	80148c8 <atan+0x30>
 80148b4:	b144      	cbz	r4, 80148c8 <atan+0x30>
 80148b6:	4622      	mov	r2, r4
 80148b8:	462b      	mov	r3, r5
 80148ba:	4620      	mov	r0, r4
 80148bc:	4629      	mov	r1, r5
 80148be:	f7eb fcf5 	bl	80002ac <__adddf3>
 80148c2:	4604      	mov	r4, r0
 80148c4:	460d      	mov	r5, r1
 80148c6:	e006      	b.n	80148d6 <atan+0x3e>
 80148c8:	f1bb 0f00 	cmp.w	fp, #0
 80148cc:	f340 812b 	ble.w	8014b26 <atan+0x28e>
 80148d0:	a597      	add	r5, pc, #604	@ (adr r5, 8014b30 <atan+0x298>)
 80148d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80148d6:	ec45 4b10 	vmov	d0, r4, r5
 80148da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148de:	4bb2      	ldr	r3, [pc, #712]	@ (8014ba8 <atan+0x310>)
 80148e0:	429e      	cmp	r6, r3
 80148e2:	d813      	bhi.n	801490c <atan+0x74>
 80148e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80148e8:	429e      	cmp	r6, r3
 80148ea:	d80c      	bhi.n	8014906 <atan+0x6e>
 80148ec:	a392      	add	r3, pc, #584	@ (adr r3, 8014b38 <atan+0x2a0>)
 80148ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f2:	4620      	mov	r0, r4
 80148f4:	4629      	mov	r1, r5
 80148f6:	f7eb fcd9 	bl	80002ac <__adddf3>
 80148fa:	4bac      	ldr	r3, [pc, #688]	@ (8014bac <atan+0x314>)
 80148fc:	2200      	movs	r2, #0
 80148fe:	f7ec f91b 	bl	8000b38 <__aeabi_dcmpgt>
 8014902:	2800      	cmp	r0, #0
 8014904:	d1e7      	bne.n	80148d6 <atan+0x3e>
 8014906:	f04f 3aff 	mov.w	sl, #4294967295
 801490a:	e029      	b.n	8014960 <atan+0xc8>
 801490c:	f7fe f9a4 	bl	8012c58 <fabs>
 8014910:	4ba7      	ldr	r3, [pc, #668]	@ (8014bb0 <atan+0x318>)
 8014912:	429e      	cmp	r6, r3
 8014914:	ec55 4b10 	vmov	r4, r5, d0
 8014918:	f200 80bc 	bhi.w	8014a94 <atan+0x1fc>
 801491c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014920:	429e      	cmp	r6, r3
 8014922:	f200 809e 	bhi.w	8014a62 <atan+0x1ca>
 8014926:	4622      	mov	r2, r4
 8014928:	462b      	mov	r3, r5
 801492a:	4620      	mov	r0, r4
 801492c:	4629      	mov	r1, r5
 801492e:	f7eb fcbd 	bl	80002ac <__adddf3>
 8014932:	4b9e      	ldr	r3, [pc, #632]	@ (8014bac <atan+0x314>)
 8014934:	2200      	movs	r2, #0
 8014936:	f7eb fcb7 	bl	80002a8 <__aeabi_dsub>
 801493a:	2200      	movs	r2, #0
 801493c:	4606      	mov	r6, r0
 801493e:	460f      	mov	r7, r1
 8014940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014944:	4620      	mov	r0, r4
 8014946:	4629      	mov	r1, r5
 8014948:	f7eb fcb0 	bl	80002ac <__adddf3>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	4630      	mov	r0, r6
 8014952:	4639      	mov	r1, r7
 8014954:	f7eb ff8a 	bl	800086c <__aeabi_ddiv>
 8014958:	f04f 0a00 	mov.w	sl, #0
 801495c:	4604      	mov	r4, r0
 801495e:	460d      	mov	r5, r1
 8014960:	4622      	mov	r2, r4
 8014962:	462b      	mov	r3, r5
 8014964:	4620      	mov	r0, r4
 8014966:	4629      	mov	r1, r5
 8014968:	f7eb fe56 	bl	8000618 <__aeabi_dmul>
 801496c:	4602      	mov	r2, r0
 801496e:	460b      	mov	r3, r1
 8014970:	4680      	mov	r8, r0
 8014972:	4689      	mov	r9, r1
 8014974:	f7eb fe50 	bl	8000618 <__aeabi_dmul>
 8014978:	a371      	add	r3, pc, #452	@ (adr r3, 8014b40 <atan+0x2a8>)
 801497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497e:	4606      	mov	r6, r0
 8014980:	460f      	mov	r7, r1
 8014982:	f7eb fe49 	bl	8000618 <__aeabi_dmul>
 8014986:	a370      	add	r3, pc, #448	@ (adr r3, 8014b48 <atan+0x2b0>)
 8014988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498c:	f7eb fc8e 	bl	80002ac <__adddf3>
 8014990:	4632      	mov	r2, r6
 8014992:	463b      	mov	r3, r7
 8014994:	f7eb fe40 	bl	8000618 <__aeabi_dmul>
 8014998:	a36d      	add	r3, pc, #436	@ (adr r3, 8014b50 <atan+0x2b8>)
 801499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499e:	f7eb fc85 	bl	80002ac <__adddf3>
 80149a2:	4632      	mov	r2, r6
 80149a4:	463b      	mov	r3, r7
 80149a6:	f7eb fe37 	bl	8000618 <__aeabi_dmul>
 80149aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8014b58 <atan+0x2c0>)
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	f7eb fc7c 	bl	80002ac <__adddf3>
 80149b4:	4632      	mov	r2, r6
 80149b6:	463b      	mov	r3, r7
 80149b8:	f7eb fe2e 	bl	8000618 <__aeabi_dmul>
 80149bc:	a368      	add	r3, pc, #416	@ (adr r3, 8014b60 <atan+0x2c8>)
 80149be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c2:	f7eb fc73 	bl	80002ac <__adddf3>
 80149c6:	4632      	mov	r2, r6
 80149c8:	463b      	mov	r3, r7
 80149ca:	f7eb fe25 	bl	8000618 <__aeabi_dmul>
 80149ce:	a366      	add	r3, pc, #408	@ (adr r3, 8014b68 <atan+0x2d0>)
 80149d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d4:	f7eb fc6a 	bl	80002ac <__adddf3>
 80149d8:	4642      	mov	r2, r8
 80149da:	464b      	mov	r3, r9
 80149dc:	f7eb fe1c 	bl	8000618 <__aeabi_dmul>
 80149e0:	a363      	add	r3, pc, #396	@ (adr r3, 8014b70 <atan+0x2d8>)
 80149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e6:	4680      	mov	r8, r0
 80149e8:	4689      	mov	r9, r1
 80149ea:	4630      	mov	r0, r6
 80149ec:	4639      	mov	r1, r7
 80149ee:	f7eb fe13 	bl	8000618 <__aeabi_dmul>
 80149f2:	a361      	add	r3, pc, #388	@ (adr r3, 8014b78 <atan+0x2e0>)
 80149f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f8:	f7eb fc56 	bl	80002a8 <__aeabi_dsub>
 80149fc:	4632      	mov	r2, r6
 80149fe:	463b      	mov	r3, r7
 8014a00:	f7eb fe0a 	bl	8000618 <__aeabi_dmul>
 8014a04:	a35e      	add	r3, pc, #376	@ (adr r3, 8014b80 <atan+0x2e8>)
 8014a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0a:	f7eb fc4d 	bl	80002a8 <__aeabi_dsub>
 8014a0e:	4632      	mov	r2, r6
 8014a10:	463b      	mov	r3, r7
 8014a12:	f7eb fe01 	bl	8000618 <__aeabi_dmul>
 8014a16:	a35c      	add	r3, pc, #368	@ (adr r3, 8014b88 <atan+0x2f0>)
 8014a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1c:	f7eb fc44 	bl	80002a8 <__aeabi_dsub>
 8014a20:	4632      	mov	r2, r6
 8014a22:	463b      	mov	r3, r7
 8014a24:	f7eb fdf8 	bl	8000618 <__aeabi_dmul>
 8014a28:	a359      	add	r3, pc, #356	@ (adr r3, 8014b90 <atan+0x2f8>)
 8014a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2e:	f7eb fc3b 	bl	80002a8 <__aeabi_dsub>
 8014a32:	4632      	mov	r2, r6
 8014a34:	463b      	mov	r3, r7
 8014a36:	f7eb fdef 	bl	8000618 <__aeabi_dmul>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	4640      	mov	r0, r8
 8014a40:	4649      	mov	r1, r9
 8014a42:	f7eb fc33 	bl	80002ac <__adddf3>
 8014a46:	4622      	mov	r2, r4
 8014a48:	462b      	mov	r3, r5
 8014a4a:	f7eb fde5 	bl	8000618 <__aeabi_dmul>
 8014a4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014a52:	4602      	mov	r2, r0
 8014a54:	460b      	mov	r3, r1
 8014a56:	d148      	bne.n	8014aea <atan+0x252>
 8014a58:	4620      	mov	r0, r4
 8014a5a:	4629      	mov	r1, r5
 8014a5c:	f7eb fc24 	bl	80002a8 <__aeabi_dsub>
 8014a60:	e72f      	b.n	80148c2 <atan+0x2a>
 8014a62:	4b52      	ldr	r3, [pc, #328]	@ (8014bac <atan+0x314>)
 8014a64:	2200      	movs	r2, #0
 8014a66:	4620      	mov	r0, r4
 8014a68:	4629      	mov	r1, r5
 8014a6a:	f7eb fc1d 	bl	80002a8 <__aeabi_dsub>
 8014a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8014bac <atan+0x314>)
 8014a70:	4606      	mov	r6, r0
 8014a72:	460f      	mov	r7, r1
 8014a74:	2200      	movs	r2, #0
 8014a76:	4620      	mov	r0, r4
 8014a78:	4629      	mov	r1, r5
 8014a7a:	f7eb fc17 	bl	80002ac <__adddf3>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	460b      	mov	r3, r1
 8014a82:	4630      	mov	r0, r6
 8014a84:	4639      	mov	r1, r7
 8014a86:	f7eb fef1 	bl	800086c <__aeabi_ddiv>
 8014a8a:	f04f 0a01 	mov.w	sl, #1
 8014a8e:	4604      	mov	r4, r0
 8014a90:	460d      	mov	r5, r1
 8014a92:	e765      	b.n	8014960 <atan+0xc8>
 8014a94:	4b47      	ldr	r3, [pc, #284]	@ (8014bb4 <atan+0x31c>)
 8014a96:	429e      	cmp	r6, r3
 8014a98:	d21c      	bcs.n	8014ad4 <atan+0x23c>
 8014a9a:	4b47      	ldr	r3, [pc, #284]	@ (8014bb8 <atan+0x320>)
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	f7eb fc01 	bl	80002a8 <__aeabi_dsub>
 8014aa6:	4b44      	ldr	r3, [pc, #272]	@ (8014bb8 <atan+0x320>)
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	460f      	mov	r7, r1
 8014aac:	2200      	movs	r2, #0
 8014aae:	4620      	mov	r0, r4
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	f7eb fdb1 	bl	8000618 <__aeabi_dmul>
 8014ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8014bac <atan+0x314>)
 8014ab8:	2200      	movs	r2, #0
 8014aba:	f7eb fbf7 	bl	80002ac <__adddf3>
 8014abe:	4602      	mov	r2, r0
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	4639      	mov	r1, r7
 8014ac6:	f7eb fed1 	bl	800086c <__aeabi_ddiv>
 8014aca:	f04f 0a02 	mov.w	sl, #2
 8014ace:	4604      	mov	r4, r0
 8014ad0:	460d      	mov	r5, r1
 8014ad2:	e745      	b.n	8014960 <atan+0xc8>
 8014ad4:	4622      	mov	r2, r4
 8014ad6:	462b      	mov	r3, r5
 8014ad8:	4938      	ldr	r1, [pc, #224]	@ (8014bbc <atan+0x324>)
 8014ada:	2000      	movs	r0, #0
 8014adc:	f7eb fec6 	bl	800086c <__aeabi_ddiv>
 8014ae0:	f04f 0a03 	mov.w	sl, #3
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	460d      	mov	r5, r1
 8014ae8:	e73a      	b.n	8014960 <atan+0xc8>
 8014aea:	4b35      	ldr	r3, [pc, #212]	@ (8014bc0 <atan+0x328>)
 8014aec:	4e35      	ldr	r6, [pc, #212]	@ (8014bc4 <atan+0x32c>)
 8014aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af6:	f7eb fbd7 	bl	80002a8 <__aeabi_dsub>
 8014afa:	4622      	mov	r2, r4
 8014afc:	462b      	mov	r3, r5
 8014afe:	f7eb fbd3 	bl	80002a8 <__aeabi_dsub>
 8014b02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014b06:	4602      	mov	r2, r0
 8014b08:	460b      	mov	r3, r1
 8014b0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014b0e:	f7eb fbcb 	bl	80002a8 <__aeabi_dsub>
 8014b12:	f1bb 0f00 	cmp.w	fp, #0
 8014b16:	4604      	mov	r4, r0
 8014b18:	460d      	mov	r5, r1
 8014b1a:	f6bf aedc 	bge.w	80148d6 <atan+0x3e>
 8014b1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014b22:	461d      	mov	r5, r3
 8014b24:	e6d7      	b.n	80148d6 <atan+0x3e>
 8014b26:	a51c      	add	r5, pc, #112	@ (adr r5, 8014b98 <atan+0x300>)
 8014b28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014b2c:	e6d3      	b.n	80148d6 <atan+0x3e>
 8014b2e:	bf00      	nop
 8014b30:	54442d18 	.word	0x54442d18
 8014b34:	3ff921fb 	.word	0x3ff921fb
 8014b38:	8800759c 	.word	0x8800759c
 8014b3c:	7e37e43c 	.word	0x7e37e43c
 8014b40:	e322da11 	.word	0xe322da11
 8014b44:	3f90ad3a 	.word	0x3f90ad3a
 8014b48:	24760deb 	.word	0x24760deb
 8014b4c:	3fa97b4b 	.word	0x3fa97b4b
 8014b50:	a0d03d51 	.word	0xa0d03d51
 8014b54:	3fb10d66 	.word	0x3fb10d66
 8014b58:	c54c206e 	.word	0xc54c206e
 8014b5c:	3fb745cd 	.word	0x3fb745cd
 8014b60:	920083ff 	.word	0x920083ff
 8014b64:	3fc24924 	.word	0x3fc24924
 8014b68:	5555550d 	.word	0x5555550d
 8014b6c:	3fd55555 	.word	0x3fd55555
 8014b70:	2c6a6c2f 	.word	0x2c6a6c2f
 8014b74:	bfa2b444 	.word	0xbfa2b444
 8014b78:	52defd9a 	.word	0x52defd9a
 8014b7c:	3fadde2d 	.word	0x3fadde2d
 8014b80:	af749a6d 	.word	0xaf749a6d
 8014b84:	3fb3b0f2 	.word	0x3fb3b0f2
 8014b88:	fe231671 	.word	0xfe231671
 8014b8c:	3fbc71c6 	.word	0x3fbc71c6
 8014b90:	9998ebc4 	.word	0x9998ebc4
 8014b94:	3fc99999 	.word	0x3fc99999
 8014b98:	54442d18 	.word	0x54442d18
 8014b9c:	bff921fb 	.word	0xbff921fb
 8014ba0:	440fffff 	.word	0x440fffff
 8014ba4:	7ff00000 	.word	0x7ff00000
 8014ba8:	3fdbffff 	.word	0x3fdbffff
 8014bac:	3ff00000 	.word	0x3ff00000
 8014bb0:	3ff2ffff 	.word	0x3ff2ffff
 8014bb4:	40038000 	.word	0x40038000
 8014bb8:	3ff80000 	.word	0x3ff80000
 8014bbc:	bff00000 	.word	0xbff00000
 8014bc0:	080160e0 	.word	0x080160e0
 8014bc4:	08016100 	.word	0x08016100

08014bc8 <scalbn>:
 8014bc8:	b570      	push	{r4, r5, r6, lr}
 8014bca:	ec55 4b10 	vmov	r4, r5, d0
 8014bce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014bd2:	4606      	mov	r6, r0
 8014bd4:	462b      	mov	r3, r5
 8014bd6:	b991      	cbnz	r1, 8014bfe <scalbn+0x36>
 8014bd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014bdc:	4323      	orrs	r3, r4
 8014bde:	d03d      	beq.n	8014c5c <scalbn+0x94>
 8014be0:	4b35      	ldr	r3, [pc, #212]	@ (8014cb8 <scalbn+0xf0>)
 8014be2:	4620      	mov	r0, r4
 8014be4:	4629      	mov	r1, r5
 8014be6:	2200      	movs	r2, #0
 8014be8:	f7eb fd16 	bl	8000618 <__aeabi_dmul>
 8014bec:	4b33      	ldr	r3, [pc, #204]	@ (8014cbc <scalbn+0xf4>)
 8014bee:	429e      	cmp	r6, r3
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	460d      	mov	r5, r1
 8014bf4:	da0f      	bge.n	8014c16 <scalbn+0x4e>
 8014bf6:	a328      	add	r3, pc, #160	@ (adr r3, 8014c98 <scalbn+0xd0>)
 8014bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bfc:	e01e      	b.n	8014c3c <scalbn+0x74>
 8014bfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014c02:	4291      	cmp	r1, r2
 8014c04:	d10b      	bne.n	8014c1e <scalbn+0x56>
 8014c06:	4622      	mov	r2, r4
 8014c08:	4620      	mov	r0, r4
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	f7eb fb4e 	bl	80002ac <__adddf3>
 8014c10:	4604      	mov	r4, r0
 8014c12:	460d      	mov	r5, r1
 8014c14:	e022      	b.n	8014c5c <scalbn+0x94>
 8014c16:	460b      	mov	r3, r1
 8014c18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014c1c:	3936      	subs	r1, #54	@ 0x36
 8014c1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014c22:	4296      	cmp	r6, r2
 8014c24:	dd0d      	ble.n	8014c42 <scalbn+0x7a>
 8014c26:	2d00      	cmp	r5, #0
 8014c28:	a11d      	add	r1, pc, #116	@ (adr r1, 8014ca0 <scalbn+0xd8>)
 8014c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c2e:	da02      	bge.n	8014c36 <scalbn+0x6e>
 8014c30:	a11d      	add	r1, pc, #116	@ (adr r1, 8014ca8 <scalbn+0xe0>)
 8014c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c36:	a31a      	add	r3, pc, #104	@ (adr r3, 8014ca0 <scalbn+0xd8>)
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	f7eb fcec 	bl	8000618 <__aeabi_dmul>
 8014c40:	e7e6      	b.n	8014c10 <scalbn+0x48>
 8014c42:	1872      	adds	r2, r6, r1
 8014c44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014c48:	428a      	cmp	r2, r1
 8014c4a:	dcec      	bgt.n	8014c26 <scalbn+0x5e>
 8014c4c:	2a00      	cmp	r2, #0
 8014c4e:	dd08      	ble.n	8014c62 <scalbn+0x9a>
 8014c50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014c54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014c58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014c5c:	ec45 4b10 	vmov	d0, r4, r5
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
 8014c62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014c66:	da08      	bge.n	8014c7a <scalbn+0xb2>
 8014c68:	2d00      	cmp	r5, #0
 8014c6a:	a10b      	add	r1, pc, #44	@ (adr r1, 8014c98 <scalbn+0xd0>)
 8014c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c70:	dac1      	bge.n	8014bf6 <scalbn+0x2e>
 8014c72:	a10f      	add	r1, pc, #60	@ (adr r1, 8014cb0 <scalbn+0xe8>)
 8014c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c78:	e7bd      	b.n	8014bf6 <scalbn+0x2e>
 8014c7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014c7e:	3236      	adds	r2, #54	@ 0x36
 8014c80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014c84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014c88:	4620      	mov	r0, r4
 8014c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc0 <scalbn+0xf8>)
 8014c8c:	4629      	mov	r1, r5
 8014c8e:	2200      	movs	r2, #0
 8014c90:	e7d4      	b.n	8014c3c <scalbn+0x74>
 8014c92:	bf00      	nop
 8014c94:	f3af 8000 	nop.w
 8014c98:	c2f8f359 	.word	0xc2f8f359
 8014c9c:	01a56e1f 	.word	0x01a56e1f
 8014ca0:	8800759c 	.word	0x8800759c
 8014ca4:	7e37e43c 	.word	0x7e37e43c
 8014ca8:	8800759c 	.word	0x8800759c
 8014cac:	fe37e43c 	.word	0xfe37e43c
 8014cb0:	c2f8f359 	.word	0xc2f8f359
 8014cb4:	81a56e1f 	.word	0x81a56e1f
 8014cb8:	43500000 	.word	0x43500000
 8014cbc:	ffff3cb0 	.word	0xffff3cb0
 8014cc0:	3c900000 	.word	0x3c900000

08014cc4 <with_errno>:
 8014cc4:	b510      	push	{r4, lr}
 8014cc6:	ed2d 8b02 	vpush	{d8}
 8014cca:	eeb0 8a40 	vmov.f32	s16, s0
 8014cce:	eef0 8a60 	vmov.f32	s17, s1
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	f7fa fe9c 	bl	800fa10 <__errno>
 8014cd8:	eeb0 0a48 	vmov.f32	s0, s16
 8014cdc:	eef0 0a68 	vmov.f32	s1, s17
 8014ce0:	ecbd 8b02 	vpop	{d8}
 8014ce4:	6004      	str	r4, [r0, #0]
 8014ce6:	bd10      	pop	{r4, pc}

08014ce8 <xflow>:
 8014ce8:	4603      	mov	r3, r0
 8014cea:	b507      	push	{r0, r1, r2, lr}
 8014cec:	ec51 0b10 	vmov	r0, r1, d0
 8014cf0:	b183      	cbz	r3, 8014d14 <xflow+0x2c>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8014cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d00:	f7eb fc8a 	bl	8000618 <__aeabi_dmul>
 8014d04:	ec41 0b10 	vmov	d0, r0, r1
 8014d08:	2022      	movs	r0, #34	@ 0x22
 8014d0a:	b003      	add	sp, #12
 8014d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d10:	f7ff bfd8 	b.w	8014cc4 <with_errno>
 8014d14:	4602      	mov	r2, r0
 8014d16:	460b      	mov	r3, r1
 8014d18:	e7ee      	b.n	8014cf8 <xflow+0x10>
 8014d1a:	0000      	movs	r0, r0
 8014d1c:	0000      	movs	r0, r0
	...

08014d20 <__math_uflow>:
 8014d20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014d28 <__math_uflow+0x8>
 8014d24:	f7ff bfe0 	b.w	8014ce8 <xflow>
 8014d28:	00000000 	.word	0x00000000
 8014d2c:	10000000 	.word	0x10000000

08014d30 <__math_oflow>:
 8014d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014d38 <__math_oflow+0x8>
 8014d34:	f7ff bfd8 	b.w	8014ce8 <xflow>
 8014d38:	00000000 	.word	0x00000000
 8014d3c:	70000000 	.word	0x70000000

08014d40 <__kernel_rem_pio2>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	ed2d 8b02 	vpush	{d8}
 8014d48:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014d4c:	f112 0f14 	cmn.w	r2, #20
 8014d50:	9306      	str	r3, [sp, #24]
 8014d52:	9104      	str	r1, [sp, #16]
 8014d54:	4bbe      	ldr	r3, [pc, #760]	@ (8015050 <__kernel_rem_pio2+0x310>)
 8014d56:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014d58:	9008      	str	r0, [sp, #32]
 8014d5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	9b06      	ldr	r3, [sp, #24]
 8014d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8014d66:	bfa8      	it	ge
 8014d68:	1ed4      	subge	r4, r2, #3
 8014d6a:	9305      	str	r3, [sp, #20]
 8014d6c:	bfb2      	itee	lt
 8014d6e:	2400      	movlt	r4, #0
 8014d70:	2318      	movge	r3, #24
 8014d72:	fb94 f4f3 	sdivge	r4, r4, r3
 8014d76:	f06f 0317 	mvn.w	r3, #23
 8014d7a:	fb04 3303 	mla	r3, r4, r3, r3
 8014d7e:	eb03 0b02 	add.w	fp, r3, r2
 8014d82:	9b00      	ldr	r3, [sp, #0]
 8014d84:	9a05      	ldr	r2, [sp, #20]
 8014d86:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8015040 <__kernel_rem_pio2+0x300>
 8014d8a:	eb03 0802 	add.w	r8, r3, r2
 8014d8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014d90:	1aa7      	subs	r7, r4, r2
 8014d92:	ae20      	add	r6, sp, #128	@ 0x80
 8014d94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014d98:	2500      	movs	r5, #0
 8014d9a:	4545      	cmp	r5, r8
 8014d9c:	dd13      	ble.n	8014dc6 <__kernel_rem_pio2+0x86>
 8014d9e:	9b06      	ldr	r3, [sp, #24]
 8014da0:	aa20      	add	r2, sp, #128	@ 0x80
 8014da2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014da6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014daa:	f04f 0800 	mov.w	r8, #0
 8014dae:	9b00      	ldr	r3, [sp, #0]
 8014db0:	4598      	cmp	r8, r3
 8014db2:	dc31      	bgt.n	8014e18 <__kernel_rem_pio2+0xd8>
 8014db4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8015040 <__kernel_rem_pio2+0x300>
 8014db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014dc0:	462f      	mov	r7, r5
 8014dc2:	2600      	movs	r6, #0
 8014dc4:	e01b      	b.n	8014dfe <__kernel_rem_pio2+0xbe>
 8014dc6:	42ef      	cmn	r7, r5
 8014dc8:	d407      	bmi.n	8014dda <__kernel_rem_pio2+0x9a>
 8014dca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014dce:	f7eb fbb9 	bl	8000544 <__aeabi_i2d>
 8014dd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014dd6:	3501      	adds	r5, #1
 8014dd8:	e7df      	b.n	8014d9a <__kernel_rem_pio2+0x5a>
 8014dda:	ec51 0b18 	vmov	r0, r1, d8
 8014dde:	e7f8      	b.n	8014dd2 <__kernel_rem_pio2+0x92>
 8014de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014de4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014de8:	f7eb fc16 	bl	8000618 <__aeabi_dmul>
 8014dec:	4602      	mov	r2, r0
 8014dee:	460b      	mov	r3, r1
 8014df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014df4:	f7eb fa5a 	bl	80002ac <__adddf3>
 8014df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014dfc:	3601      	adds	r6, #1
 8014dfe:	9b05      	ldr	r3, [sp, #20]
 8014e00:	429e      	cmp	r6, r3
 8014e02:	f1a7 0708 	sub.w	r7, r7, #8
 8014e06:	ddeb      	ble.n	8014de0 <__kernel_rem_pio2+0xa0>
 8014e08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e0c:	f108 0801 	add.w	r8, r8, #1
 8014e10:	ecaa 7b02 	vstmia	sl!, {d7}
 8014e14:	3508      	adds	r5, #8
 8014e16:	e7ca      	b.n	8014dae <__kernel_rem_pio2+0x6e>
 8014e18:	9b00      	ldr	r3, [sp, #0]
 8014e1a:	f8dd 8000 	ldr.w	r8, [sp]
 8014e1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8014e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014e28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e2e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e34:	ab98      	add	r3, sp, #608	@ 0x260
 8014e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014e3a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014e3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e42:	ac0c      	add	r4, sp, #48	@ 0x30
 8014e44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014e46:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014e4a:	46a1      	mov	r9, r4
 8014e4c:	46c2      	mov	sl, r8
 8014e4e:	f1ba 0f00 	cmp.w	sl, #0
 8014e52:	f1a5 0508 	sub.w	r5, r5, #8
 8014e56:	dc77      	bgt.n	8014f48 <__kernel_rem_pio2+0x208>
 8014e58:	4658      	mov	r0, fp
 8014e5a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014e5e:	f7ff feb3 	bl	8014bc8 <scalbn>
 8014e62:	ec57 6b10 	vmov	r6, r7, d0
 8014e66:	2200      	movs	r2, #0
 8014e68:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014e6c:	4630      	mov	r0, r6
 8014e6e:	4639      	mov	r1, r7
 8014e70:	f7eb fbd2 	bl	8000618 <__aeabi_dmul>
 8014e74:	ec41 0b10 	vmov	d0, r0, r1
 8014e78:	f000 faba 	bl	80153f0 <floor>
 8014e7c:	4b75      	ldr	r3, [pc, #468]	@ (8015054 <__kernel_rem_pio2+0x314>)
 8014e7e:	ec51 0b10 	vmov	r0, r1, d0
 8014e82:	2200      	movs	r2, #0
 8014e84:	f7eb fbc8 	bl	8000618 <__aeabi_dmul>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	4639      	mov	r1, r7
 8014e90:	f7eb fa0a 	bl	80002a8 <__aeabi_dsub>
 8014e94:	460f      	mov	r7, r1
 8014e96:	4606      	mov	r6, r0
 8014e98:	f7eb fe6e 	bl	8000b78 <__aeabi_d2iz>
 8014e9c:	9002      	str	r0, [sp, #8]
 8014e9e:	f7eb fb51 	bl	8000544 <__aeabi_i2d>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	4639      	mov	r1, r7
 8014eaa:	f7eb f9fd 	bl	80002a8 <__aeabi_dsub>
 8014eae:	f1bb 0f00 	cmp.w	fp, #0
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	460f      	mov	r7, r1
 8014eb6:	dd6c      	ble.n	8014f92 <__kernel_rem_pio2+0x252>
 8014eb8:	f108 31ff 	add.w	r1, r8, #4294967295
 8014ebc:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ebe:	9d02      	ldr	r5, [sp, #8]
 8014ec0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ec4:	f1cb 0018 	rsb	r0, fp, #24
 8014ec8:	fa43 f200 	asr.w	r2, r3, r0
 8014ecc:	4415      	add	r5, r2
 8014ece:	4082      	lsls	r2, r0
 8014ed0:	1a9b      	subs	r3, r3, r2
 8014ed2:	aa0c      	add	r2, sp, #48	@ 0x30
 8014ed4:	9502      	str	r5, [sp, #8]
 8014ed6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014eda:	f1cb 0217 	rsb	r2, fp, #23
 8014ede:	fa43 f902 	asr.w	r9, r3, r2
 8014ee2:	f1b9 0f00 	cmp.w	r9, #0
 8014ee6:	dd64      	ble.n	8014fb2 <__kernel_rem_pio2+0x272>
 8014ee8:	9b02      	ldr	r3, [sp, #8]
 8014eea:	2200      	movs	r2, #0
 8014eec:	3301      	adds	r3, #1
 8014eee:	9302      	str	r3, [sp, #8]
 8014ef0:	4615      	mov	r5, r2
 8014ef2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014ef6:	4590      	cmp	r8, r2
 8014ef8:	f300 80b8 	bgt.w	801506c <__kernel_rem_pio2+0x32c>
 8014efc:	f1bb 0f00 	cmp.w	fp, #0
 8014f00:	dd07      	ble.n	8014f12 <__kernel_rem_pio2+0x1d2>
 8014f02:	f1bb 0f01 	cmp.w	fp, #1
 8014f06:	f000 80bf 	beq.w	8015088 <__kernel_rem_pio2+0x348>
 8014f0a:	f1bb 0f02 	cmp.w	fp, #2
 8014f0e:	f000 80c6 	beq.w	801509e <__kernel_rem_pio2+0x35e>
 8014f12:	f1b9 0f02 	cmp.w	r9, #2
 8014f16:	d14c      	bne.n	8014fb2 <__kernel_rem_pio2+0x272>
 8014f18:	4632      	mov	r2, r6
 8014f1a:	463b      	mov	r3, r7
 8014f1c:	494e      	ldr	r1, [pc, #312]	@ (8015058 <__kernel_rem_pio2+0x318>)
 8014f1e:	2000      	movs	r0, #0
 8014f20:	f7eb f9c2 	bl	80002a8 <__aeabi_dsub>
 8014f24:	4606      	mov	r6, r0
 8014f26:	460f      	mov	r7, r1
 8014f28:	2d00      	cmp	r5, #0
 8014f2a:	d042      	beq.n	8014fb2 <__kernel_rem_pio2+0x272>
 8014f2c:	4658      	mov	r0, fp
 8014f2e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8015048 <__kernel_rem_pio2+0x308>
 8014f32:	f7ff fe49 	bl	8014bc8 <scalbn>
 8014f36:	4630      	mov	r0, r6
 8014f38:	4639      	mov	r1, r7
 8014f3a:	ec53 2b10 	vmov	r2, r3, d0
 8014f3e:	f7eb f9b3 	bl	80002a8 <__aeabi_dsub>
 8014f42:	4606      	mov	r6, r0
 8014f44:	460f      	mov	r7, r1
 8014f46:	e034      	b.n	8014fb2 <__kernel_rem_pio2+0x272>
 8014f48:	4b44      	ldr	r3, [pc, #272]	@ (801505c <__kernel_rem_pio2+0x31c>)
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f50:	f7eb fb62 	bl	8000618 <__aeabi_dmul>
 8014f54:	f7eb fe10 	bl	8000b78 <__aeabi_d2iz>
 8014f58:	f7eb faf4 	bl	8000544 <__aeabi_i2d>
 8014f5c:	4b40      	ldr	r3, [pc, #256]	@ (8015060 <__kernel_rem_pio2+0x320>)
 8014f5e:	2200      	movs	r2, #0
 8014f60:	4606      	mov	r6, r0
 8014f62:	460f      	mov	r7, r1
 8014f64:	f7eb fb58 	bl	8000618 <__aeabi_dmul>
 8014f68:	4602      	mov	r2, r0
 8014f6a:	460b      	mov	r3, r1
 8014f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f70:	f7eb f99a 	bl	80002a8 <__aeabi_dsub>
 8014f74:	f7eb fe00 	bl	8000b78 <__aeabi_d2iz>
 8014f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f7c:	f849 0b04 	str.w	r0, [r9], #4
 8014f80:	4639      	mov	r1, r7
 8014f82:	4630      	mov	r0, r6
 8014f84:	f7eb f992 	bl	80002ac <__adddf3>
 8014f88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f90:	e75d      	b.n	8014e4e <__kernel_rem_pio2+0x10e>
 8014f92:	d107      	bne.n	8014fa4 <__kernel_rem_pio2+0x264>
 8014f94:	f108 33ff 	add.w	r3, r8, #4294967295
 8014f98:	aa0c      	add	r2, sp, #48	@ 0x30
 8014f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f9e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014fa2:	e79e      	b.n	8014ee2 <__kernel_rem_pio2+0x1a2>
 8014fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8015064 <__kernel_rem_pio2+0x324>)
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	f7eb fdbc 	bl	8000b24 <__aeabi_dcmpge>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d143      	bne.n	8015038 <__kernel_rem_pio2+0x2f8>
 8014fb0:	4681      	mov	r9, r0
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	4639      	mov	r1, r7
 8014fba:	f7eb fd95 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	f000 80bf 	beq.w	8015142 <__kernel_rem_pio2+0x402>
 8014fc4:	f108 33ff 	add.w	r3, r8, #4294967295
 8014fc8:	2200      	movs	r2, #0
 8014fca:	9900      	ldr	r1, [sp, #0]
 8014fcc:	428b      	cmp	r3, r1
 8014fce:	da6e      	bge.n	80150ae <__kernel_rem_pio2+0x36e>
 8014fd0:	2a00      	cmp	r2, #0
 8014fd2:	f000 8089 	beq.w	80150e8 <__kernel_rem_pio2+0x3a8>
 8014fd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fda:	ab0c      	add	r3, sp, #48	@ 0x30
 8014fdc:	f1ab 0b18 	sub.w	fp, fp, #24
 8014fe0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d0f6      	beq.n	8014fd6 <__kernel_rem_pio2+0x296>
 8014fe8:	4658      	mov	r0, fp
 8014fea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015048 <__kernel_rem_pio2+0x308>
 8014fee:	f7ff fdeb 	bl	8014bc8 <scalbn>
 8014ff2:	f108 0301 	add.w	r3, r8, #1
 8014ff6:	00da      	lsls	r2, r3, #3
 8014ff8:	9205      	str	r2, [sp, #20]
 8014ffa:	ec55 4b10 	vmov	r4, r5, d0
 8014ffe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8015000:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801505c <__kernel_rem_pio2+0x31c>
 8015004:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8015008:	4646      	mov	r6, r8
 801500a:	f04f 0a00 	mov.w	sl, #0
 801500e:	2e00      	cmp	r6, #0
 8015010:	f280 80cf 	bge.w	80151b2 <__kernel_rem_pio2+0x472>
 8015014:	4644      	mov	r4, r8
 8015016:	2c00      	cmp	r4, #0
 8015018:	f2c0 80fd 	blt.w	8015216 <__kernel_rem_pio2+0x4d6>
 801501c:	4b12      	ldr	r3, [pc, #72]	@ (8015068 <__kernel_rem_pio2+0x328>)
 801501e:	461f      	mov	r7, r3
 8015020:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015026:	9306      	str	r3, [sp, #24]
 8015028:	f04f 0a00 	mov.w	sl, #0
 801502c:	f04f 0b00 	mov.w	fp, #0
 8015030:	2600      	movs	r6, #0
 8015032:	eba8 0504 	sub.w	r5, r8, r4
 8015036:	e0e2      	b.n	80151fe <__kernel_rem_pio2+0x4be>
 8015038:	f04f 0902 	mov.w	r9, #2
 801503c:	e754      	b.n	8014ee8 <__kernel_rem_pio2+0x1a8>
 801503e:	bf00      	nop
	...
 801504c:	3ff00000 	.word	0x3ff00000
 8015050:	08016160 	.word	0x08016160
 8015054:	40200000 	.word	0x40200000
 8015058:	3ff00000 	.word	0x3ff00000
 801505c:	3e700000 	.word	0x3e700000
 8015060:	41700000 	.word	0x41700000
 8015064:	3fe00000 	.word	0x3fe00000
 8015068:	08016120 	.word	0x08016120
 801506c:	f854 3b04 	ldr.w	r3, [r4], #4
 8015070:	b945      	cbnz	r5, 8015084 <__kernel_rem_pio2+0x344>
 8015072:	b123      	cbz	r3, 801507e <__kernel_rem_pio2+0x33e>
 8015074:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015078:	f844 3c04 	str.w	r3, [r4, #-4]
 801507c:	2301      	movs	r3, #1
 801507e:	3201      	adds	r2, #1
 8015080:	461d      	mov	r5, r3
 8015082:	e738      	b.n	8014ef6 <__kernel_rem_pio2+0x1b6>
 8015084:	1acb      	subs	r3, r1, r3
 8015086:	e7f7      	b.n	8015078 <__kernel_rem_pio2+0x338>
 8015088:	f108 32ff 	add.w	r2, r8, #4294967295
 801508c:	ab0c      	add	r3, sp, #48	@ 0x30
 801508e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015092:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015096:	a90c      	add	r1, sp, #48	@ 0x30
 8015098:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801509c:	e739      	b.n	8014f12 <__kernel_rem_pio2+0x1d2>
 801509e:	f108 32ff 	add.w	r2, r8, #4294967295
 80150a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80150a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80150ac:	e7f3      	b.n	8015096 <__kernel_rem_pio2+0x356>
 80150ae:	a90c      	add	r1, sp, #48	@ 0x30
 80150b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80150b4:	3b01      	subs	r3, #1
 80150b6:	430a      	orrs	r2, r1
 80150b8:	e787      	b.n	8014fca <__kernel_rem_pio2+0x28a>
 80150ba:	3401      	adds	r4, #1
 80150bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80150c0:	2a00      	cmp	r2, #0
 80150c2:	d0fa      	beq.n	80150ba <__kernel_rem_pio2+0x37a>
 80150c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80150ca:	eb0d 0503 	add.w	r5, sp, r3
 80150ce:	9b06      	ldr	r3, [sp, #24]
 80150d0:	aa20      	add	r2, sp, #128	@ 0x80
 80150d2:	4443      	add	r3, r8
 80150d4:	f108 0701 	add.w	r7, r8, #1
 80150d8:	3d98      	subs	r5, #152	@ 0x98
 80150da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80150de:	4444      	add	r4, r8
 80150e0:	42bc      	cmp	r4, r7
 80150e2:	da04      	bge.n	80150ee <__kernel_rem_pio2+0x3ae>
 80150e4:	46a0      	mov	r8, r4
 80150e6:	e6a2      	b.n	8014e2e <__kernel_rem_pio2+0xee>
 80150e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150ea:	2401      	movs	r4, #1
 80150ec:	e7e6      	b.n	80150bc <__kernel_rem_pio2+0x37c>
 80150ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80150f4:	f7eb fa26 	bl	8000544 <__aeabi_i2d>
 80150f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80153c0 <__kernel_rem_pio2+0x680>
 80150fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015100:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015108:	46b2      	mov	sl, r6
 801510a:	f04f 0800 	mov.w	r8, #0
 801510e:	9b05      	ldr	r3, [sp, #20]
 8015110:	4598      	cmp	r8, r3
 8015112:	dd05      	ble.n	8015120 <__kernel_rem_pio2+0x3e0>
 8015114:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015118:	3701      	adds	r7, #1
 801511a:	eca5 7b02 	vstmia	r5!, {d7}
 801511e:	e7df      	b.n	80150e0 <__kernel_rem_pio2+0x3a0>
 8015120:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8015124:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015128:	f7eb fa76 	bl	8000618 <__aeabi_dmul>
 801512c:	4602      	mov	r2, r0
 801512e:	460b      	mov	r3, r1
 8015130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015134:	f7eb f8ba 	bl	80002ac <__adddf3>
 8015138:	f108 0801 	add.w	r8, r8, #1
 801513c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015140:	e7e5      	b.n	801510e <__kernel_rem_pio2+0x3ce>
 8015142:	f1cb 0000 	rsb	r0, fp, #0
 8015146:	ec47 6b10 	vmov	d0, r6, r7
 801514a:	f7ff fd3d 	bl	8014bc8 <scalbn>
 801514e:	ec55 4b10 	vmov	r4, r5, d0
 8015152:	4b9d      	ldr	r3, [pc, #628]	@ (80153c8 <__kernel_rem_pio2+0x688>)
 8015154:	2200      	movs	r2, #0
 8015156:	4620      	mov	r0, r4
 8015158:	4629      	mov	r1, r5
 801515a:	f7eb fce3 	bl	8000b24 <__aeabi_dcmpge>
 801515e:	b300      	cbz	r0, 80151a2 <__kernel_rem_pio2+0x462>
 8015160:	4b9a      	ldr	r3, [pc, #616]	@ (80153cc <__kernel_rem_pio2+0x68c>)
 8015162:	2200      	movs	r2, #0
 8015164:	4620      	mov	r0, r4
 8015166:	4629      	mov	r1, r5
 8015168:	f7eb fa56 	bl	8000618 <__aeabi_dmul>
 801516c:	f7eb fd04 	bl	8000b78 <__aeabi_d2iz>
 8015170:	4606      	mov	r6, r0
 8015172:	f7eb f9e7 	bl	8000544 <__aeabi_i2d>
 8015176:	4b94      	ldr	r3, [pc, #592]	@ (80153c8 <__kernel_rem_pio2+0x688>)
 8015178:	2200      	movs	r2, #0
 801517a:	f7eb fa4d 	bl	8000618 <__aeabi_dmul>
 801517e:	460b      	mov	r3, r1
 8015180:	4602      	mov	r2, r0
 8015182:	4629      	mov	r1, r5
 8015184:	4620      	mov	r0, r4
 8015186:	f7eb f88f 	bl	80002a8 <__aeabi_dsub>
 801518a:	f7eb fcf5 	bl	8000b78 <__aeabi_d2iz>
 801518e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015190:	f10b 0b18 	add.w	fp, fp, #24
 8015194:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015198:	f108 0801 	add.w	r8, r8, #1
 801519c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80151a0:	e722      	b.n	8014fe8 <__kernel_rem_pio2+0x2a8>
 80151a2:	4620      	mov	r0, r4
 80151a4:	4629      	mov	r1, r5
 80151a6:	f7eb fce7 	bl	8000b78 <__aeabi_d2iz>
 80151aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80151ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80151b0:	e71a      	b.n	8014fe8 <__kernel_rem_pio2+0x2a8>
 80151b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80151b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80151b8:	f7eb f9c4 	bl	8000544 <__aeabi_i2d>
 80151bc:	4622      	mov	r2, r4
 80151be:	462b      	mov	r3, r5
 80151c0:	f7eb fa2a 	bl	8000618 <__aeabi_dmul>
 80151c4:	4652      	mov	r2, sl
 80151c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80151ca:	465b      	mov	r3, fp
 80151cc:	4620      	mov	r0, r4
 80151ce:	4629      	mov	r1, r5
 80151d0:	f7eb fa22 	bl	8000618 <__aeabi_dmul>
 80151d4:	3e01      	subs	r6, #1
 80151d6:	4604      	mov	r4, r0
 80151d8:	460d      	mov	r5, r1
 80151da:	e718      	b.n	801500e <__kernel_rem_pio2+0x2ce>
 80151dc:	9906      	ldr	r1, [sp, #24]
 80151de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80151e2:	9106      	str	r1, [sp, #24]
 80151e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80151e8:	f7eb fa16 	bl	8000618 <__aeabi_dmul>
 80151ec:	4602      	mov	r2, r0
 80151ee:	460b      	mov	r3, r1
 80151f0:	4650      	mov	r0, sl
 80151f2:	4659      	mov	r1, fp
 80151f4:	f7eb f85a 	bl	80002ac <__adddf3>
 80151f8:	3601      	adds	r6, #1
 80151fa:	4682      	mov	sl, r0
 80151fc:	468b      	mov	fp, r1
 80151fe:	9b00      	ldr	r3, [sp, #0]
 8015200:	429e      	cmp	r6, r3
 8015202:	dc01      	bgt.n	8015208 <__kernel_rem_pio2+0x4c8>
 8015204:	42b5      	cmp	r5, r6
 8015206:	dae9      	bge.n	80151dc <__kernel_rem_pio2+0x49c>
 8015208:	ab48      	add	r3, sp, #288	@ 0x120
 801520a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801520e:	e9c5 ab00 	strd	sl, fp, [r5]
 8015212:	3c01      	subs	r4, #1
 8015214:	e6ff      	b.n	8015016 <__kernel_rem_pio2+0x2d6>
 8015216:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015218:	2b02      	cmp	r3, #2
 801521a:	dc0b      	bgt.n	8015234 <__kernel_rem_pio2+0x4f4>
 801521c:	2b00      	cmp	r3, #0
 801521e:	dc39      	bgt.n	8015294 <__kernel_rem_pio2+0x554>
 8015220:	d05d      	beq.n	80152de <__kernel_rem_pio2+0x59e>
 8015222:	9b02      	ldr	r3, [sp, #8]
 8015224:	f003 0007 	and.w	r0, r3, #7
 8015228:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801522c:	ecbd 8b02 	vpop	{d8}
 8015230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015234:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015236:	2b03      	cmp	r3, #3
 8015238:	d1f3      	bne.n	8015222 <__kernel_rem_pio2+0x4e2>
 801523a:	9b05      	ldr	r3, [sp, #20]
 801523c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015240:	eb0d 0403 	add.w	r4, sp, r3
 8015244:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8015248:	4625      	mov	r5, r4
 801524a:	46c2      	mov	sl, r8
 801524c:	f1ba 0f00 	cmp.w	sl, #0
 8015250:	f1a5 0508 	sub.w	r5, r5, #8
 8015254:	dc6b      	bgt.n	801532e <__kernel_rem_pio2+0x5ee>
 8015256:	4645      	mov	r5, r8
 8015258:	2d01      	cmp	r5, #1
 801525a:	f1a4 0408 	sub.w	r4, r4, #8
 801525e:	f300 8087 	bgt.w	8015370 <__kernel_rem_pio2+0x630>
 8015262:	9c05      	ldr	r4, [sp, #20]
 8015264:	ab48      	add	r3, sp, #288	@ 0x120
 8015266:	441c      	add	r4, r3
 8015268:	2000      	movs	r0, #0
 801526a:	2100      	movs	r1, #0
 801526c:	f1b8 0f01 	cmp.w	r8, #1
 8015270:	f300 809c 	bgt.w	80153ac <__kernel_rem_pio2+0x66c>
 8015274:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015278:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801527c:	f1b9 0f00 	cmp.w	r9, #0
 8015280:	f040 80a6 	bne.w	80153d0 <__kernel_rem_pio2+0x690>
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	e9c3 7800 	strd	r7, r8, [r3]
 801528a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801528e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015292:	e7c6      	b.n	8015222 <__kernel_rem_pio2+0x4e2>
 8015294:	9d05      	ldr	r5, [sp, #20]
 8015296:	ab48      	add	r3, sp, #288	@ 0x120
 8015298:	441d      	add	r5, r3
 801529a:	4644      	mov	r4, r8
 801529c:	2000      	movs	r0, #0
 801529e:	2100      	movs	r1, #0
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	da35      	bge.n	8015310 <__kernel_rem_pio2+0x5d0>
 80152a4:	f1b9 0f00 	cmp.w	r9, #0
 80152a8:	d038      	beq.n	801531c <__kernel_rem_pio2+0x5dc>
 80152aa:	4602      	mov	r2, r0
 80152ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80152b0:	9c04      	ldr	r4, [sp, #16]
 80152b2:	e9c4 2300 	strd	r2, r3, [r4]
 80152b6:	4602      	mov	r2, r0
 80152b8:	460b      	mov	r3, r1
 80152ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80152be:	f7ea fff3 	bl	80002a8 <__aeabi_dsub>
 80152c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80152c4:	2401      	movs	r4, #1
 80152c6:	45a0      	cmp	r8, r4
 80152c8:	da2b      	bge.n	8015322 <__kernel_rem_pio2+0x5e2>
 80152ca:	f1b9 0f00 	cmp.w	r9, #0
 80152ce:	d002      	beq.n	80152d6 <__kernel_rem_pio2+0x596>
 80152d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80152d4:	4619      	mov	r1, r3
 80152d6:	9b04      	ldr	r3, [sp, #16]
 80152d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80152dc:	e7a1      	b.n	8015222 <__kernel_rem_pio2+0x4e2>
 80152de:	9c05      	ldr	r4, [sp, #20]
 80152e0:	ab48      	add	r3, sp, #288	@ 0x120
 80152e2:	441c      	add	r4, r3
 80152e4:	2000      	movs	r0, #0
 80152e6:	2100      	movs	r1, #0
 80152e8:	f1b8 0f00 	cmp.w	r8, #0
 80152ec:	da09      	bge.n	8015302 <__kernel_rem_pio2+0x5c2>
 80152ee:	f1b9 0f00 	cmp.w	r9, #0
 80152f2:	d002      	beq.n	80152fa <__kernel_rem_pio2+0x5ba>
 80152f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80152f8:	4619      	mov	r1, r3
 80152fa:	9b04      	ldr	r3, [sp, #16]
 80152fc:	e9c3 0100 	strd	r0, r1, [r3]
 8015300:	e78f      	b.n	8015222 <__kernel_rem_pio2+0x4e2>
 8015302:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015306:	f7ea ffd1 	bl	80002ac <__adddf3>
 801530a:	f108 38ff 	add.w	r8, r8, #4294967295
 801530e:	e7eb      	b.n	80152e8 <__kernel_rem_pio2+0x5a8>
 8015310:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8015314:	f7ea ffca 	bl	80002ac <__adddf3>
 8015318:	3c01      	subs	r4, #1
 801531a:	e7c1      	b.n	80152a0 <__kernel_rem_pio2+0x560>
 801531c:	4602      	mov	r2, r0
 801531e:	460b      	mov	r3, r1
 8015320:	e7c6      	b.n	80152b0 <__kernel_rem_pio2+0x570>
 8015322:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015326:	f7ea ffc1 	bl	80002ac <__adddf3>
 801532a:	3401      	adds	r4, #1
 801532c:	e7cb      	b.n	80152c6 <__kernel_rem_pio2+0x586>
 801532e:	ed95 7b00 	vldr	d7, [r5]
 8015332:	ed8d 7b00 	vstr	d7, [sp]
 8015336:	ed95 7b02 	vldr	d7, [r5, #8]
 801533a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801533e:	ec53 2b17 	vmov	r2, r3, d7
 8015342:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015346:	f7ea ffb1 	bl	80002ac <__adddf3>
 801534a:	4602      	mov	r2, r0
 801534c:	460b      	mov	r3, r1
 801534e:	4606      	mov	r6, r0
 8015350:	460f      	mov	r7, r1
 8015352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015356:	f7ea ffa7 	bl	80002a8 <__aeabi_dsub>
 801535a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801535e:	f7ea ffa5 	bl	80002ac <__adddf3>
 8015362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015366:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801536a:	e9c5 6700 	strd	r6, r7, [r5]
 801536e:	e76d      	b.n	801524c <__kernel_rem_pio2+0x50c>
 8015370:	ed94 7b00 	vldr	d7, [r4]
 8015374:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015378:	ec51 0b17 	vmov	r0, r1, d7
 801537c:	4652      	mov	r2, sl
 801537e:	465b      	mov	r3, fp
 8015380:	ed8d 7b00 	vstr	d7, [sp]
 8015384:	f7ea ff92 	bl	80002ac <__adddf3>
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
 801538c:	4606      	mov	r6, r0
 801538e:	460f      	mov	r7, r1
 8015390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015394:	f7ea ff88 	bl	80002a8 <__aeabi_dsub>
 8015398:	4652      	mov	r2, sl
 801539a:	465b      	mov	r3, fp
 801539c:	f7ea ff86 	bl	80002ac <__adddf3>
 80153a0:	3d01      	subs	r5, #1
 80153a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80153a6:	e9c4 6700 	strd	r6, r7, [r4]
 80153aa:	e755      	b.n	8015258 <__kernel_rem_pio2+0x518>
 80153ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153b0:	f7ea ff7c 	bl	80002ac <__adddf3>
 80153b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80153b8:	e758      	b.n	801526c <__kernel_rem_pio2+0x52c>
 80153ba:	bf00      	nop
 80153bc:	f3af 8000 	nop.w
	...
 80153c8:	41700000 	.word	0x41700000
 80153cc:	3e700000 	.word	0x3e700000
 80153d0:	9b04      	ldr	r3, [sp, #16]
 80153d2:	9a04      	ldr	r2, [sp, #16]
 80153d4:	601f      	str	r7, [r3, #0]
 80153d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80153da:	605c      	str	r4, [r3, #4]
 80153dc:	609d      	str	r5, [r3, #8]
 80153de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80153e2:	60d3      	str	r3, [r2, #12]
 80153e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80153e8:	6110      	str	r0, [r2, #16]
 80153ea:	6153      	str	r3, [r2, #20]
 80153ec:	e719      	b.n	8015222 <__kernel_rem_pio2+0x4e2>
 80153ee:	bf00      	nop

080153f0 <floor>:
 80153f0:	ec51 0b10 	vmov	r0, r1, d0
 80153f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80153f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8015400:	2e13      	cmp	r6, #19
 8015402:	460c      	mov	r4, r1
 8015404:	4605      	mov	r5, r0
 8015406:	4680      	mov	r8, r0
 8015408:	dc34      	bgt.n	8015474 <floor+0x84>
 801540a:	2e00      	cmp	r6, #0
 801540c:	da17      	bge.n	801543e <floor+0x4e>
 801540e:	a332      	add	r3, pc, #200	@ (adr r3, 80154d8 <floor+0xe8>)
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f7ea ff4a 	bl	80002ac <__adddf3>
 8015418:	2200      	movs	r2, #0
 801541a:	2300      	movs	r3, #0
 801541c:	f7eb fb8c 	bl	8000b38 <__aeabi_dcmpgt>
 8015420:	b150      	cbz	r0, 8015438 <floor+0x48>
 8015422:	2c00      	cmp	r4, #0
 8015424:	da55      	bge.n	80154d2 <floor+0xe2>
 8015426:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801542a:	432c      	orrs	r4, r5
 801542c:	2500      	movs	r5, #0
 801542e:	42ac      	cmp	r4, r5
 8015430:	4c2b      	ldr	r4, [pc, #172]	@ (80154e0 <floor+0xf0>)
 8015432:	bf08      	it	eq
 8015434:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8015438:	4621      	mov	r1, r4
 801543a:	4628      	mov	r0, r5
 801543c:	e023      	b.n	8015486 <floor+0x96>
 801543e:	4f29      	ldr	r7, [pc, #164]	@ (80154e4 <floor+0xf4>)
 8015440:	4137      	asrs	r7, r6
 8015442:	ea01 0307 	and.w	r3, r1, r7
 8015446:	4303      	orrs	r3, r0
 8015448:	d01d      	beq.n	8015486 <floor+0x96>
 801544a:	a323      	add	r3, pc, #140	@ (adr r3, 80154d8 <floor+0xe8>)
 801544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015450:	f7ea ff2c 	bl	80002ac <__adddf3>
 8015454:	2200      	movs	r2, #0
 8015456:	2300      	movs	r3, #0
 8015458:	f7eb fb6e 	bl	8000b38 <__aeabi_dcmpgt>
 801545c:	2800      	cmp	r0, #0
 801545e:	d0eb      	beq.n	8015438 <floor+0x48>
 8015460:	2c00      	cmp	r4, #0
 8015462:	bfbe      	ittt	lt
 8015464:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8015468:	4133      	asrlt	r3, r6
 801546a:	18e4      	addlt	r4, r4, r3
 801546c:	ea24 0407 	bic.w	r4, r4, r7
 8015470:	2500      	movs	r5, #0
 8015472:	e7e1      	b.n	8015438 <floor+0x48>
 8015474:	2e33      	cmp	r6, #51	@ 0x33
 8015476:	dd0a      	ble.n	801548e <floor+0x9e>
 8015478:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801547c:	d103      	bne.n	8015486 <floor+0x96>
 801547e:	4602      	mov	r2, r0
 8015480:	460b      	mov	r3, r1
 8015482:	f7ea ff13 	bl	80002ac <__adddf3>
 8015486:	ec41 0b10 	vmov	d0, r0, r1
 801548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801548e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8015492:	f04f 37ff 	mov.w	r7, #4294967295
 8015496:	40df      	lsrs	r7, r3
 8015498:	4207      	tst	r7, r0
 801549a:	d0f4      	beq.n	8015486 <floor+0x96>
 801549c:	a30e      	add	r3, pc, #56	@ (adr r3, 80154d8 <floor+0xe8>)
 801549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a2:	f7ea ff03 	bl	80002ac <__adddf3>
 80154a6:	2200      	movs	r2, #0
 80154a8:	2300      	movs	r3, #0
 80154aa:	f7eb fb45 	bl	8000b38 <__aeabi_dcmpgt>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d0c2      	beq.n	8015438 <floor+0x48>
 80154b2:	2c00      	cmp	r4, #0
 80154b4:	da0a      	bge.n	80154cc <floor+0xdc>
 80154b6:	2e14      	cmp	r6, #20
 80154b8:	d101      	bne.n	80154be <floor+0xce>
 80154ba:	3401      	adds	r4, #1
 80154bc:	e006      	b.n	80154cc <floor+0xdc>
 80154be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80154c2:	2301      	movs	r3, #1
 80154c4:	40b3      	lsls	r3, r6
 80154c6:	441d      	add	r5, r3
 80154c8:	4545      	cmp	r5, r8
 80154ca:	d3f6      	bcc.n	80154ba <floor+0xca>
 80154cc:	ea25 0507 	bic.w	r5, r5, r7
 80154d0:	e7b2      	b.n	8015438 <floor+0x48>
 80154d2:	2500      	movs	r5, #0
 80154d4:	462c      	mov	r4, r5
 80154d6:	e7af      	b.n	8015438 <floor+0x48>
 80154d8:	8800759c 	.word	0x8800759c
 80154dc:	7e37e43c 	.word	0x7e37e43c
 80154e0:	bff00000 	.word	0xbff00000
 80154e4:	000fffff 	.word	0x000fffff

080154e8 <_init>:
 80154e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ea:	bf00      	nop
 80154ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154ee:	bc08      	pop	{r3}
 80154f0:	469e      	mov	lr, r3
 80154f2:	4770      	bx	lr

080154f4 <_fini>:
 80154f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f6:	bf00      	nop
 80154f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154fa:	bc08      	pop	{r3}
 80154fc:	469e      	mov	lr, r3
 80154fe:	4770      	bx	lr
